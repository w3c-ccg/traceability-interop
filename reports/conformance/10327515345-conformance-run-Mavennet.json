{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b5519794-7a6a-4bc4-bc99-f53919507ce3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "ff536276-0b34-4d83-960a-c9b2c9568501",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c894ea27-e590-418d-bde6-f6006f284d1a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "625a7778-5af9-41fa-9e8c-c6b8874e5c80"
                }
              }
            ]
          },
          {
            "id": "34e89b4a-3c42-4ff8-93e6-e2e62029b45e",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21b373be-dac2-469e-8b15-f8cf7abe0046",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "dfde7b0f-4f0e-454b-9f4c-3b24b85b1cf4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "3c01630b-cc92-492c-8eb5-25cf8a160746",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "ca1b63d0-6922-4ebe-bbde-519fc36fc44e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f5149b5e-31f1-4daa-91c0-c471d7086542",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "50bf2066-1329-4ce2-9a91-e4c717ede567",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e32b0265-5ee8-49c9-ad1b-6f49c502e83f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b9d19f9a-5ffa-40fa-b4cf-5b16ee520a95",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eaf9dcbc-e4e0-4ba5-a876-e983aa5e51a3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "22ce6538-9a41-4d82-ae59-b02277a923ef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7b2637c1-afdb-440e-9b98-ba94371f25a5"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "af9be372-ac01-4666-8ae4-a144df120140",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "f492d97c-bc80-428e-9ebc-2d483a7243fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c2c6668c-fc55-4cf4-886f-804704a1f7f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e9ee020-a42b-4e26-8b4e-00786d8929fe"
            }
          }
        ]
      },
      {
        "id": "a781f0e7-1640-4e5e-8e3f-9059e718989c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ea2bf67e-eb1e-4cd4-aaa0-2c45d07e4b43",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e5d2562-97a5-4623-afd9-0f9d9034dc81",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7ced56d5-4bfa-4f1c-adf8-55de46239287",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e2a7b9-b8e2-4d25-b8c3-1addce3ee318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "533021a6-5f5d-45b0-899b-0c08c56f8f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87ed51da-0d74-4103-ae8e-a86a64026274",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb4a213-e44b-4828-b6f9-7006f81a0e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a24aeae3-cf95-4474-9a8c-13c52f40a7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12a5627-28af-4598-b87b-f4c37422451e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdc6824b-4247-48f1-92dc-76e1f731764b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cf10f2a-1809-474e-a890-97ddac8ad83f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3d797462-ef87-4230-a45c-d136716330fa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bafd914a-d705-4047-b1d2-ab1cc8b9aaec",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde634e8-8348-49df-9e61-d7651388e8b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "28a382e9-5a52-4d84-ac36-d9dd55ae098a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04e73759-9a6e-4279-95aa-1dde0987a619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50ded532-4b02-4c63-963a-a9a80d68b0cc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "617ebb5e-cee6-4c93-a1ce-80ff1e725eea",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fdc9e50d-6c7b-4564-a6de-362fd3ff9bef",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55e1e0c2-ce7f-4dac-aa9a-75470c921872",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8e65db18-7bd5-4298-91eb-a30e196f544f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5ede59cd-b7fa-4b37-9fb4-5f26a8ca1d8d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "5be0f251-242a-4114-b7ff-f27a0f9ad118"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01341d3d-1fea-4f05-92ff-a9db82147172",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9620cc70-06ce-49cb-adcc-b2501e42d538"
            }
          }
        ]
      },
      {
        "id": "2132299c-cd5e-4c8d-ad4c-2895c4580b8d",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "94ed2e49-bbfb-4380-8bca-c1c5d01be3e9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2ad51f2b-5db9-450e-993a-9a2ea38df2e1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "e53565b0-3c43-49db-8f37-43fc357cbbd0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1735bc4-3e1d-42e4-9594-1ef04954dca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78834014-9a80-4aeb-880f-7671192e9e12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ebb51f-c231-43fb-bc2a-78f4ec4dc2b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2830459e-b770-475b-b712-07599ab2a4cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3dde792-6d24-4d40-a2a2-dcccc7a4414f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecba39d-1a44-48ed-88aa-caf6d6dd3097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4556d2b7-261c-42ff-9d6a-17809f06ec0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7de3992-579f-4a3a-b2b8-7c9dd9b3ccf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "03c4b200-3806-4604-bf28-f2df60299f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60dbf940-3337-406a-8b05-decaeaf397ca",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a59b1d6-c511-4aee-8b01-df82840a6ac9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "871f3750-6bf2-4175-ae05-0fb9e8cda62b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e7509e-7d13-4028-91ef-ac9ac57a21bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6e6696f-ab3f-4aed-af70-a2324013239f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc60dd31-93e2-4767-b15d-dda9079bd7fe",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1405b2fe-8aee-475d-b2d9-f478d5ab0a6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82372e68-3736-4b46-834e-3973f8e68794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f84da26-ddb2-4001-976f-e1b3237d1518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9ee878e1-4f8c-45d5-aad8-3be66735fa9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690c0123-05c1-4f43-9d1c-a157050e0fd1",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97797259-65e1-492d-b9f0-bd572f3c5a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26b1e10c-a98c-47bf-8eab-53b245d6dad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b9e190-cb9c-4f21-b949-a84ddd79c33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf7545fd-8df3-4f42-8bf9-aea0477a6f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87974e11-a121-45b6-b1e5-c70f5e07e9a9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c1b4fa-3cb4-478e-8958-c61cbe54acc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d341b77-1404-4af9-a611-328f4f9ac87a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6dae66-8a79-4614-9934-b2e6cb44b5d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ff03b4fc-598e-4480-9840-47bd6e8c3b13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519df95f-bbcd-4b4f-b4dd-2930e6b95519",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "817f6a33-9e95-4472-8bfb-8016b87a36f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "875dd556-34cc-4e6f-8854-6953f7eaccf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79336b5f-9c74-4c1f-9a78-6db781f3dca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cabcb0a-49b4-4577-8425-06a5338b1157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637c5ae9-1278-4cf2-a9fa-dd4991f92a7d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1f3763-897e-4102-a024-b1b8110607e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab72e375-5785-4967-a314-75c050a3ab4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346c62f5-68f7-4d9d-bc0d-24d4564c422a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "260c4843-b97c-4449-8e3c-6b36bd1955d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61cd166-d4c6-4f50-b833-2775890ecabe",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33fecfa-2dae-4f26-b25f-7bfdf74b0fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47aef67a-11db-4066-9485-5e404c0070f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ed33353-7f4d-47c9-98d1-b7f0e63db29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea6d95f7-83ce-4b88-97b1-ab65e1697cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e82671ae-f63b-4bac-ab0a-81dcf97ca64a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e44a372-69c7-4d07-bf91-37c4ff2458a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "285340f3-ff2e-4d47-9604-1daccf96986b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adbc2bc5-1c7f-4a4e-b809-688e51df0b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "758fb117-7486-410c-966d-6003636a80ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "191a2efe-6243-4cd8-a3de-e6fc6aaca79f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f181e8c-4ab4-4515-a2ef-5ed80f2377e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c79db979-7112-4ea4-8c82-b64f71f5f6d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96070705-4ef8-4d4d-9d2b-01e7c9502ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7addc846-d549-48e5-8b78-1b1737a6e30e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0d03164-3ed8-44eb-8559-77ce9a0f3fa2",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085d9cd2-8f24-4e20-9028-705e4cd86e6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4349661-1169-4cba-a376-63c14e4398df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468b459f-c8e1-4e06-a11b-c2a8cd06678f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9056910c-0b26-4725-b2a0-ea3bf8aea349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4913aac2-5f78-4fe8-a2dd-3505a105770b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bcff4c4-4ae1-4081-a752-ce5acdf85166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0c78079-f813-48d9-b311-b6cdbd457316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab5f594-7367-4ee8-9518-c11b5223d391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82e6ff5c-e9f0-47c1-a9ea-7ef1490f57d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d00f7901-ba5b-4676-9e13-f234f7ae95e0",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4fa1e6e-45a5-4dcf-9412-c1a405a5eac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1038753-3bdc-486d-94d7-9dcd70eb4655"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8f712b-a83a-456a-98a5-06ab8324fdd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ae4151c4-53ae-4a45-be6b-6ad55e78400f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9ce47cb-4379-4d29-adf4-0e4f868625f7",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e037dc5e-2a9d-42a4-ba07-8c59c4f04861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "560cdf75-2a0c-4428-8273-03f9a48e49fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6443ce31-82ac-47ae-9cfe-d5b633398ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e40b4550-5843-4380-a249-a85c14b294ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81996a98-46bb-446f-a598-3d2a33f59bf4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b3adb0-61f1-4d90-a725-c4a18ba907b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b70693-013f-48a9-a6ee-3761f84370bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91bb69da-506f-472b-b694-0ab1221f8eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4cfd67f5-05c8-4e3a-bbc3-e63602f8187c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d91dd86-73dd-4591-b526-41458f5e791d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5719c501-32b6-4eaa-9776-9ba7616307cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10376b6-29fa-4d3d-a306-e6d8701397e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3beae158-449a-4f23-ab17-66a4a3ec340d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb755fef-f642-40f8-bd01-7f8cb92454db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a81c72d-2332-451a-b879-e539427dcc34",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de05adba-a611-41e1-95fb-03fb41477f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cbe37c8-7153-4182-956a-af78e9dc28fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689b84c3-8dc0-4139-80bc-b6c37580c7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6003984-2412-4efe-892c-d6ae5c806fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70c0000-ea6f-4bb3-aea8-d7ea62859fea",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ecfa971-db9f-4792-8556-c68e2f76b60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "447ec09b-7df3-40af-8f27-c02f5a114493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad2b452-e52a-49df-bc9b-486c9d8c72b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4ac99f2-d385-4ec6-b9ce-b11d12f764a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6fb9fb9-3d7d-4336-a753-8d2a9c611889",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00cae29-a417-4267-8f2f-a1e5f8441bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57197542-3604-4360-a1ad-27888ff7ef94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddafa758-4a6c-402b-8a47-8da2bbee0c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c819a757-cab8-462a-b550-83363761e67c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0b594be-fbdd-4b52-a01f-7635e5cf00fe",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b1cc00-bab8-4af7-87da-f9ffe12e881c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f677d30c-89d4-4f64-9285-9b106e073345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47be7f2b-1724-4bdf-89bc-8a3e14ddc1fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92fa5da8-de8b-4a8b-860b-c5e791683a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91d9c39d-2b2e-40b3-b239-df0cd9525595",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d511b236-5ffa-4c73-9b26-acfd627a96c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977c3036-47aa-446a-9d6f-f524df525c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa3690ec-87de-4610-a7fe-d170dd3e5594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75ef086a-a287-42b5-ae45-ccc9927ff051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "192d64fe-53d7-4d8c-ae40-a67150cb4421",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f684a481-97e7-48c6-ab9c-f622d234da0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3190768a-1324-40e3-a299-496b30863e33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3139f3bb-edf1-46d1-95ee-71ba43a4828d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "95ef8d0f-083a-40e8-ad01-0c1edaa0361a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f279e565-f71b-4f85-ad4d-363a250347da",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7852886-dabc-4748-a52b-d0a3ec5e8886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89da1a2e-53f1-4998-9b78-2f8aa3533809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fba6c9a-c90f-4780-9758-f30d704e9d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1e45e1c2-461b-4419-a9bf-146005bc2ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45f27829-0db1-49f4-b022-ec54d308a27e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab1c069-4ec1-46c2-b108-ed0a7a526a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39aa32a0-7d3d-4e75-a4b9-783435067893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaeecfb3-722f-4faf-986d-f9e748b6d135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa6bfd16-837d-4625-abd4-8de9ce2b77dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8b3e0b-e94e-443e-bc03-fb9c4331a9c7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b6b3f52-8d66-4e4d-ade0-5a5d4fabc67b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5eab0826-a48e-482e-befc-dce3b760ee96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97d4f9e-32e4-4f84-bdf1-02e3ea1a2c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd8844e4-6da6-4b91-b506-37b7800d4d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515b270a-dc96-4fb3-8e29-dd5ffb7c94cb",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a72fc8-47a7-4569-b57b-4e48b587957d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5485fb7-2d67-4da0-8ee1-331deef21841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7454650c-baaf-4f59-a6a7-6b6cabaf2d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a25b91b-a992-45d7-a270-3086ac4d5f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c21b98-43bd-4ddf-ad2a-9f629c29a45e",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd04086f-166e-4234-b082-fbf5f186d5d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b38abf7b-cdef-479b-9b4e-d945fa255319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "094896a9-353f-4ebb-946e-a685dd79cf8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0ae26d3-a699-4962-ade5-43d67ec01bfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02592ee5-9ec2-4f66-a2be-9f94023c48cd",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8181c9-a31d-4b3b-8d4c-46da5681b12e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09759b69-a38a-416e-be64-64c71c9ac645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83a27f39-2880-4ba6-a9bb-0ee6bf9403f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed88bf72-02cb-4498-bb54-ae2b5e1137bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfff8a63-f0c4-459e-b901-df511b0af165",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6163cfc3-fdc9-4332-8bc0-7835cf9f25bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65fac79-5a96-4afe-930a-c500d567f559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "863edab8-703a-4267-97bc-de52f08c94b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "70a06f69-44f5-4a97-8475-a3ea1e7d420c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05ab6c9-3416-4f6c-b882-e22e7d1eacdd",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe4f5650-6f3e-4bc3-b79b-1fc72de96419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f24b944-32b3-4235-be9e-2a6ad43dbc01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929c75b7-1439-4f99-ae44-0046771aac29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c7adb49-4061-492e-a65e-f9d3872d6d7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0830d9-9ce9-47b1-a84a-281a9d008c58",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3ab203-90c8-40c5-8ea5-53d2eb5c4b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9dc18bf-6d83-49cc-bbe0-dc6c8b875ed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b333f006-d93d-4adf-9923-d6eeaf07f5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afd73d71-6769-4cd9-9c84-2570acd1bf29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8414333-732d-491b-88e1-9aaa79baf3f0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beffbe4f-162a-4a9b-bbbf-74a3edfe8a3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70990ef1-cf2d-46bd-a6a1-241e40031f98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967af829-deec-42f5-abf6-561123b809ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef77aa70-e081-4700-904b-018e42549dd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86de076d-e030-47ff-b889-52e7308fde0d",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdcc0529-ffd5-47ab-becd-c98574448567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7684964e-1843-4f54-8a71-c117034d42b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4d2b8ab-07a0-436a-987f-cffa8871c189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "888736cc-a9ae-4a9d-8dbd-b5db2105366c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3abb428a-9976-41eb-9b4c-842bf601cef2",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fbf2495-ebae-4a76-9414-2b2e62291628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9abebcc5-c892-4d94-a2a6-8110673750b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef8bbdfa-0f61-4fc9-b1c4-093b125e8193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "008e2aca-4ce4-4107-bfd0-805335298a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8857b3b5-6143-4bfc-9138-fa0c838c5541",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5ce36e-cc80-401c-b4c6-d93a73d11833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8930c998-10ca-4c60-8e40-d000a06c106c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74837510-aa4e-4e75-aa5d-7589b550f044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "15c34cc5-aaaf-44f3-bb7e-40d08749faf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "536b1d42-b8b4-42a3-b204-739ef3f178a8",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c06db69e-a222-41fe-bc8c-ffb20fd86260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb388722-c94c-4663-8811-630901c5cde4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bfe3a7-ff0a-4b55-b0af-bcff65dece0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6853c326-063f-42bb-9aa6-e14d89d17b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2266d587-c92f-4c35-b2a9-74999fb07d53",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b6da4a-2ddb-4755-b804-b47c5275e14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "354480e3-fe30-4b26-8bd1-70802de46463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba38f19-b75b-4759-96f9-1cdbf59a1f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "1619b016-8ece-4f8c-8a7a-ccad49f26c45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62c6979d-b1a5-49fc-a261-8b8a342714fc",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "382e3ee8-6310-4034-a538-26e0df3dfbab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "263da383-2031-442a-8daf-ff0d87b05cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7025df49-20f0-46da-94ba-f53a3f1876d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "531e414e-835e-4873-ac7d-2465d2f5756f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f2702a1-0543-4dd0-8b07-085b3ee30260",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a91dc7c-3035-40b5-b948-44e56b4fe8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f057b8c9-f30c-4361-a8e3-63b31bb09685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9f2ba9c-0ef1-49ea-919c-acaaee7c052b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "717dec9b-65d6-4a33-8faa-3e14c5b37f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0224e31e-b186-4449-afa3-22fc2f19aa73",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cdd0a81-de91-4838-9cba-78828c2571f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e199aa1-9a55-4cc5-b928-2d75ff549192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25fe0262-e3e6-487e-a626-8c9228402901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb33cc1d-8d54-458f-a0e7-7192d9c72687"
                        }
                      }
                    ]
                  },
                  {
                    "id": "975f0315-48d1-4bcf-b31e-2b18e712ebfa",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5082bffb-ce0a-4c13-8099-2ae5812b0cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1d5af7-6de1-4cdc-856c-215601babfb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312cb77b-2db3-40df-b55d-2584db42ccc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f28efcba-d89c-41f0-9a09-63e80c993aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8471a647-cd30-4547-8f8e-4cf37e6f5133",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbd46d6-10e9-4cd0-b064-2bdeb1f7da50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbda9b9c-0be3-432f-892c-4501d6679b37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29782d55-0c50-4a99-9351-4148853fcd4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "18bf8b41-f310-460b-aff6-47b73d22ad20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9073660-4619-4f2a-9c6b-522bdb0423db",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8810d41e-9e2a-4ea0-871f-ebcba2028b9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cc6d3b0-03fb-4239-bcaa-c988d5b2428f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c135a46-7173-4822-9391-d136313b7bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f396adf3-b3bb-4e7c-b7e2-3aa7d0b8701e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d4db43-44a6-49fc-8d19-0c4fc8b28d97",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c83708a0-a269-4314-b073-3e7be584c971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24179a85-d316-475f-8e9b-2159abbdb7a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c89c2c18-3d81-4594-a329-a01439495b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f219d6d-d7cd-4e51-aac2-05d3ea710fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8525f27-dbed-4b13-bd27-5bfe172a30a7",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78af4b2c-fca7-47b1-88cf-3f99fbfe3404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89b1c1a6-0bc1-4726-9f38-a971ad5f2324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150e501f-d79b-4062-a789-1997aa13d1a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "37176b70-5cbf-472d-a0ea-602e2a97b65b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c18cfce-7eeb-4130-973d-e273cecb37c8",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5831ea8b-e2a3-413e-8176-49b4f4e43697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0840eb69-b8ca-4bd1-a014-78378625df58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c68a25af-5a09-4d67-8e62-e9cebaf0a676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29ce6599-e320-4bd9-a9fc-e0c33760d639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d5c5d4-f5f3-4468-b800-16ea0ffd762d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0063d20-4b84-4d6d-bca0-b0120698a08f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "042f0937-2b75-4866-af4d-c3273cec80cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e08363-2d28-4250-86e0-752290787f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4524026f-ee51-4d92-9955-71d112f50bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb73fac-6cd7-4b75-a324-b561ae69a5b7",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca36007a-9676-4949-8a8b-2adbe483180f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "157e97fd-9124-4d1f-bc40-0cc3143d492a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa0ac7f-623b-4a0c-aad5-823eeebda05a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c957325-4e54-41f0-97a6-5fbe93492315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b20efcec-05b9-41f8-8189-585e9072db8f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5bfc61-bff6-4724-9d48-483e22b1d9e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c17e4d0-1b27-4fd4-ad39-77599fbc85b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "786e4dce-0475-40be-b06a-6610b4c6274c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d42f0562-5bb3-404d-bd0c-c08661ef39c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b71243bb-d209-4365-9fba-b19e0e2e000e",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e1d83b5-d4b9-4a4b-882b-c8b50b0ad4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b2cb567-fa3a-49dc-b4ed-754681e88570"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf36168e-45e1-4987-b857-c16e2877d604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d4f29f-0de5-4b5a-b17f-af04eed51fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518b2f61-57ff-4c81-a38d-995786c60551",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff551f4a-5272-4696-9a76-4a332efdb818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f783a982-abc5-457f-b47e-9e946f05d70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b2490c3-ce4e-4a56-89d3-ac2f8c3f8433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4e5281f-2acc-4ad9-98ad-bfd5230fe381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4744ca0a-e50d-4fc9-a8d4-bb7a3aa8d45a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "822c5cb9-92b4-4aed-89e9-90decd81836a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed50a632-d185-4fd7-aa8b-e991195fd70c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15561b2-af5c-4754-87d0-f506bcc29692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be5bd164-b478-4b75-a9ee-194cfff8fae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d53c78b-1da2-42ad-b9f5-1096e949f2fd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7ae57cc-86c9-461d-a595-974e6c75cafd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38f8f88e-216a-4647-8fe1-661f4e9b55d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d239d1b-aa31-4533-8340-1bd3622f0029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae55d0ae-285d-46c1-b5a3-86f5786d325c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3d131cf-4640-44fa-9e7b-ed9dd4390681",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fe8663f-66d5-4a7b-86f5-7a0a44636406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59bfd906-8b4d-467c-acf3-01e86917a2b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dfe582b-25ef-4d5a-b4ff-c6f28d9ab138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d408573-cd03-4417-8cfb-b7e3791e85d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67949e6-531d-447a-84a5-5c5a304578c6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e7d6e0-c8d0-4667-8ad7-6d02848a83bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec88e00f-25a5-45a5-ac58-95af797cdd87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d0b7f4-fe5a-4313-8437-acb3af54c669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f6e7f2e4-7096-45ab-936d-e5ced9c54420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702d298c-6f53-4867-8844-a6c3a5478e8f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58651769-14a3-49a6-a41e-bc977a9dc5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b0cf504-8a16-4a41-8d1a-1dbee0a4c5d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825d575c-027b-47cd-8f5d-a1a6aab68b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d1cfa6f-de74-4e53-83b3-e0f143e5a3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19da4d1-a0ff-4c5a-912b-0d4f1fcf455b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78405121-b3f8-44b0-a0bf-54295539e9e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea6a26e-83cc-474c-a2f3-8b480466976d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d39bb40a-b413-4000-bf64-4fb001bda606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7aaa015-d75b-4925-872b-f2b1ee6df515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "067b14b7-ba66-4432-9ca3-7dae7d52767a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c3ae6ef-a138-4cfb-aa48-fd663d66d5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a6d9ba6-38ec-4f4a-bcc3-b1126b7469c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b1bcd0-0fb0-4984-b4f3-60815a2f295f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ba45ce2-eb3c-40ec-b436-6bfc011f7e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87a9e3c-848e-4f2e-9054-5225b8aad90d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55359249-132a-4065-abb4-3f4a939fafef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1c19352-b130-474e-a7a6-20366eed1359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be64baf2-a2f6-4533-8997-2a4b6fbfe846",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "24ef281d-6159-4f0a-976a-44983d505df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2690415e-15a2-4877-903c-6ba4dc86f710",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd30e79c-51ec-44e5-9c63-90de54fbbf59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ae9c07b-2bee-4f5c-ba3d-8aef20d61660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425168aa-7715-459d-8f53-80ba408f88ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "97d862a7-80a5-4467-b09c-a5bb41081c4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "341f7b4e-b072-427e-8da7-c6ccf71ee000",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "699ce24c-24db-4714-9f1c-c54a02d75c27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "272ece1c-20f7-4867-a631-f0002cd97ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81674e4b-71e6-4836-8c30-519db7eb9fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e920750-1ed4-4b7a-aea2-24013b3ed634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a10b642-082d-4f49-bfc0-e5b768ab5de1",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6239d361-14a5-4edf-ac8f-3ff5dfcf4778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b611faa6-e6a1-4b69-bf46-13be2ed4ff45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b66168-1a57-4b7d-896e-100ccc63719b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d74df63a-64f4-4831-ae8d-e63567bd9abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54246eff-2d54-4542-a095-d3c84d96dd01",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6832960b-f69d-4766-9116-05bada246c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ab0eaa-1464-4a31-9c04-7873d87ee060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafa4567-6694-42fe-9cc2-eb7f82eb7b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "edc4aa6d-fd75-4472-80f0-1a7742a2a14c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08bfbadf-d5c7-4db9-a339-8fa84a3049dc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af77e350-b61e-4dde-b270-6615baaedce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41aa9dad-95cd-4939-9274-3ea6017b07f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21cd90c8-b061-4188-a7a1-6a4e8ef47f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d28e8643-12d4-479f-abe9-30f30ae32e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "174e97c8-d997-404c-8c50-9dfe074efe80",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9380f90-4a15-4023-aad0-8dc778e027d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d4cfbd0-a82d-459c-a594-4343458f04a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b97c0a87-8b7b-4aaa-8cfb-437fa62c09b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef53efb1-9b25-4f6a-a0d0-3dcc136df7be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bc54d6c-86c3-4800-baf5-26583d646fab",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc6fd3f-2ea3-4703-9115-76d5d6b75eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b71a0157-2ca9-4c6f-9fc6-ce24f07c11d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d147ee3-0278-4dfc-836f-4a6d1526d095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5c2727b2-d4a0-4418-bd70-daedd9c04c88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a36ee9df-270a-4d11-aa8a-b9e22988e304",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03fa845b-2c54-444a-80de-3a39af38f303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d3ea629-30ae-4f69-ad8d-58b1babc369c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ebc49fc-d34c-478f-8383-3507aad1149e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd84fa5-6e8e-46f8-89b7-025bf4d92b8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d3d7fb-edf8-44b7-8c99-7ab08e7852a6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af0eec9e-3f06-4f58-9e71-b6450ce01e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7af8a417-4faf-4b5a-b13e-cb0acac8ef1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7c6779a-e2c3-4dd2-88d9-a0e059ac61cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c6fbea-3ac0-4bd5-8822-288221237ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f030b13-d69b-42fd-ba60-54f18352405b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5945b7-8f5b-4f6a-b4b2-f540d951dea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d748850-d6f4-4ca9-8b4a-8b318026c54c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a10f47c9-b072-4cc0-a98f-fd9d44262836",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ce567c-db6f-462b-bed3-f3878e68c99a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25c696c2-0adb-4db8-8ed6-29651371fb74",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08797dc-223e-4517-95be-2eed79a4e000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14413df-5775-486a-a815-91528e2bf0f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98aa5164-393c-48ab-8e21-87b02f89efeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a9206b1-14c8-435d-a3ee-48ade1d45372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8e1d402-fa7d-41bf-aa8e-bf6b7f3aa3cf",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b656b3-b6d9-4eed-a5b1-2bb746a6f1e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a303b3b-0e05-4317-822f-54d2853ad657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7bc9bed-f609-4ab9-a3ea-42bd281050c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "79997b0b-b0b6-4b35-8e1c-f1a14e788cf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66245d0d-2475-4e01-8b4d-940f76ccfd2b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1e40379-f880-42d1-8c4f-6cba9ba2f849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52d7a134-03a0-4af8-b619-1860494cf7af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ac0dee-1e84-4d5b-886d-9b67d231ecd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5fb96870-eb9c-4fb6-bce3-4e0eeb90be32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb2a2adf-b651-4d80-8672-bc26fd81fbd8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88897224-c9e7-4dc1-9689-c9497f9a9dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d255d430-e2db-4899-8e0b-57b1040188d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed1164a2-5c88-4c13-ba2c-42ee29a2cf5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7c067e25-4e2b-4db3-b1ac-ba7bf5ac3a2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d23e2288-00b7-4ce9-9f94-3ac2dac0adde",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeb511dc-4d5e-4e90-aef4-f7174a6ec37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edf34817-faa8-41b2-a793-857389975194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88221f48-405e-4035-a69d-363ba8450f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "84e82be1-3e2a-4d48-b4dc-7ecced227ffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b019c7-2acf-4535-8422-724c7f183059",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bca5aa1b-63cc-448a-8549-d96abe2988a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0ef1850-197d-4b49-bce1-7a21a9f1520a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3517666-6b85-4506-9b1e-44ee626b5e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c838a46b-d5bd-4b16-8455-6740b7ab03d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d314f9c5-a04c-4111-a8db-74013fee099e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6f5da98-e6ad-4e21-875f-d9fe90dc6c90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e0880ce-fb80-470a-a6e5-71c1933c40fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e99bf904-3017-4637-8072-b9e951b14368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0386d186-92a1-4d3c-b469-a069282caa47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84adf214-ee03-49b4-8e68-93b6b7838158",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "971f7750-c19f-4344-a8d0-9605c4652fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "885a871d-813a-4714-891d-f7c532e1facb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6dcff2-c5ab-43b0-8a1d-f70555eabce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec5fcbbb-414b-4baf-93ee-6c87218a9a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708c460d-fb5e-4cb3-87d2-bee8bb8672a7",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0455fc-0fec-4941-bf1e-7e5af73d6146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c88c0f54-4753-455c-99dd-96b800317967"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667ca968-21b8-4a84-a64f-ada4e9400452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "219d4361-5f90-45a0-88e5-39102ea4cc20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f2bfa9-ce30-45d2-bcc8-5fb13f7255fa",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af81174-8dfe-47e9-a9d1-0c9a2404f68a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77672451-b339-4fa1-8c22-afccddd7b0e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1bf868b-c41f-4017-9a08-d1a69e8a1230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e9683b2a-95c3-4fad-b584-d6098465b42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0a7e65-77ca-4a85-b7e3-963e20ceaf00",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8992e3a3-e571-46e3-bc72-1b0d8df8bd62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a518ee26-6e8a-46a1-afe4-48a4b485ffd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "219b88b7-f662-422a-a3a1-cb655eac9477",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dabc2604-ad61-49fc-9b08-482ed51a763b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57cc6fe8-f1d6-4e77-9c1a-13306467ab6c",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc7bacb-1608-4b76-bbff-8bfe68503527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37faa8e3-d05f-43ad-a2c7-2aea718cb2c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dedf664-84a0-4fa2-85cb-c5030f1cb0bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff0aebbb-2615-4dc4-af43-c71631b8603a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157d9f5e-1bfd-4af2-9ed6-cd83d5095cbc",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9165ed13-119d-4761-88b5-8189deab6982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca052c71-eea1-4e1f-a7be-1a2c2551d7fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24198a2b-8b60-4a52-b527-fda79749c02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "34070103-a3fa-482c-a742-3535f72a441b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e14c40-a2e4-42ca-982e-2d29aaac502a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c460f88-febc-42c2-a489-deeffc3cfcf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d23bd2a-1648-4d4c-828e-2ef6e77aa75a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09b7b9d1-ade9-47c8-a721-56754b4db1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf72e0a-baac-4be9-b053-075295451c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac9e8dea-b55b-44c5-9207-cbb7623f62cf",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c13f6a7-7071-45c4-a5e1-0d3e3e844b55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd5175d9-3d34-44a0-9faf-35081efd1a79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ced0ca-b807-432b-bb10-db22f9f16b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f71531d-e11b-4546-b210-1f24384a0dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "226f5ed8-081d-42fa-af2a-3d15d3aeffd0",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d99bd2-bb16-49bc-b9e9-52a582e99a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "981d7583-b6ad-48ac-9bfd-f774bbd020eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206cf5c8-3ae6-4643-8e9b-4087d27e510b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "88549ea9-0034-48e7-8b81-0dcec0790cb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5dfec2f-efc3-454d-aaa6-0f4e3a21e07b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99a03a23-2ce1-47a9-9153-03c66d4c8d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abb2daf7-c98a-47d7-8a7b-cab225714e9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "553047b0-538b-4e8d-9d01-1b99b0adbc0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f1061f5-81c0-41cd-a2c6-93b6982f5ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4084627-ea64-4d3a-a35d-d2144e528d4e",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7698a5e1-2d7a-49fa-af48-b653cd9f0b32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4ed979c-2464-4861-938b-83123b4eaf8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd640968-4b34-4f75-a17a-181a9da0c3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "14da63a2-c057-44c6-be29-0b7fa941d54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98a094f-4b61-4186-805b-6f0b8ee87ab9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "620c796a-0d6c-4433-9a7f-b1cd37e59551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e9138de-7bb2-4960-9a14-43aacd442c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8deacd8-9e73-44dc-a01e-98e43a612ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cde1bc0-0387-41cd-978e-a0caac7c6caf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b594a49-7087-4b69-839f-ae6dfbef28d0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a6695d-4d5f-4c2d-9fc7-012b0e40ba16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd88e8eb-99b5-43ae-b829-882137369d01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70c5bf31-ad35-4478-8fae-e3c37f412ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0f70367-0d55-47a1-8c0d-6fde445dd775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be89648-ec61-4a55-8cb1-6135520fbad1",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78e0009-f64f-43fd-9609-7be6466bafe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3273c747-c8f7-4796-bd86-b7dfe8a46302"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce96a047-a13c-4f1e-96eb-4d25bfd530e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7a74aa90-4bb8-4347-be08-fd5c0113fb99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9761446-a486-4eb1-a742-8bbe2bd40cb2",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4261afb1-bdb3-4c03-9d9e-6c2686a61a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "019d195e-3740-419d-af4d-1ef4f64559db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fe7454-15b8-4581-8a4f-65967a8df53a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0980d8f2-50fa-4683-86f1-3b686a32b001"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "17d39ace-e944-4ad5-9157-f28872648077",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "22f36377-db22-49ad-b6b5-4fc4f30f1c77",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f35096a1-a1a4-422a-aabb-817d975dd727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d5b856b0-a48e-4376-8c2b-7dccf3555bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a21775-96b4-410d-a385-b48bf6349604",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e436c4f7-8641-4ef4-83e1-da00c496240e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65c29204-f9cf-4334-bfc7-a431bd4dcc24",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "209ed6b9-42e7-487d-af2f-266e9e85b4dd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f1417f3-9b2d-4978-ab90-2cdc73c02c4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5ce866ee-5fa8-42eb-98b6-e0d4f410e512"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f4b8eac6-2e01-42fd-b76c-ddf3ee306da6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c0bd5bb-93ee-4480-8c9b-3ba8460a1e9e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fec6c0a5-c905-4141-889a-75cdb1c7da9a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d401aed-9688-4953-b331-47dcd01fc9a5"
                }
              }
            ]
          },
          {
            "id": "0d01686a-52ea-4390-872a-1981ae052825",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7dcbb890-7524-4c1a-a30e-8aa29ba45371",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "a787f558-1e09-4fba-80f1-84ad6511d182",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d393174c-9f88-4a3d-ba1f-0506627c2e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "24fbc885-1984-40a8-b4e9-f562762c1fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf51b1e-6530-40ad-80cd-ef36fab3c77a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3658a6fe-13af-4129-96da-7b8ebe8e7a19"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d01889c5-5b0e-45e7-8e62-b9947789c630",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61a15659-7ba3-4c31-8319-67ecc451527b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4e111e00-22bf-48b5-9ad2-e83e4af941ee"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5cdc544-ab93-49b5-b971-de45c5752267",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4fc0b8c6-5ade-406b-a90b-21de73d9de53"
                    }
                  }
                ]
              },
              {
                "id": "a36b250a-a0ec-483d-956c-5a008b715f3c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a5994cd-e209-4c4b-8e4d-0f51bd51e982",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0cb0c451-f452-4513-bcdd-0c55df417d94"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0bcde5e4-5717-43c7-bac0-c5fa6a368b06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4c5c9059-736b-4817-92ee-ccace58fbdb4"
                    }
                  }
                ]
              },
              {
                "id": "b909b312-7ec0-4351-b01b-c56221f30860",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd2f1828-1101-4bbb-b2b8-dba8b97d4512",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e802d441-dc8a-447b-a244-7f5d4a2e9736"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a91953a8-ce44-464b-a6af-ac33ead0c50e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "56b36d07-dfdf-4e60-b58a-1ec160c9da42"
                    }
                  }
                ]
              },
              {
                "id": "449865b6-5050-49f9-956a-61830105a41a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9725a11-8d5a-4b3b-bcee-31e471fcef1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b5ccc93-c4cd-4121-a320-e0f2bdfdf6a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da5255ad-016b-4f02-abbd-ad83e950fb14",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c7b39618-8cf1-4f79-a780-3e91b8cf945e"
                    }
                  }
                ]
              },
              {
                "id": "c2bef464-69de-43ef-aed4-005308f6e203",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e33ba03c-c3b8-4cd3-906d-4cda5466ccf1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "60e5a33e-b42d-45c6-86be-29b7e2c101d0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e3dde08-5ca1-4935-8101-b50272db3187",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "41b6f9dd-1e15-40da-aa53-3613daabcb05"
                    }
                  }
                ]
              },
              {
                "id": "b33c12ec-4d13-4743-aa3b-b1bf091d38ae",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "438502e9-00d3-458f-9648-c9e69bfd0eb7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "136e8005-96a9-4375-bd75-4e0d37e12d48"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ed8e046-9693-4172-bb4c-1a868a7b2802",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bff70bdf-41b4-4224-ac7f-520c81c23b9c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ff43eabd-d284-4dc3-9fe4-3f6c2934b2a6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1c18c5b1-a169-42d0-9b8d-341689f80650"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "51973fed-c712-4fd7-97ca-2ec7b6328713",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eee9efb8-d5db-4d27-b6cd-0862f040cc5e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fae49712-cc96-4a8f-ba64-d458b592ab95",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "55ae839f-1f33-4804-81c1-14eb97a96955"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8759e86e-cdcb-4d84-81b0-1abfdb399065",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0c164e1b-cd0c-4a9d-b114-d7a54dc8ee2a"
            }
          }
        ]
      },
      {
        "id": "922f748d-8ad6-43e5-881d-66ca4f630dc3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "6364d60e-b042-40fb-8ec4-c27051ec4f55",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f3db183-812c-49a3-a0eb-523047c34ddc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7874c649-3e30-4fb6-8ac5-ea1c0370316c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a692d4e-f4f9-4234-8cd1-fb87515a19dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0926d6d-19eb-45cf-8d6b-ae09bf23a33d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3d4a986-5952-446f-8d77-f5c798430ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf8e2d83-5db4-415a-9016-cc39f2dfa00d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6bc208-27c2-4358-91a3-fdafdb7c3d26",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbc7883-daf0-4664-800a-40fdc38a5b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d0d50bc-a60a-4a75-9d76-d3ebe3f0a083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c46dd75c-dacb-412b-b3ec-50f77e95415d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5707fb52-066d-4ffa-8997-db079daebd7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c6dcfc-f466-44e2-8040-28d187d09e3c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a892539-6cbe-4a2f-ab6c-b5a7dde34650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d38e0a91-0c35-4379-9c99-8e5a4da6e9f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd9f2e90-75ca-4865-adff-26f2d64f5f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "858fb4f8-9b3f-4195-ab5d-c56522f13e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f50dbfb-9dd5-4018-b5ca-b0c1b8df2360",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a8c0d5-d808-413a-ae3d-6e22bdbbf424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e076ce8-160a-4c27-b30b-21753332dec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a78de32-4c08-4e62-a2cb-180262832094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "78bc9032-20cc-4145-8b7e-9e537aff985d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f01196-e404-402d-a830-147d756c9000",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b7791a4-17c6-4aed-9786-f795045df415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5dee8a6-a544-4120-92a7-1f33dfb53c8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e789c8a6-97c9-4204-bd0b-fb9ff2ba1b97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "459eef3c-439c-4ca6-9102-4eac1072a329"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83515abb-3c31-41a3-b3dc-a64794d8438d",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f649dd36-605b-41a9-ae09-e8ad17971576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42aa7aa1-0ea1-4d94-b947-3be80162e60a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1641c9-a38b-44f6-8b46-f98d7df4b376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "05aa1a48-9342-4e6b-86f7-580c40de1a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3dc1039-9da4-496c-bec4-f9118d476eaa",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36d2bb7-7781-49c6-b631-1fc325b95ae7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df9f45dd-b3e1-4a29-94df-8a44920adf26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "207ecb95-5ff9-4df7-97d1-0b545a5f4967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "de3d205f-4d88-478b-8a1f-8fc1952cfd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5127a8-209b-41dc-b06d-ec6c8ced07df",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa53a373-866c-4f40-a9e2-1620bd74c2cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53ee2a4-7ee2-4ea4-8800-b8849755e354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7372487a-be95-4ec7-9b3a-185cc3798cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40f4f5a1-a3aa-4a0e-9396-5ecba5856f37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6533fdab-a0ac-4b4c-9bba-edeae0753f30",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7013ecfc-974f-4d84-b5c4-96ad2b0f372f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d97a3d5-b176-43dc-8ec3-1e92ac3fe3a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecce44a-c09f-45ee-a7db-19bf32f8a631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e41b4bbc-b43a-4ee5-b1b4-68aa8e2b2ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729e2e71-5c53-4052-a592-a75ee445a480",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0637ac9f-38c5-4be4-906a-307566eb970f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7489c089-a30f-4277-a9c7-0da774775658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "370bc0fc-7b88-465d-8dc1-964cf317c6e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb78412-ed92-466f-b45d-ca701b78eeca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e621c03-758f-40ec-8374-f5e8ed9872f3",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af80baf7-1a07-4f3c-b5bc-535a14939cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36c93db2-d3e2-4a8b-9f65-b875d9cd1337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26d6e1d2-85d0-47a2-95c2-8db341dbfa3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "2df07707-4ec6-4d57-8e75-9041edb54ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec97479-b69f-4d3b-995b-41049912b626",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "425a5711-917a-4cb4-b732-4c313d7279e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e0b0a8-4129-4c52-84c2-4e67db5e0aaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2550b663-87ec-41df-90a2-3962c8e23639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c34ea7d-16c8-47a2-b780-d059de08864c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a905835-e300-4290-aff7-b8118436222b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3ba3198-914b-441d-81db-8964c67c865c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e368a356-6a52-4431-9c7f-5ba3423eff48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b54143-a0a5-42b1-bac4-a626969c44f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fe0f5cba-fbb3-43c1-a3c4-9ca62c111168"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e174408-6fa6-4724-a7a1-811d92d91dbb",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25c15b71-3df4-4005-9055-bd22ecf53db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "888e5b29-485f-4b1f-adc0-54484c8f5f03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ea112a-bcb2-4813-9dac-9ba14488a9eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e72af10-f337-4091-9714-3e6185cf9ee6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2adcf5e6-f0e1-417e-bac8-ae5a91a46b15",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21ca2574-f961-4463-99d7-9a3b30de03be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f3019fc-3905-4822-8c18-59073dc5bf55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73517981-57b1-47be-b209-dc106ea8a144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0df4de3-6c55-484f-8f0a-d603e82f084c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7002e3-6eec-4dab-97ee-0d7a77e2b0b3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58dbbc9f-c5d3-4d74-93e0-f6d7618b36e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed5b5d53-ca77-464e-8227-12a2a13c1428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac6f2cb-ee03-4699-809b-8cc9a6b37050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "799982ee-4301-4862-9b91-9a833da3efc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93a3a10-f6ab-4faa-b2e2-229829e56afd",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7fbbd7-3786-4d9b-bf4b-2721309fc785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4bc74b3-1c9b-4c6d-b53f-c8b5dabf2d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486c8f78-be04-472c-b47c-61f42a318000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee7b142e-6a6e-42ff-9082-2b534ef64bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d6c73d-3ea8-4194-a894-c41c60e4b661",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3933d1a-9205-45e5-aad7-f5bea6fc1461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25021e57-3704-4567-81b8-4a9f7d7bc9ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a0fee9-335a-4fbd-9b55-e74695cd0ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe7257c-2b54-45b9-a0f3-0f38f4b4d7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6124317-d111-44fe-8aaa-98edfa0c1d0a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c19cf5b1-6e0a-4803-8a39-d997218c382c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b091d9a7-88f0-49fb-b6b0-173ab406a4f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fcc8fdf-cce4-4c48-9c38-fb122c57ed0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd5a94f5-a5f1-4e28-94d0-7427e965edc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3023648f-e19e-4db9-ad69-605f7a159dfc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abfa14cb-6177-428d-a133-bd980e46431e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5862541b-4abf-461c-b25d-29d0041e18d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89634993-39d1-4688-b735-d91614b0146f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5cddc6bb-8ba6-4f01-a9c3-f54d9a05d72b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf87fb3-2129-46a7-bcd3-dcc6f0d394b3",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e05449-13e2-49c1-b6b6-4b63fd8c8cbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed95c648-bf68-4211-93f8-c35d2e0daf5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe10fced-520e-49a1-bc2f-48d95c7c7382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b5ed144-c051-4461-9b64-3235be3bfe2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1961a9b-3175-4aa1-a030-26e6cab3d657",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40801316-3895-4d78-b801-3ee98ed845a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b80e7ec-0124-47f6-a588-484a6c33608b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4525b388-a0c7-459f-880e-12eae64fb141",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "325438fe-f278-47b3-984f-3b263a12aa0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84642a59-4ddd-47ed-89b7-a7588bb7a08d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19997509-0254-4026-b283-7b55779774ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31d024f-c531-43a0-8d56-9b96610b9bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2ae24f-500d-4b98-a635-bf8ba97fe920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09e8ca5b-182c-4a27-af76-eca591c3c88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bc3c2c-b306-4d99-8231-a610827ac54e",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d329dafd-0658-4d34-976a-03f75b2dfae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a9bda2-2f9a-4c55-bb73-da2c532899af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6abd2f78-67cf-4db5-a92f-7e96ba6c30b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ce4a47-9d8c-4344-b496-7036d05f55d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c44dfcc-43c5-4998-ab6c-9c9a103524c2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "674ed64e-ed9f-4a2d-9c2c-3615a57711f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8049bbf-c501-4b5f-abe1-d854bd27e83a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a79a3e15-8c67-4c3e-b518-016f9a73ba07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cd05504-27b7-44f8-8c49-cd491dda0b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c818bb5-8388-4aee-9536-7721f9ce55c2",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c55ded3-b339-4260-af6e-e04b6873439f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "147ecd72-d8c6-47cc-9e32-9b0cc305f687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59151ea-74b0-4a2e-b81d-570b08cccaa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "485d2639-9e4c-4809-a1b5-13bc9b0184f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc80722-3e7e-4eda-86c8-cacb8a1fee5c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e55023fd-0e75-46cf-a973-0dbfd99ef90c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a489699-2062-433a-953e-06324a743a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305fe892-5c01-4bac-9ea0-2f17c9c32c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d08db70c-8536-46be-883e-10a58c68391a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52036f70-a885-45f5-92c7-527a7c97d464",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff525bb8-dd78-4814-8169-2c9ede7688ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f5bd0fa-af14-46ac-8761-67e27ddd95e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec16ec4e-dfdb-4049-b02d-353502df5f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dc2c680-8322-429e-bb41-d6dd46c2918c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18d95ac7-150e-4502-8b54-d635fa0155f9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78436d91-40df-441c-9f9d-76289e4a5e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcdcddfa-0b54-4e9e-b6de-8177b05f8180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26afbfad-ff45-411a-9f5e-6e1cddac60fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d55b33f2-b6ea-4e95-9798-45d7044095a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78f25b3b-8cc2-4c25-ac06-5325fa0f031e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e5eb41-8748-4b14-9d7a-9671d5fe1f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c09b56c1-6e7f-46d0-b708-00feb13ecfac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1dd2241-eedc-4bb4-a35a-88fb7035c58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a1b360a-4edf-460e-af5d-8e644c35164a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4794dd36-f4a5-4530-8830-585d582963d6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e83d0110-847e-48b7-894b-d59791b4b4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5cf4655-7043-4985-99fd-9722619dc406"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c4145a8-2821-4db5-9ecd-e7abb366bd6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00afed72-59d3-4694-a217-9f68d97bd7ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd4b6a31-58c4-4982-b540-88083240f12e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86804dcc-9620-4db6-ac45-f6a288bf84ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d24dad6-b79f-4214-887f-00f533208a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a26d2ba-01ec-4d1b-820f-2195402b2f94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b90f476-822d-4f6a-bf26-2b676b504ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09f2b175-2969-4f00-807b-0695a829a16c",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbe19f41-b666-40d8-aa30-42cc27bc070d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb04fa73-5c18-4925-9661-2c702772f669"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ce2b5d-9134-486a-b4a7-0ae413015119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "093f064c-19cf-429d-af33-7f713f602895"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b9a6130-e0b3-4047-9d95-055d9addd46d",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f0a0e68-a535-44c7-a621-321bc4a5e8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed0f4305-7244-4c9e-8f76-db5b8ecccf60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d081ea-f276-4cf3-8429-cff5fa7141db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02d69c78-b2af-4543-9a42-3699194e1faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa5d5469-52f2-453e-9cd9-60e125f72766",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5eeecd-5605-4030-881c-177534bbdb72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d388e4f1-736a-4a86-8ecc-c25af5de3aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b774b280-169a-4033-93a0-81b70de81ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4109165-4733-4f94-9ffd-8d4b03cc804f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc43316a-9114-4267-86d7-89305407626d",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "028f4ef8-a295-4b42-aecb-6d5b293d659f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "414b37bb-c53a-45b6-a0c3-429c6d9994fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb35ccb9-b012-48b2-9197-d6cd06f996ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b748a06-6c45-4b15-b64b-8437c2f4553f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3baa9ca-5713-4d43-a32e-eb91be2ff6be",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5df55e-f1af-4d69-b65f-b37529d263a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a075bf4d-1532-4ee5-9604-05cf897c5803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21e92785-fe52-4a2d-802b-ebe18562bb5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "02522a0b-4acf-4dc9-ad9a-eaf32bc4edf4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4b9a1cb4-81ce-4f52-95e7-122f41b4535b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "075ac692-45fc-45e4-abd0-215f59c2a3b8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bdcc4ae-b55b-4eb2-9495-2fad1d6a9075",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3b7b06d3-533d-45ca-ba57-bf96b69cf67e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a890273-ed27-4211-af9b-fb51bbce01ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bdda6b3c-990a-43f4-ab16-d4b6fbaaff0f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f56225fe-1603-4a8c-bf63-2bedf83a0c40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "58c4744f-e119-4f9a-b92c-b5a228e7988e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "368b9531-0c63-4a2b-8f8f-50d32ecb079b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2ed0e3d-f4b2-410d-874d-fb5e56d7f8a2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53f86243-2e5c-43ab-aca4-334209809c9d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a0fc54b7-b09a-47fc-8fc1-395b90fcff25"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0da488f8-5243-41dd-948b-1d13c9ff930c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1aae2845-a84d-42aa-979e-ceb1b859f71c"
            }
          }
        ]
      },
      {
        "id": "fa21f92b-9333-42aa-927f-7640c0edc874",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "babeb6c8-3c90-48b3-8de7-78f829a37b37",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d3567b6f-c042-4f7a-9441-0af75ce954f0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e5b980c2-5f9b-4f64-8c4f-d2edbd955d4e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d6ae74-244e-4a73-b87f-6a4089e8b182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc8562f1-5709-4040-80e2-2b9ae0076cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3677533a-ae67-46dc-9e90-8ffec2f1fbcf",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a47334e-1b78-4d22-944a-df5e452f6aa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3da4561-a841-46ad-84f8-85233dec654e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e60ec0a-a7bb-47fd-a9b6-fb7117773ee5",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99928ed2-c00e-4042-b466-76e988b23f31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6510a27d-85e2-44a4-9282-d656a28b6f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376a5ab7-98c2-407b-afb4-37c91ca6ddea",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "930b6d29-04fb-4adb-90e5-920f67d9d427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "315981cb-2566-491f-a8ee-9a3515b07e03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "083d073b-7743-4616-994c-f87d258ef874",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9ac389b-d9f2-40c6-be55-8cc8af7ae30b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18417d2b-173b-4744-8ab6-51b3f254b2d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24d64d7-d2be-46a2-9a37-7cba13d02e43",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b331b20-dcf1-4421-826f-48118eedc64c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef340d2a-8032-40e0-975c-a50106912a5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da776281-250a-4706-ae64-284c9027bab8",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b019c1c-ca20-4651-b8bf-931e1e425ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9371429-11f3-4fde-899c-5c577034a3a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7754162e-fab8-47fd-9fd7-977123bd054d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2e9921f-72a7-4648-bbc2-9de8e25908a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e7a484-e744-4fcc-a648-07c0abaf03cb",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221644ac-2ffb-4591-8960-fa21b2befe22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84480e03-3cc1-4aba-929a-7a1dac1fad43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "710efeef-f6cf-4c76-a38c-b4532449ad6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "088af238-f1c9-4d23-8fd2-1f471b68ccb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bab7eb13-632c-4fb4-986b-7adee4b7ce15",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6fcadd-78b5-43d7-a280-2d9002914709",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3e99ffc-2ffd-4e22-b5c4-1126a6323046"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e8b21a2-a832-4828-a303-7f8c8af47cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8426e2ac-cbfa-45c2-b168-1f8159f60060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f516613c-36e5-4270-8cbf-c9dfaa9e8607",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48740c68-e1be-4795-8e26-02028676d271",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d1774ad-1b2f-41ea-8c83-ee7f7b153be7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c265b6f-6c09-42cd-ac39-898cf5af6591",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f531b9f-7c02-4720-b5e3-6d5ce2fd5127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b54a4b5-bbdf-46d4-a6d0-fdcd0de62d36",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb94a2e-dbc7-4bfc-a157-0a89e6db8fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "881b0d0c-6902-4fbf-95fd-53828193731e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69d96ad9-d3b0-4198-a72a-568afd32945d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8591dc2-bd72-451e-ae5f-fd04e0fd03cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c565fbe6-dbdd-4eea-9596-6877c6db22d5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb27fbe1-5ff9-4d45-bd6d-dd7aa7f75755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5390633-574e-47c0-8a75-c2b3b956f928"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d480f5ef-f2d9-4cb8-a3b4-f734b984d1af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e7d5c1-da07-43e2-9464-0ce7ac6e2085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5934c6c-a217-43f6-86b3-08a0534f707a",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0534a0-3875-403f-9862-f1cc3fee9d40",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "878d0f83-52a3-4d3c-922e-ab39f3e5db6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14c58a3b-db2a-405d-918a-a160733e9447",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db588646-1038-4062-a909-44313c3b6289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6368d67a-1a48-4334-a35a-60be20d9cb7a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea611a8-b1d3-4093-b195-d67df23de03d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e05f782-b652-4ed8-92fe-69df2c4eeeb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d88b2a-9006-47a1-b844-69d19bdf7cdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18c960d0-d784-4fa4-ab2b-77171baabd68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e60eda-e3bc-45ce-873d-72245663262b",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17eb3f95-4e8d-4c30-86a3-d0e45d3796ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0c08333-5032-43ea-b199-7f6438b34dcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24c41334-8962-4496-8ce7-bfa8cc767068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34aa2d40-c248-4811-8ecd-0a73c41e3ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a097cc39-5c68-474e-a5dd-6f688733bfeb",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2440028e-9da1-4637-9a08-32d7158a4bdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40803dc1-9070-4193-8f0b-ad43634cdb01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76de9660-e3a0-47f3-b525-aced5a9dd53d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1378392b-1317-4c61-b9c3-eb207de7be78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f741d7d6-d82d-429c-b9b0-c7562dd5b621",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e3ecc2-9648-4ac8-9b9a-fb7dc3014089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "217e4d1b-2783-4bd8-b4a8-cc48b5b8471f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0619ab0c-4805-404b-9b0a-0523a4c1986e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa48c11f-cdf5-4949-bf51-edd59bc9a708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "270a035c-9667-48f0-913d-f64424c632a2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15420310-29de-44e3-8210-35862269caab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87d49d0f-80e1-4d88-a92d-4e991cd0d1ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8efcd700-12d4-4efe-ab94-f7ec0d86f1b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83341160-b2b6-48ed-b21c-fa0be5e04fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595036e9-55e9-4aec-8c98-dfe8a6c3021e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32cb470e-57f4-4c8d-8e57-9c7c75cf4474",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "486fd8af-2fad-4b23-a8a1-b8f55b104c02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53082225-8a7a-47f3-829f-bbde2858644a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b3ad11-5dbe-49b6-ab1c-52371be8da06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c60e7933-5a87-4773-a018-7f175b29e79f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7042ca-0fca-4020-b956-805b1d5841bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c48738f7-d349-40bf-b1d9-f1c42ea564b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65c18b12-4a17-42d9-ad19-363195751f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c63a4e41-3b0e-4b9c-9c1f-cafb509b375e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c514b5f-203f-4818-8cb8-c0099936834e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc29f88-9772-45c4-abaf-4c53f1088ead",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a7cce2-4dbf-4387-ad6e-a69731ea048d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e266504-bb2f-467f-9b16-37cce2b6b452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca86ff61-f97f-4597-afb9-4f891f3402f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "733dfec9-bac0-4a85-a88e-962529c8fb3f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc82cba5-b970-4c09-8707-0582df0e80b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6a62477-4dfb-4bf8-944b-6a7b435a93c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1071f858-413d-4dc3-ad38-2339d02528cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eea3f335-40a0-4c06-a74e-af11678219bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c339e3c5-0089-45b8-a78f-add8b80d1869",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9c6045-d61d-40a5-b307-5de025672bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bae7ca7-35d1-462e-b2ad-f7a907b68f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d070c083-1b56-4220-bb7a-6b2242b948a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "554f978e-f5ca-48b9-9e86-6b8633bdd6fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60689741-82c3-40b5-9451-8e2f01699dca",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7a75c2-78ee-4794-9e4e-7e3f2cdce453",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7142df3c-f6f4-4019-9d6c-b8d084d6fccb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "749dd1ab-2e10-456c-b76f-eded99b234dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bad24804-e3f1-48de-8c66-30e58f411ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b9bf9f8-f5e9-46a7-ad39-c952748147e8",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "653fa084-b74f-4d71-9850-e26521afe134",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abdca3cd-6b10-4fe4-a86c-78de3c7cd640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04da045-5d84-4451-aaab-7d7868892732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ab2ff13-c256-46c3-964c-7f57281955f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "452472ca-7122-40cf-a3fe-9a8fd55075dc",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26c1d00a-5b0e-4028-b08d-a2117ec59092",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4837c299-82e1-4ab6-ac9a-91750a2b5973"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef9fcd73-2da5-4b6a-839c-23b9129eae1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af221b0c-83aa-46cb-a3c5-389897d7c2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e21475-d0de-4673-9bd2-57705c58293a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe7b365-ab63-4fbb-9f03-2c05e21e8d70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e72ee0be-4a8e-4ebc-b332-323c36d38687"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04fda38d-dfd7-454e-a5fd-591e28510801",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e01a80a1-25c2-4a08-b588-f2620f20fd7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471cfc03-d197-4214-8947-d88719965c92",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf24bb9-3979-46bb-b3c6-1c0f1c215e28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f7a147-11b8-49a4-b735-749ff703a5d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17f980d-204a-466f-92de-ef728d0bfd43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db25daa-a9e2-4cd4-a14e-f4e0d15948ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd4db61-79f0-4441-9eed-80c4df7584d0",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b2b5f9-4b4f-4233-b842-f21fe2c7fb0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7d8ada8-7d7c-47ed-af3f-3d8ea8a2a120"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03354210-57c4-4b23-b4c7-23aa11137cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8775b9d6-231f-4c67-9f38-be4e9a698303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5133289-098e-4975-a31f-a789c4e18649",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bdaccb9-6fb6-4280-8d5b-43d0316aeb6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c416cec6-9564-4836-954d-139963704471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf992dcd-b860-473b-9ebf-a258fe525055",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7683d83b-47f2-4212-a124-aa4f57cf31a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c4b33ff-d8eb-40a1-839c-27f4eb02fae8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc61311-f8cf-47af-ae56-f75df78e236c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcc0efc7-3607-4b82-9075-fe1346397f90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1bd1d9-1254-4e76-81e1-49c5316f878f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b49480a9-792b-46e3-9669-6d88b56ecfb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07374220-8716-4fa1-9c70-1aec71af9337",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c18e78b-3154-4abf-b642-c2e2860424fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce598029-35fc-405c-8fbc-d9b4e03c712c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c3aaf41-5733-452f-9da5-66879cc2f326",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3296ef58-b636-4096-abb5-1ed355bdacf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b1316e-1ff7-4311-a574-0e85e9ee4a4e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5259447a-1ef7-49a4-879f-aebf9dd8d47c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49a7e048-8c6c-4695-b4dd-f0de5f120cdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1918867-b42d-4891-824b-0f98a20d6da3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2cb0a16-ee34-46b5-a16f-72d1604d9887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7d3677b-da86-4111-9211-9ea88672a8c8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f38b877-d92d-442f-ab67-cd26cd342f4b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f8f5646c-650f-4f64-bef5-3e02db14870f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19cab787-3ebc-4c5f-9c8e-b7ace85e7e62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e752a4-c0a4-4026-9013-35e3964ec58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064790fc-a98c-45ba-817a-d3cad25a7e8b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66149d50-2176-4aae-86ac-accf44966e15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d52e2c1b-af48-4a11-a323-313de140db6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2327fb9-99f1-42e3-ac71-befdc3f30177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db7d794c-66fb-4a02-b2b8-1da0f6056020"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e74656-620b-440b-b9ea-94788cbc3ef3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eafec665-0ed3-44a6-8ba0-114022c3fce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c7d3bcf-dfea-4706-b930-42830aba3150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0dff03-bab2-44a3-a823-ce50d6be8116",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "778c5d09-c24f-4300-827e-044acaccf850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e91af3-02de-47a3-acbf-c389fe9c7306",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dacf1dda-fbd0-4acb-a8af-4321a4fc4c15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19b5b5b-f38f-4e3c-aa2f-a0f3b00265a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2523b67d-a48b-4a50-a3e0-6edaf0ce0f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f04f19b-5607-43ff-8280-d1545e45669b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3c2d1f-48b3-4064-9890-f2bd5380d0fd",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad5b02c1-cc41-4ed6-ac92-4661b7cfe7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddda798f-f7be-4442-8945-9705e6241042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40535535-8997-4e2c-bb87-654c2fd6b154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12264f48-8816-43a3-b9e6-0dcde8b46d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc2f9d5-e9c8-419f-a76a-c33490381c3c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb84da1e-effe-4825-8657-c9cc819c5235",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6855364e-4daa-46b7-8114-87c8fe245678"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9205bddb-8b0e-4f57-a5ab-f993f21d3f5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "167ac7e5-f13a-47da-afc3-c5c968337e2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2738d5a-1fc5-4388-b51f-fd54daf434d9",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fe3d862-939c-426f-9019-cbdfd058a28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b1614dc-38ee-40b7-a6ae-18b6d94c1c5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9638719f-bff3-46f3-a895-88321f96170c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae2690d0-2e1f-4adb-a55d-6fd4c47f9e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2083de32-7848-4cce-8067-066ff5889c56",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0be6af0e-9e5b-4129-bce4-14a5fa21105e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88934f6c-c0ba-4756-931c-9511ba41b214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "361b0da7-83da-4a0c-b4da-5a0a77cbe74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11dd5b32-3719-4ccd-8db9-3cd2fb21927b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4ca398-faaf-47dc-b990-94b4082ff1ac",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308cb35e-fe6d-44f4-8641-f7484f76d6f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7257b32-15ba-425a-9fed-24f4f0fe3e7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bb0f66-1dec-475d-b7f3-7e366c00aefa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fdd4f38-c9f1-462b-9644-6c11a53a4f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62489f5-5a54-4484-8175-ee9b88367199",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e93960-dd0b-4b60-8393-af94b3e44953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3abdfbe6-02eb-4d76-b45a-dad2303cc378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afe08128-6051-47a5-b43b-af29c0da609c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "550e3b01-dac8-45a8-92ef-1a376a57d997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029aa016-0dac-4619-a26e-7fed31fa90fb",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a62aa9-6aed-45ba-9bf0-0cba4f8f57b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a128342a-39a6-43c2-acfe-5e58428fc901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffaa73ed-cbc4-4f0d-a95f-6504db4cb67c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3208e0f-faaf-48b2-b929-6da060915b73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09113129-1067-49f3-9fb6-a4400dd061e9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1992305-4ebd-4a4d-87fc-c7726903e6c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6aab039-6dce-4e40-ba18-7757441c3b6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02b73620-543b-424b-8528-702c4a3e5dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d711b7c1-46b2-454a-80da-2935eedaa390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "814bc7e6-d864-4f10-9a88-acb2bde6336f",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea49590-8f28-4225-abd2-90d4ed0cc4f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17a791ab-f372-40cd-8c21-cf3621cc54e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "789353e0-6fa7-4ff6-abf3-fdbc980bb439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffca8ced-4f22-4038-ac48-8d81cb840c1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9f91c5-c889-40d5-a397-93cf225b8ee1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893e345d-12c5-4bc7-ae29-839590337beb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf97a40a-9cee-4f74-9796-50a71cefeca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2671b7-f6b1-4336-938b-448f8f17dd76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f526968-7af9-45f1-9600-69810b72bd30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bad6c9-a679-43d4-a4f4-5b86d784553d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30d3ce9e-c09b-4285-9637-76f38b6b9702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c67e3b-bc0b-4b78-854e-d95e628f1add"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7620d11-88d8-4683-8520-5b3eb238249d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc1749a9-a967-4929-b17d-958aa7f72383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae348e93-f297-43a7-8c12-e53a2976f757",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4a73148-0171-41d7-a725-ef24fe49d092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93318d06-21d3-4076-82f4-1167fc6d299d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b712f671-1e24-415b-8287-d58ba1383dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91eb8a84-c8d2-4aa2-bc71-f1b76dd581ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd2c1e8-3479-4d41-9ec6-915f8b6f7fd6",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e81a0e-3b67-4770-8461-5bfbf179b98b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b69920ae-7b2d-41f4-a0cd-77ba5a43f724"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4557fa30-d28b-4799-84f3-47b8a6eb7e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cccae4fa-5a6e-4f69-976f-39ec731e6364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df987dc-83d8-4ee6-917c-eff3a9ecb50f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4146e524-4412-41af-9a56-92ac0278eb1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2118a89c-201b-4f3f-ba61-571c45499d7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9237c9e6-eddf-4872-8493-435a94b37e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ecede7b-f583-4769-9cc6-39dbe75c8027"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b864b44a-8c60-4456-9a9e-96fece9fd1ad",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672583cf-c586-42e0-beee-a82f7046120f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "486aeb0a-4c42-4ec9-a95b-f698d9bdb8fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93a9d178-94c2-46d3-bf0a-33a8bde4e302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66bc0855-0de7-4271-b28c-ceb3f9df00ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1641c98-95ca-4ede-a006-ef5667850f76",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1455e9b1-8e8b-4ad4-87ac-9348eba4ea0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59fcaca2-45a0-4d4a-be10-b08c31492289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5647d93a-6f0f-4e93-a76b-e31d9fb2bf69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9caaa041-b663-4520-8d01-bcded6601a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bebfcd9-4cd2-4261-8696-91df07580574",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb24017d-d63b-4480-9d93-75a00a0bc80e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab3cabe6-86a4-449e-b522-396dd346971b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17bac012-2646-4f0c-8e02-ebdaa989d014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a41616de-1f72-4a20-a034-8afff4584a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7383da12-e122-4f56-a85d-8c6a13593255",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd992d1e-76d1-4d4f-80bf-81e9cda33503",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f791c5e-ed1d-4137-b3d4-487aab8a8711"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "323266d2-36c4-477e-a2b0-a43637cd2211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838d42e8-f56d-4a86-a34e-8f9cb277eb4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7173fd-2f89-4586-8cd1-00989a758df5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eec1f9f5-08ea-41bd-ba18-25a3a5644241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a32f206d-2e8d-4be1-bd39-30d73bb60353"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf2ced4-b9d0-41f4-9291-88e58b4da1bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30d42668-d67b-4cbd-adc5-f8582a3aa1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed1fdd2e-3f30-4864-955f-691cdc1d446c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6ce1d8-fcd1-4029-876d-d1c0d74682a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c7b70ed-fbf3-47ae-af9a-5bdaff9fa902"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9ba229-4d3c-4d94-9867-3d6f2532ef7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a70981-2f12-44e0-a320-16e88b31a187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b37a698-6a9a-4ef0-abe2-1bd6758ce7ac",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f6c65fa-e80f-4d84-ba3b-a760d48f33ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9059efe-05ea-4cc2-9642-f349990002a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77abdbdb-8694-4ed9-95b1-0bbfe3595e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3df4f58f-ba40-4d33-af28-520a21d9534f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84915624-df7f-49ee-b7e2-a55b73d74319",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e6fbd8-12a7-4db0-9c80-61da315f49bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52bf31f5-8e05-4a65-ac28-33eb33a0219e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c907eff2-d15c-4ef4-9aa2-89a5e9e8ed9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ac3878-a1d0-4ad2-8106-835db5830b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a106a58-bcc5-4fe0-931d-74f30688a9b8",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c57d6d2b-3b38-4b93-84f7-290b3c9a8711",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9c74692-91fe-43ad-a26d-586ee1139719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb327ac5-eea2-4875-b367-58a366476735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "169b23fa-17df-458d-851c-942ec329424b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5655521b-2fba-4919-8b9a-b728264c010d",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670d6ab5-b799-44b7-be1c-bf09eaada671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b660209-65a9-4403-b5be-8662d5187936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3edc459-e427-4c82-b07e-1b59ab23737b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffcf98f5-d949-49ed-b9f7-48afebee6e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9287d803-2d11-4c4e-980e-ea641660b729",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b069adb-7692-433e-a697-234f4627a93d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48b51939-0e61-4909-886a-bc20d5dbef62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7ee5143-18b8-4a7f-90f8-9125c2fc85fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e364b6a5-e225-4c62-9c02-ec0ef4b281b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4841b30d-c7f1-4ca0-8420-be1c91551815",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6129c8-a8c5-4193-9909-8965665d0a71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5b54426-8edc-4c68-b8e3-6948228c3785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1a56e1-8d4f-4302-ac79-1717b60c73db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2284192c-2b2a-4eb1-9e34-5663bd324fb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc3bc7a-d422-4308-85d4-a83d500a74fb",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ca20b6-5d82-466f-b56c-0b114d5ca582",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0bdc5e4f-d52f-4ab1-bcc2-4729cf958c09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93691dcc-50aa-41ab-ba86-a1f4bf653074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28941ac2-01f2-49fe-82df-4c5c08eb5507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "248f273f-c279-403d-8975-1513e8a9576e",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf77bef2-8f75-4f21-87ef-7f016da24dc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aba5fccf-28e6-4c39-a9b6-507477fc4fa3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7f74d8-8813-4a0a-9b8f-d06ef614e351",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "747cb5a7-e65f-47e8-9fd7-fd8713747b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ef1a22b-6f51-4434-af04-1e0df7dd9c53",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4131413-bd27-41d4-b064-bcad3b955f11",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a191b7d-cff6-4fb9-b35f-727af80fe620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "213266a7-091c-4d25-a0aa-63caf7b54623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0d6b72-b76a-4620-bf25-491bfda0808e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e68607b-da9c-4f8e-be09-3dad1280280a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47631f74-1fd2-44e4-a52e-2dc7a51d1566",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "899df753-ecb8-4481-9573-fb2b5bd6df0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a501d4-c32a-4d1d-bc0e-d05aca807fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61624fc9-0e53-4dfd-a09d-8bba59c2e145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a56fed9b-88df-4a7d-afa4-70e2b3dab7a8",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac5df670-8b94-4e91-a3c8-3d7c3dc15a52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "949d79db-e240-4e3f-9c8b-96fee5adab4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21ebba6-7e1f-4886-bcf1-febe5f893051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c562d2b0-7538-41ae-a1cf-3b398245259d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679eca3b-0499-4ff3-a638-6ffda5957c3f",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb390ffc-06e9-4ca0-8ec9-4db4d8faa0a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c86a49c-afd5-4541-a7e4-f898e33b7024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aed894e-91bc-45a2-9b9a-83d306e0994b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f690d0dd-1f05-4fc0-8153-307ace4ecd00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "326442f8-06c8-41a3-8966-871cbdb7896c",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baa27329-3696-4aff-8579-c373bd1d8fa2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46778e01-b70a-40c9-8eb7-12f4b07fff42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f46dd325-c12a-4b77-860a-19763c8d6bb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32ec69c4-5157-495c-a1eb-9df7bf586156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecbf3780-9744-4a02-8a71-e0016d9859f8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61469eca-6946-453b-b709-57233e0ec931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "816da33e-d5d7-4dae-9ee2-6417716f01c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f753293d-09d8-4949-b7d7-cfbd25c564e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0553a95f-21f8-4315-b924-e505721bfa97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9af4b55d-5712-49fb-bfac-8fef7c89941d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d59b518-b758-4c94-88e4-afa31e629514",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fa3317f-08b9-464c-a095-5ffbec4ecf6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9523237-1796-4609-ad17-000297525679",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ad1864-6518-41e4-aaef-b360cc39d3cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba6cfef-9639-4ba0-a6b5-a19888e19752",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bb7c0f0-5c4e-417b-be20-ace78873c47e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1e6dd53-63d2-4aa9-b8d1-99850dbd1274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7aa7e91-6a9d-4472-abcb-2a1415821cb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb34d2c9-0310-4bf9-8372-db475c1ee995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b08e87-94c8-4e42-8c3e-f494a1acacc5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6bd92ef-dfc6-475b-8e1c-9d8523711479",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e67db2fe-ad62-4a0a-8b3d-a9ace4575ce6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c40af276-1e00-4137-868f-72f8c6ca8049",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60c4db72-b601-4aae-971d-f9d3923fb7b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272bda6b-02f4-410b-a12b-e4e7231f2d67",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bdf1b2a-bb69-40e7-9cc9-ba3057b52c84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54b59434-603e-4dce-a7c8-eb3a6d6a4ee0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b060a9f7-21b2-4ab7-8ce7-afa7981dc543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbdce63a-941d-4fbf-a574-b990e6fae081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0a03b3-adc1-4422-89b6-00562d64d622",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba9f3a11-b0e7-43a3-8036-019ca890d8c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6db18328-c406-4a95-9345-def3213b38e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af1fe7f-a670-4406-b4d1-cd5ff0f41dc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e3ac2e-ca78-43b7-afc5-c21284bbd0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c7ccec-ad15-4bff-a813-909426432dcc",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3b90b7c-4369-438e-b87d-0e2ef4bd3ecc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b9580ab-be79-4a5a-8fb7-51813b882d40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a93c50-0db7-49b5-9545-dc024b7c321b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133ccaa5-a809-4cab-95be-242db82cdd41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbacbaa3-ff7b-461f-8a6f-80b3f7ee23a1",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5928e205-8b25-4cf2-afe8-73a29a5827cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5e8f2d8-35d3-4d77-b916-356f37cc1c4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01bd6eca-3b91-4ee8-a206-e4b4d47e2094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99517a5b-47d0-4272-aefe-8d2f4f3491fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d09763-56b1-402a-953e-7b68b751cf93",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cec05cb-a180-4649-92ef-9273ca17c677",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f3dcf2d-501d-436d-a163-cd74dc17a4e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4ec4558-33e4-4311-85c4-dfe4b9b830bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfedc7ad-4aaa-491a-b7ef-9a2ca5309b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc7a2c37-09ba-4993-b3df-0e07b31d5d3c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a757d34-2069-488b-9c0d-ac4f1c780adb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e76444a4-d3ce-412e-93c6-baa42d435f9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b032a9ca-f3a0-4038-9f36-dcef551a51f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe8e91b9-c7d3-4836-b130-88a76cae04b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3566984-0ca4-4571-9de8-1f2b6ccbae52",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b625fea-f3e0-4812-8fb0-17161fe06832",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab57c2df-cfe3-4dfb-8bf1-9013dc0566a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9148cd2-250a-4c32-9bdd-8ad9bb177ad3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "078526f4-82eb-4e14-893f-768e22439569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c68d90b5-15b4-4004-94e9-588510953065",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15997368-d27a-48c4-ae72-baf53f420706",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31f50496-f5cf-437a-8652-b0a79ca114d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48f94a6-b4a3-4619-96a9-7bfa4d56f381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58df1be9-cd43-469e-aad2-e74056da3da7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a331094-f5b6-4642-b27c-2a070802bc94",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "167f08a8-22bb-418b-abed-7306c2484e2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07546a74-b13d-4c0e-9aa9-7ae88a6fdb62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84e4f5c-af14-4070-bbb2-265e50243368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2584326-4ec7-4a11-ad44-583292ba2cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af0aff00-a367-49c8-864d-619b2470a5e8",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16285b58-1879-42f8-ad8b-4269e2d74875",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0051408-fff9-4bad-bb2b-6e50acc21bbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb954084-4bb2-4735-86c3-a3e44bc672ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a7a2d4a-d0e4-457d-b969-4ece5eae248a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dbdeb91-9601-4193-ae2a-d7d2fc339016",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4102f825-93c4-4f8b-ab1d-3c052cb2883c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a78a3fac-2754-4f1d-95ae-4f490483ac6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c89b02-7a20-4fa3-9836-523f83e44fd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "561f72ec-48b6-41bd-8689-b8e1630fa4db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72f8f15-7c8c-4bf7-b11c-ecc43f0f62a2",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d063c96-df0d-4db7-a763-cc0660d2baf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b889aca-e7c8-48e3-b3f7-5cf3ebb06f1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67021896-8fe6-4182-b18d-af8cb98eb5e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffa00670-0fc3-4fe4-858a-aafd475692fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619aa46b-6d6b-4e0a-81cb-ccac8980a150",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d707e7-eac8-47b5-8e14-b6b84a9fe5e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c36800e-769c-4ebd-876a-553b073305c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b12625-af55-44c4-a249-6ba53aa0927c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da6d439b-1cfa-4620-80b5-d79561b69f25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63a1459-428a-450b-90ba-4cbd38a193f0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfdc08f7-c122-4623-9fc5-d2b94180de5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4229cf5a-0d32-4d1d-99be-9d7bde618fee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09c0f7c0-d48c-48d6-aa6f-e277f8fb3b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62c2bcfc-c319-4795-8b79-c4f0f607af5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54854fd0-34b9-4ff1-9b2d-91a33bfe5ae8",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e2ef98d-30c5-47a0-9baf-88e73e0a3c66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eeb605a1-45bc-4a1d-afd2-d193554f0cbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d8a95b-1497-4389-85ef-83eb087f39cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d01184f-8659-4f7b-b84f-1d837ae682bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a6f74d6-af4e-4d39-a817-1aac202c81b0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b447500f-5a2e-420e-8000-c643e3a79cc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a1d72b0-224c-47c3-bef4-5fca324339b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3b37323-f2e6-4535-9f61-6f3c9816cf73",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27aaaea7-aeaf-4971-85d5-3ed0791e99ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "512a68a6-37f2-435a-b3fd-f033682563cb",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd299b81-c2aa-495a-8be3-9054c914bd8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7115958d-e71d-4e9b-a782-2679ff8c2909"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c615b1b2-7d2d-4f73-8d38-fe4256a7b0a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99fbc512-7d15-42a4-94bc-0ec3ea2b781d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4bd1c84-1c8c-43b2-8b16-1a94e224611f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af62c961-a7c0-4c47-a52c-255cb7eb1316",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58589743-7cd2-43da-aac2-b65931706c06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5027dea2-1199-433e-b17d-5cbf10d81881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2524158-f3b0-4ec5-bb4b-c7fc17f7f058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a60493d-d42d-4a11-858d-dfe774cf7847",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef65e032-7e0e-4c3d-b3f9-ae68597894e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5850ddd-5222-442d-9c12-0bd72c70afd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a0ecc1-e870-4b5a-86aa-1e55bd200583",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d91f092e-181c-4380-9ef5-958bc6b34d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e1cdb77-0ae8-41bc-afc4-c5c3ff5a5498",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e806a5d-5c11-4347-920e-b02394404d1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b77bba7-2590-4af2-92b6-bf82f647b3d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "512ed7bc-0811-402c-a7c8-62d209b2b94b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f08bb9f-8313-4b3c-a85c-0d38e642fae4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2aa34d-d466-49d4-b5c1-326313e8963d",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1eb08e-cbc3-45e3-a9ca-e30efebfbd92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13662104-49e9-4a9a-b277-68a26b020354"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c11d16b-12c9-4b6c-ac94-f2b511ebb4bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04afa53-2615-44f0-b39f-92f0eb69390b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03785c09-bcda-449c-843f-0da1c3256a08",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce01ac3-253b-4925-863e-ca9815ea9844",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "224c5382-86b2-4e81-a4f3-00c6e8bc1149"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db1c3f1a-9603-479c-b3f8-eb8e44728793",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df3717cf-74da-4c02-a400-7125fc475653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744f659b-17be-406c-8804-72775ae59fc7",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f7bda6-a502-40a9-8b89-257186619bf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "444b9888-4825-44b9-a9dc-a2834ab8de9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13634234-5fee-47c7-905d-2a881bce3dab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dbf9728-5ed0-4626-a076-9953b0897c4e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4953b0a-abbf-4fcd-ab69-2d8ef328f5e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5abf0023-f604-4b34-913e-396a182bdfee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "36bfe744-b81f-4315-8b36-584a211a8f44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5a9338fd-f975-4cbb-9b54-c96418958ff3"
                    }
                  }
                ]
              },
              {
                "id": "041d24b4-eb7a-4f5d-aab5-a2c5fb429bfc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ac6fd84-d191-42b4-ac29-a767ef213451",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5894bd6-e70f-4b4a-8957-b9127fe8cb79",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "0640e2c2-f386-4138-b946-6ac8397b73bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b319e1ff-e0bf-43a5-ac14-b271dfcf9f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1a77b4a1-9a85-4970-ab9b-b6333b810e8b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "248ffa2e-1b0f-4296-9713-b4952514896f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18ccb607-98d2-4bf4-a3e4-344a9166d2f4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5aba6cdd-50b5-4ab7-bd83-21964fdb907e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56080ef8-9270-41aa-b2b1-59173931f63c"
                    }
                  }
                ]
              },
              {
                "id": "fae116cf-a1dc-4d00-961a-832c953a0ef1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1f92bc7d-07ec-4880-abb0-84ea57cb5606",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abaee421-31e8-4725-84ea-4dc33959701b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c560e9fa-9acf-4275-9d13-df439f39ee99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16380af-c83f-4cb8-83d2-7d46c51ee8e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3174b6b2-2107-4490-b846-f090b28f7f2b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a5af7ab0-5cd1-45e7-b8c0-6260fa79d97a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a653992d-72b6-44c6-bc89-5d0fb79e418e",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "448f7869-fd3d-48ac-9039-214e6f0d8fc8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2aa63b1d-77c5-4617-9f54-f6cc518da6f7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "45d30d22-28d3-445c-b822-46c3b704225c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e33e5fe2-ed92-465a-b996-37d71da61077"
                    }
                  }
                ]
              },
              {
                "id": "456969df-af1b-4525-a213-6eda3dda425f",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d02a6a9-f5ca-485f-877d-caf92f209aad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9a12b4ef-4cf5-41ae-846a-b493894ce941"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5d144ba-67c9-418d-9ab5-a6f82fd8761e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d43fdc6b-ffaf-4eea-902e-37992b113a65"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8a53f2a0-795b-41df-ba1d-2a727d645a07",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6a12552a-a50b-4dd9-89b4-db89acfb21ef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "18510420-c49d-407a-ab42-cf3c20af915c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4014df77-626b-4135-baeb-7e94a94ba540"
            }
          }
        ]
      },
      {
        "id": "ec124a7f-6694-4e92-9b04-215092cb43dc",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c3adc5f9-9def-49c4-bee1-e196e9891b3a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "928dcf96-7265-413e-a1d8-88893ebf539a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de0b36c9-5d8f-4d64-8552-9145e7580aae",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c51a1ed-1aeb-41ce-8a6d-2e4ea9bdd3a5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "624bdb1c-87d9-43a6-92ad-d9bea4d8c400"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ae3a9e-25c6-45f9-8971-09b846e5acb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1b338378-c3f2-45e9-87f3-990160da6fc3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "404d6140-a92b-4575-9e90-cddad8200068",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c29fdb6d-2c52-4ca5-a1fc-ef9aa1ba2321"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17158949-74f5-404a-a3a2-c9ba55f9db3d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ac168b8-138d-4d79-988c-d50b01d1d1fb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f7febcc3-68f0-4cae-ba70-07b7aa7bdedc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "62b2faae-22bd-4e8b-bd9b-5052d1019895"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c9b84cda-9a4d-412d-8b9e-28413b5283b9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "17956b47-c63d-4294-bcb6-29d3939201c8"
            }
          }
        ]
      },
      {
        "id": "4230ff62-4af6-4048-8fff-bb99d45f6402",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2a613833-71d6-4097-a60b-944dd3cd626d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a2ec2ef8-6f9e-4fe7-9ec5-eb105be36ebe",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "eab8c19f-faca-4d00-b76f-9920db6fc7b1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed88707-902d-4ffb-8c2a-a28b6bfdf3b9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c33ddcd0-8f69-4c05-8a72-6751314f6d91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77e0f35-ba7d-4b73-a49d-6de9c8d5171a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3d3d9af4-2a34-4e6d-a2ed-b6339b004981"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ed5300f8-be5a-4f3b-936b-627e3728c8d5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4314ce2-7c9c-45b9-aacb-a5ff7652c4b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9c50af1-62ba-4d18-8bda-f4ce0a966cd2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5e10121-9912-4e98-8291-efe5d46d01cf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f1ea99bb-532f-4976-9b4c-fa2be212aea0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "221e9c43-b2e5-4a18-bf88-3306ed63117c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "258d5d84-92d4-476d-868d-fee5bf3a8372",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d77ec106-e27c-40bf-866b-8ab0ac537edb"
            }
          }
        ]
      },
      {
        "id": "6e661744-c1ee-4428-8025-9b3d33052af6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "e857fb06-7601-493d-adec-02515452ff63",
            "name": "Negative Testing",
            "item": [
              {
                "id": "89d3f7c6-45af-4b16-927e-240aff4cbbd3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "60cb0077-c0db-42bc-beed-cc048a2ad9e7",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eddf8044-b05f-4fe2-aab1-797675cc2740",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3ec8ff4-480f-4ff0-bc04-e4180e4c02c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d056ad8f-974d-443c-9a27-3c65bdec83ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "08412c27-6009-4882-a0ea-40bfabe0ddc9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ad56fdc8-b32a-4a74-9ab9-541f69ead721",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fcaead5-204c-4928-ae4b-bacb5206e110"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "def6cb70-35e2-48af-acda-1aef8d2292b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d48b1b3d-8ec8-461e-a981-abb1a8384c42"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "62818bad-96af-48bf-ab71-c580ab4839fe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0ccb2753-0490-427f-9089-9a1c6e2052ef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5408990b-445b-4f6a-aedb-716bc5d0bdb7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3cadbce0-aaa6-4914-8f29-fc5043fb0bb1"
            }
          }
        ]
      },
      {
        "id": "e829c469-3a3e-41c6-a4f5-ba5314e6a653",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5381bafc-7386-476e-bed9-6dc96df84fdb",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dd78bfa8-e6b1-4f0a-aa94-c35d353ce847",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "7a89d39b-0b46-4845-8c89-67098df55fcc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53d4e42c-85de-4240-af2d-9bb34baacf25",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e2b7652c-e939-46bd-9386-f665b5476b04",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 106.44841269841271,
      "responseMin": 21,
      "responseMax": 766,
      "responseSd": 91.34142146506285,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1723250427755,
      "completed": 1723250463091
    },
    "executions": [
      {
        "id": "ff536276-0b34-4d83-960a-c9b2c9568501",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ab429f56-ffde-44ed-adc9-d61a83134dc4",
          "httpRequestId": "f1b4e616-9f28-495c-9516-59eab9e0d84c"
        },
        "item": {
          "id": "ff536276-0b34-4d83-960a-c9b2c9568501",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "addfced5-b4e8-4562-b081-d71d8ae8787d",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 0
        }
      },
      {
        "id": "34e89b4a-3c42-4ff8-93e6-e2e62029b45e",
        "cursor": {
          "ref": "bd3ca06a-bafa-4537-bf44-3a2df49659a2",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "62dea8b3-5e51-4d8e-abb9-9f9c4f16585e"
        },
        "item": {
          "id": "34e89b4a-3c42-4ff8-93e6-e2e62029b45e",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "44866195-e39a-460b-8f55-12fcd973e097",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "f5149b5e-31f1-4daa-91c0-c471d7086542",
        "cursor": {
          "ref": "17fecf6e-3ddc-4220-b923-184fe2e1a559",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "2d1084d7-b3f1-4550-b65e-212ee28f129d"
        },
        "item": {
          "id": "f5149b5e-31f1-4daa-91c0-c471d7086542",
          "name": "did_json"
        },
        "response": {
          "id": "9708e320-647a-45ba-adcc-c241be21f687",
          "status": "OK",
          "code": 200,
          "responseTime": 639,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ced56d5-4bfa-4f1c-adf8-55de46239287",
        "cursor": {
          "ref": "750f68de-7def-468f-9202-c1a9e3b82780",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "34a9c2d7-0794-4548-876a-b83fde7cf78a"
        },
        "item": {
          "id": "7ced56d5-4bfa-4f1c-adf8-55de46239287",
          "name": "did:invalid"
        },
        "response": {
          "id": "34adf32b-e391-49c2-913e-3d9e3ec9ce08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ced56d5-4bfa-4f1c-adf8-55de46239287",
        "cursor": {
          "ref": "750f68de-7def-468f-9202-c1a9e3b82780",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "34a9c2d7-0794-4548-876a-b83fde7cf78a"
        },
        "item": {
          "id": "7ced56d5-4bfa-4f1c-adf8-55de46239287",
          "name": "did:invalid"
        },
        "response": {
          "id": "34adf32b-e391-49c2-913e-3d9e3ec9ce08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87ed51da-0d74-4103-ae8e-a86a64026274",
        "cursor": {
          "ref": "ba197b81-8fb6-47ef-af55-df7415e12721",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8a2d7fb9-1fdf-4860-9d1e-1da2ffd59177"
        },
        "item": {
          "id": "87ed51da-0d74-4103-ae8e-a86a64026274",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0931264f-3892-44ea-9766-4de9c235e621",
          "status": "Not Found",
          "code": 404,
          "responseTime": 368,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d12a5627-28af-4598-b87b-f4c37422451e",
        "cursor": {
          "ref": "453970c5-4bee-4c5d-b743-e9b6858070c2",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e8b67e94-6fe3-4c1e-beb9-022c751f3151"
        },
        "item": {
          "id": "d12a5627-28af-4598-b87b-f4c37422451e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2c8c2223-0c46-41ec-982c-a943f31d0f2e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 74,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bafd914a-d705-4047-b1d2-ab1cc8b9aaec",
        "cursor": {
          "ref": "3b09904d-8e44-4e7e-83ba-bb083c09ba26",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e7564632-9305-4990-81fb-ff0a34f18b16"
        },
        "item": {
          "id": "bafd914a-d705-4047-b1d2-ab1cc8b9aaec",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9bf20ade-66d3-43d6-a7f3-883d2c56a28a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 65,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc9e50d-6c7b-4564-a6de-362fd3ff9bef",
        "cursor": {
          "ref": "1817f8a3-c37a-4ee9-8508-8944c7c08228",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5fdfb4d1-0adc-4dbe-9312-d1f230d91d0f"
        },
        "item": {
          "id": "fdc9e50d-6c7b-4564-a6de-362fd3ff9bef",
          "name": "identifiers"
        },
        "response": {
          "id": "4a6b53b1-0e04-4573-a9f4-e8dcb9c994b9",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e53565b0-3c43-49db-8f37-43fc357cbbd0",
        "cursor": {
          "ref": "f4f49143-c78e-44c3-8cc7-d94c00e5151d",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1cdba643-27b2-4ccc-9934-8990837a71c6"
        },
        "item": {
          "id": "e53565b0-3c43-49db-8f37-43fc357cbbd0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dfb5e9e0-82b7-4b99-b46f-a3ce95906614",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "e3dde792-6d24-4d40-a2a2-dcccc7a4414f",
        "cursor": {
          "ref": "b6359862-a840-42ef-8492-0a9a3e43410a",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "e24d51b7-b2a8-4ef5-88b2-9c544175c196"
        },
        "item": {
          "id": "e3dde792-6d24-4d40-a2a2-dcccc7a4414f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d524056c-b234-442d-8ca0-6ee65c99414e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "60dbf940-3337-406a-8b05-decaeaf397ca",
        "cursor": {
          "ref": "49eeb71f-bb8f-465b-8568-f5f52a3da9c0",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "41de5e81-8d12-40df-8527-9c5c2449e187"
        },
        "item": {
          "id": "60dbf940-3337-406a-8b05-decaeaf397ca",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1fa54ffc-e135-415f-9465-336bf4eb178c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "bc60dd31-93e2-4767-b15d-dda9079bd7fe",
        "cursor": {
          "ref": "2abf8f9b-4f9d-40dd-b618-f0952143ad5f",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "66c96029-297d-43c0-88af-eeba638bfda1"
        },
        "item": {
          "id": "bc60dd31-93e2-4767-b15d-dda9079bd7fe",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "53134db3-5889-49b0-85db-76862efe5155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "690c0123-05c1-4f43-9d1c-a157050e0fd1",
        "cursor": {
          "ref": "3e13cd62-e1b1-4824-a30b-557e086be7d3",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "930c18fa-12bb-414a-bb81-3d1827e544f5"
        },
        "item": {
          "id": "690c0123-05c1-4f43-9d1c-a157050e0fd1",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "35372294-041c-448c-b2cb-c8bf24f7202d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "87974e11-a121-45b6-b1e5-c70f5e07e9a9",
        "cursor": {
          "ref": "5c495f73-4c06-4e35-a3f3-da480acb5a34",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0509e583-a561-4129-931b-261203568242"
        },
        "item": {
          "id": "87974e11-a121-45b6-b1e5-c70f5e07e9a9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "be9ddafd-c410-46d4-8100-9b04a498adad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "519df95f-bbcd-4b4f-b4dd-2930e6b95519",
        "cursor": {
          "ref": "bc07b570-e19d-4811-8a56-911a0e0bb3b2",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "faeaca70-2bec-4557-8313-76b6780197c8"
        },
        "item": {
          "id": "519df95f-bbcd-4b4f-b4dd-2930e6b95519",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "fc5a9145-91e7-429e-9807-10934c314d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "637c5ae9-1278-4cf2-a9fa-dd4991f92a7d",
        "cursor": {
          "ref": "f5ca90d6-583d-472c-b9e9-56e846d947de",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2b255059-6554-4c87-bc04-a4f690324565"
        },
        "item": {
          "id": "637c5ae9-1278-4cf2-a9fa-dd4991f92a7d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "0fef5acb-b177-4538-8888-4994aa6acc8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "c61cd166-d4c6-4f50-b833-2775890ecabe",
        "cursor": {
          "ref": "3fe1081a-60af-4b1f-ae1b-32db35250fb0",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6c6e193e-600b-4379-8f73-151c2a7eb44c"
        },
        "item": {
          "id": "c61cd166-d4c6-4f50-b833-2775890ecabe",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "04ccc705-66cf-4e4e-b35f-27538d2efe09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "e82671ae-f63b-4bac-ab0a-81dcf97ca64a",
        "cursor": {
          "ref": "650fd779-eb96-4e53-9c21-0763ea231c7d",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9f44a237-e2b3-4fb5-bd58-010fe77bacce"
        },
        "item": {
          "id": "e82671ae-f63b-4bac-ab0a-81dcf97ca64a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "8200dccc-d853-4aac-84fa-3bfc349a959c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "191a2efe-6243-4cd8-a3de-e6fc6aaca79f",
        "cursor": {
          "ref": "075d83c3-78d8-49c5-b8ea-9a7f24f63673",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3799a3a3-7af1-4625-88bd-678c86996b23"
        },
        "item": {
          "id": "191a2efe-6243-4cd8-a3de-e6fc6aaca79f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "42332bbd-72a0-4f1f-bac8-1d92ff288aae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "a0d03164-3ed8-44eb-8559-77ce9a0f3fa2",
        "cursor": {
          "ref": "81b6d4fb-4da9-49f2-976d-efd3e4c4c08a",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "501b5d99-2daf-4cc8-b127-651927191183"
        },
        "item": {
          "id": "a0d03164-3ed8-44eb-8559-77ce9a0f3fa2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "99b01966-45b7-44ab-969e-bd2df940cb1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "4913aac2-5f78-4fe8-a2dd-3505a105770b",
        "cursor": {
          "ref": "e770433c-f415-45ac-9667-e2576896994b",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "4e1ee0a9-572e-428d-9e89-6aaba32c28e6"
        },
        "item": {
          "id": "4913aac2-5f78-4fe8-a2dd-3505a105770b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c81b6576-947b-45af-be55-2ec6b27ae44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "d00f7901-ba5b-4676-9e13-f234f7ae95e0",
        "cursor": {
          "ref": "f486ff73-3d9e-4942-91db-a783663f254a",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "4f35d94a-51d8-49b4-8e5e-0a0fa4046256"
        },
        "item": {
          "id": "d00f7901-ba5b-4676-9e13-f234f7ae95e0",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "69a3cc86-9009-44cd-be82-fe73e7df7d66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "d9ce47cb-4379-4d29-adf4-0e4f868625f7",
        "cursor": {
          "ref": "3e4be6b8-f7a1-41f5-a5f8-e1fbc00e2bd1",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "aa446615-451d-4694-9c90-1dc11a6464bc"
        },
        "item": {
          "id": "d9ce47cb-4379-4d29-adf4-0e4f868625f7",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "966cb15f-432e-4bf8-9b5b-c49fa537abd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "81996a98-46bb-446f-a598-3d2a33f59bf4",
        "cursor": {
          "ref": "81d46fab-b6e5-4b3b-815a-b6cdfe341efb",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a0e5a50f-bdf1-40ec-9baa-588c94df473f"
        },
        "item": {
          "id": "81996a98-46bb-446f-a598-3d2a33f59bf4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "756fcc72-9f55-4310-a18c-ef4b9b9e7186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "6d91dd86-73dd-4591-b526-41458f5e791d",
        "cursor": {
          "ref": "c81e5b72-d180-4c79-851e-ad538f5f3a02",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "29e0a1be-9702-46f8-a185-6bcc0fcb236e"
        },
        "item": {
          "id": "6d91dd86-73dd-4591-b526-41458f5e791d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "a161a468-7374-436e-8a99-4176a91fe721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "9a81c72d-2332-451a-b879-e539427dcc34",
        "cursor": {
          "ref": "2f3ac527-8f83-44a7-a166-78c5a8050701",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "775ffa8c-52ff-4120-95f0-6f6b2d31b8b0"
        },
        "item": {
          "id": "9a81c72d-2332-451a-b879-e539427dcc34",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "5e99fc1f-7138-45fb-a90c-64661719abe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "f70c0000-ea6f-4bb3-aea8-d7ea62859fea",
        "cursor": {
          "ref": "33daab0a-b4ae-4ed0-8ada-fc86e0f2aaef",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ea1616bd-30d8-4720-8c58-a11550f3a180"
        },
        "item": {
          "id": "f70c0000-ea6f-4bb3-aea8-d7ea62859fea",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e459ad26-115d-451f-8236-57016cfe7a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "c6fb9fb9-3d7d-4336-a753-8d2a9c611889",
        "cursor": {
          "ref": "9c36caa7-0cc0-4196-9458-207dd7a90f87",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9498d989-27f1-4329-b8b0-b92237227585"
        },
        "item": {
          "id": "c6fb9fb9-3d7d-4336-a753-8d2a9c611889",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "f1676c42-651f-4c9a-9463-dfdef563b46d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "c0b594be-fbdd-4b52-a01f-7635e5cf00fe",
        "cursor": {
          "ref": "929fecbb-52ba-4359-aea8-625817b9ff5b",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "45a2e165-8b18-4e08-9f8b-df692299c1cb"
        },
        "item": {
          "id": "c0b594be-fbdd-4b52-a01f-7635e5cf00fe",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5b440073-c6aa-4425-b783-122e7ce6c343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "91d9c39d-2b2e-40b3-b239-df0cd9525595",
        "cursor": {
          "ref": "85d121ef-8508-49e4-ad4b-49cfe68879cd",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "98182261-27a6-4c9f-b054-a108081efa4a"
        },
        "item": {
          "id": "91d9c39d-2b2e-40b3-b239-df0cd9525595",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ebefba63-77e8-4196-9012-b51dddff7e41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "192d64fe-53d7-4d8c-ae40-a67150cb4421",
        "cursor": {
          "ref": "170b81e1-9cd1-43a9-a028-92fdb4c70e8c",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "17d61f6f-8321-4c7e-9fcb-d1c970076b2d"
        },
        "item": {
          "id": "192d64fe-53d7-4d8c-ae40-a67150cb4421",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "555d4da9-eda4-47e8-b2d5-4f424336e1d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "f279e565-f71b-4f85-ad4d-363a250347da",
        "cursor": {
          "ref": "a165b83a-2507-4059-8e76-44fc0b9fbc36",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c9607d72-c22c-41be-98c7-460228ae1458"
        },
        "item": {
          "id": "f279e565-f71b-4f85-ad4d-363a250347da",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "81a1bdfd-bc90-48e9-af27-9951411f20a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "45f27829-0db1-49f4-b022-ec54d308a27e",
        "cursor": {
          "ref": "df40e906-76a0-47dd-b8a8-ec2dfaa93e88",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7e41ffd0-2c59-4999-84a0-031f86abd828"
        },
        "item": {
          "id": "45f27829-0db1-49f4-b022-ec54d308a27e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "036074d3-5d48-40e8-9d2e-b6abcb9fe525",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "5e8b3e0b-e94e-443e-bc03-fb9c4331a9c7",
        "cursor": {
          "ref": "e067b926-3cda-4137-83da-e92e61f8a9a0",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "41d42c66-c912-40af-b6f1-4b6c95e92c5a"
        },
        "item": {
          "id": "5e8b3e0b-e94e-443e-bc03-fb9c4331a9c7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "6ef3caad-542c-4d91-8327-ec61f735b24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "515b270a-dc96-4fb3-8e29-dd5ffb7c94cb",
        "cursor": {
          "ref": "d87abbef-7f10-49a2-9c14-67b3a11aac20",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ad318c2e-fb64-4159-b858-630bdd85c065"
        },
        "item": {
          "id": "515b270a-dc96-4fb3-8e29-dd5ffb7c94cb",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ed09f7b4-121d-4b13-9a30-1ba0553aeb2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "27c21b98-43bd-4ddf-ad2a-9f629c29a45e",
        "cursor": {
          "ref": "af67adc2-73a8-4e20-8004-357948b48e02",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "9008fc8c-d1b9-42b7-b04b-81dc6f6de68f"
        },
        "item": {
          "id": "27c21b98-43bd-4ddf-ad2a-9f629c29a45e",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "bcc8c96a-e11b-4edf-a2e1-c91a58f134aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "02592ee5-9ec2-4f66-a2be-9f94023c48cd",
        "cursor": {
          "ref": "a53f5ef2-57f9-41ee-af86-40ff180ceda5",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "133c6fc5-abeb-4e90-9426-ade161c74aa9"
        },
        "item": {
          "id": "02592ee5-9ec2-4f66-a2be-9f94023c48cd",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "495bf0be-146e-426a-861c-14bb5c16814a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "bfff8a63-f0c4-459e-b901-df511b0af165",
        "cursor": {
          "ref": "e22b1024-5a68-4430-b1de-89ac9461af49",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9239a066-bcec-4080-b6ba-eb9372c4fa88"
        },
        "item": {
          "id": "bfff8a63-f0c4-459e-b901-df511b0af165",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "66e902fa-b966-4787-94bd-e2fbc19b8733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "e05ab6c9-3416-4f6c-b882-e22e7d1eacdd",
        "cursor": {
          "ref": "e9addc67-fb9e-48be-b5f4-f16da8b0d33c",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3d41a98b-eadb-484e-806a-c685bb7496cd"
        },
        "item": {
          "id": "e05ab6c9-3416-4f6c-b882-e22e7d1eacdd",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b9d00da9-0977-4376-acc4-cc698e104f68",
          "status": "Created",
          "code": 201,
          "responseTime": 766,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "9e0830d9-9ce9-47b1-a84a-281a9d008c58",
        "cursor": {
          "ref": "1856ce6b-892e-4b54-85a5-94027fe404b3",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "23bb8368-4e7f-47ac-95a4-51ed61ed854d"
        },
        "item": {
          "id": "9e0830d9-9ce9-47b1-a84a-281a9d008c58",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "44d948d1-b99e-43a4-b57d-8a51103372ac",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "e8414333-732d-491b-88e1-9aaa79baf3f0",
        "cursor": {
          "ref": "02a31fbb-f022-4ce0-9cc9-651b5c49af3d",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ab59cf4d-323e-4c4d-b4a2-483a99a7443c"
        },
        "item": {
          "id": "e8414333-732d-491b-88e1-9aaa79baf3f0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ea6478c4-6762-43f6-8360-39acadffbfd4",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "86de076d-e030-47ff-b889-52e7308fde0d",
        "cursor": {
          "ref": "31dd8a9c-8b4e-4af8-8429-f18a00e8a9b5",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2be24374-6ecd-411e-9fd7-f084c9a63555"
        },
        "item": {
          "id": "86de076d-e030-47ff-b889-52e7308fde0d",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "91438703-ba89-4e68-9155-04ceaf850448",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "3abb428a-9976-41eb-9b4c-842bf601cef2",
        "cursor": {
          "ref": "3634a0c6-684b-4300-a09e-507af3c5b3fa",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "de1844c4-0e0c-40e8-a9e5-68bd1f1c3daf"
        },
        "item": {
          "id": "3abb428a-9976-41eb-9b4c-842bf601cef2",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "8e7ad55f-aee5-4218-89b0-9caeb73af92e",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8857b3b5-6143-4bfc-9138-fa0c838c5541",
        "cursor": {
          "ref": "bdadedae-b411-4ab4-9a70-0f673fd02688",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1f998dca-7337-4001-a099-2f7f0fe51282"
        },
        "item": {
          "id": "8857b3b5-6143-4bfc-9138-fa0c838c5541",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3c9589ff-5aca-46f8-b397-3b038dac32fd",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "536b1d42-b8b4-42a3-b204-739ef3f178a8",
        "cursor": {
          "ref": "2fc05527-c547-46a4-a767-1d055d431e5d",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ff0665ca-48f9-4dd4-84a0-ae0fa953d2e2"
        },
        "item": {
          "id": "536b1d42-b8b4-42a3-b204-739ef3f178a8",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "29303957-fb15-4ad3-8b83-52a87eadc3b3",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "2266d587-c92f-4c35-b2a9-74999fb07d53",
        "cursor": {
          "ref": "bafd5a74-022c-4fd9-a1a0-977fd19a390f",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "54e67704-6c75-4243-b032-7721838a0db0"
        },
        "item": {
          "id": "2266d587-c92f-4c35-b2a9-74999fb07d53",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "fb75aa99-465f-4584-8ebc-68536faa33af",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "62c6979d-b1a5-49fc-a261-8b8a342714fc",
        "cursor": {
          "ref": "5f9425ab-2e7a-45c8-a513-e05dc293b272",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "93e218c7-9df2-4362-8c77-bea65a88fa85"
        },
        "item": {
          "id": "62c6979d-b1a5-49fc-a261-8b8a342714fc",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1a3f4edd-a243-480b-a69b-6d44f01f4876",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "9f2702a1-0543-4dd0-8b07-085b3ee30260",
        "cursor": {
          "ref": "66a6827b-cc91-4d9a-ba60-578fa8744ed0",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "197d8108-de28-4ae1-aa23-dacaa2917db4"
        },
        "item": {
          "id": "9f2702a1-0543-4dd0-8b07-085b3ee30260",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "9cbd7d67-bc59-45ef-83d4-db7512ff0acb",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "0224e31e-b186-4449-afa3-22fc2f19aa73",
        "cursor": {
          "ref": "f6ca071f-499b-4997-816d-0b76adebd255",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "85e1a0c5-ed0e-44fb-a6c8-b64b0fb659ad"
        },
        "item": {
          "id": "0224e31e-b186-4449-afa3-22fc2f19aa73",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e9bdd9bb-322f-480f-996e-cca3fbdf0307",
          "status": "Created",
          "code": 201,
          "responseTime": 385,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "975f0315-48d1-4bcf-b31e-2b18e712ebfa",
        "cursor": {
          "ref": "1317fdd5-d59b-4d38-b6f9-7f0989db8078",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "096b4ced-1d24-4069-beb0-1cda0ab89cff"
        },
        "item": {
          "id": "975f0315-48d1-4bcf-b31e-2b18e712ebfa",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "c26ee7f1-762f-4dcf-9d3e-ba30711090f6",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "8471a647-cd30-4547-8f8e-4cf37e6f5133",
        "cursor": {
          "ref": "06715e1a-d136-4121-9a47-63b25a8fb0fe",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8fbe31ea-043d-466d-acd1-ac10454043f8"
        },
        "item": {
          "id": "8471a647-cd30-4547-8f8e-4cf37e6f5133",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "b18326fd-e355-485b-a641-8bd6c0b5eeb4",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f9073660-4619-4f2a-9c6b-522bdb0423db",
        "cursor": {
          "ref": "5bdbdac3-4e78-4807-859e-8ac122decff4",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "932d1e2c-ef2e-44de-b9cd-fa998e9881c1"
        },
        "item": {
          "id": "f9073660-4619-4f2a-9c6b-522bdb0423db",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "225cec83-400a-43a6-9a85-801cfe788ba5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "56d4db43-44a6-49fc-8d19-0c4fc8b28d97",
        "cursor": {
          "ref": "02c2e11d-686d-4787-ad8e-58958696d135",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "59ce718e-652a-4fc3-b69e-b03635fec643"
        },
        "item": {
          "id": "56d4db43-44a6-49fc-8d19-0c4fc8b28d97",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "56f7d3af-9853-46aa-807a-66183c0effe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "e8525f27-dbed-4b13-bd27-5bfe172a30a7",
        "cursor": {
          "ref": "20b7b1c9-6b16-4090-aa49-02943703889a",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4d2e6817-a58c-4e6e-b84a-95f03aedce53"
        },
        "item": {
          "id": "e8525f27-dbed-4b13-bd27-5bfe172a30a7",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1693baf2-b1d3-4b36-b867-f6ce966b32a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "8c18cfce-7eeb-4130-973d-e273cecb37c8",
        "cursor": {
          "ref": "34f0eb4e-45b5-4853-a9ad-848bb4ea8d9c",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "10b912db-3c54-492f-b0f6-3940a64e059d"
        },
        "item": {
          "id": "8c18cfce-7eeb-4130-973d-e273cecb37c8",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "418bb007-d8c5-4647-9081-c82504c8bb22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "77d5c5d4-f5f3-4468-b800-16ea0ffd762d",
        "cursor": {
          "ref": "cafd3404-a598-43ef-aa1a-19abb6e79f9e",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "44f34058-671f-42bd-9826-698f5b8dd9d7"
        },
        "item": {
          "id": "77d5c5d4-f5f3-4468-b800-16ea0ffd762d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "eaa259d6-1cd5-4d35-ab3e-57e8c5b74276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "5fb73fac-6cd7-4b75-a324-b561ae69a5b7",
        "cursor": {
          "ref": "978d02a4-238f-4fec-b2a7-fb9cd230f728",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2506ac8a-a43e-4372-94c4-09ee8e6504fa"
        },
        "item": {
          "id": "5fb73fac-6cd7-4b75-a324-b561ae69a5b7",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4c41c2c4-8917-42e5-a9b3-e3fe7932f279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "b20efcec-05b9-41f8-8189-585e9072db8f",
        "cursor": {
          "ref": "ed8ffd52-5e85-4d38-a436-4c90ff85b875",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "116724d6-306b-4741-8ec9-edc3c3e2c72c"
        },
        "item": {
          "id": "b20efcec-05b9-41f8-8189-585e9072db8f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "75c84c5f-5ef4-425f-a61d-a21ab78f591a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "b71243bb-d209-4365-9fba-b19e0e2e000e",
        "cursor": {
          "ref": "698b38d2-562a-45fc-9f12-dda9bae10ddb",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "3db3723b-8012-4496-9ce6-00ad8c9b0650"
        },
        "item": {
          "id": "b71243bb-d209-4365-9fba-b19e0e2e000e",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f454756f-0540-4ed9-af5a-ee1ccd8be83c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "518b2f61-57ff-4c81-a38d-995786c60551",
        "cursor": {
          "ref": "d71a778d-c4bf-41f9-9d7f-71b0ad6ca527",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "641bee44-7f6f-420e-9776-e7d87e0374fe"
        },
        "item": {
          "id": "518b2f61-57ff-4c81-a38d-995786c60551",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f08b43b2-0317-4f66-92fe-aacaf34d4613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "4744ca0a-e50d-4fc9-a8d4-bb7a3aa8d45a",
        "cursor": {
          "ref": "dae83844-18c9-4712-9a20-42d65d0e789c",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3bb95d15-946b-4361-a48d-ee011ec8102a"
        },
        "item": {
          "id": "4744ca0a-e50d-4fc9-a8d4-bb7a3aa8d45a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "4c937192-4d4c-4aac-bd0c-0580fd7dbbf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "0d53c78b-1da2-42ad-b9f5-1096e949f2fd",
        "cursor": {
          "ref": "661fffc8-7af1-4648-9c5f-df76f8d8b854",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1ee9fb34-819b-45d8-bafd-0bd7e6a2d199"
        },
        "item": {
          "id": "0d53c78b-1da2-42ad-b9f5-1096e949f2fd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "cc63afe7-b104-421a-a037-2e71a4cfb284",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "b3d131cf-4640-44fa-9e7b-ed9dd4390681",
        "cursor": {
          "ref": "80b41614-0a13-4415-87ab-98c3670eedce",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "624c3631-2249-4748-b60c-8a3157cc1f83"
        },
        "item": {
          "id": "b3d131cf-4640-44fa-9e7b-ed9dd4390681",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "542c69da-60b3-4a11-9066-c6ce4a301917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "b67949e6-531d-447a-84a5-5c5a304578c6",
        "cursor": {
          "ref": "5ac6fb39-3074-4f86-9ecd-d1f2d31ed087",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "4b3a15b9-21cf-4348-9718-3b6f6c90a6c0"
        },
        "item": {
          "id": "b67949e6-531d-447a-84a5-5c5a304578c6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ef8ab717-01f1-48e4-af18-d267c1ca2e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "702d298c-6f53-4867-8844-a6c3a5478e8f",
        "cursor": {
          "ref": "5e0659f6-6b35-4c19-9be4-361636882bce",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "b12aafe0-46cb-4a43-81be-effb241d074e"
        },
        "item": {
          "id": "702d298c-6f53-4867-8844-a6c3a5478e8f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d3c24892-364f-41b7-bfc3-204e520825c6",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "a19da4d1-a0ff-4c5a-912b-0d4f1fcf455b",
        "cursor": {
          "ref": "8a745645-111f-4048-8baf-b54c9fbd5723",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "00c72024-f883-48b5-930d-419d6176855d"
        },
        "item": {
          "id": "a19da4d1-a0ff-4c5a-912b-0d4f1fcf455b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0b837c0d-37bf-4ef5-bede-a5121bc24da5",
          "status": "Created",
          "code": 201,
          "responseTime": 384,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "067b14b7-ba66-4432-9ca3-7dae7d52767a",
        "cursor": {
          "ref": "898487e9-dab1-4f9f-9adb-c03724a4b863",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9ceaa8de-1447-499f-8a5e-bb24c35550dc"
        },
        "item": {
          "id": "067b14b7-ba66-4432-9ca3-7dae7d52767a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "bbae4c9d-e4c6-43f1-b923-fd0d4e4ba88c",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "b87a9e3c-848e-4f2e-9054-5225b8aad90d",
        "cursor": {
          "ref": "448de1da-9b87-4f7d-bf4f-68caf6fd0ce5",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "322558dc-7300-42e9-beed-5a05317abb57"
        },
        "item": {
          "id": "b87a9e3c-848e-4f2e-9054-5225b8aad90d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "bcfd4021-491f-4123-99b2-24ddac88bafd",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "2690415e-15a2-4877-903c-6ba4dc86f710",
        "cursor": {
          "ref": "9008eea0-b8f2-4a2e-a45b-4801980da22a",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "6b89532f-b3d9-4526-b1c9-24c3a2fe1875"
        },
        "item": {
          "id": "2690415e-15a2-4877-903c-6ba4dc86f710",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "57656c6c-4825-4f14-88cd-06db22745fec",
          "status": "Created",
          "code": 201,
          "responseTime": 307,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "341f7b4e-b072-427e-8da7-c6ccf71ee000",
        "cursor": {
          "ref": "40a08b39-4f7f-4545-9869-cb214b0aaa6d",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8d485b13-96be-4355-9497-811adbf7b071"
        },
        "item": {
          "id": "341f7b4e-b072-427e-8da7-c6ccf71ee000",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "55a25bed-a170-4bd9-9053-047ad84b5e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "2a10b642-082d-4f49-bfc0-e5b768ab5de1",
        "cursor": {
          "ref": "c1f62f77-bc58-4a32-ab44-92ac52c385d6",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "007ecb85-8e81-4431-89e4-5c16b76bdabe"
        },
        "item": {
          "id": "2a10b642-082d-4f49-bfc0-e5b768ab5de1",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "8d88cd04-612e-415e-a004-a4355644760e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "54246eff-2d54-4542-a095-d3c84d96dd01",
        "cursor": {
          "ref": "66e9759d-b083-4774-8b46-c8b893f9a6ad",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "c106cb65-f52f-4846-abe3-c81bbf872302"
        },
        "item": {
          "id": "54246eff-2d54-4542-a095-d3c84d96dd01",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e8bbdd4a-fd7d-46b3-a6ff-2ec9135ba060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "08bfbadf-d5c7-4db9-a339-8fa84a3049dc",
        "cursor": {
          "ref": "61126cf6-c903-4b4c-b6e7-cd3b2a51eceb",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "a34b2fe6-8da7-4f42-ab7b-2cbdf02f654a"
        },
        "item": {
          "id": "08bfbadf-d5c7-4db9-a339-8fa84a3049dc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c0a86298-68f2-40b2-8222-8888122acc87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "174e97c8-d997-404c-8c50-9dfe074efe80",
        "cursor": {
          "ref": "903adba9-e0de-4ba7-ab8b-a59186dd29db",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "98231f79-e793-4050-9925-5e9bfb7d088f"
        },
        "item": {
          "id": "174e97c8-d997-404c-8c50-9dfe074efe80",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "74a358db-3fe8-4786-9a08-a03863a241e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "0bc54d6c-86c3-4800-baf5-26583d646fab",
        "cursor": {
          "ref": "22912f4d-74d8-407c-9f5b-392aaf41d8e5",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "881f65b7-24d9-4070-9f11-7074d470cecb"
        },
        "item": {
          "id": "0bc54d6c-86c3-4800-baf5-26583d646fab",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7e9d0a59-5483-4876-ad96-f5780f3bb3bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "a36ee9df-270a-4d11-aa8a-b9e22988e304",
        "cursor": {
          "ref": "5e56a55a-83ee-4bb2-93cd-48f92a23ebb9",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "3f816e13-eb6d-4068-993b-fb1e61ed47ad"
        },
        "item": {
          "id": "a36ee9df-270a-4d11-aa8a-b9e22988e304",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e6c376cf-1952-4ec8-9d13-a13e1ca7740a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "38d3d7fb-edf8-44b7-8c99-7ab08e7852a6",
        "cursor": {
          "ref": "48da137d-0dee-4695-ba44-82d74d206213",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "eb12c270-5722-4908-ac1f-cab8a486e738"
        },
        "item": {
          "id": "38d3d7fb-edf8-44b7-8c99-7ab08e7852a6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d28985bf-1aa3-436a-8603-e48d3560ae0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "0f030b13-d69b-42fd-ba60-54f18352405b",
        "cursor": {
          "ref": "046b2ae7-d464-44a7-a2d0-18450a40452b",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c0623a4f-812d-416b-8fe8-cd3c9d1a694a"
        },
        "item": {
          "id": "0f030b13-d69b-42fd-ba60-54f18352405b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "6c8f2da1-c854-4731-91f0-a0c06dd0d846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "25c696c2-0adb-4db8-8ed6-29651371fb74",
        "cursor": {
          "ref": "966ec77f-52b9-4246-ad99-433e54676141",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "66b494c5-323d-4052-9e6c-e906db1ac456"
        },
        "item": {
          "id": "25c696c2-0adb-4db8-8ed6-29651371fb74",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "be28d5a6-0c99-4a6e-b720-bb6e170d05ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "e8e1d402-fa7d-41bf-aa8e-bf6b7f3aa3cf",
        "cursor": {
          "ref": "025d2a87-10aa-436a-b350-861a9ad91f9f",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cf9e20ab-0ddc-4645-b6bd-161698357bf3"
        },
        "item": {
          "id": "e8e1d402-fa7d-41bf-aa8e-bf6b7f3aa3cf",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "b48b730b-25d8-4e72-8c83-f5b54c42fec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "66245d0d-2475-4e01-8b4d-940f76ccfd2b",
        "cursor": {
          "ref": "20c8f940-6240-4559-94bc-cd7c0ae7d5f7",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9bed6d6e-f238-4c91-b0ab-ba546fdf1648"
        },
        "item": {
          "id": "66245d0d-2475-4e01-8b4d-940f76ccfd2b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "12d27ded-bc5d-4fc4-86a7-7455569a0b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "fb2a2adf-b651-4d80-8672-bc26fd81fbd8",
        "cursor": {
          "ref": "50165d21-75e9-4045-8259-1ef84aff7742",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "21d27bee-870b-4853-a830-b5c6d1d103ad"
        },
        "item": {
          "id": "fb2a2adf-b651-4d80-8672-bc26fd81fbd8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5cd384e0-80c4-4931-9943-3b7a174415d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "d23e2288-00b7-4ce9-9f94-3ac2dac0adde",
        "cursor": {
          "ref": "af2c114e-e7a3-4a8b-8d1f-1e67be39c4e1",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2405ea44-ba14-4dea-96c3-d7e1b56618fd"
        },
        "item": {
          "id": "d23e2288-00b7-4ce9-9f94-3ac2dac0adde",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "55f3307f-37a3-4fe8-b629-64db8544b6f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "b9b019c7-2acf-4535-8422-724c7f183059",
        "cursor": {
          "ref": "3ac36150-8dcd-491d-8b6a-3d9b49988aea",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "ebf06a83-67c8-4f68-8e97-6374a4dcf93b"
        },
        "item": {
          "id": "b9b019c7-2acf-4535-8422-724c7f183059",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c81e07c8-cefe-40a4-a243-76ec53c9b297",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "d314f9c5-a04c-4111-a8db-74013fee099e",
        "cursor": {
          "ref": "9d1afdce-0597-4214-a69e-467886339f5a",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5c2f89c7-3290-4d8a-823c-8a6d204134c3"
        },
        "item": {
          "id": "d314f9c5-a04c-4111-a8db-74013fee099e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ad0c3b58-1037-40af-b6fd-54c5873f7d31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "84adf214-ee03-49b4-8e68-93b6b7838158",
        "cursor": {
          "ref": "78b205d2-44da-4a01-9d5e-b1b909885c83",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c86898ca-04e0-47e3-ba57-0337a013b109"
        },
        "item": {
          "id": "84adf214-ee03-49b4-8e68-93b6b7838158",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e70a33f5-d233-4b75-985d-7006dbf469d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "708c460d-fb5e-4cb3-87d2-bee8bb8672a7",
        "cursor": {
          "ref": "ed98541c-7158-476c-b848-b0c7b8c48cbf",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "011e553a-1873-4309-a0a9-4417d6b308a3"
        },
        "item": {
          "id": "708c460d-fb5e-4cb3-87d2-bee8bb8672a7",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "25b34543-b290-4b42-8e8f-d8ea523eb432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "55f2bfa9-ce30-45d2-bcc8-5fb13f7255fa",
        "cursor": {
          "ref": "ee5821ac-7e2d-401d-b4ea-7840d2172b18",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "cd5c38cc-5ab7-492f-a62c-5e9bef45aa59"
        },
        "item": {
          "id": "55f2bfa9-ce30-45d2-bcc8-5fb13f7255fa",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5d104a7e-254d-4e8b-b699-b6f751e6d7bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "cb0a7e65-77ca-4a85-b7e3-963e20ceaf00",
        "cursor": {
          "ref": "b99cde10-cd8c-4346-9818-7f2bfb1b4236",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a9ab6ddf-4bc6-4a74-afde-b62b86dce98a"
        },
        "item": {
          "id": "cb0a7e65-77ca-4a85-b7e3-963e20ceaf00",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c805e5c4-d2df-4014-bf33-e550f64e5521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "57cc6fe8-f1d6-4e77-9c1a-13306467ab6c",
        "cursor": {
          "ref": "a93d4aeb-76c2-4a16-a869-b2c36c060b92",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "54cd7e30-e35b-44ca-a1e0-a6b5155fb56a"
        },
        "item": {
          "id": "57cc6fe8-f1d6-4e77-9c1a-13306467ab6c",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "c18bd382-ca65-4fb2-ac96-b69563eb2d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "157d9f5e-1bfd-4af2-9ed6-cd83d5095cbc",
        "cursor": {
          "ref": "9b92047a-dced-4724-97fa-d7275dda9f53",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "870dfc6e-f79a-4543-971d-b690f0169170"
        },
        "item": {
          "id": "157d9f5e-1bfd-4af2-9ed6-cd83d5095cbc",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "9e834eef-76f9-48f9-84a9-ea5dbe4e1b7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "a8e14c40-a2e4-42ca-982e-2d29aaac502a",
        "cursor": {
          "ref": "60a70416-d2ad-4f4f-a387-d3213bfbf68a",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b0848c76-4730-4d40-bdae-0993b751b087"
        },
        "item": {
          "id": "a8e14c40-a2e4-42ca-982e-2d29aaac502a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a94165e3-c042-4309-ba16-9e7a1c5036ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "ac9e8dea-b55b-44c5-9207-cbb7623f62cf",
        "cursor": {
          "ref": "9ab4096b-0717-4016-8e7d-14ed5ceac94f",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "31f46b74-22ca-4046-80fd-ecfb7230559a"
        },
        "item": {
          "id": "ac9e8dea-b55b-44c5-9207-cbb7623f62cf",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "70967b6a-58fe-470a-b2d9-1593ecc92643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "226f5ed8-081d-42fa-af2a-3d15d3aeffd0",
        "cursor": {
          "ref": "bc8d6490-b033-4fcc-a77b-db3c77292ac9",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0d0b25ee-755b-4e01-98d8-81bf701be6d4"
        },
        "item": {
          "id": "226f5ed8-081d-42fa-af2a-3d15d3aeffd0",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "9c9b8448-cb39-476f-9338-421f3b5c25af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "b5dfec2f-efc3-454d-aaa6-0f4e3a21e07b",
        "cursor": {
          "ref": "4abc82b9-c28b-4abb-a374-3f42a1cb6082",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "caba1c20-2feb-4adc-9bbc-4a3ba8187a0d"
        },
        "item": {
          "id": "b5dfec2f-efc3-454d-aaa6-0f4e3a21e07b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "71a93f7f-91e4-43ae-bbc0-2e9eeab3895b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "d4084627-ea64-4d3a-a35d-d2144e528d4e",
        "cursor": {
          "ref": "02e23f01-6f28-450f-aa82-6671d93ed763",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "e99dddcf-9d1f-488e-948c-95a2c96c07e1"
        },
        "item": {
          "id": "d4084627-ea64-4d3a-a35d-d2144e528d4e",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7dddcc2d-a605-496e-a924-17b01bb74bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "c98a094f-4b61-4186-805b-6f0b8ee87ab9",
        "cursor": {
          "ref": "86846867-743d-459a-ae74-175c48ec9fbb",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "b0a7771b-e633-4d11-84fe-e7f0f8c258ce"
        },
        "item": {
          "id": "c98a094f-4b61-4186-805b-6f0b8ee87ab9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ee67f270-4476-4a54-900e-f548df58acb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "0b594a49-7087-4b69-839f-ae6dfbef28d0",
        "cursor": {
          "ref": "8168688f-4542-48cf-a86d-2f56dce9b663",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "67959a21-7fd6-490c-a9e0-8823093e9286"
        },
        "item": {
          "id": "0b594a49-7087-4b69-839f-ae6dfbef28d0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e72c9973-a9fa-4a46-bcd9-3389cc511277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "5be89648-ec61-4a55-8cb1-6135520fbad1",
        "cursor": {
          "ref": "fdc3fa1c-91c8-4df6-b72e-f4eb0d4d7e6e",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "909e2dd2-78d9-4e81-8759-99a71a3d8ce6"
        },
        "item": {
          "id": "5be89648-ec61-4a55-8cb1-6135520fbad1",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7ad845c3-a05e-49f2-aca0-c9680e492694",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "b9761446-a486-4eb1-a742-8bbe2bd40cb2",
        "cursor": {
          "ref": "8dc4b1f2-6ebe-4267-bb7e-c2b30a5e689f",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "f83cdadd-b6ff-4f33-85ac-2f57096f5a3e"
        },
        "item": {
          "id": "b9761446-a486-4eb1-a742-8bbe2bd40cb2",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "7dbfbcf3-04d7-4e53-953e-aa56885f782f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "22f36377-db22-49ad-b6b5-4fc4f30f1c77",
        "cursor": {
          "ref": "aa41b114-9a82-4347-a98c-9f0c918270f2",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "aa9e1253-5b26-4a0c-908f-816cec5eb1b7"
        },
        "item": {
          "id": "22f36377-db22-49ad-b6b5-4fc4f30f1c77",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d71ae357-04fb-498a-9376-fb9970d446bf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 69,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a787f558-1e09-4fba-80f1-84ad6511d182",
        "cursor": {
          "ref": "60383c8a-b2ba-445c-8113-204b665ce5f4",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f95603e4-d00f-4cb4-8b64-5568bb5409df"
        },
        "item": {
          "id": "a787f558-1e09-4fba-80f1-84ad6511d182",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "eab3c535-4b98-4828-a0de-b885ab3715cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "d01889c5-5b0e-45e7-8e62-b9947789c630",
        "cursor": {
          "ref": "91867043-1b0e-4b8b-b40a-5a641510040f",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "681cdb68-2c1f-47a2-a6b6-e904983c7e85"
        },
        "item": {
          "id": "d01889c5-5b0e-45e7-8e62-b9947789c630",
          "name": "credentials_issue"
        },
        "response": {
          "id": "4ca2c56a-9139-4a1e-b354-ee90f9809719",
          "status": "Created",
          "code": 201,
          "responseTime": 364,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "a36b250a-a0ec-483d-956c-5a008b715f3c",
        "cursor": {
          "ref": "9c7f7705-4846-4843-acad-8a064a0399f7",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "5a465701-513a-459a-844f-7701d07fc11f"
        },
        "item": {
          "id": "a36b250a-a0ec-483d-956c-5a008b715f3c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "4801ef47-7c79-4a3c-987f-15cee054d3a9",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b909b312-7ec0-4351-b01b-c56221f30860",
        "cursor": {
          "ref": "faee44e6-1a91-44fc-80a1-3ad6e7959436",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "9b0ad1fb-131d-48cd-9cc0-c13b9cc49644"
        },
        "item": {
          "id": "b909b312-7ec0-4351-b01b-c56221f30860",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a583ba4a-c858-4b8b-b588-13f622cbaf26",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "449865b6-5050-49f9-956a-61830105a41a",
        "cursor": {
          "ref": "6c0677bd-2779-4615-9b87-34cca01b9d67",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "026ca641-d045-4821-adc1-1549a15c0060"
        },
        "item": {
          "id": "449865b6-5050-49f9-956a-61830105a41a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d7188f32-88d5-4e73-9f90-0a01199550e0",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2bef464-69de-43ef-aed4-005308f6e203",
        "cursor": {
          "ref": "97f9e453-98d3-4122-97ff-149323df0bd4",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1a3278aa-47a6-4030-a91d-6a031a88979d"
        },
        "item": {
          "id": "c2bef464-69de-43ef-aed4-005308f6e203",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d67f5492-3787-43cc-a68c-d2a5e78de264",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-08-10T00:40:46.449Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-08-10T00:40:46.449Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "b33c12ec-4d13-4743-aa3b-b1bf091d38ae",
        "cursor": {
          "ref": "de66c79e-fcae-4bf8-9e3f-d6c7d9346ccf",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "db31cfc1-1fc4-46c8-98fc-a7eb04b030aa"
        },
        "item": {
          "id": "b33c12ec-4d13-4743-aa3b-b1bf091d38ae",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "34267e71-e4e9-4116-9dd5-d4329d3bcdcf",
          "status": "Created",
          "code": 201,
          "responseTime": 413,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7874c649-3e30-4fb6-8ac5-ea1c0370316c",
        "cursor": {
          "ref": "2d7121fc-054d-4c9a-b7ec-3f710a74897e",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "15866dbc-8d4f-4b75-82fd-5ce34633d3d6"
        },
        "item": {
          "id": "7874c649-3e30-4fb6-8ac5-ea1c0370316c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d1c2ed2e-a15f-4f30-9959-e8ce731ac958",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "9e6bc208-27c2-4358-91a3-fdafdb7c3d26",
        "cursor": {
          "ref": "1545904a-c3bc-4bef-b9c8-4741c9da5434",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "01a7b889-7a42-4b4d-b580-97f9d7b091b3"
        },
        "item": {
          "id": "9e6bc208-27c2-4358-91a3-fdafdb7c3d26",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "4f777642-3a5e-42f9-888c-f5058d7c7bc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "70c6dcfc-f466-44e2-8040-28d187d09e3c",
        "cursor": {
          "ref": "e2fa174a-fba9-494b-bbda-e0de304d7b75",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "02d80b05-b8fd-43a4-8587-13ccfc4b4c80"
        },
        "item": {
          "id": "70c6dcfc-f466-44e2-8040-28d187d09e3c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c2502540-4aa9-4f15-9bc0-9bc7fac05c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "7f50dbfb-9dd5-4018-b5ca-b0c1b8df2360",
        "cursor": {
          "ref": "e8fd79e9-8caa-499f-937e-780d42b6abd4",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "aea1eabe-829e-4a6b-bacb-c1ca77e95494"
        },
        "item": {
          "id": "7f50dbfb-9dd5-4018-b5ca-b0c1b8df2360",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "87edf3c2-b4ae-48d1-bf0d-a7a06ea4d927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "81f01196-e404-402d-a830-147d756c9000",
        "cursor": {
          "ref": "fd353ad0-4009-4689-bd08-8ce789392629",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "08649ccc-5c84-42bc-a757-89a71a43f61b"
        },
        "item": {
          "id": "81f01196-e404-402d-a830-147d756c9000",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "115450bb-0ee4-4ad9-93fe-cdb56ffeb4fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "83515abb-3c31-41a3-b3dc-a64794d8438d",
        "cursor": {
          "ref": "c6bc57bd-3d20-48c6-b8ee-1b0d0ac1ff2d",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1a81f157-a539-470b-b406-857b4c9473ef"
        },
        "item": {
          "id": "83515abb-3c31-41a3-b3dc-a64794d8438d",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "9dde9150-8719-4c1b-bf42-30384d35d324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "f3dc1039-9da4-496c-bec4-f9118d476eaa",
        "cursor": {
          "ref": "86cdf0b4-8fa7-4d2b-a2c0-0bd77785f78b",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "dad7c39e-c4a8-4534-9a22-0b9438285384"
        },
        "item": {
          "id": "f3dc1039-9da4-496c-bec4-f9118d476eaa",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "563fdcd6-cd16-48dc-a9c3-e856535013de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "ad5127a8-209b-41dc-b06d-ec6c8ced07df",
        "cursor": {
          "ref": "3f7060a0-e74f-4c62-81a6-c6ca1d188d2c",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "00d7910d-f98c-44b2-9f6c-10a97cb54ac2"
        },
        "item": {
          "id": "ad5127a8-209b-41dc-b06d-ec6c8ced07df",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "ce0a3666-ec6a-4c01-8124-c210c08ce5a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "6533fdab-a0ac-4b4c-9bba-edeae0753f30",
        "cursor": {
          "ref": "9d714989-5443-48b7-9fab-40fe53a6ccb3",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "bd8a02e4-3fa2-479a-a501-3258ce36552d"
        },
        "item": {
          "id": "6533fdab-a0ac-4b4c-9bba-edeae0753f30",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "40287477-4853-44d1-be87-049671ecbd82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "729e2e71-5c53-4052-a592-a75ee445a480",
        "cursor": {
          "ref": "cf609742-6dfe-4580-83a0-5de0d0e476c8",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "90f3d809-defa-4804-b919-0c9263a35c34"
        },
        "item": {
          "id": "729e2e71-5c53-4052-a592-a75ee445a480",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e3882166-320d-4ab0-b123-c81185df38e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "3e621c03-758f-40ec-8374-f5e8ed9872f3",
        "cursor": {
          "ref": "c7e35659-3ae7-489c-a2c2-22723dfbf11c",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "10f357b4-d9f3-481d-806d-175797e90b82"
        },
        "item": {
          "id": "3e621c03-758f-40ec-8374-f5e8ed9872f3",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6954eda1-282c-43e5-b6c9-df89f96cd553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "5ec97479-b69f-4d3b-995b-41049912b626",
        "cursor": {
          "ref": "c91bee9e-6b52-4ab4-bec9-f870d8bb4658",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "57cae940-c3d5-4e15-8639-160faa6018ce"
        },
        "item": {
          "id": "5ec97479-b69f-4d3b-995b-41049912b626",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0355025d-b1eb-43b9-a2c0-3c4b1b4fe361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "5a905835-e300-4290-aff7-b8118436222b",
        "cursor": {
          "ref": "8df097e1-2bee-471a-877b-7067ddb8366c",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "ce192a52-ff86-4881-a205-e4c1693823cf"
        },
        "item": {
          "id": "5a905835-e300-4290-aff7-b8118436222b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7449aea5-2610-4a6e-b0ef-7bb319783dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "9e174408-6fa6-4724-a7a1-811d92d91dbb",
        "cursor": {
          "ref": "7d47c95c-3211-4ab5-b9a6-a3a3fcb87e0d",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c5edbcf0-304c-4c5f-8086-08c24bea737f"
        },
        "item": {
          "id": "9e174408-6fa6-4724-a7a1-811d92d91dbb",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2f9f363b-1344-48fe-a41f-522a5fad7777",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "2adcf5e6-f0e1-417e-bac8-ae5a91a46b15",
        "cursor": {
          "ref": "ce427242-35dd-4c2f-82a1-4aa9fb38a577",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "695e3bd2-7c52-4029-adc0-dacb2ebfe436"
        },
        "item": {
          "id": "2adcf5e6-f0e1-417e-bac8-ae5a91a46b15",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e9d55478-5042-40c5-8b8d-81691ca030c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "7f7002e3-6eec-4dab-97ee-0d7a77e2b0b3",
        "cursor": {
          "ref": "f215a9a9-646d-48ec-b9a8-fdfb08b332d5",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "97fc6110-3c6c-41fc-838f-4192d35c83f6"
        },
        "item": {
          "id": "7f7002e3-6eec-4dab-97ee-0d7a77e2b0b3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0df44218-419b-472c-8aa9-f58a7239d11a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "c93a3a10-f6ab-4faa-b2e2-229829e56afd",
        "cursor": {
          "ref": "7dc2a29c-f20f-465c-a9b1-44b257dc3b04",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "88d8ecff-803b-4c71-86b8-c0c3007e82a8"
        },
        "item": {
          "id": "c93a3a10-f6ab-4faa-b2e2-229829e56afd",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c87f481b-9b1c-4a07-ab42-bde5f9db61a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "45d6c73d-3ea8-4194-a894-c41c60e4b661",
        "cursor": {
          "ref": "594e7264-2d17-4702-9847-57953a3f344f",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "0e5fab31-2f5c-430f-ab34-df5d2cd9da8a"
        },
        "item": {
          "id": "45d6c73d-3ea8-4194-a894-c41c60e4b661",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "af8d4b49-abb5-416c-93f5-6d3e358490ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "b6124317-d111-44fe-8aaa-98edfa0c1d0a",
        "cursor": {
          "ref": "44ac2614-8051-489f-8e89-6b6e871f4911",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "24eaecb9-0bc3-464d-8edb-4c54928c279b"
        },
        "item": {
          "id": "b6124317-d111-44fe-8aaa-98edfa0c1d0a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "689b225b-6a28-4ca3-a33a-241c4014aa49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "3023648f-e19e-4db9-ad69-605f7a159dfc",
        "cursor": {
          "ref": "dee90a13-105e-4004-85a9-9af46e10dfaa",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "5603974d-764f-47a0-b597-0f41eaa4a5c3"
        },
        "item": {
          "id": "3023648f-e19e-4db9-ad69-605f7a159dfc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e38c4182-cc15-4a35-a6a1-61405df23ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "6cf87fb3-2129-46a7-bcd3-dcc6f0d394b3",
        "cursor": {
          "ref": "758f841f-f4aa-4e04-9bd7-bf267d50b70c",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "314f39eb-8e69-4af7-a7fc-d140a9dbbae0"
        },
        "item": {
          "id": "6cf87fb3-2129-46a7-bcd3-dcc6f0d394b3",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ff804c24-695a-459e-b5e9-2af4312ba4a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "a1961a9b-3175-4aa1-a030-26e6cab3d657",
        "cursor": {
          "ref": "dc59f12d-4002-4c6a-ad84-8517e8a7eb12",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "cbeaf9fc-6b4c-4955-92d3-a8bbb0aa573b"
        },
        "item": {
          "id": "a1961a9b-3175-4aa1-a030-26e6cab3d657",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "52f3bf6e-a1fa-4e90-a379-6ed7740dc84b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "84642a59-4ddd-47ed-89b7-a7588bb7a08d",
        "cursor": {
          "ref": "95069bf3-6167-4f6d-90f9-48fab20d0fca",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1d613582-0fe4-427d-927b-be678602cbde"
        },
        "item": {
          "id": "84642a59-4ddd-47ed-89b7-a7588bb7a08d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5dea2c77-28e7-4943-bf34-e1c144c80395",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "48bc3c2c-b306-4d99-8231-a610827ac54e",
        "cursor": {
          "ref": "c3f15cdb-ff8d-44f0-aa7b-5f785c6bcedb",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0b2bece1-ea6e-4acd-8ad8-c4cc13d19ac7"
        },
        "item": {
          "id": "48bc3c2c-b306-4d99-8231-a610827ac54e",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ca9dc035-b3a5-4a97-afc1-09cc2d3b638f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "4c44dfcc-43c5-4998-ab6c-9c9a103524c2",
        "cursor": {
          "ref": "6ae65066-bbd4-409b-9404-d8f7d946a39f",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "02bea473-0b25-412b-b4e5-02c956de1cfb"
        },
        "item": {
          "id": "4c44dfcc-43c5-4998-ab6c-9c9a103524c2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9d9efd06-1174-40c4-9924-35b57997193a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "0c818bb5-8388-4aee-9536-7721f9ce55c2",
        "cursor": {
          "ref": "09d69b9a-b270-4c75-91d8-9baf01ef4cd1",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "52f7ecec-d852-46a9-ae3e-834c6b88c9b9"
        },
        "item": {
          "id": "0c818bb5-8388-4aee-9536-7721f9ce55c2",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ef4f6c31-c352-401e-9305-c89f9a87aa94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "fdc80722-3e7e-4eda-86c8-cacb8a1fee5c",
        "cursor": {
          "ref": "79d220df-5f18-48c6-9c3e-2de1bafc99a7",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "201c0469-cb67-448b-a099-c39c661ba9b7"
        },
        "item": {
          "id": "fdc80722-3e7e-4eda-86c8-cacb8a1fee5c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f1089c6b-923c-4fc2-b074-e550b263022a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 142,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "52036f70-a885-45f5-92c7-527a7c97d464",
        "cursor": {
          "ref": "855198fe-1b40-44f9-a28c-9942d55f4cfc",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a21b5219-113d-47e6-8daf-ddd53e924a35"
        },
        "item": {
          "id": "52036f70-a885-45f5-92c7-527a7c97d464",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a9ae81d5-4c51-4853-a221-2012cadd343b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "18d95ac7-150e-4502-8b54-d635fa0155f9",
        "cursor": {
          "ref": "f7e29305-d1f4-4641-8e64-7d176b7b7868",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "8443aefa-782b-4a29-b0ce-e0fc636d9780"
        },
        "item": {
          "id": "18d95ac7-150e-4502-8b54-d635fa0155f9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "0002b624-a106-4d8f-bdb4-c1c0b46ee346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "78f25b3b-8cc2-4c25-ac06-5325fa0f031e",
        "cursor": {
          "ref": "84a7ccb8-4573-4bf6-9b6d-c3c1155206b0",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "61569370-c2d9-4ce9-9153-1c6cae55743c"
        },
        "item": {
          "id": "78f25b3b-8cc2-4c25-ac06-5325fa0f031e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c9c5631a-3378-4981-8773-36f952664a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "4794dd36-f4a5-4530-8830-585d582963d6",
        "cursor": {
          "ref": "209f07c3-87f1-48b3-bcbf-8d20209592da",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "cb713a89-c551-4fe0-a5d7-07fe356d0c3d"
        },
        "item": {
          "id": "4794dd36-f4a5-4530-8830-585d582963d6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7fd0d63c-5a62-411b-a691-6e0f584136b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "cd4b6a31-58c4-4982-b540-88083240f12e",
        "cursor": {
          "ref": "6b3105c0-f0f0-4228-ad1d-d112d4ddf703",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a6f62b8d-71ab-4061-94aa-4cf6fad936ee"
        },
        "item": {
          "id": "cd4b6a31-58c4-4982-b540-88083240f12e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "d63c3df6-b9c9-4e78-865c-c75fd2cf2a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "09f2b175-2969-4f00-807b-0695a829a16c",
        "cursor": {
          "ref": "f72de7e5-022c-4adc-91b2-cf52e4237111",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "843f2561-06b7-4d89-8cd8-8ff2beac11ed"
        },
        "item": {
          "id": "09f2b175-2969-4f00-807b-0695a829a16c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "99f6c1bd-f020-4fa9-a2a1-dfe0deccd9d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "1b9a6130-e0b3-4047-9d95-055d9addd46d",
        "cursor": {
          "ref": "317db698-e516-4cec-9018-d375c4e59fcf",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "40adaa64-88a8-4355-9ed6-d6109f93a43f"
        },
        "item": {
          "id": "1b9a6130-e0b3-4047-9d95-055d9addd46d",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "65b2d75d-2ae5-4d29-8890-566546277f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "aa5d5469-52f2-453e-9cd9-60e125f72766",
        "cursor": {
          "ref": "a97d33c4-8a1e-4ea2-b2b6-f6c99e637d3e",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "f6483c09-8762-49db-8c89-1e3a0cfee921"
        },
        "item": {
          "id": "aa5d5469-52f2-453e-9cd9-60e125f72766",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5914cab5-e728-4bb9-84e9-2f20656efcc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "bc43316a-9114-4267-86d7-89305407626d",
        "cursor": {
          "ref": "1e419ccd-9d0b-40c2-9b58-f2fa4d21e905",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c0e42266-fa51-47a6-b2fb-8a30fae90d90"
        },
        "item": {
          "id": "bc43316a-9114-4267-86d7-89305407626d",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "fdeed1b9-f4f4-4ed2-8c06-263c3ccf19a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "c3baa9ca-5713-4d43-a32e-eb91be2ff6be",
        "cursor": {
          "ref": "47fbcb5c-1c9c-4154-a4a3-304e52e57c6b",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a0a02b2f-609b-489b-b544-027cd340da95"
        },
        "item": {
          "id": "c3baa9ca-5713-4d43-a32e-eb91be2ff6be",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "3391a302-c95f-4bf1-b0c4-f0e0db3646da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "075ac692-45fc-45e4-abd0-215f59c2a3b8",
        "cursor": {
          "ref": "89ca2238-5dd8-4dd4-a32c-6898baed794a",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "569a3dc5-3716-42d4-bc67-2d6bf80f01f2"
        },
        "item": {
          "id": "075ac692-45fc-45e4-abd0-215f59c2a3b8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c06ed24d-1d42-49f0-bc33-d829e50d3bb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 67,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5b980c2-5f9b-4f64-8c4f-d2edbd955d4e",
        "cursor": {
          "ref": "59f1e087-9282-4d35-a6a9-63ce2713f1cb",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "7cf2c8f0-45ff-46f5-9db9-230cf69382b6"
        },
        "item": {
          "id": "e5b980c2-5f9b-4f64-8c4f-d2edbd955d4e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0e807307-cbf9-491e-8aea-2cb85c3de325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "3677533a-ae67-46dc-9e90-8ffec2f1fbcf",
        "cursor": {
          "ref": "44528720-af13-4bcb-b247-39391f9d551c",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a5e4137f-02ea-46b0-a10f-f62fe504421d"
        },
        "item": {
          "id": "3677533a-ae67-46dc-9e90-8ffec2f1fbcf",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "9e979b09-101e-4797-b8b8-66bbe99e110a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "5e60ec0a-a7bb-47fd-a9b6-fb7117773ee5",
        "cursor": {
          "ref": "2cedb0f1-5ca2-4cf6-b08e-a4b8368688d1",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "86693958-3ba5-4d2e-956b-bb514cfa52db"
        },
        "item": {
          "id": "5e60ec0a-a7bb-47fd-a9b6-fb7117773ee5",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d2dc3ae3-bad6-4e6a-b9fc-340282209f64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "376a5ab7-98c2-407b-afb4-37c91ca6ddea",
        "cursor": {
          "ref": "0e64a522-eb01-4daa-b5e2-e4856aee3ef8",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0418d210-4e0c-44c0-8d66-b341a0f8fd22"
        },
        "item": {
          "id": "376a5ab7-98c2-407b-afb4-37c91ca6ddea",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "49c7c2c5-b241-4318-ae45-7c71347c9aad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "083d073b-7743-4616-994c-f87d258ef874",
        "cursor": {
          "ref": "ef6ad9ee-975a-43b9-a555-2bcc1b1a780b",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "3a033457-a9a4-44cb-b6c6-74db20e55201"
        },
        "item": {
          "id": "083d073b-7743-4616-994c-f87d258ef874",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1aa3810d-fe37-4714-81ba-d42721c9b103",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "e24d64d7-d2be-46a2-9a37-7cba13d02e43",
        "cursor": {
          "ref": "8d2c19cf-f77a-4818-9214-d8c4acf80dd9",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a1ae3bae-69b7-441e-a227-839d95e3d17b"
        },
        "item": {
          "id": "e24d64d7-d2be-46a2-9a37-7cba13d02e43",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "b7736c25-56b2-43ec-8545-9447c8a2b11e",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "da776281-250a-4706-ae64-284c9027bab8",
        "cursor": {
          "ref": "6549f75c-44b8-48ec-9d69-5561ace48aae",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "8d75975e-3f97-41a7-ac99-7cd539f78e37"
        },
        "item": {
          "id": "da776281-250a-4706-ae64-284c9027bab8",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e3f43a09-ded3-471e-8154-ccab5acc221f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "20e7a484-e744-4fcc-a648-07c0abaf03cb",
        "cursor": {
          "ref": "2bd8f6e0-bfc9-4dfa-b561-9e07cb60df99",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "e9a3b8c7-64c6-4b64-8d81-c23051ada4c3"
        },
        "item": {
          "id": "20e7a484-e744-4fcc-a648-07c0abaf03cb",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "6efa14ac-4973-47cf-92d9-1e521450a51d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "bab7eb13-632c-4fb4-986b-7adee4b7ce15",
        "cursor": {
          "ref": "0054f5a8-0520-4220-962b-196648b79883",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "afc6c346-8549-4a83-876b-2cb97e62c280"
        },
        "item": {
          "id": "bab7eb13-632c-4fb4-986b-7adee4b7ce15",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cbe451b8-db73-464e-ae52-81207dbb5709",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "f516613c-36e5-4270-8cbf-c9dfaa9e8607",
        "cursor": {
          "ref": "d5e8550d-197a-4d87-9607-fa7d82cb8371",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "b30c425d-e04b-41a0-88cd-bd5591870d61"
        },
        "item": {
          "id": "f516613c-36e5-4270-8cbf-c9dfaa9e8607",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "32ef37fd-9e0c-4fae-9228-bba5d989209b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "1b54a4b5-bbdf-46d4-a6d0-fdcd0de62d36",
        "cursor": {
          "ref": "e5eb9eab-d5ce-466d-a789-00ce45dffa59",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "8de99c49-b166-4593-9d20-de2ff59929f9"
        },
        "item": {
          "id": "1b54a4b5-bbdf-46d4-a6d0-fdcd0de62d36",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "170c41cc-4719-42f9-a56d-57e475d565bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "c565fbe6-dbdd-4eea-9596-6877c6db22d5",
        "cursor": {
          "ref": "f5ce3978-f50e-49b5-bc69-86131a3fb939",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "27735166-393c-4fd9-8343-6ff6b73a8ea0"
        },
        "item": {
          "id": "c565fbe6-dbdd-4eea-9596-6877c6db22d5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "378059c8-26dd-4d59-97fb-6ea0cf4b0251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "b5934c6c-a217-43f6-86b3-08a0534f707a",
        "cursor": {
          "ref": "d8d9ca5f-7fcc-47fb-8cb7-ae17b5be480b",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "62d289d0-ed66-4a44-92ec-b6a62af2b7a9"
        },
        "item": {
          "id": "b5934c6c-a217-43f6-86b3-08a0534f707a",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "30cf24c1-334d-44c3-bc47-9b096f54b878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "6368d67a-1a48-4334-a35a-60be20d9cb7a",
        "cursor": {
          "ref": "c7268571-9230-41ee-88dc-bd14b08d2cac",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a2207312-02b5-43ee-b48a-a529c0667d3a"
        },
        "item": {
          "id": "6368d67a-1a48-4334-a35a-60be20d9cb7a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "76f4c2a2-ec7f-433a-adee-243ada71f8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "81e60eda-e3bc-45ce-873d-72245663262b",
        "cursor": {
          "ref": "7897843c-72f2-4992-856c-a397cc8cb7fe",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fbecdb5f-9c5a-419a-8551-d79b1fc8102a"
        },
        "item": {
          "id": "81e60eda-e3bc-45ce-873d-72245663262b",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "816f5d0e-4195-42e1-aa4c-a4f69c5705d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "a097cc39-5c68-474e-a5dd-6f688733bfeb",
        "cursor": {
          "ref": "98e82f04-c421-4e4b-ac49-e178b20c63ea",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "07f011b3-15a7-477f-9ec7-71c09c980265"
        },
        "item": {
          "id": "a097cc39-5c68-474e-a5dd-6f688733bfeb",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d1caeb1e-1597-41fd-b8c2-f0e2eab54c6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "f741d7d6-d82d-429c-b9b0-c7562dd5b621",
        "cursor": {
          "ref": "e64876f9-bed2-4515-af5a-fb96cecb2ab9",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f4de1600-5d76-440e-82b1-ee5e3036db20"
        },
        "item": {
          "id": "f741d7d6-d82d-429c-b9b0-c7562dd5b621",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "870896e9-7b42-4d51-b9da-c71eb17f1d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "270a035c-9667-48f0-913d-f64424c632a2",
        "cursor": {
          "ref": "22d71228-922e-4c61-a9ae-ecca9e5af4a5",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d2804dc6-a77a-4079-bc13-8423a065af49"
        },
        "item": {
          "id": "270a035c-9667-48f0-913d-f64424c632a2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "43bad75e-73e3-47d5-bdd1-768eadc0e39f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "595036e9-55e9-4aec-8c98-dfe8a6c3021e",
        "cursor": {
          "ref": "29b74c28-7340-4dc1-bd3a-265e23c51ddb",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "83e8c9ac-fd8e-436d-836e-ed95ddd7e09e"
        },
        "item": {
          "id": "595036e9-55e9-4aec-8c98-dfe8a6c3021e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "f8833e96-fcd7-4a05-82e8-c4def328f15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "c60e7933-5a87-4773-a018-7f175b29e79f",
        "cursor": {
          "ref": "2648f1b9-a0c3-4e01-8253-2433859691c4",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "aaddbed9-43fd-4c28-8e74-06b0768cd227"
        },
        "item": {
          "id": "c60e7933-5a87-4773-a018-7f175b29e79f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d01bbc34-e581-4487-b19d-16881231ccaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "7c514b5f-203f-4818-8cb8-c0099936834e",
        "cursor": {
          "ref": "375a7e4e-29d1-4beb-b597-49b72fdee50a",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3c03417c-f1a3-4f76-82e5-54167c93edc3"
        },
        "item": {
          "id": "7c514b5f-203f-4818-8cb8-c0099936834e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "a74950a7-5aad-48a6-83ce-9054b472dce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "733dfec9-bac0-4a85-a88e-962529c8fb3f",
        "cursor": {
          "ref": "a14952f0-eeb3-4796-b59d-df2c4496b64b",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "561ee73b-1226-46a1-9964-046b8db4b0fd"
        },
        "item": {
          "id": "733dfec9-bac0-4a85-a88e-962529c8fb3f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8efc9095-11e0-4cbd-aee4-a4b3a320d650",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "c339e3c5-0089-45b8-a78f-add8b80d1869",
        "cursor": {
          "ref": "c72240ee-e481-4e71-8dda-76221862324d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4caac02c-764f-4cff-979f-9b30d43c043c"
        },
        "item": {
          "id": "c339e3c5-0089-45b8-a78f-add8b80d1869",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8c3391f0-99c9-4b75-befd-4705f29e3d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "60689741-82c3-40b5-9451-8e2f01699dca",
        "cursor": {
          "ref": "825374af-3d65-4a03-9f2c-85bb88c244d3",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5c088b61-808c-49f0-864a-7c1d273068fe"
        },
        "item": {
          "id": "60689741-82c3-40b5-9451-8e2f01699dca",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ec8e2bdb-0018-4517-9511-70db60273081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "0b9bf9f8-f5e9-46a7-ad39-c952748147e8",
        "cursor": {
          "ref": "2e613073-96dc-48f5-8052-1c9434256b58",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d358c150-16e6-4353-be77-f111ffa4b86f"
        },
        "item": {
          "id": "0b9bf9f8-f5e9-46a7-ad39-c952748147e8",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "165be3da-86e9-4754-b6d2-800f19a1aa5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "452472ca-7122-40cf-a3fe-9a8fd55075dc",
        "cursor": {
          "ref": "f5cf50a2-a5be-4bda-9f35-72f87bec9eaf",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "666f1040-71ac-48e5-9516-498f6a4847ed"
        },
        "item": {
          "id": "452472ca-7122-40cf-a3fe-9a8fd55075dc",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "6b639100-de2e-4cd0-952b-54b1aa34988e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "e7e21475-d0de-4673-9bd2-57705c58293a",
        "cursor": {
          "ref": "7fb2eb58-ad31-474e-b947-e8471514091b",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c70112e0-e5ec-4366-bbb4-d66f24024f4c"
        },
        "item": {
          "id": "e7e21475-d0de-4673-9bd2-57705c58293a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "82f7d7a0-0c03-4d19-97e8-736d7bccbbda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "471cfc03-d197-4214-8947-d88719965c92",
        "cursor": {
          "ref": "cea65472-e3d4-4be8-99f6-391313dab285",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "fb200b42-d374-4186-a551-3ff498bebeb1"
        },
        "item": {
          "id": "471cfc03-d197-4214-8947-d88719965c92",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "bd929c02-9b1e-4503-8435-a09b02f8803c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "cdd4db61-79f0-4441-9eed-80c4df7584d0",
        "cursor": {
          "ref": "ecaa30d9-fee5-42fc-9dfa-63815b570026",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "de2bb7fd-a026-435c-a26a-fddb95ebd33d"
        },
        "item": {
          "id": "cdd4db61-79f0-4441-9eed-80c4df7584d0",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "58c2f939-b9e4-432f-9054-7018fc3ea0d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "c5133289-098e-4975-a31f-a789c4e18649",
        "cursor": {
          "ref": "d5c4ccbf-5f9f-4beb-b32e-1207d497b592",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "6aea79bb-eadf-4056-83c6-e8bb799cbf9d"
        },
        "item": {
          "id": "c5133289-098e-4975-a31f-a789c4e18649",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "a5b182bf-36cd-4b21-9443-0eddadcdbb37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "7c4b33ff-d8eb-40a1-839c-27f4eb02fae8",
        "cursor": {
          "ref": "96870732-18f0-40cc-8aea-69dde337d440",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "29d538d9-fd56-4009-9618-4a82a3f5b5b5"
        },
        "item": {
          "id": "7c4b33ff-d8eb-40a1-839c-27f4eb02fae8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "907d2306-5e2f-41e0-9bc3-ce4c65d7b13c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "07374220-8716-4fa1-9c70-1aec71af9337",
        "cursor": {
          "ref": "accd187a-6c32-42a0-bbf4-30164dcc8150",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "95f419ea-f596-4daf-9ff4-281c91dbe120"
        },
        "item": {
          "id": "07374220-8716-4fa1-9c70-1aec71af9337",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "52ba4d01-136a-4cdb-a834-a778f2e2919e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "34b1316e-1ff7-4311-a574-0e85e9ee4a4e",
        "cursor": {
          "ref": "8a8e7bcf-155b-4345-ac42-cabeebef18db",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9be576f6-9fdc-49e1-961d-e2fecc6b158d"
        },
        "item": {
          "id": "34b1316e-1ff7-4311-a574-0e85e9ee4a4e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f270fef6-3f64-4a55-8d16-7ad098dfd651",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "e7d3677b-da86-4111-9211-9ea88672a8c8",
        "cursor": {
          "ref": "54dbfa4e-0606-4857-9323-c9f167e9f8d7",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "eb6f4857-aa6b-45e9-ab16-434d93518b89"
        },
        "item": {
          "id": "e7d3677b-da86-4111-9211-9ea88672a8c8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "342ef5ef-a014-4e44-9668-1d7cda2e0867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "064790fc-a98c-45ba-817a-d3cad25a7e8b",
        "cursor": {
          "ref": "b03e95ac-8e46-4ade-ba99-eca2ea1f7083",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9397b8cb-ae5a-4695-9e65-997b80f69eeb"
        },
        "item": {
          "id": "064790fc-a98c-45ba-817a-d3cad25a7e8b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1b5f8982-1aea-4006-bd4f-8f06205dffb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "99e74656-620b-440b-b9ea-94788cbc3ef3",
        "cursor": {
          "ref": "84012b34-2059-4321-90ba-7a93f3472b5e",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b5e24a5e-e5e9-4d1e-9351-89dc2cc77368"
        },
        "item": {
          "id": "99e74656-620b-440b-b9ea-94788cbc3ef3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d8f35a4d-3ecd-4cf5-98b5-b88c0357a172",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "b0e91af3-02de-47a3-acbf-c389fe9c7306",
        "cursor": {
          "ref": "ed3a02ac-488b-4980-9f57-50d60448315a",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a989e288-dcbb-4073-ac5f-aaad2a28acb3"
        },
        "item": {
          "id": "b0e91af3-02de-47a3-acbf-c389fe9c7306",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a0b19284-ffc7-44c9-8e0a-76c2cce99d86",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "3e3c2d1f-48b3-4064-9890-f2bd5380d0fd",
        "cursor": {
          "ref": "97fa0eac-4780-412f-99d9-cc5fb50face3",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "625f6202-f6ed-443a-91cf-c856da4c1be8"
        },
        "item": {
          "id": "3e3c2d1f-48b3-4064-9890-f2bd5380d0fd",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d8e7fb47-8d7e-443e-b75d-41cddb566be0",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "0fc2f9d5-e9c8-419f-a76a-c33490381c3c",
        "cursor": {
          "ref": "2d2ddf3e-1629-402a-83e4-7bea2295b8b4",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "6d9370a4-3789-4604-b47e-0689d2589934"
        },
        "item": {
          "id": "0fc2f9d5-e9c8-419f-a76a-c33490381c3c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2e3d8c89-847f-468c-8efb-ebecbabdd72a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "d2738d5a-1fc5-4388-b51f-fd54daf434d9",
        "cursor": {
          "ref": "ef3a14c2-13e1-479b-8f25-8096b153b5c0",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c0bafef5-0cad-4835-ae55-b7952803f6b2"
        },
        "item": {
          "id": "d2738d5a-1fc5-4388-b51f-fd54daf434d9",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "74bba33c-212f-4e53-b838-2d660d0b26e8",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "2083de32-7848-4cce-8067-066ff5889c56",
        "cursor": {
          "ref": "e584ac7c-26a2-47da-8ce3-b1ee35f66489",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "ba500cac-0ca3-4537-986a-38a2ae4b976e"
        },
        "item": {
          "id": "2083de32-7848-4cce-8067-066ff5889c56",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "44b85d77-cd7f-4935-b618-b0d622106e47",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "af4ca398-faaf-47dc-b990-94b4082ff1ac",
        "cursor": {
          "ref": "48c9688f-d7e0-405d-ab85-2bb79bf5cb87",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6cb543e9-966a-4160-b2d8-85e6787f7761"
        },
        "item": {
          "id": "af4ca398-faaf-47dc-b990-94b4082ff1ac",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b1ba669c-85b4-4ddc-8f80-81a8ec0999cc",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "c62489f5-5a54-4484-8175-ee9b88367199",
        "cursor": {
          "ref": "7b0a4da9-5b01-4639-bb64-853c61dc8690",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "08db5909-5641-4d8b-a12c-ba4bee96b71e"
        },
        "item": {
          "id": "c62489f5-5a54-4484-8175-ee9b88367199",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b57f31ba-7884-4957-abb8-91963f6b23f3",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "029aa016-0dac-4619-a26e-7fed31fa90fb",
        "cursor": {
          "ref": "0cd0d554-ca66-4ddb-b476-6727b58fc55b",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "dd1dff2c-986b-4d24-bd1c-32764b35b935"
        },
        "item": {
          "id": "029aa016-0dac-4619-a26e-7fed31fa90fb",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f99b0363-99ff-4f76-ac4a-3248c2fe927b",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "09113129-1067-49f3-9fb6-a4400dd061e9",
        "cursor": {
          "ref": "7bdc0b4b-4378-4514-85b2-cabcd44d2e2a",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "86755f75-c735-47e2-8264-12142571c482"
        },
        "item": {
          "id": "09113129-1067-49f3-9fb6-a4400dd061e9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "f0245024-4caa-4ddb-b18a-2c7396cac5ec",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "814bc7e6-d864-4f10-9a88-acb2bde6336f",
        "cursor": {
          "ref": "a85bf932-9844-4ddd-873f-c6418268342b",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "49a4cac3-42e4-4c82-b706-202e85141b8c"
        },
        "item": {
          "id": "814bc7e6-d864-4f10-9a88-acb2bde6336f",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "16889f8e-8bea-4631-a62e-303f8a00e1c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "4f9f91c5-c889-40d5-a397-93cf225b8ee1",
        "cursor": {
          "ref": "12509eee-57c8-42ff-9b1c-1793622b4bb4",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "53f5e10b-973f-42dc-90fb-272613c44a44"
        },
        "item": {
          "id": "4f9f91c5-c889-40d5-a397-93cf225b8ee1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1e25bd0e-9fd7-416d-9a92-47efb8ec05a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "17bad6c9-a679-43d4-a4f4-5b86d784553d",
        "cursor": {
          "ref": "3506409b-0086-4708-ac6a-d34bf7d691df",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0f187161-c3b5-4945-ac70-924453ef4acd"
        },
        "item": {
          "id": "17bad6c9-a679-43d4-a4f4-5b86d784553d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "756ede9f-5a51-4ff9-a01f-8c33bc794290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "ae348e93-f297-43a7-8c12-e53a2976f757",
        "cursor": {
          "ref": "001e012f-fdd7-41f0-84bc-0a28f26191d0",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "fa19b003-2b8e-4064-8167-604dc57f581d"
        },
        "item": {
          "id": "ae348e93-f297-43a7-8c12-e53a2976f757",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7674d073-c98c-4076-baa6-072ae1bc762c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "cdd2c1e8-3479-4d41-9ec6-915f8b6f7fd6",
        "cursor": {
          "ref": "cc7763fd-9f37-4f0a-bb34-4bafd3e2e4d0",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ea152046-17d2-4233-b4f9-ae0f213ee3e6"
        },
        "item": {
          "id": "cdd2c1e8-3479-4d41-9ec6-915f8b6f7fd6",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "00a8fd85-5a5a-4e63-8e8d-a79852ee29b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "4df987dc-83d8-4ee6-917c-eff3a9ecb50f",
        "cursor": {
          "ref": "31310b71-de9a-4226-b30b-85fcaa3c6687",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8eb03372-320f-4957-b6a7-39da6a40bcf3"
        },
        "item": {
          "id": "4df987dc-83d8-4ee6-917c-eff3a9ecb50f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e435d859-f5b1-4369-aa8c-a0052cb5b444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "b864b44a-8c60-4456-9a9e-96fece9fd1ad",
        "cursor": {
          "ref": "ba7dddb6-9602-48d7-bfbb-f56362acb795",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "8100380d-8b54-48d3-8f4b-269a234e633e"
        },
        "item": {
          "id": "b864b44a-8c60-4456-9a9e-96fece9fd1ad",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1cd0ae26-f30b-4ac9-aee3-b0b2a87d27ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "a1641c98-95ca-4ede-a006-ef5667850f76",
        "cursor": {
          "ref": "be1872e8-f546-4559-a93d-f13bc3703f3f",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "194ba18b-8d12-4e05-b945-ef80ebd4c00e"
        },
        "item": {
          "id": "a1641c98-95ca-4ede-a006-ef5667850f76",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "45ad055e-38e6-4f27-9c27-1be6d6a265a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "2bebfcd9-4cd2-4261-8696-91df07580574",
        "cursor": {
          "ref": "06f08bb9-904b-48b4-8f1c-1fd622dd83d3",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5360b54a-2db5-4341-b2ab-ad8317202d5d"
        },
        "item": {
          "id": "2bebfcd9-4cd2-4261-8696-91df07580574",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "179fc92a-321e-4448-afba-572cd1a40843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "7383da12-e122-4f56-a85d-8c6a13593255",
        "cursor": {
          "ref": "023832ed-646a-4e47-9870-de78684b9a3e",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "92b53f95-8e3e-4ee3-a24d-cfccf4c02380"
        },
        "item": {
          "id": "7383da12-e122-4f56-a85d-8c6a13593255",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "424152e3-8b57-4a04-a828-29593c9a5c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "5b7173fd-2f89-4586-8cd1-00989a758df5",
        "cursor": {
          "ref": "770b72d2-e29d-4ec5-87b9-75d2cda0b6d0",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8e7d07e0-2ec7-4e71-a1cb-f7710a1dc891"
        },
        "item": {
          "id": "5b7173fd-2f89-4586-8cd1-00989a758df5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "24f1e499-2204-404a-bf32-0f660ac73cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "ed1fdd2e-3f30-4864-955f-691cdc1d446c",
        "cursor": {
          "ref": "42633027-5fc8-458e-b3ed-59a419186c94",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "99f612c3-980e-4114-9976-5658a43a47ea"
        },
        "item": {
          "id": "ed1fdd2e-3f30-4864-955f-691cdc1d446c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "01967a7e-fb48-4af0-872e-db4a6035923b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "8b37a698-6a9a-4ef0-abe2-1bd6758ce7ac",
        "cursor": {
          "ref": "72927f17-6091-41b5-8b9d-50a15c5ff9c8",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "83d62e9d-9bae-45fd-a880-68e1c848cd73"
        },
        "item": {
          "id": "8b37a698-6a9a-4ef0-abe2-1bd6758ce7ac",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "7e0fb0c3-2262-4a1a-a6cf-06d11a4e3969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "84915624-df7f-49ee-b7e2-a55b73d74319",
        "cursor": {
          "ref": "fd38ab99-bfaf-4b7f-a8c3-4f28322e2939",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "fa47a0d5-3a68-4e82-9f5e-b5cd0af92d33"
        },
        "item": {
          "id": "84915624-df7f-49ee-b7e2-a55b73d74319",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8eb28867-ba45-46d2-9661-5e98108c8b71",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "2a106a58-bcc5-4fe0-931d-74f30688a9b8",
        "cursor": {
          "ref": "904c7bf6-58a5-46c0-8bb6-baf3e7083d53",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "cc3487eb-0364-44b1-a44c-34593df48dc7"
        },
        "item": {
          "id": "2a106a58-bcc5-4fe0-931d-74f30688a9b8",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "eea647d6-de59-4d56-8ba1-42ab37ae4e98",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "5655521b-2fba-4919-8b9a-b728264c010d",
        "cursor": {
          "ref": "b3a665bd-39bd-4430-bdbe-71bf4fa446bb",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5df92d1c-4a24-4153-9ab5-c673a27b236f"
        },
        "item": {
          "id": "5655521b-2fba-4919-8b9a-b728264c010d",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "a33755b5-fbec-4678-b7e6-08f9cc6c1877",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "9287d803-2d11-4c4e-980e-ea641660b729",
        "cursor": {
          "ref": "5277bee5-2938-4f5e-94fc-aec75521d7a5",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b7566939-53a7-4819-b9a3-26beb385df6d"
        },
        "item": {
          "id": "9287d803-2d11-4c4e-980e-ea641660b729",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "513a7ff8-13d8-4c37-b304-eccb23b26697",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "4841b30d-c7f1-4ca0-8420-be1c91551815",
        "cursor": {
          "ref": "487aea55-9d65-4ab4-8fb2-8608a6be1a04",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "a1a84d1e-5352-4994-ae68-e254b9de271c"
        },
        "item": {
          "id": "4841b30d-c7f1-4ca0-8420-be1c91551815",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5bf5c96c-378d-45bc-9a83-d1400f8f39c9",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "4dc3bc7a-d422-4308-85d4-a83d500a74fb",
        "cursor": {
          "ref": "89acfff1-9460-481e-b202-d388c6cb657a",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6f3201ab-8ec6-4498-9fb6-559dc734c550"
        },
        "item": {
          "id": "4dc3bc7a-d422-4308-85d4-a83d500a74fb",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "69665bbd-894b-4c50-861b-884f41ad1c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "248f273f-c279-403d-8975-1513e8a9576e",
        "cursor": {
          "ref": "2935c40a-7887-4e1a-b86c-3830ac7f1635",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "853ee913-bc1d-4ec2-a56f-ea426b5a2cb8"
        },
        "item": {
          "id": "248f273f-c279-403d-8975-1513e8a9576e",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3e350bb3-7d01-4048-ad8e-cf968733b5e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "9ef1a22b-6f51-4434-af04-1e0df7dd9c53",
        "cursor": {
          "ref": "c9816777-aea9-470e-a045-6ab8db959c9b",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "37846e6a-757e-43cf-b963-139f03d42b3e"
        },
        "item": {
          "id": "9ef1a22b-6f51-4434-af04-1e0df7dd9c53",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "30ba344a-e3bf-4b6c-859d-b6fcd0d2b40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "6e68607b-da9c-4f8e-be09-3dad1280280a",
        "cursor": {
          "ref": "becb3cb0-66c6-4b1e-ba58-9aec71f72e52",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "19b19860-aa7c-4c0f-b3db-e8f6fc289e4d"
        },
        "item": {
          "id": "6e68607b-da9c-4f8e-be09-3dad1280280a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f41d09d8-fe24-4825-b905-f2d52f477387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "a56fed9b-88df-4a7d-afa4-70e2b3dab7a8",
        "cursor": {
          "ref": "72e1a1e3-e0b6-4eb6-b59f-a7c44dd084d9",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "3beab514-496c-4966-b5ff-43ee8775f9a7"
        },
        "item": {
          "id": "a56fed9b-88df-4a7d-afa4-70e2b3dab7a8",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "3cf57254-4110-4496-b491-4376113ebe65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "679eca3b-0499-4ff3-a638-6ffda5957c3f",
        "cursor": {
          "ref": "ce60e7cb-b41a-4e9f-b6dd-7809de78c671",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "58b593a9-9342-4df3-ab0f-79326e6dfee0"
        },
        "item": {
          "id": "679eca3b-0499-4ff3-a638-6ffda5957c3f",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "efe34592-bb99-486c-bc01-a478fe5a2a5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "326442f8-06c8-41a3-8966-871cbdb7896c",
        "cursor": {
          "ref": "c28e7cc3-1d03-4d98-afaa-dc18348a4853",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "711d5de4-6779-4904-b8cf-848725bfe133"
        },
        "item": {
          "id": "326442f8-06c8-41a3-8966-871cbdb7896c",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "91587bcd-616f-46cc-8a5a-e88e3b38b147",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ecbf3780-9744-4a02-8a71-e0016d9859f8",
        "cursor": {
          "ref": "3463de31-3755-4638-a079-86fdee6f62fa",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a0ed7d00-4df7-456e-91fe-c8f8955ecc33"
        },
        "item": {
          "id": "ecbf3780-9744-4a02-8a71-e0016d9859f8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "70cb42f8-2771-4a87-a4a6-ea20cf21bf14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "9af4b55d-5712-49fb-bfac-8fef7c89941d",
        "cursor": {
          "ref": "5d630007-a3b5-4adb-bb34-a613c5baecd0",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "d6451b55-a01e-4548-8374-0d7c6c144238"
        },
        "item": {
          "id": "9af4b55d-5712-49fb-bfac-8fef7c89941d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "e2a4158a-9152-4e15-bb3f-d9acdd0b1932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "dba6cfef-9639-4ba0-a6b5-a19888e19752",
        "cursor": {
          "ref": "914e15a2-2692-4696-b934-d24afb3510c1",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "eab3c577-191d-4108-8a42-550991cee67b"
        },
        "item": {
          "id": "dba6cfef-9639-4ba0-a6b5-a19888e19752",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "3f8bff40-b550-485d-a65b-0e6187f6c05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "38b08e87-94c8-4e42-8c3e-f494a1acacc5",
        "cursor": {
          "ref": "2108998d-66ff-4bcb-bd08-eaa67f039d70",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "5a136ad0-6ba0-4ca1-af1b-770ed74f48f7"
        },
        "item": {
          "id": "38b08e87-94c8-4e42-8c3e-f494a1acacc5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d48f7654-7d34-4b38-8096-aa303cb7401d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "272bda6b-02f4-410b-a12b-e4e7231f2d67",
        "cursor": {
          "ref": "fde1cd36-65e4-466b-9a7f-994ac613ba81",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9f1ce898-afc8-481b-9823-d507bde6b0d5"
        },
        "item": {
          "id": "272bda6b-02f4-410b-a12b-e4e7231f2d67",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b86bddc1-7f25-4f7f-a1af-3affe454a6a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ca0a03b3-adc1-4422-89b6-00562d64d622",
        "cursor": {
          "ref": "3571cef6-dc05-4c24-a58c-75209657fce5",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b8ab1417-a2ae-4629-99c4-7a508fef7d19"
        },
        "item": {
          "id": "ca0a03b3-adc1-4422-89b6-00562d64d622",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8c27e9c6-9a6d-47b3-8a7e-ee1fca606332",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "c5c7ccec-ad15-4bff-a813-909426432dcc",
        "cursor": {
          "ref": "0b4e75d4-76f3-445d-b564-cca3eaa0f7c9",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "be2d0178-f2d6-4073-a57b-1b2e14ea1b65"
        },
        "item": {
          "id": "c5c7ccec-ad15-4bff-a813-909426432dcc",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "45daf3e5-d32d-4f0b-bdcc-a8c197d6e74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "fbacbaa3-ff7b-461f-8a6f-80b3f7ee23a1",
        "cursor": {
          "ref": "6af1c688-6b17-4f13-93c8-63adf841afbe",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "cc40ba75-7b8f-46e6-a599-f9b259ea2484"
        },
        "item": {
          "id": "fbacbaa3-ff7b-461f-8a6f-80b3f7ee23a1",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "88d9a8cf-0142-4181-ba30-260e9820d115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "10d09763-56b1-402a-953e-7b68b751cf93",
        "cursor": {
          "ref": "9f4ca45b-7fd8-42db-935e-ebdfe56cd1ad",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "e45472ce-527c-4655-b139-df694395a73b"
        },
        "item": {
          "id": "10d09763-56b1-402a-953e-7b68b751cf93",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "0f9bdb95-e0eb-4021-8ebb-a8eb23f93fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "fc7a2c37-09ba-4993-b3df-0e07b31d5d3c",
        "cursor": {
          "ref": "92e01685-6adc-4a56-8565-b9b6453ad6a3",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "18a0bb7a-4099-4d14-b769-9a47dc6a1fa2"
        },
        "item": {
          "id": "fc7a2c37-09ba-4993-b3df-0e07b31d5d3c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "82d76d5c-45e6-4d4a-b1ba-73cca83be900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "e3566984-0ca4-4571-9de8-1f2b6ccbae52",
        "cursor": {
          "ref": "ed7aa207-c3f3-4325-afd9-bfcfc41f62b0",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0c351a10-ed76-46a7-bf26-03c2dda85edd"
        },
        "item": {
          "id": "e3566984-0ca4-4571-9de8-1f2b6ccbae52",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "fb7c9cb8-7e9c-4ef6-a478-9b8edc6fb6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "c68d90b5-15b4-4004-94e9-588510953065",
        "cursor": {
          "ref": "3264e1fa-5508-42e2-b0d4-0aaca50e632e",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f88daa63-3344-4179-af09-fec8ee18284a"
        },
        "item": {
          "id": "c68d90b5-15b4-4004-94e9-588510953065",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "64d139b7-79df-456c-a62a-ac7c252c3321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "4a331094-f5b6-4642-b27c-2a070802bc94",
        "cursor": {
          "ref": "56b676d8-814f-42e0-877e-85a996d56c08",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "96eedd2f-310e-4f80-bc73-fb2cbead833c"
        },
        "item": {
          "id": "4a331094-f5b6-4642-b27c-2a070802bc94",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7a7a41cc-4cef-48b9-9f30-5e7c91635585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "af0aff00-a367-49c8-864d-619b2470a5e8",
        "cursor": {
          "ref": "97981fb8-2eb5-426b-aba3-cee90d5bc632",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8722c812-f623-470f-a11e-6c54f007c124"
        },
        "item": {
          "id": "af0aff00-a367-49c8-864d-619b2470a5e8",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "e63cb88d-872c-4582-a029-2966bd663cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "9dbdeb91-9601-4193-ae2a-d7d2fc339016",
        "cursor": {
          "ref": "c7776f86-ced9-436e-85cb-6b1cd9a0a512",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "72f34cc1-8768-453f-818d-a3c94b8b3e42"
        },
        "item": {
          "id": "9dbdeb91-9601-4193-ae2a-d7d2fc339016",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "05f678bf-ea8d-43ca-b57b-047ef7a7e5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "b72f8f15-7c8c-4bf7-b11c-ecc43f0f62a2",
        "cursor": {
          "ref": "94b896fc-f6bb-4be8-9a3f-bbef6a875157",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3e6e40a5-9ca4-49b6-b15d-d4c753de64de"
        },
        "item": {
          "id": "b72f8f15-7c8c-4bf7-b11c-ecc43f0f62a2",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "4905415f-cf2c-42ec-bbf4-7e6d47709864",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "619aa46b-6d6b-4e0a-81cb-ccac8980a150",
        "cursor": {
          "ref": "3f4bcfab-553d-4dc3-b035-f648efa103c9",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "34497e34-5bac-4316-b554-a1757465cadc"
        },
        "item": {
          "id": "619aa46b-6d6b-4e0a-81cb-ccac8980a150",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ea774d99-a15a-4306-b60a-3c64eec039cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "d63a1459-428a-450b-90ba-4cbd38a193f0",
        "cursor": {
          "ref": "1efd13be-bf1c-4fd1-affb-44d5a009beae",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "eb551525-1ad7-41c8-9076-f9dbfbd64802"
        },
        "item": {
          "id": "d63a1459-428a-450b-90ba-4cbd38a193f0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6eb95205-a503-4ca9-840e-8acbacddba5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "54854fd0-34b9-4ff1-9b2d-91a33bfe5ae8",
        "cursor": {
          "ref": "e960daec-a212-4268-9b14-bf0d8668b56a",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9ade9755-a6a5-42e2-b0de-33b181c3f40f"
        },
        "item": {
          "id": "54854fd0-34b9-4ff1-9b2d-91a33bfe5ae8",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "5bf08681-3dab-4859-885d-4c7d56f606bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "4a6f74d6-af4e-4d39-a817-1aac202c81b0",
        "cursor": {
          "ref": "3db417cd-0efc-403b-a251-8000d7f77e03",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0a9961ca-8219-43e9-b2f9-629e6fb7eaf5"
        },
        "item": {
          "id": "4a6f74d6-af4e-4d39-a817-1aac202c81b0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "203acd02-5103-479e-bed8-750902f3d1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "512a68a6-37f2-435a-b3fd-f033682563cb",
        "cursor": {
          "ref": "e54c9cb6-7495-494b-9b83-866c06291e90",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "9260acc4-2cc0-41b9-bd95-b54b48936b81"
        },
        "item": {
          "id": "512a68a6-37f2-435a-b3fd-f033682563cb",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "79d41cb5-6386-46a8-b26e-9e5bd1e59ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "b4bd1c84-1c8c-43b2-8b16-1a94e224611f",
        "cursor": {
          "ref": "e8d92cfc-174e-4875-be4f-b107305d5d8b",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "4165386e-a670-4dcb-832e-4604e67d7ca3"
        },
        "item": {
          "id": "b4bd1c84-1c8c-43b2-8b16-1a94e224611f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2db90b45-db51-4fc3-aa94-0865164ec513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "3a60493d-d42d-4a11-858d-dfe774cf7847",
        "cursor": {
          "ref": "f4671234-4a38-4bd6-8331-08048cfa42f5",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bb94aab2-18e1-4182-80a4-2ee912db131d"
        },
        "item": {
          "id": "3a60493d-d42d-4a11-858d-dfe774cf7847",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "bbb35079-97e2-4de0-914c-f0381ea7dbcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "6e1cdb77-0ae8-41bc-afc4-c5c3ff5a5498",
        "cursor": {
          "ref": "4ada6030-69f6-4667-844c-51916996976b",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "718029a3-d07c-4822-a4e7-8b73a406014a"
        },
        "item": {
          "id": "6e1cdb77-0ae8-41bc-afc4-c5c3ff5a5498",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4dacdc15-061f-490f-8592-fc673e44597d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3c2aa34d-d466-49d4-b5c1-326313e8963d",
        "cursor": {
          "ref": "0fd69733-fc44-4858-8eba-ef203ab30f22",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0e15fe0a-e80b-484a-a810-f1c74072af71"
        },
        "item": {
          "id": "3c2aa34d-d466-49d4-b5c1-326313e8963d",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ce490216-a727-4bbf-9833-e20f3203cccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "03785c09-bcda-449c-843f-0da1c3256a08",
        "cursor": {
          "ref": "f1eae66f-f078-41b4-820c-ad9d8b367c07",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a4c9503e-9f53-4e2a-bd2e-bac97486599d"
        },
        "item": {
          "id": "03785c09-bcda-449c-843f-0da1c3256a08",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "c4b6a0ba-9281-42a7-a6d8-df15986085c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "744f659b-17be-406c-8804-72775ae59fc7",
        "cursor": {
          "ref": "1059d3d7-af03-4951-a54d-89036cc32edb",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "cd7dc2bb-f576-417b-bbc1-ba64a7592e7e"
        },
        "item": {
          "id": "744f659b-17be-406c-8804-72775ae59fc7",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "edfe8519-2b80-427f-b975-58a58ebd315e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "5ac6fd84-d191-42b4-ac29-a767ef213451",
        "cursor": {
          "ref": "45d6259d-3d2a-4bcc-8786-c7671572454b",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "29ee7aed-a1ab-4941-b026-048e90a6fb72"
        },
        "item": {
          "id": "5ac6fd84-d191-42b4-ac29-a767ef213451",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "21dd564c-cdd2-474b-8e36-9769222c1b6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 64,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f92bc7d-07ec-4880-abb0-84ea57cb5606",
        "cursor": {
          "ref": "2f314420-c6cb-48fe-9c46-383a28c7cf42",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e2dbf117-e75c-444b-aab8-0ede68d9d7b6"
        },
        "item": {
          "id": "1f92bc7d-07ec-4880-abb0-84ea57cb5606",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "aef79335-b5d4-43d9-9cee-fd0261795530",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "a653992d-72b6-44c6-bc89-5d0fb79e418e",
        "cursor": {
          "ref": "ecb2323b-eb8c-4e66-ae6b-8a6668e8a035",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9548f576-1d40-49b5-9bb5-a048061f094d"
        },
        "item": {
          "id": "a653992d-72b6-44c6-bc89-5d0fb79e418e",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e89cf0a3-9eba-4c98-92a1-44420ff1cb18",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "456969df-af1b-4525-a213-6eda3dda425f",
        "cursor": {
          "ref": "1c6bf5ad-c961-45ce-b903-7ab943b28f2a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "5a36445b-ec7c-485d-b26f-02d3335287eb"
        },
        "item": {
          "id": "456969df-af1b-4525-a213-6eda3dda425f",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "0941ed17-9726-407f-9d07-8161f8475e21",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0b36c9-5d8f-4d64-8552-9145e7580aae",
        "cursor": {
          "ref": "39e291b4-79e4-4886-af6a-9e02a149cb05",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2d3011bc-8017-4826-ab72-a8673fa53b04"
        },
        "item": {
          "id": "de0b36c9-5d8f-4d64-8552-9145e7580aae",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "88583943-b616-4053-81a0-4d0f6c0483e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de0b36c9-5d8f-4d64-8552-9145e7580aae",
        "cursor": {
          "ref": "39e291b4-79e4-4886-af6a-9e02a149cb05",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2d3011bc-8017-4826-ab72-a8673fa53b04"
        },
        "item": {
          "id": "de0b36c9-5d8f-4d64-8552-9145e7580aae",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "88583943-b616-4053-81a0-4d0f6c0483e4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 61,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eab8c19f-faca-4d00-b76f-9920db6fc7b1",
        "cursor": {
          "ref": "efe85d4a-e478-4ca6-afcc-6dfc841c40d5",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a6c82c14-ebf6-4493-91a2-8070625a3102"
        },
        "item": {
          "id": "eab8c19f-faca-4d00-b76f-9920db6fc7b1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b8f37d88-8381-497b-b6c6-6d54890883e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 62,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60cb0077-c0db-42bc-beed-cc048a2ad9e7",
        "cursor": {
          "ref": "6ec73cb5-2062-4c77-96bc-bb081fac9b5f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7cd8a99b-fc1c-4daa-a99a-26d8f3e597e5"
        },
        "item": {
          "id": "60cb0077-c0db-42bc-beed-cc048a2ad9e7",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "64481924-19c7-47b2-bff7-8dbe74e506d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 66,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}