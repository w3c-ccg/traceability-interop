{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e3f21aaf-44d7-4260-afb5-54607c9334dd",
        "name": "Clear Cache",
        "item": [
          {
            "id": "787e5207-75cc-41fd-9142-1b26b98656d0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "908d8575-5543-4da9-ae1c-4ec970af5959",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a673aa5d-482e-4d8b-a2d0-2332cf952ec3"
                }
              }
            ]
          },
          {
            "id": "d7556bbf-0164-4f9a-ba17-0245aa93739b",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "990bd3b9-a7fd-46a1-ae60-a0a99f1220de",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a5f259cb-c50d-4b39-b760-7e2ce34ad4f4"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8980084f-c7d7-4260-ae0a-f370d7d7690b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "372f9fa8-ec6c-4877-9780-9e5765221ad6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "56ab1387-60cf-4f95-952f-3203876fae64",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6c835c04-9dd2-4930-a1df-78d196c48e0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91cd35dc-dd8f-4444-bc9f-9d6c90a6e771"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "451d7963-cd88-4820-9618-6185e891e5d1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9fcb5282-f42f-48b8-8a3d-632a6b96b47f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2119be14-3ed9-432d-a2e0-b7869c46cb7a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c816355f-1298-4d48-b3db-b86ebc654883"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "198a07a8-8ae2-4d1e-a114-f0150b3c15ef",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e663fc75-9b5f-4438-a1f7-8f255edc245c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "99b18481-0d93-4db5-9641-1e68d0caad5a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c29ec327-b730-49e3-9feb-51150701f9d8"
            }
          }
        ]
      },
      {
        "id": "4fceaa15-e397-41ee-8fec-a1c470acb686",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "166afc43-938c-47b1-8842-26f48b200df7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b6a115f-62d3-4d95-af81-8c14306cc30a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "84f36173-f5c6-4909-b4cb-95b17feaa5c0",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4432606-99fb-49ad-a8ec-f78ea16bc603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8064dc04-7f75-43e6-bd2c-5b18c35a0a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c882ae-b27d-4145-92b2-4bf2593abf7a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada87ece-b837-49f0-a7f1-44b9c70add86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e2dccfdb-30b9-42d7-88bf-e142e1996c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3425fc3-3490-4e6d-a8b6-8b6f3b794b1c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be3b83b-0611-4be3-b9c2-abdb6e7ff9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7205ade5-017e-4be6-ac0b-085ab9863c91"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6d491f71-5cc8-4469-8cb6-4f91e9179dab",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "574b3916-9007-4555-95a1-55bd548f46a8",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2b05d7-2061-45dd-85fe-2f5b3abcf63b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8397c82a-8d63-44db-b45d-855fe6427aff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9ed723-18e4-422b-9f43-962a4a384b43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23c23685-38db-4e8e-99ee-447634027c2d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "15734aa2-9938-48cd-a919-29a040011021",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cff8d014-af85-413a-87e4-8fc97f70d812",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "51e5dc0f-70d6-417c-b65e-bcc4abd89e83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6a2d8dcf-f8a6-4c96-abc2-ead85cfa6657"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "abb8df0c-9336-4531-8d71-0508cf030160",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "60b45ee3-1a60-4bae-8129-080697f180c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70d33606-b203-4001-acbd-d4b32af93bf4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d872f28-d8df-4b90-ab77-0f5e4b28c36a"
            }
          }
        ]
      },
      {
        "id": "deb8d257-118f-4804-968f-191ffb0ec0f8",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "c73e887a-9d92-43a7-a0e0-dd6a63c0d979",
            "name": "Negative Testing",
            "item": [
              {
                "id": "80f4ea38-19b3-42b7-aa93-418bd93eabda",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "02b11d53-37e8-4d97-8608-9bb2304cd81f",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7cb2326-e48a-4915-92ec-dcb35b217626",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "820b5bb6-1a4c-47be-bd80-b38467c5be55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e64eac8-5077-4d78-9ec8-6f298b1f7601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c360ee15-f2de-4a84-9a44-626c9ad55bc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f403a00a-3ba9-4e27-9eef-18bc8bc16d57",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1a44e2-5d5b-498f-a998-2e6f10deb19d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd3ca654-4b94-45e5-91d4-4d797159de79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68f41d9f-7515-421b-bd7f-63b11708dbed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de2f11f0-50c4-4cfa-9dcd-4b394217ea9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa81f910-b780-4eae-acf4-e40e9369cf07",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff40108e-906f-4192-8352-173e9875e929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "006450c8-ad46-4b8a-a8a4-b20683e46e35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8650412-e0b2-4497-af4a-aac9a7907216",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8dcf7e9a-456b-4d3d-a5a9-bfe6f4e46dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b10f573f-563e-41b6-a71a-3225ee1ff898",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af9cccc-6105-4c10-a6a2-3208743ba5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6abdb4e3-9761-49df-8187-76b9ac108c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48d23f84-1395-4bae-af7a-d888037ea115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fbb6a46c-8ad9-448a-bfc0-c7df83aa2041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5849a9fe-20e8-4418-ba04-f979e14b60c3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3b5b23-fed9-4889-8313-007a589c6276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a3d0349-9fb9-4f6b-8a78-d296232d7b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25fb20f7-9e82-4f65-a8ec-376b678a2622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d9412a85-2b85-4cb5-ab78-929b26b234b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8499912f-db28-48cf-ab26-6368ea8971b6",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcc25e8-c8cb-44f2-9359-a27dc9b54d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e98c596-9b8e-498f-9710-2a772ea87b83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b2abb2-952d-45f7-8acd-1bafccedb05f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aa1808ad-3454-42c5-b7c1-1ec87f684f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b1b9a2-4438-4d43-aac9-d15d4470609a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27cf8593-6788-4e76-b16b-f9212048430b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e63b42-7b6e-4e2b-94ca-2831ed3d4dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e195ce8-7136-44fa-bc92-d462ad036389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f08a8b18-0d6b-467b-b06b-0d7ebb428c5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7a643e-cf60-48a9-af52-2a451a16cc66",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a32e1e71-5393-4c39-b439-1eeac6d367c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33afdd02-988e-4320-973d-034aa9b43a9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d60a648-970d-478a-99d0-9c70e93a9de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "faa27134-161c-43b9-98b0-368a510a5a1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e55591-d94c-42b8-9db1-305153e6530d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc136a1-34ff-4f5b-a8c1-418f5a1d000e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e8d9a0-5e92-4078-8976-ba469ac2472f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34915df4-e1f5-4de2-a944-5b1144d5ab76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1449ef32-660e-4d61-a9b3-04a9e162d670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cebb0dc8-f90c-4549-bc54-edab1c824ecb",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e71e44-beba-47ae-b5cb-2c63bde7776f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d946b1b7-e35b-4c38-b2c1-9ee0d1ec6bff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e24d90af-f74f-4175-884e-b5cb7279b693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d82011aa-9b32-4ffc-8448-4973b080c815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030a09cf-b87a-4665-9988-499fe0799166",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ea986d-5feb-4314-a2e9-f9b6082f7c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a533eb-fea8-47b8-8353-3978d867e218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b627d9b7-19c8-4c85-b355-fcf17d0d1090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a040ae29-0b13-451a-a81d-c23b4be40890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6272ac8-64bf-4097-9975-0424c445f5f1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1cbc3da-11f9-4cc3-8706-386de52b9b18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a76e820-90e3-4ec2-ab56-38a0fdb46049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540213bf-3c02-44ee-be5d-16e685decf57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8860fe0-2bbc-4ee8-afb8-807e70423c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85aab471-c46d-483b-bae4-61110916177d",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc363b84-aa24-4889-8856-33647d3d670a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c39ad7e9-cc3f-4aa7-9cc0-c1cd604f8227"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e511cc-3f38-488d-b9c8-12d26a22c7d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb82fd42-b85a-47a9-a096-4cb17e34bb4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80926d36-9dd0-4412-877a-b1dbd94b031c",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e295980-d32e-4aab-ad05-57439f910733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "647e28bd-b7b7-4bff-958d-6329240c549d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee94641c-abb0-4eb2-9377-ff581598d9b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6fe3e80b-be50-4948-8093-af850bb03505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d78bdc-1fdc-468c-bc63-25481486d6e5",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75e4761-9c75-4f8d-8957-ead6ccb72090",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "566899a7-65cf-41f9-a6a4-2c8cdc5b7234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfb6638-bb13-44a6-b64d-b8b02046f110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ddd52d2a-2694-4c64-9148-5cb4fed264e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cefd7f7-3820-477d-80ed-6717772e5c71",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9364d5f5-35ae-4618-ad19-d9d8ab1cd3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a4f31f6-2bab-448d-88b3-31518523cd19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38489fb6-687d-439a-9dcd-c8fd0a91a2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "01eeed32-43db-41fe-bd6c-6c4f2b9d144b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "840ca466-cf95-4774-9df7-df2e61119f91",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1267938d-92ab-4c1e-89dd-ccc2984b436d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cff5723-8e6e-4400-b597-329145f1d055"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5512fef0-66ef-4039-a82d-92492e06418d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "054ab57d-aa00-4ceb-b0f0-ffe2fdf30cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed8a1f26-d29e-4abe-a787-b19558ff19f3",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb3ac663-5d7a-420f-88a0-835cb4c62892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e25ede4c-59a8-40d2-b0ee-41b44d2f354f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0585958-7e3c-4cc3-b76b-b1b4d4c291ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ecb45cf-1394-4915-9885-46c23882d81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d3da14-7157-43c0-a7e0-f208652897cd",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c957a83c-fdc5-4e10-918f-8de0e5a11a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b2abc2d-797d-4243-8c2b-7157838eb9f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae80eed-2d07-48cc-9ff1-afb1a490677b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bee13baa-a665-4044-b2e9-c8ab634e4d37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45313070-6573-477e-b927-d80f9a7e1f80",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf82b37e-3d31-41d8-8806-07401965566b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc1687f-e2d8-467f-9f35-faf136070df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afb6ba3-5792-4830-b438-ebe542ba894d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e5bea90-1710-4c9d-910d-e3f5b94f0b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d81d19-722d-4817-a073-fa05e0498d5d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d68b2a-fe60-4932-af34-e1e0723d9100",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57428c1d-271c-496d-9b0a-56d1711594d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a548cf-24ed-4c29-a5ad-7d329a6a5309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce86e4f2-9cb9-4dd9-b297-62eae768bd9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "971d179c-8034-40e7-9b07-fd7edbdc5045",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b80ad95f-9dfe-4161-b6bc-609cd1e86cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08011e24-eb38-4ac7-b690-a327db08dd58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c8fad2-75cd-41ee-8165-25ffa9e24828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b2e26f6-87b8-40f5-8eb6-b54bfa5dc24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07ee0c02-c8b9-4e92-85a6-a6ff47d3ba09",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e289625f-2317-456f-81d5-acdde3013e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35912cb7-cf99-4632-96c8-5914a921ca9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4cecbe-e14d-4d8f-be0f-f6f77da563e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "09d34647-baf0-4d4c-a066-16000af131c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b1c450-c1d4-444d-8b5e-0d77b9d769b8",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8d3b61-d85a-43ed-bbe0-f644c2cf6326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c4c6c1b-ee2f-4576-884b-d5436de0718a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42c3229b-db34-4892-a617-b48c9b23a550",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b8b57b5-f5be-408a-b81a-23c1e6a47516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea2ccc3-cc3b-4d35-b27a-8a1a7acba286",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f4e753b-a1e7-4db3-bec3-4d900534cb9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43cadc81-0237-407b-9013-5fbcc8637348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74358d7-33fc-4d21-8baf-859e5a379407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc02b25-77be-4cc1-9be6-ae2f3239f201"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc85c7bb-e04e-47a1-982f-5f00e3e64e63",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "569df5c9-c61a-4925-a9bb-bcda41f9c5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c094bebf-a370-4aa4-8837-3ddbe2946eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cbbbd6d-1914-43ec-b02a-29da4e6302d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "daccae0e-7bf9-4fb5-8c3b-a43930788229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc3a970-3771-4c2b-b39c-1cc25f485eef",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "532d9503-daf6-44a4-a5a9-5ac9ff8c7bd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5be394d-5641-4ec4-8c3e-484123564449"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bbb94c8-eb0d-4633-b13f-97ba229ffa61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a322bf9-eca1-44ec-837c-d4d675ead79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69946591-5b9c-4333-9d86-7da9e6fda1b3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6376cf5-d16f-46e4-82b7-83d97eca65e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0ddbdc7-ebe7-4090-8b10-236abe7e61cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4799a3a5-d4a3-400a-848b-141c396d8c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "deb6487e-e5cb-4cbd-bbe5-704809afcc6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4dd3df-fc20-470a-8b63-6db048d1c342",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9098ebd4-56ca-49fa-b047-f5258b93a44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62943042-5355-4c78-949b-888c27bddb05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f903146f-7f59-4fe1-b309-221ff83b510b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f95e3757-0197-43e0-842a-f27bae144ebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1ccee4-10a0-4c14-be0f-936369faf68a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c5f3982-9788-4d7e-a386-93c8eb490e7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d0d15d-3e9c-4c12-af04-51bd6ea4802d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c643e615-3629-44ac-b412-273892a8c048",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "8965b1fd-95b2-4176-9de3-b1936dfb533c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a7e822-1462-4567-a8d6-9e3f15cae540",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1349c2-ee3e-4a3e-ab54-04e00dc74b6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0025b53-d611-493e-861a-edb81f6d48a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfa7a640-389a-44d4-89fb-67a9f334b4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1d607e-7f24-470e-a808-ad021d0e501c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6681a9-8cde-416e-ab5d-c0a2a30b2168",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8536cc11-d2b1-40e9-8259-17216874b66d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae6e756c-9baf-494f-a40a-b7134653e171"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5274c41d-eafb-479c-8062-579ea9bc4c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab03e6f-fb48-45de-8e93-d57bb959d708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7312c4-8e80-4bf4-bab7-27970d6b59bf",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d812a70a-a093-478a-a22c-dabcccf8b744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32bc63e0-6984-45cd-9a3b-50c65eb6241f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab784b9a-8366-4eb0-9350-ec8f2baa2799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a22a3b6-567d-4ee5-b68c-afacbac82170"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b477335b-6f03-4839-a94d-b99e525efd20",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7598c772-eeff-4b31-b1a6-a8ec83f35878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8534ac6-7597-462c-bb4c-0210af191975"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5492a25-4a8b-464f-9860-c98c5634c693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2f26448-21e8-4898-b902-a20522a10278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "712ea1ad-645f-4e21-815b-7ebdd5f6b3db",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f8f12a-f35d-46b1-a904-0bb389e6814a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7db1568-d33c-4690-815a-20ec0f63d5bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08371a5a-d8de-49cb-b5a3-4c2ebc59919f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6261a55a-4be6-4013-aac4-0abbe3fe4e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20988b1-57ef-4988-98cd-515ee93a5893",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "935cc1c8-1362-4d97-9ae6-2602f979c3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e8c3d3f6-db5f-4027-a1ff-c0f544f1e224"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe89a3c-af53-4036-be41-36b4433fd7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4cb8d1da-bf27-4618-8c4f-38d1e7fa23c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0787cbc9-39bf-458f-bc03-447ef8af4e0b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0888b04c-eb94-434e-befd-9e20d1403be8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36a87558-f770-4174-a6ab-9311c8c94b3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59fd321-6fe4-4ebc-abb4-b77162b94703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9bb3bfc8-d1b9-4d6e-a2f1-4c75420a1b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abbc5dc-7293-4af0-a287-956a73fca09a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26efc0c0-7506-4787-b308-a01ad8fc5fb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14441ca-1765-41de-befd-7563ad151b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff1af14-39cc-40af-93ad-b3de5fdaac9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "52a66523-cbf7-4332-82cd-b72e5c72c3b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8087af58-f229-46c2-986e-a0f3ad299610",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a2935c-f0e3-4dc0-8a95-961fe94051ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf1f631d-5691-4b0d-aafc-cdd7b13eb357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2fb3c2c-1825-4021-93f8-338c7d361a00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b4c6871-e62a-4ad1-a2db-a748ec465e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12df76f8-c7c2-494d-9a4e-f2ac0523642f",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba8db3a-fa2a-4666-9cec-44da7a0a4b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "914ef21d-abf8-424c-a6f9-7329f9db3db1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b46013-9f41-4d27-a4a1-aa641f4a10f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdfa586d-0950-452c-902f-9f6371968d75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f084ea-a96e-4eac-b415-b86ff2dd36b2",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda599b3-0520-4b96-99c3-2dfaef8f71e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a31701-56ac-4627-b383-e15a0bd7db04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5078e65-3521-4703-a84f-c3f1bff4e09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d4c32317-2d67-43cd-9691-407f42ff8295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3160f132-4f95-4494-b9e6-680924521540",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "122f2b01-bef1-4f3c-9992-358924e27c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4626019-b506-4069-bfce-82052c401f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d42cbf3-bcc5-47b4-b40d-caae19030811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "f951b501-0b75-41b1-8133-44afce709285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f5533c-b499-497f-9f80-a25e4f415e02",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c47fdc-1edb-49dd-90e7-4daa89351768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "399eda59-4e6e-4725-856f-4113bfff0c01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc1865b-32aa-4494-9aed-a34364f7d0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "311d597e-2384-4f6e-b1fd-e1d023051392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca6887b-ab69-4fec-b7d8-51ad1d5c052b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "164a15cd-fadb-4943-b126-de748695b81c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9aff853-9a69-4f3b-b919-b08b07d107ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95626737-313f-4b04-bade-4b580439cc65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "223e56aa-b61d-4381-94a8-487c5f8987a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bacc8dd-1efb-4b8f-8497-9a73ea65e9dc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb08af1-feed-446c-98ac-ee99b751972e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83f50def-9986-4972-ac01-7784956da2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b21a78b-104e-42ba-af2f-5ddbef4b4cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b96c8f6-091b-409a-9411-adf82bb5d99c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2f09cc-987f-4379-bb21-77c4efae5b2a",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7efe2560-351a-4530-9fb8-28d6ffe50e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5004be87-ac7a-4bca-b05a-b7a4e44afdbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a947b000-7db6-4b94-b942-7ffce239fe90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8189757-0a33-4253-a35c-ea96eb05d0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "715e5d04-d5e6-40e2-bb4e-ba728ffeffdc",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a79281d-8b85-4fbe-b065-7df8a4803542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e95c9542-792b-405f-8741-febe7408750e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4177d1a7-3ee6-46bf-a3cb-2748e2173343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff02678b-7966-4e66-99f2-ae81835c2533"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e04af5a-bf95-4bf5-9956-d596f5115b06",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0896f3ee-b09f-42e2-b41c-0a7cad30aa5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78afbd82-0bbb-460b-914d-b3324dfb2e28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef2bf83-5b2b-4d3f-8a42-bda3a18257e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60da7a76-f657-4215-83c1-b001e6273b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07767c6a-77a7-4f09-be9f-6e8678edfae3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5b8a0a-2b14-41bf-978c-85d6a1eb3b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a46987b8-99be-4739-affa-e9bf137aa095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33cdfca-6403-4f7b-9b87-29055ddc65be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "da13154b-7ea4-4c36-92d4-c04ecd74d6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b77a7755-931b-44e7-92b1-f187a9c99f74",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa8c025-d1ab-4fbe-b5b4-6aa9d7e8dedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8c2440c-c0cc-4da4-84ea-f29e98d0c464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53230ce3-36ca-4c9e-b1ef-559ad50b7c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "06021cbc-6edb-400c-bb5b-171508cf5a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "208dc454-277f-446d-8eaf-c10baa3db884",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f38d066-ed39-48b5-a914-5ca5d8feb0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a328f3f-e571-4b1a-b4c4-f3d047a1f653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858350a4-9720-4216-8be2-d7f0530589d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "221b45c2-1f07-458b-8d1d-25fe05dda164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c48117-d432-4a4a-8dc0-f3c2942227a6",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b39e635-8bba-48a8-9d54-1fa1315fcd49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0062c7e-5b90-49f5-a03a-91c0add328f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782b25de-d4b6-4320-9772-253a6b70cf40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "997bb847-f7b0-4905-812b-2fb256ca77b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75490716-a713-4ae3-8b4f-91fb4e59c921",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2383087-0837-4ecf-b11c-97d6e56fcfb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e297fca-8d5c-4c42-84e6-9e2cf0991fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f414503-ced9-4880-822e-c45435d05cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a57f7b03-8dd6-4ff9-91b4-0dfeb37a210d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeae1a21-88b5-4260-b21a-b86aed03483a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5ed6b76-20f0-41cf-a8ad-88e28ce4f481",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd3167c-7236-41cb-9a21-d4e84614489b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28d03507-0cf4-4cee-850c-d480336336b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fed7cf52-8083-41f1-8134-f563a63e2e99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d39bb3d-c060-4e8a-ad3d-5e11e68174f4",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aeeaa81-e377-4fd8-bc6d-6ebd720602c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e8f9c5-ed9c-4590-a440-85b5a1aa3971"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0510c0c-4c47-4299-9fbb-1189f2242c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ca6317b-98bf-4316-848b-ca4bb9d82793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb3cb48-25cf-4588-90d7-faaf6ec94223",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "973d36f1-8fb3-451b-a78c-d34a6b3668f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d383ab93-eb23-402a-a2c3-fcf5c2ead47e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c8002e-30c1-4616-ad7a-69ea33ccd038",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8abbec38-2aac-4f82-b986-aa05a61d1146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da318b1c-4a67-472c-b28e-82706ad36d09",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08521ea0-225d-4feb-9ab2-2985a39595f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "823c6c66-884a-4f8d-9f2f-c5ef0d3019ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83408a1d-4d67-4644-b958-e8ddb5aae70c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3eb9f694-b9ec-4978-b1bd-0bf2aa0f2812"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552f9010-e191-4fd4-b688-788d9da98d02",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc0177b-487a-48d7-a2d8-3dad6447be99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95f16294-3eaa-4688-ae04-da83c0eabcee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f295256-6157-42fc-86d7-4ab9ac2b4a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c584844-2998-49ba-a5cd-8c12007993c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651ebba5-03b3-42dc-83d3-c9be299d3552",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "454dc44c-de30-42fc-b0a9-0ec23f5761fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15997ba9-c78f-4a48-9673-9d53527894b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ee4339-5b2d-4fd2-8f3c-a4a83bbccc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "79595aa7-e9d7-4126-9186-20f9391aed5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd61f2a2-dbb7-4fe3-a00a-10fae36387d9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34efb26a-52eb-448a-9f8e-0423f41bc2fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebbec7a4-8344-4b0e-a380-695dce4b6008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "022ae486-db43-42f2-90b8-125b88372eb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "440fc447-c430-4dfd-8dab-856874925619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ee5088-6612-49c9-88a9-00af0baa7a8b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a1217f-962f-4ba4-bdb5-3c42911bab01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e68248c5-6626-4a45-bc91-52ffbd8ed6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81bc05ce-fcc8-4972-bf54-9ca2e88f8f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2aec57c4-451e-47b0-9a9a-c87cd3a5044e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d74993-8b22-4bac-949c-de3f20fd70c3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ef675db-dc44-4bac-b9d1-616cad87a94e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b74466fc-4cc2-4c15-bac4-c302b5f3f67a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ab2239-2e9c-4f08-bbb5-d072340ec220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c3bdf4e-a4ad-483c-9ffa-6207aff5c4e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e463d8-8e75-4fe7-ae8e-b2cd26b1ed59",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f233cc92-0d61-4409-8a16-722bc9fae2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d94de34-c472-40a8-be69-b9ef162f5ec3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1fa8d12-8be3-456a-9693-faa606683a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "324b9295-2673-4f8d-b5b5-77fc1b35ab12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfdfa3e-138a-452c-b36f-99661018bd1d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "636eac8e-35f1-45ca-9fff-c00d98f9b04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab324416-537e-420d-be3e-73f754727522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72daf37-03c5-43e6-9d4c-6369ba3ce28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6ff5020-a8b9-41e1-911a-ff201b0d6548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c7ab7c9-1e42-4f99-a696-af059d878257",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d97c1e4e-e78d-45ee-96fd-02950fd9c7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4754fae-4abc-4030-8990-9b318a90288b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d7a9138-23f4-469c-9748-a4d3ab762c71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2a13ee3-5071-4ae7-83a1-d9b8b2d2de9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50ef1023-ed2a-4bf7-94a3-3892dd9b1570",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f49b26a2-9306-4357-ad84-d664a3ef86d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e5f2d0-22ee-4726-8c71-32b727bd6826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47d8af4-b954-4f74-819d-1f551b7d502d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4b701153-2340-476f-accd-23cdd8d5736b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "403df266-2cf0-44e7-bfd9-820068b23797",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06698d6-5aa3-4674-9724-fceb167a688e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "863c7924-e3e0-4919-a313-c146f878b8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c247ae-c495-4984-a408-82d6d6095aa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e82b554-aa45-4a7c-9572-246374bd91e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d61eaf-fe7a-470d-b7ce-81c99ac72ef6",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d18993-b420-4694-86ab-5a1a0aaea0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4b5e573-728d-4025-a8df-e6bccaa3fb22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8b3bcc-1855-4529-b45e-a587e7f116cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "31950368-c954-464c-84d4-aceefa7231a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b90ce3a-3015-4903-97f5-9a358847b1ae",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9893891b-4708-4695-8615-d6ea6a3025de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5864629-cf90-4f7e-80be-2d44dbe4dc53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877704dc-ae16-4a54-82fe-d2f3de6632e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "751871a1-4432-4179-ac60-3ba8f77b8ac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175945c3-7595-4d84-b10d-b51f8f411021",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a804fbc9-9fc3-4e1e-906d-d900c12a954c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28a4b1af-a2c5-4342-bd6e-86eca00fb099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96dbd12b-4a95-42a3-848a-2b3138fffdc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b8f08b2-0ae0-4f73-b2ec-9ab4c1069e7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b248d46-cbc2-4b46-a338-a687fab86623",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff71b85-024a-44c2-b104-12583ece5601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a43b4ac-b30c-46f5-80d0-448f299f2b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056f7a8b-58e0-4def-a863-668ea5ddf90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a011f09c-5696-4160-a6bf-39b1b3c86127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1b5153f-31ac-43a7-ab82-6a12b5cae861",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82294668-bd3f-4613-82e2-98edf983891f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b2ba3ea-56d9-4044-b9f6-ecd012b70c26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b61042-891b-4709-a7e8-bc1c30d940c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc61110-2cba-41b8-998b-d617c3ecc752"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc44e2ab-f9c9-4a16-9145-6ae40dee4ef5",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f93fcd9-1cdb-4b83-96ef-0bba07226ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b81bd4d-d59e-4cd0-8a56-db1ef3637b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6fa25a9-10ec-4e14-8e81-f9a6c991b2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28f3183a-3e2f-4d35-965c-f67dc15cf002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40b689e-00a6-44e9-9c92-3b54955dc064",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb3c623-0f93-49e3-9d26-32026b650e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "febfbd54-21de-4f90-ab70-23d80400a50b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4a17a0-4fe0-4fbd-b462-ce866a430c68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "367b2a6a-ea2b-498c-b4ad-3c1e8dbd9e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada1aaad-dded-4f0d-8c58-6f0d06e8f195",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc3d506b-72a2-4847-b1aa-7f745ee78e33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33fe7fc7-b95a-4696-91a2-5b53c8a3cdd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dde60157-0800-4e1a-8eac-461980101bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "34136fb7-a813-4f2a-9c12-010b1aadd2fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2286ec87-d7b1-4b3f-a8df-121eb7cde942",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5066f1a6-8422-4ea0-94fe-f292bc06afbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680b866c-1cc0-48ea-9769-f2d5468c7eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fedb14-30a0-494c-9f74-efe0d7c08d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a90575f6-d633-4579-b764-ee086476931f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b987941-1ad2-4896-a7d3-b65254bd2866",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5190b562-203d-4d61-b558-fec9a426cc80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57a74514-e6d3-4a7f-a495-8201130384e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12661eca-5f0a-4879-ac0a-832bcf46ad17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b793b3c-b008-4e07-96a2-cac591ec6d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e3990e0-62d1-4e82-8b40-88e2f4aadf48",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03e3f13-357a-4300-a343-b86a4968668c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc58fc8b-e9e2-4fd0-aec6-ad1a9027d9dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "026faa03-9260-4ddf-9773-7f851a968e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ca4a63b-22c1-4ace-9fc6-8a2c100739bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcfea31b-ebaf-4531-a558-9da55330b36e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dcedc7f-7cfc-4070-8868-551b5aa2aef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da9b2bf-a114-4e79-949a-605764776976"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47059343-e87a-439e-8793-9231543f3e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "71ca1144-bcb2-48b0-8557-20ac7541bc93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9c9300-3c59-4d93-8628-0507dba2773b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2975703-7c18-4764-b8f3-fa11517c82e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1693ee71-e6d3-46f1-a6ce-568d068c3ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12853d9e-0538-48ee-8425-966179ab4555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fb4223a9-304a-437d-bec1-0aa566385808"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44dddda8-b676-45db-a605-49d28ae882b4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "994881f2-5ed8-4bc8-a346-88a2a49a1f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6091519-6d34-4549-8f5b-660047bfca15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e724aa7c-eb7c-48dd-83b5-635bab773f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "52be7fe6-4c6b-4e9a-bb3a-4b4b61e91bf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2cac7af-1efb-44e5-bc60-34390bea47af",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e179a0-7113-426f-9925-ced575034287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ec82bf-d348-4bd2-89b5-a7206e9f96e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac532ecc-73b5-4396-bbe3-0948f2f280ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "030fe2f5-16da-4a6c-ba4a-36b2080072d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a29adcd-6fd3-4d2f-a0fe-2f431365218c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3bfce8-3670-498e-9ed9-f19b0d89f3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ea1e86-56c8-4948-a637-74f5230a1f85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0775b1-86aa-4c9c-9020-e24577df173d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cda4326-0045-45bf-8a17-f50da8e11f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e07ac33-9cda-449a-a65f-1de4b66be8eb",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1149b250-15bb-465b-b51e-a1b45dd4acce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eef5b0b-4942-4b40-8e8e-095dda1af4e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6f90c3-2f15-4568-a0f9-2be2290351d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "50aa8f21-a0f8-49b7-ac75-1a6289228015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e94f621b-c1a8-4be5-aae6-843c7f665be0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73fa497-0516-4884-be08-83b2c11f3781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58c5828f-30c8-4b99-be00-869889b848f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ccbb2a-a5ea-41e8-8b47-09894556e360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "42f01af1-968c-49d7-9352-6db139e7bdab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c35866d-e52c-4d74-b78e-f9552fc7cf0d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb4dad4-7533-41b9-8d97-24991e439fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f45e7b7-f3ab-45a2-a3be-e6fef1ff687f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123d8d08-b7d7-433a-a4a8-ad53fcfe0688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "291270b5-61ad-4cc7-8b09-3df28cc4520b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b26562-84d4-47f7-842d-987ab3fb28bc",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6495ff1c-4d55-4658-ae1d-a34ba67c07db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0094e5e-0710-400d-ae9e-4d6c483781ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0415f4fb-7587-486e-901e-a0b47dced75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eab92adb-b4d8-4512-a62d-a8454cbc5c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2782314e-6ef7-40ac-b6cd-a9fe6ff85198",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c49425a3-6b1a-4089-856a-d675b6a4512e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5b5a02-ecec-4fd4-a1d7-385540a2b652"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b871e2cd-fb87-46e4-b5b6-fff169889d4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f6d68d5-5657-4d28-b852-08d7e51b9963"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796be252-228f-482d-8d66-ff970a0d3bc8",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbff95a4-0607-4b2c-b05e-b1973c91eb81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5876ff91-2cf6-48ea-8e6c-0bede23f1583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edf859a4-3c9b-4a75-b2ab-8ebc1cadc0ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a005292-0705-4272-a9c5-0be15f52132a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a8a08b-e1c5-482f-b6f0-e4895e50f854",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fc1be2-5b4e-4baa-bdca-b464f0bd9820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c3f7db5-f553-48ed-ad66-f0d18930c7a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c1c0f5a-f81a-4b7b-989c-716795dddd52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2181499-6843-43fe-a5b2-64149a953a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8497d5d3-4acb-44c6-9e7a-3921cffd3d3d",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "febeed5a-9b28-4a05-8e47-7bfa22e24280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3ecbe7a-6969-4528-b5d3-7fb03a3e8eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ace342-6272-4c44-b035-24c2280a3d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5510470a-a447-429e-8a7a-5e4e57c35481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ed8d1fe-ef2a-45d7-a119-6951a96f4e38",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd266e5a-6b75-4b2d-93e1-b42778cd38af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bcc83654-05f6-459d-a76e-08b7afe9e29e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40a67d2-a37e-4a72-8ac4-14fc91db5356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0435eb5-97d2-49f5-999f-c891ed6a0a8c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4750ca46-9472-478d-83bd-7b4a1eb0d395",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8ac09be7-161d-4365-9684-7b1a84ec94b8",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "240623eb-1ddc-48cf-8992-47c879ab001e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85e5215b-bcc8-4c29-9849-dfcf22374af9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49626257-a7c1-45c4-8637-081131da40a6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "377a5fb4-52ae-4632-889a-28985f262fd2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08f518cd-a6a4-4dc3-abcd-255cb34da3ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "628acf5c-735e-4245-aff9-a1c9691db95c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0bb4950a-ee57-4ec3-b2fa-48731a06a1d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8481f0c6-de70-46f5-a844-e0496a247b9d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "74c82eb8-d232-444a-bc1a-9407126fb3ed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f90e1f54-12af-475b-b7a3-c09e23b9dd10"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "682d6d6d-bd97-4810-9c1a-9c1402a9ce54",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e2173042-4f61-4185-ad21-b3e54730c353"
                }
              }
            ]
          },
          {
            "id": "b11af029-0d41-4376-9733-7c2548bd6b88",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f225ba8b-104d-45e3-9efb-0e4c6ce8b380",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "bc9c8eb5-119f-4bb2-9d77-fe485da0cadd",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c849b926-7e0c-44b8-b8a0-fee599f35013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "552d381e-c557-4ae8-a238-b3ddddc4086f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b289ca0d-2cc6-44c5-abe9-fa5b37a35ccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb9080a4-3154-4400-9433-33820cd32944"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "459a319f-a279-4eff-a763-82e8dd828766",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1564bbac-243d-476d-b139-755f8a9a2d7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d6ca90fa-e075-4022-a610-bcd7ba960578"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dfc30695-4d8f-410a-9202-87174452f875",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5ef0edb0-7573-476e-89bd-651fc1654907"
                    }
                  }
                ]
              },
              {
                "id": "fd318667-89b9-4cf6-aaf1-d4b75527d66b",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "391c3fc2-e617-4ef5-a07f-456fc4799527",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "892f3e59-8325-4ecb-9db7-ae0d752f9ee7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7768d953-45ba-413c-8588-8b595ce3e7b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "29f6444f-5907-41cc-a67d-a12671a68c9f"
                    }
                  }
                ]
              },
              {
                "id": "e31ef91f-9afa-4d17-b78b-ed4951277d9f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce0bd5d8-f03a-4d4a-b530-04fa4464bddf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "78b1f53e-2981-4439-8049-8fe061b84515"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c45313d6-ab52-4e79-8316-01211cfe1f01",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9dad39a8-be9e-4fdb-9789-0aa5db40ec99"
                    }
                  }
                ]
              },
              {
                "id": "138cef30-5fd3-48f9-a025-26c1cf89bb6d",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0149423d-67a0-4fdd-80ee-58065e90bbb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "deb3c6fc-2c52-4084-97d0-3797ff29b931"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66bef690-6da7-44ec-a13b-44fecc426053",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5c046acb-6b6c-4434-afea-b59b9874f54d"
                    }
                  }
                ]
              },
              {
                "id": "8b3c2d23-0ba2-44ba-941b-5b554f9f4b69",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a5e103f-c713-4af0-a2de-02e542c0ff15",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "48de9fdd-468d-465f-bc02-4bed74b11e48"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "756ee027-abfb-4213-8f66-552b39247f38",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ad42930b-7b25-4c72-927f-2a0e35ce4ab1"
                    }
                  }
                ]
              },
              {
                "id": "8b2e6861-379e-496f-bfe1-dba794d1f9ef",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "edb5c157-0d5e-401c-a6c2-547da03afca5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a3bd99c-6b03-42f7-8566-ac6ca6e54f9d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "765225bc-5e86-4aaa-bfc6-bf314d00a3ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "288fca22-8098-4128-a398-94e6da470dde"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f70c2f1b-6ad9-4078-9d66-65d66690c5ec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "45dc5973-8889-4d71-9d2c-8e3f7e327f76"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "73a59a49-2385-479a-9339-aac8345d121e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb3ce52b-373e-4ab1-996f-f9bf673d1ef6"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ec68c6cb-babd-4c69-b94e-2d61fbc0f265",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "b2b438cb-8ba6-4d51-953d-4508fc7140c6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6f7216bd-0a50-4346-b4c5-87ae14a5c3ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4fd32929-42e6-420b-8716-a096e4a59e30"
            }
          }
        ]
      },
      {
        "id": "c1a4ea12-de13-4f41-af26-4bfab8e9980d",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "4c836eb6-3882-4f84-be8d-083806b2971d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "31847c4d-6f29-4dd5-8f3d-46fd9635b305",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ca44a609-ddda-4f4f-a8b7-665707ab6d59",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "882d5202-57cc-4b7e-87c6-75f2cb4e051b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba8cdbad-b78b-4fb2-bbbe-4b9ffc481474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9e2907-a8bd-48e5-a130-06654d8c7531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfedfdc9-2684-4d37-975f-a9a47b279906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56105fe7-411c-416a-85eb-15e4516acc97",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48adb8e2-a49a-4ebf-a3de-1aabe3131279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7131b49-e22f-4cc2-90a8-89b0756d7323"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326b5ab1-981c-4bf5-9e2c-1dddf2fdf2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a15a803-d9c9-4995-ac69-03eb437e2853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf8acf6-bd4d-414c-9ef0-63a8acc92d09",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de6dfa1-5b3f-4c27-a033-68125d81d9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bfe2aa0-1d81-4c46-b0a8-dda26c32b56d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c391c5-a14c-4d62-8bab-60777e05b3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cea8cff-0e1c-465d-9b80-21309cb24119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86e2241-7d34-4c2c-9286-d7149e15e405",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af12a984-0566-4f92-8a23-fb27f367cf5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fb78e62-6dab-4b00-a485-c92d2e1e4e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5a3b65-c4b0-4c06-afa4-093d2a6fc088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3e301f70-2319-49bd-a91c-8eb0a0b535d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa7d75d-5a28-407f-a34c-d5f572a7e056",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cadff109-0c10-432b-ad85-35950bc73a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c302dd4-e727-4cf8-b71c-30defb5b6d81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c88be215-4e70-4b18-b74f-4fd2d3d40f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9963ca4b-5b9a-4c31-90c3-d1f010ece765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64350896-4543-420c-9c4b-3418a3c81b0e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b45a939-b40b-4d02-b099-eb3c38821b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "409de02c-49f1-4692-9396-9595c565addd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "943352c7-c173-46f0-8ade-b7f52b7dd414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2125f809-5a60-421e-88f2-d55bb909ce9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dc2705c-b69d-48ae-bebd-b26308269cd6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e062e6e-9fa8-45b4-a670-7de6f54fc34e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2aff9185-31ad-42c2-98d5-5b757dc5c63a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a004c9ea-ca7c-4e59-9b94-da39edd74220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb2feee6-2da1-4790-97b0-ec08b43bf2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "728e1670-33f9-471b-8b49-5e75f90c717c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1ce900-a9f1-4423-9898-dc5af7ca766e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9e34fa9-2c99-4335-a54f-de9a8a3b8ccd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6265c0a-6b7e-49f9-9da6-9ce442f80e0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce51858e-8d7c-4fc0-931d-b7c8bfca4fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb45850-a739-4e67-82e3-fb936cfa2260",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c6b22b-fca6-40e1-823a-219f5ccf2600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f8a5ba4-27ac-4e03-ad6f-4785b34c9e69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6328a4c7-d158-487b-b82a-249817f73532",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "19107b76-3841-4d19-af28-b3382d23cc30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9fe8eef-0f3a-4560-bae0-4636d21cda0d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "422ce735-3687-4c02-9bd2-5a4ce10b674e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb7fe121-256e-4272-aa57-a634e8e40683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9fe3f24-4673-4a77-b01b-826eebe6489a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "26bab78d-d65a-425f-9f1c-82583abaa3d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcc29192-8f84-47a9-93b3-4fdd21090a5f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e841d8d4-97c3-4356-9d33-4dbe75afe5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b95dfadc-0feb-402c-b4d0-102c2ac7c46f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34a00049-6388-4268-9f29-24b6d682a61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "04d6917b-ab7b-4b15-a2c0-eb53930c1c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5b49e9a-2972-43d3-9039-9c83d85221b9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536a1ec1-5d6b-460c-b54f-125043c68c04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d676a00-22d9-43fd-9bea-0c0e03920172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80431cec-a6ec-4835-a175-a74aff63f153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "856f69c3-123d-4f75-afbb-deb21df41872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77721cd0-4ce0-4b8b-ae80-11b11bb807b0",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a88babc0-fba9-4c6c-a77c-1211bbb36d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aaf8af5-15dd-42f2-b3f3-2ad4b729f3e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1115539d-091a-4784-937e-db4fb5fdc6ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3932d39-3f25-4aa1-a2e8-85f0104aed02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e31231-6e1f-4a93-a720-fc38a2dd1010",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e02f34de-4f12-43ae-8577-5a7306f67525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84dc1def-ff13-4dfb-a228-df4c7af5b856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30422c16-687b-4fc1-b146-b2705beb0210",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee370951-2e3f-427f-be70-970c89ad804a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0201c14c-9767-478a-ae60-ff5a46af714e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d4cd94e-fc9c-4217-a8d8-1f542599f2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4193b762-8989-4155-88f1-d52ff1a51204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52fb684e-90e9-444b-a9f0-b2456c2fcb38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad36da5-5ee3-41b4-8a56-d2939883fd1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8190a812-59dc-4af1-a979-c4f626a4faad",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866262f3-5513-4fa1-b1b4-dde66b27574e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98d4539b-118d-4fd4-a850-24a244bb17ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981935d3-9c64-4c37-8c7d-70ca861933f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d208dbe-1993-4a19-a24d-254206e649bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33256b41-1331-434c-beb8-f4c20b293286",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d613753c-9d3b-494d-9fcf-cc69ecb336fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e96faa-1599-4614-949b-cabdee969b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98771d6e-23c6-46d2-9b29-f0a317d29b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5f70c9b-8d91-4080-abdd-b1aff4e097f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ba9534-f13f-4f7f-b237-90bd943e8894",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "260bb25f-9989-4d49-8365-441fb3f40af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bbbe676-a15b-4117-9eef-1963c20c8838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06dca1c6-4bad-45fb-8911-dcf1213f2818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b182576b-1c23-49f0-a49b-5cf8d255f25d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e9fa3b-888e-4e1c-bd37-1b79b88a36ff",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1179939-645c-41e5-93ce-f57902d16bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c0d1c48-268b-43f7-91bf-f9c49028a349"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1237399-0b76-4764-bf2c-2d70ce17fe24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ea8a47b-4a03-411f-831e-0b0988aa2390"
                        }
                      }
                    ]
                  },
                  {
                    "id": "519f5286-4452-4981-b1f7-42f9012de60d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c998e5af-d2b1-4790-914b-48a6ba7c25f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2dee48e-c71d-46b5-a8c7-c78368460cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eac4a4a4-9463-4240-b97d-8697ee2e32eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d633d374-cda3-44cf-923d-e564ed705ef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4492c0d-3fc5-4128-a405-9b8b55148ed6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75244f54-52cd-4e53-b628-756946b6f607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dbbb9d6-7ab4-4140-a76b-751d9f614257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd5a27f-453d-46e9-a73b-d6e8d282589e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d52d4c9c-3f67-4431-891c-6ab27967a76d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c884d9ae-bf46-4567-96a9-9a401e601115",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "631ea53a-6f98-4e7d-8d3c-a0031ad23fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb759ef3-3fa7-4261-9ec5-ccaa3b78a124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ad98aa-ef5d-4a95-9cc2-5a30a2873f63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "292f312e-61a2-4d4f-873a-2ddbf9756c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ff6483-8c64-43c5-8bc4-0ba54f49a89e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda0f61b-4853-4dc5-a1e6-d7858156334c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "545966f2-4974-4414-9041-c7e835a1af79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b0bd198-db61-4997-8045-20a85ee85e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf01411-5bca-4d6b-90cd-727337a4ea86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a16e2185-15db-44b3-9912-04b241c9da63",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8287e227-814c-4ca5-b37c-a3688bf6c621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22c2c668-2b4c-4c2f-a517-62829d218d37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d3db2b2-f34f-413b-8dd0-5663a0eda202",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f0f0ddb-e903-427c-af79-dd99aef94792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8665c3fc-9360-43ae-8dda-8fc95cd9e2ec",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fc68f55-ce23-41ce-9c89-71e20819d4d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e09c5b6d-9218-4f05-acfb-7df3571826b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82341e2-ee2d-411f-ab33-55fdbf4f889e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d3f4d9c-ee6d-4de7-995d-0bcf773fbac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03acc967-abc8-4950-86b9-53f78b5fe9bc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7241c78e-817d-479e-a475-49bd7e1c3a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d690d75-f2cb-47c7-beae-93b56a0602cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260d111d-85f5-4f80-862e-031684be5865",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82ab4464-999f-4ad4-94d8-c9a018281df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9c728d-c758-45c4-a3ec-a581bf583598",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df84b170-56ea-4348-97d5-2e8763c7447b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dad472f-0571-4d56-bc4b-7196203db77e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9aca46dc-f438-474d-ba37-f4b5e64af80e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "358a5ec2-e89d-431f-964e-c417062383e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "127ada6e-695b-43b0-a623-f74be1a6efc3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ee473d3-797f-40a8-9dda-85571a5ff135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d420ba67-fcd1-4ec1-850c-de1c32f9b2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4afbb63b-84f5-40f0-8d80-a7a32f77d93a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3fbecdf-edd3-496c-8e0e-a5f0d94bc47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83aaaac3-fb8d-4282-906b-c7fa7f5cb3f1",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b53fcd-3373-48ae-b44b-27cdb259a15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f001d3ab-5fe5-4dd3-bb67-668c4f75536f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8be1864d-939c-4c96-8fa6-fe3d005031ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbe28aa7-b4d3-4329-9755-ab0e33f17425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fdb91e8-6ef6-4b38-a641-fda5df2498f7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6614b8d9-1ac2-47b3-b538-5e52a9b393a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f6d1dee-7022-4d9c-ae1f-a11d4985192c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e86062-0fda-4a86-ac22-da1cb2d9fc2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e7f9b53-0e16-40d0-b52c-3a3e5ab385fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f72f29-b564-4442-8eaf-195b1df4cd5e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4b658dd-6ead-417d-acbc-79a054b7e3be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c50ef75-295e-45a1-a9e9-77f5c55e414a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ffc892-4eea-49ef-b7a8-9c0467e0fc11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "268ab2ff-1bb2-487a-8419-1b47dbb9b617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7127bd7-3aea-42a5-a4c4-a4725241e78f",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5200e371-1402-44ac-81dc-08660c6b0375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9ada060-51e6-4884-bb60-1f447422d5ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3a56582-3e22-4904-ad58-2e941234b539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39d9fe64-943b-45b3-9b63-241c575d9a18"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3eddfda6-21f6-410e-93d0-8a816d1c01aa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "817798a9-47c4-468b-a216-d4739c9be150",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17db70a7-e59b-4210-82bf-5d6012797105",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "573ee56a-220c-4d4b-a01c-397752634993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a706ed-748f-463c-80f5-089818723a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "743254ab-2f87-4ee5-962c-a90efa49407e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b8e4463a-1cb5-4024-aabc-26208c6f90d3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "04bb14b7-cd10-4cc4-9a6b-52b32ecdbf8a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d22587cb-ef0b-4b80-aff8-7ed04d2f8cb6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c14b41b-cb1f-4f5c-8aa4-8c631e673bd9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ec09631-b83d-448c-b8c3-03ba905c164c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3348f6e1-3ee1-4c49-8f29-a31750dab967"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0a017db5-aa32-4365-a09e-d4bbea570c8a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "82f728a2-a63e-498d-a0d2-0d865fdbea90"
            }
          }
        ]
      },
      {
        "id": "793b6bc5-3296-42eb-8a0b-21756e8937b8",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "1721b339-c941-4989-a0a0-282567342840",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af5f1248-96cd-4b16-ac06-385de4b9c47f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f3ce8ee0-08a1-41b4-912f-3dcd0de266af",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c900352b-44f0-40cd-acab-b042852acb4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "345c646f-90a6-4417-b99b-c03af3fc3639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c146462-e5e9-4f5e-a047-7a3da4fc2638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0429138-1854-4f03-b731-42ea0ccc15f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4eaaec-6d21-4d98-8444-832e05cfb82e",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bbbf28e-5a16-4252-8178-408a3e720167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3deec7ad-b412-4599-857b-4dcf747e5151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f16236-e8d1-4706-b4fa-b7f5c1f79c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8bad0a8-7cca-43eb-a92f-c0d512e39a82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "434d8177-bca4-41ce-bf1e-b68843e51f1e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "836a51eb-2bf5-4730-8078-0ad2f870ecdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99153c25-6622-418d-9cb6-630daec5c84b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e266d2-d81d-4810-a2e2-49894db607bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bda31d10-7fd5-4e23-bbc5-59cdfeeb80ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ea1877-5ef6-4939-86ca-43c128d46019",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b819d434-8c27-4e92-9721-505d489c21b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c922acd-c9eb-47ac-a835-8d60cb3fd3b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43d997e-7e4c-4db4-b644-4338fa0e3ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8e91632-61c2-4d25-83ba-e35e4ddd9b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c786e7b7-8fb3-4128-97c3-cb5fa6545821",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c73c845-0988-47a3-8ec6-28606b075ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eacf8dde-d873-4daf-a4c6-87413c6e7f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f2b861-0bf9-477a-9bbf-26f28e3097d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c81b341-8655-4a74-9122-00a7a7565e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1043cecf-dfa0-447a-bf6f-97ab01eb18f4",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f27daee-43d7-4563-9d4c-2f662259f170",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3da0e015-d183-4ce3-b7f2-305cb7b38402"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea9e388-4699-4fac-9667-c77513af3906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "93bbf9fb-d702-437c-9594-760c0d66f616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdcd3e65-f191-4980-acaf-96670de873c6",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380d5ce9-e8ec-4047-a359-da5a17b01384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f6f1589-00a7-4b24-9bd6-513756f115c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0146528-6681-479a-96a4-335e4b1c035b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "4471918e-5817-4373-a2c9-2affba4e2964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c10a292-1478-4179-b13e-d678416ea49e",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1616bd60-3094-4601-89f6-59b11cd59fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93852add-aa3f-43cf-ad9a-15d5a44e23d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5ebf52b-355e-48a0-a4c1-c0c4218c56f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a724fe3e-787c-4715-9b9a-50fc30412cf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a58533-26be-433a-9440-bf678fe8db82",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81dafba0-5d4a-4d22-8cf0-fc4f91266166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46d93c78-3bcd-4bc3-a661-3d43d6815e8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd53c9d5-010b-4a0f-885f-268db9a9ecdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d802f8ef-c45f-4b71-a8bc-b5ff948c161c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c741a5-d361-48c1-8aca-bed1e12c16a7",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8e69d2d-2380-464b-874b-ea41e110ef2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "677ab016-3429-4f01-ba81-b596c1f78ecc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5548c477-31a4-4441-866e-dece29ac3fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa4e772-f9ab-4cb0-9f48-28b4465b700b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37a8f51c-944f-42e2-8cfb-0bd5d7c8b309",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6861cd93-c788-4dc3-8381-1bcb7ced5f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ce9fc94-4635-429e-b474-f213e09a08ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e216a2-4621-402a-9eac-a2d6f90b3fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb16e99-904b-42db-91bf-f8fc4882b605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf01165-bc41-4247-b4a2-54ed145d56b7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "185db43b-ad53-4438-89af-c8caacf3321a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4964406f-d028-4a68-b1f7-81fd0e09e949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2f209cd-edd4-4a76-90f8-83fe93d798c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "895d3d77-6fc4-4da1-b90e-2c417a6732a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab76b81c-7f54-4735-b45c-01ca64419266",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f968589-b3b1-4ea2-9dba-dd0cf90150fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a2b82b-85a3-45c1-b41c-a32c37d04430"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8802d776-2322-442f-aeef-2d7012cd3695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1237bd3f-95ed-473c-940c-83989529ea88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a77438-84e1-4dfb-885f-7a5db672e3f1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b03062e6-cfa2-45b4-8de7-ace62485a9ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4568729b-2f81-4e8d-8a98-07a51aaa7494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b67b361-c2b2-4f3a-97e7-6b660a181c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "74c02e32-8c1e-4a43-a76b-3e45def86fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af8f57b7-7886-4811-8f7f-c5a501d579d6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599712b6-13db-4372-98d4-89e3d0896420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a409732-33b0-4b92-b2f8-44b2b0a6597e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd5f44b-1901-4e5c-9e62-80b5c844fe3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b246af1-bea5-419e-8e42-c5ac65725c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9703b251-e267-4e35-a6e3-7572e6a2444a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c630e010-c7d4-4be5-8af7-c14c50943b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ce6d94-17b2-4ce9-a7d1-94d51359bfdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31fc9979-f4ff-4906-a974-8d6707552eae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd60cf67-db25-4831-ae19-d42cbfff76a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd982f64-faac-4853-8a2f-31fe50bb26cc",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa00424-eb83-4a39-be94-0660a9b11f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d4b89ec-5193-4b69-a662-ffebebbe6b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d796cd-20d0-4830-bdfa-8b828217510c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b1240e7-9fac-4eaa-9d6d-fb1c2ea88f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b42271cf-205c-4983-b273-0af7637f524f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c00afa15-a637-4ba3-a789-a787983ae775",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd92e814-b6bd-47d5-ab02-cd50e713dce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a806d4a-6567-4281-909b-da9457401df0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "30ba94bf-ee60-4a93-9c84-3a4ddaf877f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daf3eaab-41ce-44f4-a351-e57930d7ac8a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "264e764e-bb33-4c2a-9b32-c5201331ddea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a914e7b-06ad-47b0-9f16-96b2f921241d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13b07a2-4b67-4f54-a469-91ffdcd0cce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c07abc12-7515-45a5-8cc4-43daa8c2e06d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df8f6678-131e-4821-9a08-93e0cc485946",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19aca4d8-8357-4679-909f-f51a1324b88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "431db65f-f7af-4f0c-8268-005e3ef09234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "476e26e2-dada-456e-a3b0-9db153a93b84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23762d1c-d0a0-440b-aa85-65982598e411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e203c36-7117-4957-885b-a213fd8a07bd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c168feb-4779-4bd4-94e8-9f21256c5f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7f5c8c9-d597-40bc-91bd-6e45ab44f634"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046c803d-ba4c-4e9e-a61e-7457f3c3a991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fa4cbf6-2db6-48bb-92c7-25202f45d1e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc2ab45d-1ed3-4834-bbf1-cceec2636d8a",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87351706-0765-4411-826c-d16c4cd5ee99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "189af043-5e01-44f9-8558-0fa69c34c99d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc522ad1-f3d9-4aac-8c7c-7fd38b142337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a6db8e5-0cfb-4e4a-b697-6e1fbf5b415a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b03be8e1-8bbe-4b40-ba09-934b85e06ffa",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34edfccd-8a74-4a26-b174-17220f0ad710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "694d92a4-4005-48c3-af69-55475ef0e1bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f18b3b-b512-45db-bed2-90547c2c5777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19f2ef9e-783f-463a-96ae-d8f678e0aefc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa78902c-477c-4368-af1f-74ed356a2c72",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8791eb48-7495-499a-a3e9-e781d3bd59e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8fc27b3-2bf6-4ce2-8845-8279468937b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a565f4-b8e0-411e-902b-4c5393a8379d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c64aace-cef7-4a24-8ef0-28bcd539ecb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc7c230-df54-4a23-b96a-3e8e44b76630",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4574320-dbc2-4fb2-9452-d20b255c4651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc9932ac-ab57-4307-a06c-ffe6ff328d75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088f05ad-4ad7-4009-bb5e-56da8aefcab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a1da5a1-085d-4d2e-8235-be875edfc834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d572fa-825b-42c7-b11c-17c105c636ae",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82199847-3290-41c4-a45c-14d98d5c8b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b2aa807-a83d-42a4-b083-d0338c6857c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dce764d8-a33b-41e1-91a3-0a73bb6ab3bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b408ae3-b4b5-4f3d-a0c9-530a30a8ea8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a04508e-d195-4328-afe7-39c2c7331413",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd9e368-d76c-4f66-b3b9-1b6cce7c177f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b221d3ce-3c59-4385-a922-c2c7474e96ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2e6effe-602d-41d8-a749-9c57aa889e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbae3665-8a25-454d-954f-5d7864a3c2d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ed0613-0135-4a27-abce-d30b2743f864",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "870e7d1b-eaa3-401c-b3a0-c83ba2d6b35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e90f7e-578b-4129-af17-4f6154d9dcac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64759285-3b4b-4bef-b814-143df2e622a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99a5d5c6-51fa-4b47-b9fc-4df7a574289d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b60bd5c-2ed6-4333-9dd7-a2145e2fe241",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63ad4057-7477-472c-8f3f-9662116853b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae1f5f5d-42a8-49d4-b2ce-64672f0302df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef5964a7-95d3-4182-b0f8-12e3309f4cba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68900247-3069-42db-a562-37e142a62c10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efff9a0-adea-4ece-91d0-c5d18f0b7771",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3a3f749-eecf-4711-97aa-2b7cb6c96c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41eba794-26b9-41bd-abc5-8d4f58858de7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536c0889-ef0d-4e6d-bebe-4e7ea11c7fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea21bdfe-8e15-4fe0-8e59-f3d8100067a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "827bb8f0-56ba-4a1b-9ccd-2910feeedbda",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4530e1b3-631d-4e6d-8e93-1c61bd4cf184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86d8c953-69f2-41d6-85a1-8072b14cf091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71218eb5-5869-4ade-b44c-86e484427e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d44482a3-c9d9-45d0-ac51-3428d01126fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c37d48-f151-46ad-85dd-4dab4a65b37b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25511a05-13de-4bc2-be62-7e03edd30612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58661cf1-1623-4715-b33b-7b427c4cf543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dc60491-cda7-43dd-adf6-2db1984d73cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5e06504-9acd-47cd-a727-6b9c2506dae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2732518-3fb2-4891-8b35-283752dc828d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "560be4a3-6cd6-4c93-a85c-fb7af2bfe485",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c17179f7-4b86-4c0b-8933-51e566aef1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5afe52c9-6fc1-41ee-9bcd-4b2e7f5d92ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a1f6724-f49d-4d38-9902-a8432a9f7fa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5defd162-7c85-4703-90a9-ca429637ec39",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64af077-2fca-4b1a-a3b8-2976b49bb7e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4897b367-36dd-4932-8a4d-f51e1c72d263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "867564cf-8b0e-4c20-93aa-4ea9d96d51e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db380717-53d4-4c2c-af22-3e4c51b3c009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa403b2-eaa8-494d-8bd1-bbb1d7ce2511",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9f58330-8e58-40ea-be21-6c5bd672d039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3baf5ed-4a76-42eb-a4cd-932352f4b974"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c0f6c85-e367-49c7-8394-1c7626bd3ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d67876d6-5e01-4151-877c-d3aca23c90d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83109c89-a5d2-42b9-acd7-6903862f6b9d",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "196c8ec1-7e5f-4c21-bce0-7e36c231d741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d18c65bc-f9ef-4549-b907-f138d5782d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52bd4ce-48dc-448c-a2b0-bf6824665804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0cabe28-a282-4926-85ee-a0513689b4c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3810fc9c-fd80-4716-ac61-4b471f529330",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f73ae6d-4fef-407b-8308-99af1b4fe761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11fcac43-fcd3-4447-9d0f-1f8733f72a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a52a065a-0ff5-4f44-a5d8-c701912d34fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b6e8e26-4131-4e50-929b-189c180b9464"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f10f1ac1-9b5d-4343-8f63-a1232906d75a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9f835b3b-8e3b-463a-9dab-007832817b1f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6cc3c52-e657-4042-b336-398a24cdf400",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7ac0d66a-73e7-47d6-a958-9bdf3542da9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26238e43-bb67-420c-95b9-ae62e47c385c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "617c7721-f1c2-445a-ab2c-a0ede97065e4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ff0ca05-bf2f-492a-96d0-9bd85152b4cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "581b7544-4b43-497c-8b47-e0857d3a2f65"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7eaeab24-e646-43b5-b30f-01ce90aea2fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c439eb0e-669e-4ba1-b674-c2737c8c8304"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c30931f4-1799-4ba2-9a18-44d43745e165",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b65f26f1-d447-4218-8b28-c08a6e8216ea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9a52e58c-28f1-4b2c-83ab-459cf15fd4a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "152f50db-5e34-4481-8b2b-5250ff65c41c"
            }
          }
        ]
      },
      {
        "id": "a194c000-07eb-4282-be8a-6768d802cb44",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d10041be-b0ea-4821-91be-5d33fb1b51f9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6e0c4b2e-6e68-4d3a-bad0-8941966829e5",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e83c87bf-4ea1-48f1-bb10-f76c4bb705e4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "848c7aaf-066f-4110-be98-3f6dcee45cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a24ace4-fdf3-4bcc-8c33-0c5a372b440f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cedbd107-0e9f-4c03-828a-1b3a02292af5",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdd0893a-4f0d-45da-83de-010a76cb0a05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b7ad1bc-ebb0-4e1f-9286-217a77f79b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d87d05-2858-46cb-9609-b6db3f50ef6d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9848632f-40d1-4e83-acca-5f52fb5502f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f7c4ef6-9728-487f-98bf-c70f4313973b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e1da183-71a8-4c75-b51a-04376b2d90b3",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5672b5a1-c037-467f-8671-a2bbe539e004",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d3f6201-9811-459e-ba47-57ca7ccd4b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16eb311e-90b0-400f-847f-033d37e75d39",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eced372f-6448-4a03-b310-5e9f932eac8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1bb339bb-fb99-47ae-bb27-3d38330e40eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7416e852-12d1-4fca-b8bc-aa93336c2bc6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ce2719-6de6-456c-a162-8e68a4e7b5c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb8e66ec-9b36-41c8-895f-a5d700fdcc30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "867e398c-5452-4850-b4e5-05eb942cfa47",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8332aef8-b655-45d9-aa57-814d1b313d70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c547da0f-1ed2-4dac-a7e0-cd55b19ce039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f5efe7c-4578-49ea-b075-ab059354f2e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bf35c21-d66b-46c8-8eb8-f4699ef97fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590afb01-117a-44f6-a362-4109028e7347",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b94d4c27-2d22-4fe4-98de-ee93e348ab47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e63a082-2f9c-4323-9f58-f8582322b030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbb3ed13-b858-47c1-b4df-0d175cbdcbab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8653a81e-e1d4-43c6-a7ae-383062a2f6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6279e86-7d64-4956-ad02-d47a92853a32",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4403078d-9941-4757-a015-d0cb9a47bce2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9eab2a7-3a33-4e65-8b68-97572c4ff18c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff70555c-91d5-42ce-907b-e6939b0f88e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e6e788-2eea-49d5-ac2d-401d69fa0780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acef49d2-6469-4efe-9cbc-ac10cd8b33be",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7325bd1c-d794-42b8-9d1a-e4f2821edd38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95804e03-b025-477f-97c2-82a76ec5ae57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01200dd0-e290-43d7-96ba-6e083bf989b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a1c25db-860c-46e0-9499-23d1603c22c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d149bfa2-e756-41f4-9fd6-f46e83ce8f4d",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68adfffb-fad3-46bb-b994-72d56f4807ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0317e8f-e8c2-4474-8ff0-e565a04f9a9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38a80cba-3c20-4e15-9b94-38c27bc01fa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e26dc44b-244b-4451-ab4a-97ceec265dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60aaf649-5dc1-4540-8779-ccf754976a81",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a35f4ca3-e9cc-4ba5-90f5-acc31cd4eb68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e7b2205-fe02-4326-ae52-5838e23f7c1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "522840f9-a0d4-4635-adf9-2465c4afc651",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e76b1ff-6f86-4512-97d4-3b6b6c7e85ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6c41aee-bccf-4b47-ac5d-3623ed90a646",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b20a569-b3b9-41e4-acf9-0b87fcf1b48b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76b283b7-a479-404b-bda7-937dfcb08603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c2c0edb-7b57-4355-93fb-3ea5e16aa4b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fb1ca5a-51ad-4e83-980c-fb7f9fa6ed6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed570da7-ded7-4ff5-b218-65e96c1c9746",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb69347d-e039-4fbd-a4e7-e6ea7d6989f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc3a274d-6781-4901-aebc-75046403d60f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4579a66c-2aa1-47e4-8b72-036b88c58aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f78e1780-264d-48d3-988d-2845a2a7cd88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc4f77e-f903-44e8-aa6d-6e6509c1aa75",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8330625c-b910-4515-b595-f241356eb2c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a59fadba-e906-45ed-984c-8109af0bf917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff91eb19-a554-43e6-9d4f-4dbf03b3710b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d164d31-bc80-4221-acc9-35d7494be279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d21e0ef-d4a7-4f17-bd5a-12b8d6292786",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a0b4b0-c9be-495a-920b-d9475c356983",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88bd7c06-48cd-46eb-ba4d-c5a50287d18d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cce86322-837f-4c2e-89fe-d6db1d09f706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e454f28-b6e1-408a-9bd6-f96f0c70f9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34a60a69-7c5b-4b06-aa33-ee7f8371aaf8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f3df5e5-ef97-473d-b9e0-98cd7ee764df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead5c0a7-1ff0-4fce-bad4-e5f47157ae3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23af4246-f81e-4fe4-a50b-879602d3df17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332db5c9-0ecb-4311-b322-bf22a91ab6c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af62879-c653-40b9-9f4c-2f9c9ba6b2fa",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6273b8d1-70a0-4d97-b567-6ec5d6527103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c2f9968-23fb-48d9-b785-2ee72f1985bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa309f40-1b2c-4ca6-9445-8278730e82c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1d709d-4b4a-4ed3-a253-f31e7bea99b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762be539-0723-402e-ba92-8ed954a236e2",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7eecae-3b58-4bbb-826e-a21a51e4a21d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a725106b-97ec-47e5-94de-4cef99db1c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b603bd7-9d34-4930-bbff-d21b55a11887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b08a091-dd91-4a36-8793-d379cbb18503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbec185d-a861-4ad7-bee5-cc4e1207816f",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "063feef4-c9f3-47a1-8613-7efe786d29ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4f93c39-d445-4dc2-aba9-ee7e306ba4fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "880ab3ab-8e28-4dac-a6f1-8593b9925655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c285041e-69d9-4044-8139-e416d37556f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8902227-0a03-4d3e-b318-6071258e3a89",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1355d499-0855-41bb-b144-35e2508dc82e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9737749b-be3b-49df-acf8-79a3266a6ca4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0ea8928-5632-4a0b-8dba-e9cb8a4be260",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b809e479-0a79-4872-be04-84b0eecaf4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3f4576-ae1e-42e5-b0f6-c012257795cd",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f91e159-a573-41f6-8686-8f3e06e8d9f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "992b5061-b55f-4c3d-8db5-97e0459337ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "244696d3-297f-4dc4-9dbe-a077652b3287",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea537e1a-d3a4-464d-bae7-7edbeb0adb54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8dd9155-027d-4db9-a8db-3b3a828299f6",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a22931-353c-4786-8da8-b63fb34288d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555b8eff-89c2-4b83-85b2-1d33e3e6f5a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddaa3f1e-5bbf-4215-a639-a7cee2db12fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abbd1265-1196-4a3c-9b8a-9ff0766381ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb09172a-f946-4ecd-872a-2581a73679a1",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144a4c75-0e6c-408a-bd8c-e8675064d0a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46f65de1-6682-4ea7-8e5d-8460771942a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c70f4b-11c4-46ac-95db-52e7a9b6d08a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de06d06d-7a5b-460d-9f1f-b82c493d5f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "272db088-b9fe-4744-aff4-3418eb6c405e",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "824338e2-fbea-423b-abe8-c9db33ef91dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "402a36eb-f158-4a88-af87-af2b74c72445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2b3b5e-ef8c-46ab-a534-3f0359d20ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b049bc0a-d1c2-4b5d-8137-2936b7f507cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "684ee66f-d03a-41f7-9cd8-bc6dc491d30e",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e10928-9b57-4a18-9e7d-418a2de298e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c074fc58-49bc-4ead-abe1-517aac6daf23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff19b173-7bd3-49ea-bc80-4f9f6806d64d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5c3f0c1-c5b3-487e-a926-d7a24c34c683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "035a5d83-6232-4bcd-8772-fbd707e9003b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7395acf-61ea-47e9-ae39-5d3e9c2e5dac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "774e2a62-f4e4-4874-9d88-2b9db3c9ffae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f27f9b95-a331-4f18-a16a-10ded1b4a5f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e3907ba-25da-4b50-8dba-7362b4777974"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71775a55-8933-4b89-92fd-9b931b8f56b0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91de7e85-f33d-476d-a82c-6085d1e438e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6736f9cf-6b83-48d8-96e5-9c0635f9f7b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4317c48-09f3-4bd9-b523-136db9b1bee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56470cd2-5b54-4847-a5c2-ccc648ab6e32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3687de29-8f52-4fc0-b7ee-6ecaffaf7805",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea2e22b-408b-4861-aeca-d320504ec7d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ff65ab8-6d8b-4ec1-884b-e0b8f92601e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc1979f5-2d82-4108-be44-ae32eb73d453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "766be13e-7b63-4c12-8ceb-9c9999a76512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "491de4be-2631-4e73-bdb2-5d7b72a0fd9b",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "315dc4f2-7ecb-49ff-ab83-db7f0af01e57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7adff4c-ff25-4e11-9cec-da6e354dc399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "155ebba0-537b-4aff-83f0-d746f4c1bc8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e7ba634-183b-484d-9d6e-bf1315be2de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f1ede8-42f6-45a3-a091-f501d44b61a1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f35c56-1601-4c15-8a41-e5638a7ffbe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1bc3805-3e51-4560-95cd-3b4f507c6e0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7619816-4b94-44d0-9776-0b84164ad253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e4fa917-e1f1-4df8-8c11-d2d4d1aa0f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05101b58-67c6-4c40-be73-b80930365f21",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3313e678-20c7-4e57-b339-681e01823f89",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1b62050-436a-470a-833a-329c94bf70e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7b34b6-f023-461b-a0f8-f8a2c457a230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1693749-88a4-4a90-aa69-9a72ef28a346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "300ea198-5f8f-4eb5-a2e4-0639602df02c",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a66672b-2c66-4616-864b-14bef617dadd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dedb34dc-77c4-4eaa-a487-23854da1c7fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ec98c7-6440-40fe-a5e7-df752f4d0149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9559b17d-fa87-47b3-8b98-11b2d50fe116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a10b378-8a95-49ac-847e-6b813e71fe0c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b79f577-9c1c-4a96-a306-9a77032aa63d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2153fff0-175f-4ca2-9413-9898224db40c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3377c0cf-43cf-420e-9da7-fbf8df45534f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95a730c8-c47c-4784-aadc-60a748e01401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c28a49d-50a7-47ec-9a4f-d4fce1171fc9",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877dda96-458c-41a6-bd60-f5e21338ce55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "958462b2-0808-4508-9f5b-3c40fdda5af8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cba3f63-a72b-444b-bba5-57b20d2aea7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0d58757-eef6-46d8-b6e8-45e4b46fbe71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "955ccfbb-cfe4-488e-8d2c-2aae3c1eb3df",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ac7172-b21a-4b67-810d-091c71fd2e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3de2d152-965f-4652-8912-9737793f5d58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "628b6096-df66-458f-9af7-d877da44d72f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaf72fa6-9f6b-42fc-9404-ec32e6a87281"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aed01e10-0079-44e6-a568-bc04049abbd4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93746da-276c-4438-a73a-06b1be1ef5c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9be95cb-a9e3-4306-85d7-87e12ac703a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b48d93b-a576-4adf-8a78-a7078ded241f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43a72a7d-0ae2-4f0b-b206-675fb2066c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a6a7b64-7ad1-45e5-898b-9834ae498190",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9d836b3-7cb4-4e79-b7ed-0655c545ff71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39ff2f78-15fc-4585-a664-2facaf578eda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a0fbb2-86db-4e00-8b36-29ad0a446712",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c489d7-9740-418f-ac75-2cf4c6949f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f3c1ff3-806d-49ce-8ecf-b4dd08ff8cb6",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5e3626-e17e-45eb-8998-05f2340bd82a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0911481-a9d9-4ad3-ba09-083c519713d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74014a3f-b766-442e-9122-7fa82dd36a80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5f27e2a-9fb5-495e-bfe7-37324dfb122f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e751c8-2971-4601-a503-aeb99497c8ed",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "971e2533-364d-4d99-b5f2-08ab7e822e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6246a71-5dec-4fc6-8fab-603e5403b640"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42eb5ab-ac03-4fe6-b628-4c914a05007e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "214eb419-e053-4b0f-ab7a-1951fddd4122"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c129fe-033f-4586-a0fe-fb88937f4661",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff5e94d4-5962-4170-8023-fc6b0a9eec19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488d4ae2-029f-4a45-9492-610bd6310e28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6957310a-e3ca-4b9c-8f5b-d346e408fb31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa9449d8-978d-4894-9296-504f357015ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49f288ee-2c73-4a5d-8c34-e3c5a97f2b14",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028d152c-dec7-4e25-a386-6d25305759f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84cc03e-3e81-4db3-87ac-07e9c24b6e3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "714a8705-0e0c-4e3b-8c21-948c447730f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62d8cb7b-4100-4654-9d79-ec2bc052646f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3a25fb3-7030-419b-8d63-5bbc062219aa",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08403c89-3c1d-4759-b851-5d0be0837d49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a606ab61-5b0c-437a-97ec-463fc80fc75a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ef2cb8-da2a-40dc-9a2e-97b05ff17cf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f6d911-d94c-46b8-8c95-8b4f2bf13aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bf38bd-4d22-40fc-b1ed-a00654cf3c3c",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8069affd-4a4d-4e0e-bf4b-5c015d5155d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8e7d6ef-4ff5-4e66-8d8a-582ca2bd9c81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ec93271-0f60-421e-baaa-0017719755e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b461028-ca14-474b-a400-b20f2e19a3e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "168eb569-0c83-4a5a-9d2a-7265de171cbd",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff47cd0-ddbf-430a-9d83-a5e390d324a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da95705-8883-460d-917a-a653f2196702"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ec0766-7b85-4e42-bebf-c37de7438bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07367a60-71f6-40ae-bbc6-a7e288d49a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e54afd-cc5b-49f3-9d61-50161df20a49",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef83d8ac-001f-42b6-8298-5b5b9110d83a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e13868-6b6c-4f43-a085-f6f9b6798f41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6dad974-324c-47ba-9b77-5f4da18edded",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2a5d36e-72ba-4ccd-ac4f-bc276308ee3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f46131-c396-4d15-b4fe-4c65121932cf",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed5945e-7856-427f-a308-89e8a9b8344a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b8ce0d7-28d1-4aa1-a2fe-a97f494a198c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c316472-0e75-4483-b964-4993a9c543bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96fe7a54-4f30-4277-bf3e-e80eaa3788be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66c27691-b5ef-44b7-b41a-4afc431484d5",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "369f433b-c281-4b52-b1e1-47b58b1997ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98e8163c-5a84-4067-b18a-b16bd4c9e7d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cecacb-6091-4fb0-b472-f819e28d6cb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a127946-0579-4ce9-885f-56ce46271647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e6a683d-53f3-49c5-90c8-709dba291f89",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e340c0e4-3fb9-47ea-9312-c7d1199177ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db52e449-330d-4b51-9f23-1e0fd724ca1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2e4d93-9ffb-4526-ab09-c7ba142c69fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c8e6355-7d2c-4679-8d99-005783f4ee9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbef3757-b856-41f9-bf89-2b0ec44c65cb",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05c4c11-36cd-4de1-8308-5534068cd690",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a418749b-c107-43ef-ab9a-95a59197c0cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67515917-abba-47f2-a485-48599e3e30e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "652ff5dc-25c3-4d16-9e88-226cb86a1384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8df065-8389-4791-82ed-543713306ac2",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65dc48b-49f1-4691-817b-05f49015f5d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8899baf9-110f-438a-affd-d954f9d2f117"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3b4d1f-a114-47c5-910d-5ffb58ddff0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724f2d99-0ce8-4f07-ba45-9eb4c1dbb453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000d87fa-1e06-493d-91d9-ff20cc6cc9b9",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c944a32-9407-4b91-91af-d3c660e35d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364e6902-f7fe-4f86-9f57-4d8a646fef66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b23a1fe9-da52-4ebe-b576-061afd65f50b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b7e1c5b-036f-40e9-8623-0ba5e5a8fb5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0af612-4c72-4a73-a0c6-651aa3707937",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8d79c6-8839-49a2-abd1-cc9fe8283c84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf67cdc-45c0-43b7-95b6-ee8272b921f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41cb6968-2707-4a0b-8932-13cfb821c9a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9937d5fd-bd66-4dfd-8d3f-f81c59065232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0cf4db-c2d6-48a3-90f1-9d4b45a871cc",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa00f0d7-3a4a-4382-961b-6e71926e2cfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "868a6a20-c585-4797-a649-67bcd1e43e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3af4183c-9664-4462-a077-e3ac59eda9f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffc97ed2-5bc2-44a3-965d-5d3311a86f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f2f3f95-4e25-4f9b-a036-57556d93ccb3",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "573e5af5-af20-4ac4-8d03-3250e352ecef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "647191b7-0e61-4c2d-a7c6-56a3f9f41482"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1548e6cf-a353-4c10-904e-75c1177cd873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfd9c7b5-db8a-4386-ae1f-41413ea0990c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "746faa88-4577-49be-bb32-0e30b1b0e616",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b71b341-9479-4ccb-acd7-e37d2f08d652",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e4ee5f5-fc22-43c8-80f3-efe4266d4651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "823e4961-5809-4bb1-b17d-12d6319cc79e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d76a117b-627a-4484-8177-8979d3faca37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d0352f-187e-4781-8963-03837264359c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d681f3d0-b25e-4072-a921-3dbd50a07d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b495ab16-6c37-40f6-b095-c94b79f1bbaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cca2da-8894-4c25-bcfe-baf5d599bc01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73efeee-363d-4408-bcf6-085e63e8598b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8793837a-ff03-4f35-afa8-723659e1a13b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0ba36a-70e8-412f-a5ee-eaeff127e0ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31b42261-cceb-492a-ac94-bb47ce05e07d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "252f8236-c095-46ed-9c4e-8f24eb9c0ebb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2c49c8-ccbd-4469-b90f-23dfe60234b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3751c0ea-d95d-491d-8856-8c5b4ccaff88",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465e22a8-ddd7-4a5e-a76d-86004d71a3f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b61e9bf8-9ba4-4f63-94fc-ad21929e8925"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "045c8c1a-0784-4af4-ad31-ba67867fb342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99688b08-14d3-4b62-a792-159e1d6a2877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8dee784-e49a-448f-a762-0c214acdb170",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05af13c-6aef-46a0-bc71-f7bb864765a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64388042-0c2e-45c7-922d-106f7e50063e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0e7bd1-9431-4d2e-8431-aeac754636af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec10f5a3-0ddd-4713-8128-fdc277959c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0035fa9e-839e-45f2-aa5e-839ffc0fef41",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212f4c90-fe78-4564-95cb-64086ea5b06a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "175e2a44-0c14-48f7-8459-a255caba48ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56094267-9c0b-441f-bbf8-02bd3b68085f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f2f04b-6d0b-4a65-b7dd-25a46677df67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1109c22-6067-45ae-86c7-9cadc13fed62",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e050cc00-b9a1-4e8e-8a91-169c221108ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc71b87b-0e4a-422f-bb81-ded36e3defb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b5d291-329a-41a8-a6dd-a8967f0c4717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9208104f-136a-48da-8ef7-6d4f6367845d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f70e2572-abb6-4c1d-97e2-4ac79c5cb4f3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95764101-e2e0-42d7-877d-5180871307db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57fadbe9-10e0-44b7-a630-da1b0ddf5feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec0b8b8-6128-4629-b166-37be902d8df9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccb29c9b-8356-4f4c-8357-d2445d3291b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87039860-a62f-4ed4-83bd-ec936fa6b571",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86005ad8-42f3-459a-a395-e46316370813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9080b2cf-45ec-49db-a25d-60ff49effd11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7890e9-58a2-4693-a18c-aab685309194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f471678-3b5f-45a9-b1b4-17c85db44c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c31e96cf-6913-4fb8-8ab1-a5268fd09136",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38307a7-dc90-477e-bd4f-d789c13c5573",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49635d6d-cdbe-4d72-974a-b1d1937d78c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55d0fd7-3bc5-47a8-a034-7bfebefed72a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50952a01-b34a-45f8-8a30-94dd03aee590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c770e5-f60f-4a55-91df-a94a1d156693",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09fcf228-59b6-41fd-922d-b9d47228ae04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df0f1cb4-dda7-4f2c-8c3d-c029651d24f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16a6d7f8-9bfc-4295-be2f-535b1337aaf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca71fd13-6c31-41bb-9ae6-0f86c51bab4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd2bf71-3f5f-4302-9097-a91123754fd1",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8bd936a-96f0-47c5-9ce5-1826001606c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72127423-27a9-4dc4-b154-341b786c3948"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eca16ce-ba44-477a-b23d-e82fe159d0d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fe8b35b-2718-4136-8112-28e63362fe2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2bb04c5-e51c-4580-a4d3-a4b2e3c4d095",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688319cc-a630-4091-84b5-82f9f9850a00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec4f82e4-d2fc-4600-bb45-b1b447069411"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdce9d8e-1d6b-4624-978d-f1ab3d421d18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "914b6278-007f-48bc-9245-867753d413ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3028a0a-93e0-480b-9e25-dbe8bce2b86c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f67e6f61-5bd2-4220-ab12-246a547be817",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77b73cc3-5140-4c27-bb76-a922e9990ba2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a850102-1a4d-4e7f-86b5-ac6ce414fe7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffaec151-b5ed-4767-a5cd-7f137ee36be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c597931-6646-4924-b157-db3f5d1f9cdc",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "102217dd-b3d5-4ebc-b7be-6456772939b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36c2ba22-2371-4909-bc9a-3ff7af110b7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a69777b-584f-4b92-99ec-b70cd6a3e870",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c63d494-2952-4148-9ea1-836a90d3ab32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad222f90-81f2-4116-bed5-a8627d997085",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6473909-fe49-455e-a3f1-0acd22893534",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5694d10f-68aa-4697-b9db-cc6e833d967d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41b26dd-21dc-4b2d-9e22-f08c66f4ed2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eefd2ecd-d1ee-471c-9d84-efe5661d73e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4109bf94-6c3a-4f88-9fe1-f1683a61a897",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2277a69-b519-43a0-b46e-98d2a5d5831d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dc0ed0d-ed87-4155-bcba-efa008e35060"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29eed02-ea93-4e94-a5ac-0f904d4fd1c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "934f98f0-8d63-4d1c-9c43-9e0b8d568c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284f6e1d-f954-4ece-9f58-d501d0987aeb",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e06ac739-d69d-4cfc-9778-1c89babb1753",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ee8226f-c54e-49b8-ad0d-85dc499487ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02fcdec-320b-4862-b18e-ecafb2b3eb28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad001b75-c910-4a9c-b022-66980d2ac983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbedf1b2-eae2-4e0a-bacd-322b8f5ee50b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc515833-400d-4d0c-bcbf-a920dd350862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "049500e9-0bf6-44fe-b849-b133a0d02689"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "873635b6-1970-459e-b2b3-122ff42a623b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cff101b-4fd2-4108-a8b6-d2fca5b1d06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877cdd8e-641d-4117-97e5-32ab0a50f6db",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e5f9d22-0d09-4ba1-b873-843cfdcf4785",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "603b74c0-60a4-4521-8966-82f733d69928"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3327c38-3f4a-4702-86c4-e0a92fe7a9aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c234b966-417c-4045-a816-b011a024d3e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55740de8-1c8f-43c2-b5eb-a65cc6f287d3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aee5256-43b7-4f72-b0e2-97def37a8956",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a4c354b-f814-484c-bf47-711c661b8f9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9a18b9e-74a2-4459-9430-2ea44c237504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67522072-b0af-4ff0-8e90-53ddabb0c139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1edec95c-e1b2-4dfe-a115-0d1140b6d547",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c3dca7-9045-467f-90d6-003c1d283426",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1caf29b9-65c8-438a-bf4a-e275d0af7f32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b993798-027b-4e02-a6b0-10af218f419e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15127ac4-b255-4d9d-bae3-5c974e97cf71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac60f0f-1bfe-4e54-907d-9bd891f1c75e",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ac4907-505d-4953-9559-cb4adc9e407a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22afab5e-5b76-4a8a-903f-34aa2071ce42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec99ab32-6e50-490a-a18d-14fe327ef7aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2b9ecf5-621b-4bf7-80e9-7fbee38611ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41eb2649-2527-423a-bf2a-5ad65c640050",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a988f1d2-a479-4fd2-ad54-cbee351be552",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "918c0921-f4b0-43d0-9955-3660ad4cf00b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fccd077d-32a0-4dc0-83a9-5fabc01ac6f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7705bca7-efe2-4e14-8755-1e5bfae29a17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0087da98-574f-402b-b4b9-2ea774d99f71",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "202b7a47-2598-4fe3-86a0-7c91b624dc70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e221a65a-b74b-4c5b-9faa-c8dcb783b71f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed85b85d-17e2-4de2-98e9-771aea0e473a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cbadb5f-ea87-4d66-9fc6-c5db28a3d25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6700d9d-0e89-4293-9830-006a55e6b516",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca63e6a3-82a7-413c-8a2e-42047fc5a866",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eebb770-254a-4ba4-8880-04db116140b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ceb2f51-0aa1-4e94-b56f-61e5b9d96419",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03ae8417-70b6-4388-b3f0-61efdf56e8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff65404-d4c2-4905-b2a9-7a9f092c0beb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9931c767-2b14-44bc-8b60-b4fd29fd492c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22169fd5-3994-4f0b-9a4e-41b17f5c256e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8414577-c5aa-46f0-8730-8b5a747a5c77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbb391f4-85a2-4bf9-ba53-4fe383b11821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11056e1-94a1-423b-97e7-c6dd5cae65f3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641aca71-554b-459f-9183-8f0840e765ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "668e06cd-b45c-40ca-a8c6-5c1e950c108c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97ecfb50-d3b9-43b2-a997-e5d82758ad4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6c05d80-8bde-44ff-aff5-b584773fe124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18db6e7-dfed-4c32-8d94-c8221da79acb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b00564-9a52-4da6-a5a9-183cf13c8ac8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "39d778c9-b0cb-467f-a924-4069100f8e58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49f58cdd-405d-47e5-80d4-c0e490282d22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed5af627-d199-4fba-ae58-83ec3fd49d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072d5f56-626e-4d44-9e1f-8daf5fd461fc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4103d80-eacc-4aa3-889f-64b0fc9f740c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2c45fca-4b6f-43a2-8fa3-5279eb2d7407"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53810e5-2bba-46ba-bd3b-d99bdcaf19b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f59e912b-f21d-4f8a-8ed3-3f269bca452f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78be68c-06b4-4b1c-8dd8-1b24f83d2c94",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b865c1b6-7268-4be4-8ae9-5dc3e8824575",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6b44094-3a60-436e-82fc-61155da0816b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ef08293-cf81-4b9f-968b-83d69876d26b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79d1fcb7-827d-485f-a9e8-eafbccd2653d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c32764-5299-4e9c-af9e-1c76ac1e67e3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4dac29d-3c6e-4346-9ea9-ded28dff3156",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcb3a9d0-5388-4036-b1d5-87759b1256e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb959f9-e921-42cd-8958-abed7d3b3c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83e8d922-d39f-449d-9ae1-3edee2a3f49d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6673eb24-aa16-4555-a273-2e10aca28136",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da132189-0a00-440a-b327-1cb835c40137",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "508ee676-98ec-41fe-9907-ed8e5a8f32c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d555934e-554b-4b9b-a784-9cdfb28953b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11e57f97-19ee-4932-af19-80330f1044a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50f1dcc1-16c4-4144-9424-5a12ca067a52",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78ad7a45-c086-4bf1-87c5-88eb36aa7f71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "443c0ae4-96f4-4e7b-adca-f0fc600a21ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01dd5179-9df2-47bb-97f7-67bc9e39a9e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b40b66f-6779-4b94-9877-c0f6ee9af4f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55adc500-28f4-4d54-9c15-8dbc60563e81",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57fc9f4f-2022-4e7d-8be5-c4d38627173d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ac2a915-3ffa-484b-a1e8-3a67a0e4dd1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e4033f4-6d2d-4a98-9e5a-eca9a58e9053",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521a65c1-1cf2-4b76-88f3-94cf7945ffe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1589181d-862e-4fb6-9140-a00201e6ae4c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf6fb0eb-80e6-464c-9fdd-0bd4368bcde0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bacc33c-2461-4396-b3f8-404a5e570244"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed701a6-e540-44ba-8499-2b81ca3093aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7d91b8f-d353-43ce-9e9b-02b6e5c0c519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1c0e39-a4bb-4e09-9e6a-ff128ec38020",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf4c7e4-5a8f-4141-bf17-f59c04936276",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32bd4be5-4aaa-4590-a274-9ef99b97f9fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47792bbd-07d0-4344-b50c-7f61e493857a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469f5427-7bf0-4318-9098-a1718b896451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3aca93-2e2c-4838-8d2a-5594495e5467",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d2a0121-b9f8-4a51-9169-ed9d53f1241f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7b6bb60-eec1-4843-a632-57941c8d1025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5a55a4-8f6d-47a4-b2a5-36daf3adcd6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "156630ca-6a05-45c1-9272-a35313692feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebecaa5a-623a-408b-998e-e532fcedcc05",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1973bab5-148f-4c0a-8b24-aa60d1212cb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e25163d1-e078-4124-b1eb-4873ab8593c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa6443cd-a351-4845-a513-8a0e02d1b1b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acc60968-422f-4473-9f51-9b27feb2762f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b3b0fc1-2a76-46c8-81c8-f16ea3efd3f5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de592bbb-fa0b-4e5a-99fd-6c5441943082",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "698e5b4a-cca6-4fd0-8f5f-c76189839564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3822d5-3d1d-41ff-bf7a-71eb03a51373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dcdae45-740f-43eb-bee8-87c306bc79eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01cf5c50-ef37-4e66-a1e4-2e7e993b89dc",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cd94763-b0a5-4b1a-a871-b5f61b3e5dd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "603bdc86-1102-4b92-a9c2-0052210535ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6993dbe2-e46f-4646-a9b9-72df705177f6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00cffe52-435b-414c-98f7-821d5c6b8db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a38f2cd1-7608-4b5a-9769-1bb58f1cf5d4",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c82254-f51e-4bad-b77f-696028d1aff0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8f026b4-5f8e-47a7-8a92-47bda0a41c66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91bb5df5-2867-4be1-93d0-8c6747400596",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd514df6-697f-4d48-b5d5-dd0ac16a1a17"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d5d420b0-2a7b-49d8-bc71-55dc177f011e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16d86c4b-b08e-4529-b5f2-2fef7751ba3a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a9105ae-aa25-45b0-bc6c-93c5a8221d7e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7ed390ca-9cb1-4ff2-aa5c-d821bb007c9a"
                    }
                  }
                ]
              },
              {
                "id": "3d9d6ecd-c5f4-4057-9f43-40d2f42b408b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5a08bf5-6974-4653-8f20-0822b7450294",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0db9da-7796-4ef0-9a33-393c7d2ff65e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a774a652-83f4-4ab4-9c64-3750d3e19e83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "575425ac-aa58-44a7-a1e1-3830e9306d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81c1651f-97e8-4c1b-9968-98df82bd45b6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0a91cbc-ab94-493d-ad49-838befb31301",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0700a95c-6140-49d6-9c4d-ac0bcf10efd2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "56ab52d1-79d6-4b29-a407-2f6fce8aa10a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0cb4a81a-a4cd-4165-a76d-bf0c216b78ef"
                    }
                  }
                ]
              },
              {
                "id": "ab88fda2-5d9a-4a60-81cb-f00ef4bc86e5",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9cf1914b-8eb3-4c15-ac98-f582cb5c775c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e7b5537-63df-45ec-8327-c09ed6d7c071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "cc515ae7-5a6e-4203-a401-e71016bc1002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d523ff-bc72-4234-9823-3adaaf463fd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d3c96e-4e2b-4728-889c-76ee1c4cbfc9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "743316bc-8b8c-4b3a-8fda-f0b592498dbb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f6774725-8cf6-4525-bf1d-3c8f27d3e775",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8460129-08dc-4be1-8e55-b45fa77fbae6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "dff9cc85-7a8b-483b-8eb4-ef57b57a769c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63a96374-069a-4eaf-a562-2342da8caea0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d4fffc7-d031-46ab-b6a9-b6c31a781241"
                    }
                  }
                ]
              },
              {
                "id": "664b5f52-fef1-4331-80de-746d6e2002e5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "49e8c6d1-47b6-4e95-ad8b-690354c2bd20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f407659a-1abc-48b4-b556-5e1b4dec4912"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d3f04d74-bd45-4d7f-a081-78ba3f9f4b87",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d86ba3d1-a178-4129-aede-5af83e911413"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5427d85c-b60b-4365-a1c2-13cd1c575246",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "540ecb26-7f64-496b-a6fd-00838a16c993"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8144219-d673-469a-8a84-265086892a75",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "929037b4-2175-405e-92aa-a0f5db5dde22"
            }
          }
        ]
      },
      {
        "id": "85e9d8c2-d199-4866-a848-900334723834",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c46fd9f7-e9b0-42d5-8635-95c31bb3daff",
            "name": "Negative Testing",
            "item": [
              {
                "id": "93eb99bc-318c-44d6-8935-5a822facf838",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8d525e29-113d-4a4e-8587-dd8be3de52f4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "657f5ecf-28b1-4c89-a676-8418d9709835",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "aa234c3c-5372-4bf7-be83-362bb4bf2597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "572799e0-9246-438e-9f7e-704428a415ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6f6ad66-784a-4b37-8d90-9f05155ef00f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5011639b-dd51-43ec-bda9-81095dff8c97",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af5e39c5-bee6-4423-8fc8-95c6b8d2b50d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "078e7228-9126-44de-81af-b5bb9247f302",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d92914c-462e-4b5a-8d06-8ce2576588e9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "742dd058-0682-4d08-a9f8-34c44d132452",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "9aad9e11-134f-41ce-943c-798b9743d0da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e60083d2-a2db-46ac-b295-c104ff0e1880",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b7d3e958-fc13-4aea-9ec6-390585db88dc"
            }
          }
        ]
      },
      {
        "id": "d4acbddf-1d20-4161-9e1b-a3ac6aafa42f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c9366f11-0021-4561-92ab-4365332fd0e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e59b45fa-bada-4f01-95a6-8a8a8e92f4b5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "27b4def8-47d0-4fed-827d-f0983f283a1b",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f44ea40-1811-4eb9-bebb-9a55c0e78580",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b70b9c2d-4f7f-4ddf-a00c-b6311fb3f14b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02ccfe3-11f7-4677-80d4-9f2923b62437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ffa942e2-3c55-4588-a278-1602f6513ddb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "521e3f5b-7aee-423e-a480-e938d6242d1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70faabed-e822-4b00-b3b9-20c657ec6e54"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8cacb77-b1c9-4784-977a-0929ed6394a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9883eb4d-4bd0-40ae-911e-29c769e0e2b4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "49cf5a26-d728-412c-a1f6-95b263acc183",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c5183a6f-eca4-4e1a-900e-0c5b6c389ac3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3622eca4-0f5b-4d72-b4d2-1a44cc3725b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a6c67ad-fb94-485a-8b1a-3abeb4286b18"
            }
          }
        ]
      },
      {
        "id": "a1c4fb8b-d1bf-4112-809f-da03c2503f6b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1834a711-2cfe-4687-9904-dd9408c7aa65",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e213ba8e-7fcc-406f-b96b-f8ed62c02e74",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "abb19992-1866-4531-8752-a01cf83c59ef",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab0ed177-c5bc-4ed9-9b35-a4bc39019efc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5673265-f1d7-4001-9c02-5414408fc3a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16aef87-7333-42bd-b560-9756df16119d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eccdecaa-3616-4d5a-a3f5-57f4fb40f30b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a55c64e3-2d5c-4084-8726-3f814c79e78f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "093f775b-6b35-44ea-8b8b-36f929914c93"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9db295ad-534b-4317-a89c-d94eaab446c1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1c75cd1d-ed9f-49fa-9f77-9de79ea31875"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5ec4170b-2da9-44d3-94be-ec0f86465a07",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8c3ab63a-7acb-444e-ba47-881d8648203d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac2c67ce-d371-431b-b4d2-ae555a9bce5c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c0b3b3e1-7f11-4b0d-a83d-8cee1225c133"
            }
          }
        ]
      },
      {
        "id": "6681ff2d-6769-45b8-a2c1-3f1620fa900a",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8db795f9-2723-41b2-b893-29079812ea03",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ab0d1f8-be37-4053-b05e-52902dbdc00a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "ab339e0f-1a9a-4052-a2a6-7ec152e65355",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e9d7614c-d388-4942-9a9f-87ab12cb5039",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b9c47933-8c44-4bfa-abc7-22e45d96787f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 564,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 294
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 89.90070921985819,
      "responseMin": 22,
      "responseMax": 708,
      "responseSd": 32.173907970697826,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1706834075765,
      "completed": 1706834137043
    },
    "executions": [
      {
        "id": "787e5207-75cc-41fd-9142-1b26b98656d0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1699548a-3514-4c42-8dea-d4b0bf32b1a4",
          "httpRequestId": "f2f96ad6-4e7d-4adf-bde2-be2a32f92cb0"
        },
        "item": {
          "id": "787e5207-75cc-41fd-9142-1b26b98656d0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8d263aa9-eac7-484e-9224-3cea24a8f5fb",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 0
        }
      },
      {
        "id": "d7556bbf-0164-4f9a-ba17-0245aa93739b",
        "cursor": {
          "ref": "9889eb15-302e-4a11-89bf-542b0eb922ec",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "69da27db-4972-45ee-bf82-80001f0d75d3"
        },
        "item": {
          "id": "d7556bbf-0164-4f9a-ba17-0245aa93739b",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "47ee0706-274d-4628-bdf5-e8c6b64a6efa",
          "status": "OK",
          "code": 200,
          "responseTime": 22,
          "responseSize": 0
        }
      },
      {
        "id": "56ab1387-60cf-4f95-952f-3203876fae64",
        "cursor": {
          "ref": "6cf845a3-f527-4ffc-823e-3127f8387f68",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1a7449f7-5e43-4f84-be2a-3f077f36afc9"
        },
        "item": {
          "id": "56ab1387-60cf-4f95-952f-3203876fae64",
          "name": "did_json"
        },
        "response": {
          "id": "28d9a92a-ea1e-44c9-b191-d6bb2739c13c",
          "status": "OK",
          "code": 200,
          "responseTime": 708,
          "responseSize": 1640
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f36173-f5c6-4909-b4cb-95b17feaa5c0",
        "cursor": {
          "ref": "7af664b1-45ff-4ba3-b67a-316b4e70c6b3",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a418c7ce-02e8-46a2-ae04-3ccfeb8f756e"
        },
        "item": {
          "id": "84f36173-f5c6-4909-b4cb-95b17feaa5c0",
          "name": "did:invalid"
        },
        "response": {
          "id": "35a5d37e-8998-44d1-9686-abaf629966fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f36173-f5c6-4909-b4cb-95b17feaa5c0",
        "cursor": {
          "ref": "7af664b1-45ff-4ba3-b67a-316b4e70c6b3",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a418c7ce-02e8-46a2-ae04-3ccfeb8f756e"
        },
        "item": {
          "id": "84f36173-f5c6-4909-b4cb-95b17feaa5c0",
          "name": "did:invalid"
        },
        "response": {
          "id": "35a5d37e-8998-44d1-9686-abaf629966fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c882ae-b27d-4145-92b2-4bf2593abf7a",
        "cursor": {
          "ref": "720112f1-097e-473b-9563-79d49301d6c8",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "118de3a4-4271-44fe-ae52-a1a48bfb661d"
        },
        "item": {
          "id": "f6c882ae-b27d-4145-92b2-4bf2593abf7a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b3e40507-d48b-429a-8778-c9e47a319db8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c882ae-b27d-4145-92b2-4bf2593abf7a",
        "cursor": {
          "ref": "720112f1-097e-473b-9563-79d49301d6c8",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "118de3a4-4271-44fe-ae52-a1a48bfb661d"
        },
        "item": {
          "id": "f6c882ae-b27d-4145-92b2-4bf2593abf7a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "b3e40507-d48b-429a-8778-c9e47a319db8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3425fc3-3490-4e6d-a8b6-8b6f3b794b1c",
        "cursor": {
          "ref": "9289cc97-7614-4c1d-998e-211efa0f46a4",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "87470d51-5e97-4212-8223-5e46bb6e54a6"
        },
        "item": {
          "id": "d3425fc3-3490-4e6d-a8b6-8b6f3b794b1c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f1899d2b-e1d9-466a-801f-c804be8fe729",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3425fc3-3490-4e6d-a8b6-8b6f3b794b1c",
        "cursor": {
          "ref": "9289cc97-7614-4c1d-998e-211efa0f46a4",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "87470d51-5e97-4212-8223-5e46bb6e54a6"
        },
        "item": {
          "id": "d3425fc3-3490-4e6d-a8b6-8b6f3b794b1c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f1899d2b-e1d9-466a-801f-c804be8fe729",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 401",
              "stack": "AssertionError: expected response to have status code 404 but got 401\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574b3916-9007-4555-95a1-55bd548f46a8",
        "cursor": {
          "ref": "7e045bba-22cf-417d-acfe-07c8a43eddb9",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "617b0e0c-66ff-4a52-b751-4b2415a9e3e5"
        },
        "item": {
          "id": "574b3916-9007-4555-95a1-55bd548f46a8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1bf2d607-af1d-4d12-8386-65d1b0eabb2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574b3916-9007-4555-95a1-55bd548f46a8",
        "cursor": {
          "ref": "7e045bba-22cf-417d-acfe-07c8a43eddb9",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "617b0e0c-66ff-4a52-b751-4b2415a9e3e5"
        },
        "item": {
          "id": "574b3916-9007-4555-95a1-55bd548f46a8",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1bf2d607-af1d-4d12-8386-65d1b0eabb2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff8d014-af85-413a-87e4-8fc97f70d812",
        "cursor": {
          "ref": "ea16ee4a-af65-403d-981c-83c016a44795",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "76bd9628-3f6e-4f8a-b4f1-e16adb5d1138"
        },
        "item": {
          "id": "cff8d014-af85-413a-87e4-8fc97f70d812",
          "name": "identifiers"
        },
        "response": {
          "id": "5e5ff62c-f23c-4185-b35e-fbd42191b617",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "cff8d014-af85-413a-87e4-8fc97f70d812",
        "cursor": {
          "ref": "ea16ee4a-af65-403d-981c-83c016a44795",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "76bd9628-3f6e-4f8a-b4f1-e16adb5d1138"
        },
        "item": {
          "id": "cff8d014-af85-413a-87e4-8fc97f70d812",
          "name": "identifiers"
        },
        "response": {
          "id": "5e5ff62c-f23c-4185-b35e-fbd42191b617",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "02b11d53-37e8-4d97-8608-9bb2304cd81f",
        "cursor": {
          "ref": "daa8599f-50ba-402e-a770-6359ed1a2244",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c24de4c2-471f-4f95-8de2-177bab2abf03"
        },
        "item": {
          "id": "02b11d53-37e8-4d97-8608-9bb2304cd81f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2ed379fd-3ee7-42aa-babd-9c878be63055",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02b11d53-37e8-4d97-8608-9bb2304cd81f",
        "cursor": {
          "ref": "daa8599f-50ba-402e-a770-6359ed1a2244",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "c24de4c2-471f-4f95-8de2-177bab2abf03"
        },
        "item": {
          "id": "02b11d53-37e8-4d97-8608-9bb2304cd81f",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2ed379fd-3ee7-42aa-babd-9c878be63055",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f403a00a-3ba9-4e27-9eef-18bc8bc16d57",
        "cursor": {
          "ref": "7f2c5d58-1cb9-4651-aa37-48b1e6fc705a",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "515c410f-eb71-49b7-9fe2-c78bba9a1322"
        },
        "item": {
          "id": "f403a00a-3ba9-4e27-9eef-18bc8bc16d57",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e80e3af1-2f0b-463a-9676-aed857e05242",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 91,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f403a00a-3ba9-4e27-9eef-18bc8bc16d57",
        "cursor": {
          "ref": "7f2c5d58-1cb9-4651-aa37-48b1e6fc705a",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "515c410f-eb71-49b7-9fe2-c78bba9a1322"
        },
        "item": {
          "id": "f403a00a-3ba9-4e27-9eef-18bc8bc16d57",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e80e3af1-2f0b-463a-9676-aed857e05242",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 91,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa81f910-b780-4eae-acf4-e40e9369cf07",
        "cursor": {
          "ref": "345daee7-e143-48ae-889e-b9c4c816bfec",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d9a264d7-4f5b-4f0b-9c91-2d919ba2e1f6"
        },
        "item": {
          "id": "aa81f910-b780-4eae-acf4-e40e9369cf07",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "cfd430a2-3e89-4677-b5f5-e13e32355631",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa81f910-b780-4eae-acf4-e40e9369cf07",
        "cursor": {
          "ref": "345daee7-e143-48ae-889e-b9c4c816bfec",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d9a264d7-4f5b-4f0b-9c91-2d919ba2e1f6"
        },
        "item": {
          "id": "aa81f910-b780-4eae-acf4-e40e9369cf07",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "cfd430a2-3e89-4677-b5f5-e13e32355631",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10f573f-563e-41b6-a71a-3225ee1ff898",
        "cursor": {
          "ref": "a347f70f-ba66-4ae7-b55c-f7657828a353",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c0ec4106-6a3d-41b2-aca0-63c1db7b791c"
        },
        "item": {
          "id": "b10f573f-563e-41b6-a71a-3225ee1ff898",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "78cb336e-c493-4e0e-96b7-b27e23dee069",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b10f573f-563e-41b6-a71a-3225ee1ff898",
        "cursor": {
          "ref": "a347f70f-ba66-4ae7-b55c-f7657828a353",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c0ec4106-6a3d-41b2-aca0-63c1db7b791c"
        },
        "item": {
          "id": "b10f573f-563e-41b6-a71a-3225ee1ff898",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "78cb336e-c493-4e0e-96b7-b27e23dee069",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5849a9fe-20e8-4418-ba04-f979e14b60c3",
        "cursor": {
          "ref": "f6e86cff-53b2-4d16-b50b-a8965fddcc0c",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d861d027-8351-4edc-bc54-a5304b99d1be"
        },
        "item": {
          "id": "5849a9fe-20e8-4418-ba04-f979e14b60c3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6beae7dc-64fc-418d-9294-2a44f159b3d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 97,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5849a9fe-20e8-4418-ba04-f979e14b60c3",
        "cursor": {
          "ref": "f6e86cff-53b2-4d16-b50b-a8965fddcc0c",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d861d027-8351-4edc-bc54-a5304b99d1be"
        },
        "item": {
          "id": "5849a9fe-20e8-4418-ba04-f979e14b60c3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6beae7dc-64fc-418d-9294-2a44f159b3d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 97,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8499912f-db28-48cf-ab26-6368ea8971b6",
        "cursor": {
          "ref": "eaa5b78b-f1d8-469e-aa79-687bf2cad69e",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2b902b13-1d23-4591-8eab-6299aa958c81"
        },
        "item": {
          "id": "8499912f-db28-48cf-ab26-6368ea8971b6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "51a780c0-881d-44ae-aae0-4d8bf8d2f4aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8499912f-db28-48cf-ab26-6368ea8971b6",
        "cursor": {
          "ref": "eaa5b78b-f1d8-469e-aa79-687bf2cad69e",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2b902b13-1d23-4591-8eab-6299aa958c81"
        },
        "item": {
          "id": "8499912f-db28-48cf-ab26-6368ea8971b6",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "51a780c0-881d-44ae-aae0-4d8bf8d2f4aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b1b9a2-4438-4d43-aac9-d15d4470609a",
        "cursor": {
          "ref": "c1ef1c9f-5d34-4237-b93b-59d9ad050f49",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7dbad8b8-5d38-4eaf-b0cc-53d04548eab4"
        },
        "item": {
          "id": "39b1b9a2-4438-4d43-aac9-d15d4470609a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "39101c45-0821-4cfd-8946-4905acbdd83d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b1b9a2-4438-4d43-aac9-d15d4470609a",
        "cursor": {
          "ref": "c1ef1c9f-5d34-4237-b93b-59d9ad050f49",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "7dbad8b8-5d38-4eaf-b0cc-53d04548eab4"
        },
        "item": {
          "id": "39b1b9a2-4438-4d43-aac9-d15d4470609a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "39101c45-0821-4cfd-8946-4905acbdd83d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7a643e-cf60-48a9-af52-2a451a16cc66",
        "cursor": {
          "ref": "f84d0687-98d8-4a33-9d7c-9986b38e2706",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ec6fd06e-496f-484c-b5c0-861b2862571e"
        },
        "item": {
          "id": "dd7a643e-cf60-48a9-af52-2a451a16cc66",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e2775f07-c0ee-4f5d-af85-d57f9a89ffce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7a643e-cf60-48a9-af52-2a451a16cc66",
        "cursor": {
          "ref": "f84d0687-98d8-4a33-9d7c-9986b38e2706",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ec6fd06e-496f-484c-b5c0-861b2862571e"
        },
        "item": {
          "id": "dd7a643e-cf60-48a9-af52-2a451a16cc66",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e2775f07-c0ee-4f5d-af85-d57f9a89ffce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e55591-d94c-42b8-9db1-305153e6530d",
        "cursor": {
          "ref": "712c82a9-bdd1-4ab8-a545-34d16ce712d3",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9b26f216-0dc5-4e50-8f8c-ff3271a3c80c"
        },
        "item": {
          "id": "26e55591-d94c-42b8-9db1-305153e6530d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3c7f892d-1e2a-41ca-ae6c-d3e52c0f7cd3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e55591-d94c-42b8-9db1-305153e6530d",
        "cursor": {
          "ref": "712c82a9-bdd1-4ab8-a545-34d16ce712d3",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9b26f216-0dc5-4e50-8f8c-ff3271a3c80c"
        },
        "item": {
          "id": "26e55591-d94c-42b8-9db1-305153e6530d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3c7f892d-1e2a-41ca-ae6c-d3e52c0f7cd3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cebb0dc8-f90c-4549-bc54-edab1c824ecb",
        "cursor": {
          "ref": "c2118fec-56b6-4fc6-bd61-9f574719f5e5",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "61c433eb-54e6-4e00-a6db-8425611c50b5"
        },
        "item": {
          "id": "cebb0dc8-f90c-4549-bc54-edab1c824ecb",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f3ab2319-551f-4015-b738-4fd58573e301",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cebb0dc8-f90c-4549-bc54-edab1c824ecb",
        "cursor": {
          "ref": "c2118fec-56b6-4fc6-bd61-9f574719f5e5",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "61c433eb-54e6-4e00-a6db-8425611c50b5"
        },
        "item": {
          "id": "cebb0dc8-f90c-4549-bc54-edab1c824ecb",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f3ab2319-551f-4015-b738-4fd58573e301",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030a09cf-b87a-4665-9988-499fe0799166",
        "cursor": {
          "ref": "3576c62d-07a3-4b95-a4a1-147ca37fe968",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "44c5d0b1-7290-4601-872f-ea594acd6fcd"
        },
        "item": {
          "id": "030a09cf-b87a-4665-9988-499fe0799166",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8da5762d-245f-4659-8b78-d4638ed401d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "030a09cf-b87a-4665-9988-499fe0799166",
        "cursor": {
          "ref": "3576c62d-07a3-4b95-a4a1-147ca37fe968",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "44c5d0b1-7290-4601-872f-ea594acd6fcd"
        },
        "item": {
          "id": "030a09cf-b87a-4665-9988-499fe0799166",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "8da5762d-245f-4659-8b78-d4638ed401d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6272ac8-64bf-4097-9975-0424c445f5f1",
        "cursor": {
          "ref": "e7a59fbb-d2e9-48c9-8c4b-abfa9bf7b93c",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e2f58909-7b02-411b-a9a1-e692061c05e2"
        },
        "item": {
          "id": "f6272ac8-64bf-4097-9975-0424c445f5f1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "59d6348e-c734-4dfd-b0d0-82a21c2dafd2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6272ac8-64bf-4097-9975-0424c445f5f1",
        "cursor": {
          "ref": "e7a59fbb-d2e9-48c9-8c4b-abfa9bf7b93c",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e2f58909-7b02-411b-a9a1-e692061c05e2"
        },
        "item": {
          "id": "f6272ac8-64bf-4097-9975-0424c445f5f1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "59d6348e-c734-4dfd-b0d0-82a21c2dafd2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85aab471-c46d-483b-bae4-61110916177d",
        "cursor": {
          "ref": "52ae4d7e-21a3-4a2e-a6c0-8f12b5f1bfe6",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1ae7a3e5-75d9-4534-a3d2-9facda93a2f2"
        },
        "item": {
          "id": "85aab471-c46d-483b-bae4-61110916177d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ffa39b91-e5d4-405f-b31b-ecc195719f6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85aab471-c46d-483b-bae4-61110916177d",
        "cursor": {
          "ref": "52ae4d7e-21a3-4a2e-a6c0-8f12b5f1bfe6",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "1ae7a3e5-75d9-4534-a3d2-9facda93a2f2"
        },
        "item": {
          "id": "85aab471-c46d-483b-bae4-61110916177d",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "ffa39b91-e5d4-405f-b31b-ecc195719f6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80926d36-9dd0-4412-877a-b1dbd94b031c",
        "cursor": {
          "ref": "ce362414-9085-4b43-b605-2656e03531fa",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c8143e60-3942-4632-99a3-429e6c56c1ed"
        },
        "item": {
          "id": "80926d36-9dd0-4412-877a-b1dbd94b031c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "154a963e-52f2-46e1-8928-3b805adc248c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80926d36-9dd0-4412-877a-b1dbd94b031c",
        "cursor": {
          "ref": "ce362414-9085-4b43-b605-2656e03531fa",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c8143e60-3942-4632-99a3-429e6c56c1ed"
        },
        "item": {
          "id": "80926d36-9dd0-4412-877a-b1dbd94b031c",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "154a963e-52f2-46e1-8928-3b805adc248c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d78bdc-1fdc-468c-bc63-25481486d6e5",
        "cursor": {
          "ref": "a72d63b2-7254-4682-a34e-f6575e354a99",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "bfceb715-9900-4212-ac3d-a74c706f2f23"
        },
        "item": {
          "id": "10d78bdc-1fdc-468c-bc63-25481486d6e5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "fae3b18d-b209-4552-98a7-925685012879",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d78bdc-1fdc-468c-bc63-25481486d6e5",
        "cursor": {
          "ref": "a72d63b2-7254-4682-a34e-f6575e354a99",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "bfceb715-9900-4212-ac3d-a74c706f2f23"
        },
        "item": {
          "id": "10d78bdc-1fdc-468c-bc63-25481486d6e5",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "fae3b18d-b209-4552-98a7-925685012879",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cefd7f7-3820-477d-80ed-6717772e5c71",
        "cursor": {
          "ref": "91d1c62e-aea1-4308-bb8e-75bf95ae2b62",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a7d99f35-9a1e-4420-9b0c-2e8bddf51f0f"
        },
        "item": {
          "id": "2cefd7f7-3820-477d-80ed-6717772e5c71",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "58beaad0-083d-497b-8c99-4310c1dbf42d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cefd7f7-3820-477d-80ed-6717772e5c71",
        "cursor": {
          "ref": "91d1c62e-aea1-4308-bb8e-75bf95ae2b62",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a7d99f35-9a1e-4420-9b0c-2e8bddf51f0f"
        },
        "item": {
          "id": "2cefd7f7-3820-477d-80ed-6717772e5c71",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "58beaad0-083d-497b-8c99-4310c1dbf42d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "840ca466-cf95-4774-9df7-df2e61119f91",
        "cursor": {
          "ref": "d6f3b3e3-131d-4917-9c75-b14f6cbd7f79",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e5d47cce-cd7f-4ee8-a9ce-1af93ea192fe"
        },
        "item": {
          "id": "840ca466-cf95-4774-9df7-df2e61119f91",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5507f4aa-f38d-42c5-806f-e99a986cb91e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "840ca466-cf95-4774-9df7-df2e61119f91",
        "cursor": {
          "ref": "d6f3b3e3-131d-4917-9c75-b14f6cbd7f79",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e5d47cce-cd7f-4ee8-a9ce-1af93ea192fe"
        },
        "item": {
          "id": "840ca466-cf95-4774-9df7-df2e61119f91",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5507f4aa-f38d-42c5-806f-e99a986cb91e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8a1f26-d29e-4abe-a787-b19558ff19f3",
        "cursor": {
          "ref": "4bd4a650-b20e-4456-9532-7b2af0b82824",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0ae92e6c-4d1c-4623-a5f0-de41895bbbe1"
        },
        "item": {
          "id": "ed8a1f26-d29e-4abe-a787-b19558ff19f3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "912a641a-7e58-4ea1-8391-d35127de613e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed8a1f26-d29e-4abe-a787-b19558ff19f3",
        "cursor": {
          "ref": "4bd4a650-b20e-4456-9532-7b2af0b82824",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0ae92e6c-4d1c-4623-a5f0-de41895bbbe1"
        },
        "item": {
          "id": "ed8a1f26-d29e-4abe-a787-b19558ff19f3",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "912a641a-7e58-4ea1-8391-d35127de613e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d3da14-7157-43c0-a7e0-f208652897cd",
        "cursor": {
          "ref": "1db029c3-2511-4920-b965-0902fbfd1a32",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0134313f-6ab8-491b-a87e-c42698fbe2c1"
        },
        "item": {
          "id": "26d3da14-7157-43c0-a7e0-f208652897cd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "74ec504a-f3bf-46ea-96ef-c7a3a24358cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d3da14-7157-43c0-a7e0-f208652897cd",
        "cursor": {
          "ref": "1db029c3-2511-4920-b965-0902fbfd1a32",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0134313f-6ab8-491b-a87e-c42698fbe2c1"
        },
        "item": {
          "id": "26d3da14-7157-43c0-a7e0-f208652897cd",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "74ec504a-f3bf-46ea-96ef-c7a3a24358cb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45313070-6573-477e-b927-d80f9a7e1f80",
        "cursor": {
          "ref": "45447053-26f5-4832-95ab-154f94a75c18",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a1526656-e268-4dea-9644-cc38c5f0e64d"
        },
        "item": {
          "id": "45313070-6573-477e-b927-d80f9a7e1f80",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7eb40104-10e1-410c-8eb0-cfcacd48bb30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45313070-6573-477e-b927-d80f9a7e1f80",
        "cursor": {
          "ref": "45447053-26f5-4832-95ab-154f94a75c18",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "a1526656-e268-4dea-9644-cc38c5f0e64d"
        },
        "item": {
          "id": "45313070-6573-477e-b927-d80f9a7e1f80",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7eb40104-10e1-410c-8eb0-cfcacd48bb30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d81d19-722d-4817-a073-fa05e0498d5d",
        "cursor": {
          "ref": "7ce02d84-3f5c-4e69-a728-cdf0c54a856c",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "aef2fe0e-e958-4c67-a958-1eca63dcb063"
        },
        "item": {
          "id": "62d81d19-722d-4817-a073-fa05e0498d5d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "525c22ea-4f00-4390-b8bc-f181ec435857",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d81d19-722d-4817-a073-fa05e0498d5d",
        "cursor": {
          "ref": "7ce02d84-3f5c-4e69-a728-cdf0c54a856c",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "aef2fe0e-e958-4c67-a958-1eca63dcb063"
        },
        "item": {
          "id": "62d81d19-722d-4817-a073-fa05e0498d5d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "525c22ea-4f00-4390-b8bc-f181ec435857",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971d179c-8034-40e7-9b07-fd7edbdc5045",
        "cursor": {
          "ref": "6914d663-8ca8-475d-9100-82b33e70ed92",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3d228a8b-72d6-469f-b7e0-33e34166f1dc"
        },
        "item": {
          "id": "971d179c-8034-40e7-9b07-fd7edbdc5045",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f5f9453b-a1c8-4aa4-9e29-8ed5f513dfda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971d179c-8034-40e7-9b07-fd7edbdc5045",
        "cursor": {
          "ref": "6914d663-8ca8-475d-9100-82b33e70ed92",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "3d228a8b-72d6-469f-b7e0-33e34166f1dc"
        },
        "item": {
          "id": "971d179c-8034-40e7-9b07-fd7edbdc5045",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f5f9453b-a1c8-4aa4-9e29-8ed5f513dfda",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ee0c02-c8b9-4e92-85a6-a6ff47d3ba09",
        "cursor": {
          "ref": "632e74e1-7eb8-4a84-887a-418a71b08a82",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c2ab0a99-024f-4979-9472-10436f5c33c6"
        },
        "item": {
          "id": "07ee0c02-c8b9-4e92-85a6-a6ff47d3ba09",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "cba9dfc0-1a83-43bd-9975-9ee2c82665ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07ee0c02-c8b9-4e92-85a6-a6ff47d3ba09",
        "cursor": {
          "ref": "632e74e1-7eb8-4a84-887a-418a71b08a82",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c2ab0a99-024f-4979-9472-10436f5c33c6"
        },
        "item": {
          "id": "07ee0c02-c8b9-4e92-85a6-a6ff47d3ba09",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "cba9dfc0-1a83-43bd-9975-9ee2c82665ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b1c450-c1d4-444d-8b5e-0d77b9d769b8",
        "cursor": {
          "ref": "89713317-b349-455a-abf3-5b322a62c4fb",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6e0ddd9f-d196-4366-9faa-89c855aeb550"
        },
        "item": {
          "id": "f6b1c450-c1d4-444d-8b5e-0d77b9d769b8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4c593c8d-fab4-400b-9023-0ae83e9cc8b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b1c450-c1d4-444d-8b5e-0d77b9d769b8",
        "cursor": {
          "ref": "89713317-b349-455a-abf3-5b322a62c4fb",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "6e0ddd9f-d196-4366-9faa-89c855aeb550"
        },
        "item": {
          "id": "f6b1c450-c1d4-444d-8b5e-0d77b9d769b8",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "4c593c8d-fab4-400b-9023-0ae83e9cc8b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea2ccc3-cc3b-4d35-b27a-8a1a7acba286",
        "cursor": {
          "ref": "31d497ae-bf5a-4250-b861-86b64975b56d",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "253b4fd0-6996-475d-8d1d-5ebcfc756cb5"
        },
        "item": {
          "id": "3ea2ccc3-cc3b-4d35-b27a-8a1a7acba286",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "13db3b14-3a0b-43dd-b095-0760223bacf1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ea2ccc3-cc3b-4d35-b27a-8a1a7acba286",
        "cursor": {
          "ref": "31d497ae-bf5a-4250-b861-86b64975b56d",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "253b4fd0-6996-475d-8d1d-5ebcfc756cb5"
        },
        "item": {
          "id": "3ea2ccc3-cc3b-4d35-b27a-8a1a7acba286",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "13db3b14-3a0b-43dd-b095-0760223bacf1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc85c7bb-e04e-47a1-982f-5f00e3e64e63",
        "cursor": {
          "ref": "87e32520-b3ee-4035-b523-e8665f24633e",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "feec4e9a-d811-4bcb-8025-5558cc9f763e"
        },
        "item": {
          "id": "fc85c7bb-e04e-47a1-982f-5f00e3e64e63",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7b646431-ce07-4aad-8370-ad7e6a800935",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc85c7bb-e04e-47a1-982f-5f00e3e64e63",
        "cursor": {
          "ref": "87e32520-b3ee-4035-b523-e8665f24633e",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "feec4e9a-d811-4bcb-8025-5558cc9f763e"
        },
        "item": {
          "id": "fc85c7bb-e04e-47a1-982f-5f00e3e64e63",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "7b646431-ce07-4aad-8370-ad7e6a800935",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc3a970-3771-4c2b-b39c-1cc25f485eef",
        "cursor": {
          "ref": "5ceca773-b9c7-48fd-93f4-1e75dbb5d977",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2066fd87-4eec-4b50-b8f8-702c15bed4cf"
        },
        "item": {
          "id": "9fc3a970-3771-4c2b-b39c-1cc25f485eef",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4b9c9fea-7946-40b2-93a1-fa91e2db3d05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc3a970-3771-4c2b-b39c-1cc25f485eef",
        "cursor": {
          "ref": "5ceca773-b9c7-48fd-93f4-1e75dbb5d977",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2066fd87-4eec-4b50-b8f8-702c15bed4cf"
        },
        "item": {
          "id": "9fc3a970-3771-4c2b-b39c-1cc25f485eef",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4b9c9fea-7946-40b2-93a1-fa91e2db3d05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69946591-5b9c-4333-9d86-7da9e6fda1b3",
        "cursor": {
          "ref": "7aecb487-f3a7-47ba-a3b4-bf19a448e0ba",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d1d32d16-b454-407b-9869-4b3bdd81dbde"
        },
        "item": {
          "id": "69946591-5b9c-4333-9d86-7da9e6fda1b3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2041be4d-5c99-4d5a-bb3d-d613ee103fbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69946591-5b9c-4333-9d86-7da9e6fda1b3",
        "cursor": {
          "ref": "7aecb487-f3a7-47ba-a3b4-bf19a448e0ba",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d1d32d16-b454-407b-9869-4b3bdd81dbde"
        },
        "item": {
          "id": "69946591-5b9c-4333-9d86-7da9e6fda1b3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2041be4d-5c99-4d5a-bb3d-d613ee103fbd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4dd3df-fc20-470a-8b63-6db048d1c342",
        "cursor": {
          "ref": "c442a4b5-97f0-4659-b65a-96c5f325cb62",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "88eaf467-0f47-4131-80e4-48b99dfe8d7f"
        },
        "item": {
          "id": "6d4dd3df-fc20-470a-8b63-6db048d1c342",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9a5bb589-1244-4246-bfb7-87f8e9b8f971",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4dd3df-fc20-470a-8b63-6db048d1c342",
        "cursor": {
          "ref": "c442a4b5-97f0-4659-b65a-96c5f325cb62",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "88eaf467-0f47-4131-80e4-48b99dfe8d7f"
        },
        "item": {
          "id": "6d4dd3df-fc20-470a-8b63-6db048d1c342",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9a5bb589-1244-4246-bfb7-87f8e9b8f971",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1ccee4-10a0-4c14-be0f-936369faf68a",
        "cursor": {
          "ref": "88ce2679-115c-471f-b004-9c40ec76bf4b",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "88846b57-5610-4a83-9579-e0a4776d74d4"
        },
        "item": {
          "id": "eb1ccee4-10a0-4c14-be0f-936369faf68a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4b773b85-3ca0-4fd2-95d5-0f245cfda0db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1ccee4-10a0-4c14-be0f-936369faf68a",
        "cursor": {
          "ref": "88ce2679-115c-471f-b004-9c40ec76bf4b",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "88846b57-5610-4a83-9579-e0a4776d74d4"
        },
        "item": {
          "id": "eb1ccee4-10a0-4c14-be0f-936369faf68a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4b773b85-3ca0-4fd2-95d5-0f245cfda0db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a7e822-1462-4567-a8d6-9e3f15cae540",
        "cursor": {
          "ref": "6d7b0893-7c60-4288-9063-c5ad0ecc5731",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "698dea45-dd87-424b-8b87-9ba01ce5d0d0"
        },
        "item": {
          "id": "c2a7e822-1462-4567-a8d6-9e3f15cae540",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c797ed0f-66b7-47ab-9f9a-3d32fb6d33bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a7e822-1462-4567-a8d6-9e3f15cae540",
        "cursor": {
          "ref": "6d7b0893-7c60-4288-9063-c5ad0ecc5731",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "698dea45-dd87-424b-8b87-9ba01ce5d0d0"
        },
        "item": {
          "id": "c2a7e822-1462-4567-a8d6-9e3f15cae540",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c797ed0f-66b7-47ab-9f9a-3d32fb6d33bd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6681a9-8cde-416e-ab5d-c0a2a30b2168",
        "cursor": {
          "ref": "2eb918dc-d957-409b-ac42-61423a3a699e",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2a517293-ec60-460f-ac06-f0b49c2dde36"
        },
        "item": {
          "id": "8a6681a9-8cde-416e-ab5d-c0a2a30b2168",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8c8f49db-1d44-42bc-a848-ea07c22eed44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6681a9-8cde-416e-ab5d-c0a2a30b2168",
        "cursor": {
          "ref": "2eb918dc-d957-409b-ac42-61423a3a699e",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2a517293-ec60-460f-ac06-f0b49c2dde36"
        },
        "item": {
          "id": "8a6681a9-8cde-416e-ab5d-c0a2a30b2168",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8c8f49db-1d44-42bc-a848-ea07c22eed44",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7312c4-8e80-4bf4-bab7-27970d6b59bf",
        "cursor": {
          "ref": "75b9503f-8be7-4ca7-a22d-96c19ef40b69",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6dbaea85-ae55-43b7-99a6-633cb127a3ed"
        },
        "item": {
          "id": "7b7312c4-8e80-4bf4-bab7-27970d6b59bf",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1b657821-1651-44a0-999d-4e424e7c05b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b7312c4-8e80-4bf4-bab7-27970d6b59bf",
        "cursor": {
          "ref": "75b9503f-8be7-4ca7-a22d-96c19ef40b69",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "6dbaea85-ae55-43b7-99a6-633cb127a3ed"
        },
        "item": {
          "id": "7b7312c4-8e80-4bf4-bab7-27970d6b59bf",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1b657821-1651-44a0-999d-4e424e7c05b7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b477335b-6f03-4839-a94d-b99e525efd20",
        "cursor": {
          "ref": "2f6179a1-81c5-4cc3-88a4-c3f2f3a31697",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7ff967b6-c7c9-496a-846d-70d5ef80f45d"
        },
        "item": {
          "id": "b477335b-6f03-4839-a94d-b99e525efd20",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "dd2175b5-114c-4c17-9710-7b7e05d05d57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b477335b-6f03-4839-a94d-b99e525efd20",
        "cursor": {
          "ref": "2f6179a1-81c5-4cc3-88a4-c3f2f3a31697",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7ff967b6-c7c9-496a-846d-70d5ef80f45d"
        },
        "item": {
          "id": "b477335b-6f03-4839-a94d-b99e525efd20",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "dd2175b5-114c-4c17-9710-7b7e05d05d57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "712ea1ad-645f-4e21-815b-7ebdd5f6b3db",
        "cursor": {
          "ref": "4509fb8a-2357-4112-bc0b-252c49adcd17",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a35977ce-1607-4cfd-9b3f-0615249ee44d"
        },
        "item": {
          "id": "712ea1ad-645f-4e21-815b-7ebdd5f6b3db",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0abdc0ba-a4b8-4368-8802-150dca3d3f83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "712ea1ad-645f-4e21-815b-7ebdd5f6b3db",
        "cursor": {
          "ref": "4509fb8a-2357-4112-bc0b-252c49adcd17",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a35977ce-1607-4cfd-9b3f-0615249ee44d"
        },
        "item": {
          "id": "712ea1ad-645f-4e21-815b-7ebdd5f6b3db",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0abdc0ba-a4b8-4368-8802-150dca3d3f83",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20988b1-57ef-4988-98cd-515ee93a5893",
        "cursor": {
          "ref": "b322c054-3bea-4937-9b5d-516f2b20bb1d",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0df70efa-6064-411a-a4fc-ad3239f2d5e5"
        },
        "item": {
          "id": "e20988b1-57ef-4988-98cd-515ee93a5893",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "dc3ff9d8-bad2-45c6-98d6-fb377be289a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20988b1-57ef-4988-98cd-515ee93a5893",
        "cursor": {
          "ref": "b322c054-3bea-4937-9b5d-516f2b20bb1d",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0df70efa-6064-411a-a4fc-ad3239f2d5e5"
        },
        "item": {
          "id": "e20988b1-57ef-4988-98cd-515ee93a5893",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "dc3ff9d8-bad2-45c6-98d6-fb377be289a8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0787cbc9-39bf-458f-bc03-447ef8af4e0b",
        "cursor": {
          "ref": "1ea9e59d-0ed1-44b2-868a-93b52968126a",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "358acc72-d462-4f93-a97d-c283ac651363"
        },
        "item": {
          "id": "0787cbc9-39bf-458f-bc03-447ef8af4e0b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "82e3ca88-3750-49ab-a586-2a7eb5d3889d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0787cbc9-39bf-458f-bc03-447ef8af4e0b",
        "cursor": {
          "ref": "1ea9e59d-0ed1-44b2-868a-93b52968126a",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "358acc72-d462-4f93-a97d-c283ac651363"
        },
        "item": {
          "id": "0787cbc9-39bf-458f-bc03-447ef8af4e0b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "82e3ca88-3750-49ab-a586-2a7eb5d3889d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abbc5dc-7293-4af0-a287-956a73fca09a",
        "cursor": {
          "ref": "65729601-b1ae-441b-a66d-3587e8c6b1ca",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1d714656-38e7-4fb4-95da-525e8f424b2f"
        },
        "item": {
          "id": "5abbc5dc-7293-4af0-a287-956a73fca09a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3bd3dc63-96c7-4e03-a1e0-63a4049e0ee7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abbc5dc-7293-4af0-a287-956a73fca09a",
        "cursor": {
          "ref": "65729601-b1ae-441b-a66d-3587e8c6b1ca",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "1d714656-38e7-4fb4-95da-525e8f424b2f"
        },
        "item": {
          "id": "5abbc5dc-7293-4af0-a287-956a73fca09a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3bd3dc63-96c7-4e03-a1e0-63a4049e0ee7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8087af58-f229-46c2-986e-a0f3ad299610",
        "cursor": {
          "ref": "49c4abcf-3209-422d-b644-cec75e335b03",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0abaf334-aefd-49ef-b7d5-2ad017f0f959"
        },
        "item": {
          "id": "8087af58-f229-46c2-986e-a0f3ad299610",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0077fa00-8ad2-4dee-8f77-63f5ea6d7958",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8087af58-f229-46c2-986e-a0f3ad299610",
        "cursor": {
          "ref": "49c4abcf-3209-422d-b644-cec75e335b03",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0abaf334-aefd-49ef-b7d5-2ad017f0f959"
        },
        "item": {
          "id": "8087af58-f229-46c2-986e-a0f3ad299610",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "0077fa00-8ad2-4dee-8f77-63f5ea6d7958",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12df76f8-c7c2-494d-9a4e-f2ac0523642f",
        "cursor": {
          "ref": "7f65d599-2918-42b8-bfa3-959cd8ef9664",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0b688113-3107-4801-a087-a604aeaca300"
        },
        "item": {
          "id": "12df76f8-c7c2-494d-9a4e-f2ac0523642f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b26f4818-ed9e-4bf2-80ef-e3b3ca32703f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12df76f8-c7c2-494d-9a4e-f2ac0523642f",
        "cursor": {
          "ref": "7f65d599-2918-42b8-bfa3-959cd8ef9664",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0b688113-3107-4801-a087-a604aeaca300"
        },
        "item": {
          "id": "12df76f8-c7c2-494d-9a4e-f2ac0523642f",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b26f4818-ed9e-4bf2-80ef-e3b3ca32703f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f084ea-a96e-4eac-b415-b86ff2dd36b2",
        "cursor": {
          "ref": "d32b682b-9080-4bd6-a7da-e87d06a4630b",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "847b056c-54c7-4e5a-b337-0bb76b964803"
        },
        "item": {
          "id": "03f084ea-a96e-4eac-b415-b86ff2dd36b2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b417f31e-daaa-46b6-ba45-f0342d2025c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f084ea-a96e-4eac-b415-b86ff2dd36b2",
        "cursor": {
          "ref": "d32b682b-9080-4bd6-a7da-e87d06a4630b",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "847b056c-54c7-4e5a-b337-0bb76b964803"
        },
        "item": {
          "id": "03f084ea-a96e-4eac-b415-b86ff2dd36b2",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b417f31e-daaa-46b6-ba45-f0342d2025c9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3160f132-4f95-4494-b9e6-680924521540",
        "cursor": {
          "ref": "769689b2-fef4-4be3-a684-3680256301a9",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f702f3d5-7543-4ab3-971e-2dd2de0b08e7"
        },
        "item": {
          "id": "3160f132-4f95-4494-b9e6-680924521540",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7af808e8-3e51-489f-a05c-1f1df1388150",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3160f132-4f95-4494-b9e6-680924521540",
        "cursor": {
          "ref": "769689b2-fef4-4be3-a684-3680256301a9",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f702f3d5-7543-4ab3-971e-2dd2de0b08e7"
        },
        "item": {
          "id": "3160f132-4f95-4494-b9e6-680924521540",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "7af808e8-3e51-489f-a05c-1f1df1388150",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f5533c-b499-497f-9f80-a25e4f415e02",
        "cursor": {
          "ref": "448b6ca8-b983-42fd-b304-bf703ec2d8e8",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e57eb782-69b0-48f9-8a76-ce0410adf9c9"
        },
        "item": {
          "id": "80f5533c-b499-497f-9f80-a25e4f415e02",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "72658d97-e86a-4c85-b75b-23b6e755452d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f5533c-b499-497f-9f80-a25e4f415e02",
        "cursor": {
          "ref": "448b6ca8-b983-42fd-b304-bf703ec2d8e8",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e57eb782-69b0-48f9-8a76-ce0410adf9c9"
        },
        "item": {
          "id": "80f5533c-b499-497f-9f80-a25e4f415e02",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "72658d97-e86a-4c85-b75b-23b6e755452d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 401",
              "stack": "AssertionError: expected response to have status code 422 but got 401\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca6887b-ab69-4fec-b7d8-51ad1d5c052b",
        "cursor": {
          "ref": "b1f492ec-3d13-4304-81a0-85526088fad4",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "53e90b4a-c06d-4702-a510-bca1a0dc97d0"
        },
        "item": {
          "id": "5ca6887b-ab69-4fec-b7d8-51ad1d5c052b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d1b7e627-f45c-4a23-87a4-c1b89279766f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca6887b-ab69-4fec-b7d8-51ad1d5c052b",
        "cursor": {
          "ref": "b1f492ec-3d13-4304-81a0-85526088fad4",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "53e90b4a-c06d-4702-a510-bca1a0dc97d0"
        },
        "item": {
          "id": "5ca6887b-ab69-4fec-b7d8-51ad1d5c052b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d1b7e627-f45c-4a23-87a4-c1b89279766f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bacc8dd-1efb-4b8f-8497-9a73ea65e9dc",
        "cursor": {
          "ref": "70424974-ff16-4314-8094-75fb4038e7be",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fb25d240-e44f-4e7d-b349-1ec30b6cf59a"
        },
        "item": {
          "id": "0bacc8dd-1efb-4b8f-8497-9a73ea65e9dc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "02906f2d-0395-4bce-b7aa-fe03a61b7c94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bacc8dd-1efb-4b8f-8497-9a73ea65e9dc",
        "cursor": {
          "ref": "70424974-ff16-4314-8094-75fb4038e7be",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "fb25d240-e44f-4e7d-b349-1ec30b6cf59a"
        },
        "item": {
          "id": "0bacc8dd-1efb-4b8f-8497-9a73ea65e9dc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "02906f2d-0395-4bce-b7aa-fe03a61b7c94",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2f09cc-987f-4379-bb21-77c4efae5b2a",
        "cursor": {
          "ref": "5546fdf8-9771-4982-8324-a85e1c5a1adc",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0782a137-be84-405f-b942-cbba86dc68bf"
        },
        "item": {
          "id": "ea2f09cc-987f-4379-bb21-77c4efae5b2a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "eb5c2609-3d3c-4d80-80ab-2b018bbab4b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2f09cc-987f-4379-bb21-77c4efae5b2a",
        "cursor": {
          "ref": "5546fdf8-9771-4982-8324-a85e1c5a1adc",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0782a137-be84-405f-b942-cbba86dc68bf"
        },
        "item": {
          "id": "ea2f09cc-987f-4379-bb21-77c4efae5b2a",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "eb5c2609-3d3c-4d80-80ab-2b018bbab4b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715e5d04-d5e6-40e2-bb4e-ba728ffeffdc",
        "cursor": {
          "ref": "c3c4edba-78f2-49e8-adf2-00a1b136810a",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e05bde9f-e358-43cd-8393-cf7124fc464f"
        },
        "item": {
          "id": "715e5d04-d5e6-40e2-bb4e-ba728ffeffdc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8b607cf6-0efb-4273-8986-4d145b5fe878",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "715e5d04-d5e6-40e2-bb4e-ba728ffeffdc",
        "cursor": {
          "ref": "c3c4edba-78f2-49e8-adf2-00a1b136810a",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e05bde9f-e358-43cd-8393-cf7124fc464f"
        },
        "item": {
          "id": "715e5d04-d5e6-40e2-bb4e-ba728ffeffdc",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8b607cf6-0efb-4273-8986-4d145b5fe878",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e04af5a-bf95-4bf5-9956-d596f5115b06",
        "cursor": {
          "ref": "800de965-e995-41ab-917d-3fb6d9d73048",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f42aa9ec-b5b3-4bbb-b476-eaa63011f678"
        },
        "item": {
          "id": "9e04af5a-bf95-4bf5-9956-d596f5115b06",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6496089a-17eb-41e7-8513-62ee6caba73a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e04af5a-bf95-4bf5-9956-d596f5115b06",
        "cursor": {
          "ref": "800de965-e995-41ab-917d-3fb6d9d73048",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f42aa9ec-b5b3-4bbb-b476-eaa63011f678"
        },
        "item": {
          "id": "9e04af5a-bf95-4bf5-9956-d596f5115b06",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6496089a-17eb-41e7-8513-62ee6caba73a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07767c6a-77a7-4f09-be9f-6e8678edfae3",
        "cursor": {
          "ref": "b10c45f6-0901-489a-aaa9-87f648b4b6e9",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "52aba7ce-3d80-4774-a153-57382a4d3cae"
        },
        "item": {
          "id": "07767c6a-77a7-4f09-be9f-6e8678edfae3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "dcde8b10-a92b-4fff-bf57-6bc929bbcfd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07767c6a-77a7-4f09-be9f-6e8678edfae3",
        "cursor": {
          "ref": "b10c45f6-0901-489a-aaa9-87f648b4b6e9",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "52aba7ce-3d80-4774-a153-57382a4d3cae"
        },
        "item": {
          "id": "07767c6a-77a7-4f09-be9f-6e8678edfae3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "dcde8b10-a92b-4fff-bf57-6bc929bbcfd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77a7755-931b-44e7-92b1-f187a9c99f74",
        "cursor": {
          "ref": "94098fcc-6a8d-4615-830c-ce7771e37c68",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "30aaede1-3634-429e-8a8e-aadddb124a69"
        },
        "item": {
          "id": "b77a7755-931b-44e7-92b1-f187a9c99f74",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b5f6e76d-c64e-4074-9e11-6730cba99dd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b77a7755-931b-44e7-92b1-f187a9c99f74",
        "cursor": {
          "ref": "94098fcc-6a8d-4615-830c-ce7771e37c68",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "30aaede1-3634-429e-8a8e-aadddb124a69"
        },
        "item": {
          "id": "b77a7755-931b-44e7-92b1-f187a9c99f74",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b5f6e76d-c64e-4074-9e11-6730cba99dd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "208dc454-277f-446d-8eaf-c10baa3db884",
        "cursor": {
          "ref": "95336a14-4840-4022-999c-6b200af7c15f",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2418a184-605f-4173-bc15-8175759353d4"
        },
        "item": {
          "id": "208dc454-277f-446d-8eaf-c10baa3db884",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c24e9a08-b5af-43ef-8938-03d327b5322d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "208dc454-277f-446d-8eaf-c10baa3db884",
        "cursor": {
          "ref": "95336a14-4840-4022-999c-6b200af7c15f",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2418a184-605f-4173-bc15-8175759353d4"
        },
        "item": {
          "id": "208dc454-277f-446d-8eaf-c10baa3db884",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c24e9a08-b5af-43ef-8938-03d327b5322d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c48117-d432-4a4a-8dc0-f3c2942227a6",
        "cursor": {
          "ref": "9625fc7c-3a30-4ae6-a801-565409ce83e1",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "aa8d191d-32ed-4734-9432-ae140b19163d"
        },
        "item": {
          "id": "60c48117-d432-4a4a-8dc0-f3c2942227a6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "94c9f4a8-1e3e-4bcb-8ab5-a1313b963694",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c48117-d432-4a4a-8dc0-f3c2942227a6",
        "cursor": {
          "ref": "9625fc7c-3a30-4ae6-a801-565409ce83e1",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "aa8d191d-32ed-4734-9432-ae140b19163d"
        },
        "item": {
          "id": "60c48117-d432-4a4a-8dc0-f3c2942227a6",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "94c9f4a8-1e3e-4bcb-8ab5-a1313b963694",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75490716-a713-4ae3-8b4f-91fb4e59c921",
        "cursor": {
          "ref": "59632b4f-58ed-486c-9fa0-6eef0e70797a",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1aa8ba18-178e-4063-ad08-bf19760fb5e4"
        },
        "item": {
          "id": "75490716-a713-4ae3-8b4f-91fb4e59c921",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8f5ceef1-5300-439c-8a45-fa417742eabc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75490716-a713-4ae3-8b4f-91fb4e59c921",
        "cursor": {
          "ref": "59632b4f-58ed-486c-9fa0-6eef0e70797a",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "1aa8ba18-178e-4063-ad08-bf19760fb5e4"
        },
        "item": {
          "id": "75490716-a713-4ae3-8b4f-91fb4e59c921",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8f5ceef1-5300-439c-8a45-fa417742eabc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeae1a21-88b5-4260-b21a-b86aed03483a",
        "cursor": {
          "ref": "d05cfc23-a2b8-4a0e-bae8-ed874865fd18",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "50dc9183-1f6a-4162-a66d-b9f414e5f324"
        },
        "item": {
          "id": "eeae1a21-88b5-4260-b21a-b86aed03483a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9a6be08a-06f8-441e-b699-59b766bf6bfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeae1a21-88b5-4260-b21a-b86aed03483a",
        "cursor": {
          "ref": "d05cfc23-a2b8-4a0e-bae8-ed874865fd18",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "50dc9183-1f6a-4162-a66d-b9f414e5f324"
        },
        "item": {
          "id": "eeae1a21-88b5-4260-b21a-b86aed03483a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "9a6be08a-06f8-441e-b699-59b766bf6bfc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d39bb3d-c060-4e8a-ad3d-5e11e68174f4",
        "cursor": {
          "ref": "7bb1c606-3b0c-4bc3-947a-fced4c820754",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3c67c999-126a-4f26-8c76-416037c787fd"
        },
        "item": {
          "id": "0d39bb3d-c060-4e8a-ad3d-5e11e68174f4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e1ff196d-9f53-4489-95b2-08dae3bd4d51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d39bb3d-c060-4e8a-ad3d-5e11e68174f4",
        "cursor": {
          "ref": "7bb1c606-3b0c-4bc3-947a-fced4c820754",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "3c67c999-126a-4f26-8c76-416037c787fd"
        },
        "item": {
          "id": "0d39bb3d-c060-4e8a-ad3d-5e11e68174f4",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e1ff196d-9f53-4489-95b2-08dae3bd4d51",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb3cb48-25cf-4588-90d7-faaf6ec94223",
        "cursor": {
          "ref": "3c836fe1-8388-4bb0-b772-a971eef22392",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5d03fcae-1321-4a90-907d-a6651ab05d74"
        },
        "item": {
          "id": "0cb3cb48-25cf-4588-90d7-faaf6ec94223",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2fd96e3c-64d7-4c2f-ae2e-497dc889cfa6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cb3cb48-25cf-4588-90d7-faaf6ec94223",
        "cursor": {
          "ref": "3c836fe1-8388-4bb0-b772-a971eef22392",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5d03fcae-1321-4a90-907d-a6651ab05d74"
        },
        "item": {
          "id": "0cb3cb48-25cf-4588-90d7-faaf6ec94223",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "2fd96e3c-64d7-4c2f-ae2e-497dc889cfa6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da318b1c-4a67-472c-b28e-82706ad36d09",
        "cursor": {
          "ref": "1e61fc9c-2a17-472b-a938-9107bb14e4c5",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "203fbe06-9ccb-4224-8580-60021f1b991c"
        },
        "item": {
          "id": "da318b1c-4a67-472c-b28e-82706ad36d09",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d6ad9425-6f42-43b5-bd68-fb34f14f2d17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da318b1c-4a67-472c-b28e-82706ad36d09",
        "cursor": {
          "ref": "1e61fc9c-2a17-472b-a938-9107bb14e4c5",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "203fbe06-9ccb-4224-8580-60021f1b991c"
        },
        "item": {
          "id": "da318b1c-4a67-472c-b28e-82706ad36d09",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d6ad9425-6f42-43b5-bd68-fb34f14f2d17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552f9010-e191-4fd4-b688-788d9da98d02",
        "cursor": {
          "ref": "83d4b7a6-171a-459a-9730-f4662ddc118a",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5e3b3f27-7a5c-4a53-93a2-7d3734a64346"
        },
        "item": {
          "id": "552f9010-e191-4fd4-b688-788d9da98d02",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "cb85c630-d9cf-4f70-a2e2-21bd8fb87848",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552f9010-e191-4fd4-b688-788d9da98d02",
        "cursor": {
          "ref": "83d4b7a6-171a-459a-9730-f4662ddc118a",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5e3b3f27-7a5c-4a53-93a2-7d3734a64346"
        },
        "item": {
          "id": "552f9010-e191-4fd4-b688-788d9da98d02",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "cb85c630-d9cf-4f70-a2e2-21bd8fb87848",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651ebba5-03b3-42dc-83d3-c9be299d3552",
        "cursor": {
          "ref": "fa56b0d3-a758-4fb4-9d85-64f0b4f52a49",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c61309b3-29d0-48c7-bf9f-b421e7f31e11"
        },
        "item": {
          "id": "651ebba5-03b3-42dc-83d3-c9be299d3552",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8eed4921-199d-44e8-b5c9-714b24a9b2f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651ebba5-03b3-42dc-83d3-c9be299d3552",
        "cursor": {
          "ref": "fa56b0d3-a758-4fb4-9d85-64f0b4f52a49",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c61309b3-29d0-48c7-bf9f-b421e7f31e11"
        },
        "item": {
          "id": "651ebba5-03b3-42dc-83d3-c9be299d3552",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8eed4921-199d-44e8-b5c9-714b24a9b2f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd61f2a2-dbb7-4fe3-a00a-10fae36387d9",
        "cursor": {
          "ref": "14a35c91-f74d-44eb-b1cf-61f2fe53d681",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "aefe2ed2-350a-4407-b9b2-a2c2ff414cd0"
        },
        "item": {
          "id": "fd61f2a2-dbb7-4fe3-a00a-10fae36387d9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f73bf83b-e7e2-430d-b0b6-a26b20861c4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd61f2a2-dbb7-4fe3-a00a-10fae36387d9",
        "cursor": {
          "ref": "14a35c91-f74d-44eb-b1cf-61f2fe53d681",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "aefe2ed2-350a-4407-b9b2-a2c2ff414cd0"
        },
        "item": {
          "id": "fd61f2a2-dbb7-4fe3-a00a-10fae36387d9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f73bf83b-e7e2-430d-b0b6-a26b20861c4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ee5088-6612-49c9-88a9-00af0baa7a8b",
        "cursor": {
          "ref": "69d4f3a6-3589-4fd0-9325-1209cdf7f6f0",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "37c90833-76ef-49c4-a004-ac19cc711421"
        },
        "item": {
          "id": "62ee5088-6612-49c9-88a9-00af0baa7a8b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "50897fe7-f43a-4d29-b3aa-2a081a995c57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ee5088-6612-49c9-88a9-00af0baa7a8b",
        "cursor": {
          "ref": "69d4f3a6-3589-4fd0-9325-1209cdf7f6f0",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "37c90833-76ef-49c4-a004-ac19cc711421"
        },
        "item": {
          "id": "62ee5088-6612-49c9-88a9-00af0baa7a8b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "50897fe7-f43a-4d29-b3aa-2a081a995c57",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d74993-8b22-4bac-949c-de3f20fd70c3",
        "cursor": {
          "ref": "c76b851b-f688-4a1c-99b0-1f74baec5e18",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3c967216-05b6-4180-bd48-95c871159dd8"
        },
        "item": {
          "id": "47d74993-8b22-4bac-949c-de3f20fd70c3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c4830676-804b-4797-8c4e-991cb6f56919",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d74993-8b22-4bac-949c-de3f20fd70c3",
        "cursor": {
          "ref": "c76b851b-f688-4a1c-99b0-1f74baec5e18",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3c967216-05b6-4180-bd48-95c871159dd8"
        },
        "item": {
          "id": "47d74993-8b22-4bac-949c-de3f20fd70c3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "c4830676-804b-4797-8c4e-991cb6f56919",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e463d8-8e75-4fe7-ae8e-b2cd26b1ed59",
        "cursor": {
          "ref": "55d29292-4486-4fbe-a9a1-206f793b6b27",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "21e11b2c-c712-4370-8827-488c7a1d4f15"
        },
        "item": {
          "id": "b8e463d8-8e75-4fe7-ae8e-b2cd26b1ed59",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e2e2b29a-0a69-4d53-8c97-b1a97291f85c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e463d8-8e75-4fe7-ae8e-b2cd26b1ed59",
        "cursor": {
          "ref": "55d29292-4486-4fbe-a9a1-206f793b6b27",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "21e11b2c-c712-4370-8827-488c7a1d4f15"
        },
        "item": {
          "id": "b8e463d8-8e75-4fe7-ae8e-b2cd26b1ed59",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e2e2b29a-0a69-4d53-8c97-b1a97291f85c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfdfa3e-138a-452c-b36f-99661018bd1d",
        "cursor": {
          "ref": "4fd8ce65-dd30-43a7-a607-c05191e2e455",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2d291ee3-108b-4480-af43-a9f65442a667"
        },
        "item": {
          "id": "3dfdfa3e-138a-452c-b36f-99661018bd1d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1ebcc95e-2105-414d-9883-5d0ed7a17bc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dfdfa3e-138a-452c-b36f-99661018bd1d",
        "cursor": {
          "ref": "4fd8ce65-dd30-43a7-a607-c05191e2e455",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2d291ee3-108b-4480-af43-a9f65442a667"
        },
        "item": {
          "id": "3dfdfa3e-138a-452c-b36f-99661018bd1d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1ebcc95e-2105-414d-9883-5d0ed7a17bc6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7ab7c9-1e42-4f99-a696-af059d878257",
        "cursor": {
          "ref": "7500deca-61b2-4259-baeb-2a8a4b6d495a",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4f62cf21-a16e-4808-afe3-714f3b4b2f08"
        },
        "item": {
          "id": "9c7ab7c9-1e42-4f99-a696-af059d878257",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5c216f90-2ee1-4e59-8b7f-d329e1598abd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c7ab7c9-1e42-4f99-a696-af059d878257",
        "cursor": {
          "ref": "7500deca-61b2-4259-baeb-2a8a4b6d495a",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4f62cf21-a16e-4808-afe3-714f3b4b2f08"
        },
        "item": {
          "id": "9c7ab7c9-1e42-4f99-a696-af059d878257",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5c216f90-2ee1-4e59-8b7f-d329e1598abd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ef1023-ed2a-4bf7-94a3-3892dd9b1570",
        "cursor": {
          "ref": "4b9da232-f330-4f36-825b-b5e8d8b5fd6c",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "993e75a1-c14c-4460-b95a-7754aa3d7e71"
        },
        "item": {
          "id": "50ef1023-ed2a-4bf7-94a3-3892dd9b1570",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "91721bf8-a76f-49d6-b954-457e2cc37895",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50ef1023-ed2a-4bf7-94a3-3892dd9b1570",
        "cursor": {
          "ref": "4b9da232-f330-4f36-825b-b5e8d8b5fd6c",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "993e75a1-c14c-4460-b95a-7754aa3d7e71"
        },
        "item": {
          "id": "50ef1023-ed2a-4bf7-94a3-3892dd9b1570",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "91721bf8-a76f-49d6-b954-457e2cc37895",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "403df266-2cf0-44e7-bfd9-820068b23797",
        "cursor": {
          "ref": "5e1e27a6-ec7d-48cf-a87b-148c115caaec",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "84747e3b-97f7-4789-bcad-3d03e68093ca"
        },
        "item": {
          "id": "403df266-2cf0-44e7-bfd9-820068b23797",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "af9c4d9b-1b1c-43f7-b135-718609f6e6ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "403df266-2cf0-44e7-bfd9-820068b23797",
        "cursor": {
          "ref": "5e1e27a6-ec7d-48cf-a87b-148c115caaec",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "84747e3b-97f7-4789-bcad-3d03e68093ca"
        },
        "item": {
          "id": "403df266-2cf0-44e7-bfd9-820068b23797",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "af9c4d9b-1b1c-43f7-b135-718609f6e6ce",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d61eaf-fe7a-470d-b7ce-81c99ac72ef6",
        "cursor": {
          "ref": "17fc1b46-d5f6-4ae6-a0dc-6d61b2313ad1",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f42a39ec-0bd3-49d0-83ff-213cead62064"
        },
        "item": {
          "id": "61d61eaf-fe7a-470d-b7ce-81c99ac72ef6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f63b85cd-abfc-4672-bfec-793ccca0f19d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d61eaf-fe7a-470d-b7ce-81c99ac72ef6",
        "cursor": {
          "ref": "17fc1b46-d5f6-4ae6-a0dc-6d61b2313ad1",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f42a39ec-0bd3-49d0-83ff-213cead62064"
        },
        "item": {
          "id": "61d61eaf-fe7a-470d-b7ce-81c99ac72ef6",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f63b85cd-abfc-4672-bfec-793ccca0f19d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b90ce3a-3015-4903-97f5-9a358847b1ae",
        "cursor": {
          "ref": "2438501d-57f0-4b2e-8441-8a9a3c69866e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c21e3c53-3d89-4e2a-bac0-a5693dfe5a4f"
        },
        "item": {
          "id": "3b90ce3a-3015-4903-97f5-9a358847b1ae",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6deea0c6-6de3-4c74-a204-1b7938fea48e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b90ce3a-3015-4903-97f5-9a358847b1ae",
        "cursor": {
          "ref": "2438501d-57f0-4b2e-8441-8a9a3c69866e",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c21e3c53-3d89-4e2a-bac0-a5693dfe5a4f"
        },
        "item": {
          "id": "3b90ce3a-3015-4903-97f5-9a358847b1ae",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6deea0c6-6de3-4c74-a204-1b7938fea48e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175945c3-7595-4d84-b10d-b51f8f411021",
        "cursor": {
          "ref": "724d0459-b2f0-4ce0-9e2c-5384b3623a39",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9738d1b5-689b-4bd4-a6c5-9cf67a9fd00f"
        },
        "item": {
          "id": "175945c3-7595-4d84-b10d-b51f8f411021",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b8f0fec5-7180-4fc1-bd6f-d54879d211d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175945c3-7595-4d84-b10d-b51f8f411021",
        "cursor": {
          "ref": "724d0459-b2f0-4ce0-9e2c-5384b3623a39",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "9738d1b5-689b-4bd4-a6c5-9cf67a9fd00f"
        },
        "item": {
          "id": "175945c3-7595-4d84-b10d-b51f8f411021",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b8f0fec5-7180-4fc1-bd6f-d54879d211d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b248d46-cbc2-4b46-a338-a687fab86623",
        "cursor": {
          "ref": "5664d288-8be2-4c99-8619-f264e5d3d27e",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5acd1bbb-8b92-48b2-b781-5053036a20b2"
        },
        "item": {
          "id": "1b248d46-cbc2-4b46-a338-a687fab86623",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6111285e-9d29-4c82-b910-2ac1318bce82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b248d46-cbc2-4b46-a338-a687fab86623",
        "cursor": {
          "ref": "5664d288-8be2-4c99-8619-f264e5d3d27e",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5acd1bbb-8b92-48b2-b781-5053036a20b2"
        },
        "item": {
          "id": "1b248d46-cbc2-4b46-a338-a687fab86623",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6111285e-9d29-4c82-b910-2ac1318bce82",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b5153f-31ac-43a7-ab82-6a12b5cae861",
        "cursor": {
          "ref": "d956fe54-8eaf-4305-adfb-189ae4119dba",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b94b4907-5ac4-465b-ba84-910c0d1cf157"
        },
        "item": {
          "id": "e1b5153f-31ac-43a7-ab82-6a12b5cae861",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "bf87a889-107d-45ea-afe7-2a74e799b2aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1b5153f-31ac-43a7-ab82-6a12b5cae861",
        "cursor": {
          "ref": "d956fe54-8eaf-4305-adfb-189ae4119dba",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b94b4907-5ac4-465b-ba84-910c0d1cf157"
        },
        "item": {
          "id": "e1b5153f-31ac-43a7-ab82-6a12b5cae861",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "bf87a889-107d-45ea-afe7-2a74e799b2aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc44e2ab-f9c9-4a16-9145-6ae40dee4ef5",
        "cursor": {
          "ref": "b2b52541-3753-4c7d-b880-8544f03ada28",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0eb9254c-6a63-4e86-bd3a-b8de0a380596"
        },
        "item": {
          "id": "dc44e2ab-f9c9-4a16-9145-6ae40dee4ef5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "485db854-1a93-48b6-8838-c6063cf7a15d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc44e2ab-f9c9-4a16-9145-6ae40dee4ef5",
        "cursor": {
          "ref": "b2b52541-3753-4c7d-b880-8544f03ada28",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0eb9254c-6a63-4e86-bd3a-b8de0a380596"
        },
        "item": {
          "id": "dc44e2ab-f9c9-4a16-9145-6ae40dee4ef5",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "485db854-1a93-48b6-8838-c6063cf7a15d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40b689e-00a6-44e9-9c92-3b54955dc064",
        "cursor": {
          "ref": "edb69bda-c752-42d6-aebf-a8d248403937",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b95e3d68-99cc-4d83-8db7-99a49b9bfaaf"
        },
        "item": {
          "id": "d40b689e-00a6-44e9-9c92-3b54955dc064",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "67951e63-db75-423b-baf1-0a14a9131a0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40b689e-00a6-44e9-9c92-3b54955dc064",
        "cursor": {
          "ref": "edb69bda-c752-42d6-aebf-a8d248403937",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b95e3d68-99cc-4d83-8db7-99a49b9bfaaf"
        },
        "item": {
          "id": "d40b689e-00a6-44e9-9c92-3b54955dc064",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "67951e63-db75-423b-baf1-0a14a9131a0a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada1aaad-dded-4f0d-8c58-6f0d06e8f195",
        "cursor": {
          "ref": "f4cb2022-74da-41f1-b39e-be28d8d6ce4b",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "aceb7ccf-5a19-426b-836b-1236d2d52602"
        },
        "item": {
          "id": "ada1aaad-dded-4f0d-8c58-6f0d06e8f195",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "11a9b595-6656-4251-ad94-cd322cb9f7af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada1aaad-dded-4f0d-8c58-6f0d06e8f195",
        "cursor": {
          "ref": "f4cb2022-74da-41f1-b39e-be28d8d6ce4b",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "aceb7ccf-5a19-426b-836b-1236d2d52602"
        },
        "item": {
          "id": "ada1aaad-dded-4f0d-8c58-6f0d06e8f195",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "11a9b595-6656-4251-ad94-cd322cb9f7af",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2286ec87-d7b1-4b3f-a8df-121eb7cde942",
        "cursor": {
          "ref": "d06a58c3-8096-4bd0-a5bd-f022f8788fbc",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "876f4785-8770-485d-aa02-eb2fbe6e16c4"
        },
        "item": {
          "id": "2286ec87-d7b1-4b3f-a8df-121eb7cde942",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2e4ba3d7-f39f-4101-a86c-70a2be5c7211",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2286ec87-d7b1-4b3f-a8df-121eb7cde942",
        "cursor": {
          "ref": "d06a58c3-8096-4bd0-a5bd-f022f8788fbc",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "876f4785-8770-485d-aa02-eb2fbe6e16c4"
        },
        "item": {
          "id": "2286ec87-d7b1-4b3f-a8df-121eb7cde942",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2e4ba3d7-f39f-4101-a86c-70a2be5c7211",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b987941-1ad2-4896-a7d3-b65254bd2866",
        "cursor": {
          "ref": "7ab67cf8-8439-4b09-b51b-984a124750e8",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0c705ea8-0768-4d93-9ed6-edc28f31aa51"
        },
        "item": {
          "id": "7b987941-1ad2-4896-a7d3-b65254bd2866",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0021fa21-8e33-4eef-8714-a6e35bb64c46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b987941-1ad2-4896-a7d3-b65254bd2866",
        "cursor": {
          "ref": "7ab67cf8-8439-4b09-b51b-984a124750e8",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0c705ea8-0768-4d93-9ed6-edc28f31aa51"
        },
        "item": {
          "id": "7b987941-1ad2-4896-a7d3-b65254bd2866",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0021fa21-8e33-4eef-8714-a6e35bb64c46",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3990e0-62d1-4e82-8b40-88e2f4aadf48",
        "cursor": {
          "ref": "9f4419ad-7931-4e0a-a630-19257d6b7ad9",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8efeddcb-f451-4e6d-8397-83a4c3ca2ed4"
        },
        "item": {
          "id": "5e3990e0-62d1-4e82-8b40-88e2f4aadf48",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "664b0b65-7cc0-4e44-944d-09ac771e7c3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e3990e0-62d1-4e82-8b40-88e2f4aadf48",
        "cursor": {
          "ref": "9f4419ad-7931-4e0a-a630-19257d6b7ad9",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "8efeddcb-f451-4e6d-8397-83a4c3ca2ed4"
        },
        "item": {
          "id": "5e3990e0-62d1-4e82-8b40-88e2f4aadf48",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "664b0b65-7cc0-4e44-944d-09ac771e7c3a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcfea31b-ebaf-4531-a558-9da55330b36e",
        "cursor": {
          "ref": "89d7e9c9-d8d4-4375-8271-f8654e93e16a",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "427668e7-66af-4091-802b-bf77f1b26568"
        },
        "item": {
          "id": "bcfea31b-ebaf-4531-a558-9da55330b36e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d9134a6f-39d2-4ddd-86f5-d5b0ac2abfc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcfea31b-ebaf-4531-a558-9da55330b36e",
        "cursor": {
          "ref": "89d7e9c9-d8d4-4375-8271-f8654e93e16a",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "427668e7-66af-4091-802b-bf77f1b26568"
        },
        "item": {
          "id": "bcfea31b-ebaf-4531-a558-9da55330b36e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "d9134a6f-39d2-4ddd-86f5-d5b0ac2abfc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9c9300-3c59-4d93-8628-0507dba2773b",
        "cursor": {
          "ref": "dfe5d2b0-4804-4386-870a-fca30cbc37d0",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "78a87323-45d9-4ee5-82fa-7d9b2cb39ec5"
        },
        "item": {
          "id": "6d9c9300-3c59-4d93-8628-0507dba2773b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "098386a4-f69c-45c1-a9f8-24f11e1436b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9c9300-3c59-4d93-8628-0507dba2773b",
        "cursor": {
          "ref": "dfe5d2b0-4804-4386-870a-fca30cbc37d0",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "78a87323-45d9-4ee5-82fa-7d9b2cb39ec5"
        },
        "item": {
          "id": "6d9c9300-3c59-4d93-8628-0507dba2773b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "098386a4-f69c-45c1-a9f8-24f11e1436b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44dddda8-b676-45db-a605-49d28ae882b4",
        "cursor": {
          "ref": "b196c161-c638-43d5-9359-fa51e2d4e919",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2a733290-da87-405e-8ada-7ec297fc6a03"
        },
        "item": {
          "id": "44dddda8-b676-45db-a605-49d28ae882b4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "277f384d-dfa5-40da-893f-9a5533b87877",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44dddda8-b676-45db-a605-49d28ae882b4",
        "cursor": {
          "ref": "b196c161-c638-43d5-9359-fa51e2d4e919",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "2a733290-da87-405e-8ada-7ec297fc6a03"
        },
        "item": {
          "id": "44dddda8-b676-45db-a605-49d28ae882b4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "277f384d-dfa5-40da-893f-9a5533b87877",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2cac7af-1efb-44e5-bc60-34390bea47af",
        "cursor": {
          "ref": "b0f6d126-bf43-48a3-9f54-c45255207e55",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "669ed033-3434-44ff-9cba-446d99f52111"
        },
        "item": {
          "id": "d2cac7af-1efb-44e5-bc60-34390bea47af",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "92ab5efe-c8e6-4807-8ea3-5d21d951b550",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2cac7af-1efb-44e5-bc60-34390bea47af",
        "cursor": {
          "ref": "b0f6d126-bf43-48a3-9f54-c45255207e55",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "669ed033-3434-44ff-9cba-446d99f52111"
        },
        "item": {
          "id": "d2cac7af-1efb-44e5-bc60-34390bea47af",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "92ab5efe-c8e6-4807-8ea3-5d21d951b550",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a29adcd-6fd3-4d2f-a0fe-2f431365218c",
        "cursor": {
          "ref": "948797f1-8c35-47de-85d0-453634ac1d70",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e52b6ae9-a6eb-4481-9153-8bc6205beae8"
        },
        "item": {
          "id": "3a29adcd-6fd3-4d2f-a0fe-2f431365218c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "47dee666-24cf-4f6a-b98c-14d0f3413e4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a29adcd-6fd3-4d2f-a0fe-2f431365218c",
        "cursor": {
          "ref": "948797f1-8c35-47de-85d0-453634ac1d70",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "e52b6ae9-a6eb-4481-9153-8bc6205beae8"
        },
        "item": {
          "id": "3a29adcd-6fd3-4d2f-a0fe-2f431365218c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "47dee666-24cf-4f6a-b98c-14d0f3413e4f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e07ac33-9cda-449a-a65f-1de4b66be8eb",
        "cursor": {
          "ref": "5d53fcaa-1c86-4301-b813-8318f04bfce4",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ba082627-eb8c-4a9b-92c0-cb4323575240"
        },
        "item": {
          "id": "1e07ac33-9cda-449a-a65f-1de4b66be8eb",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "bf2daf5e-a2b6-42c3-9849-1b60497f1513",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e07ac33-9cda-449a-a65f-1de4b66be8eb",
        "cursor": {
          "ref": "5d53fcaa-1c86-4301-b813-8318f04bfce4",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "ba082627-eb8c-4a9b-92c0-cb4323575240"
        },
        "item": {
          "id": "1e07ac33-9cda-449a-a65f-1de4b66be8eb",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "bf2daf5e-a2b6-42c3-9849-1b60497f1513",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94f621b-c1a8-4be5-aae6-843c7f665be0",
        "cursor": {
          "ref": "ac71dfab-cd18-45b0-a920-219637658b6f",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e0748ad6-a357-41c7-8062-1d763132acec"
        },
        "item": {
          "id": "e94f621b-c1a8-4be5-aae6-843c7f665be0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9fa9e85b-1f88-494e-9d2b-8aa7ca5f3b32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e94f621b-c1a8-4be5-aae6-843c7f665be0",
        "cursor": {
          "ref": "ac71dfab-cd18-45b0-a920-219637658b6f",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e0748ad6-a357-41c7-8062-1d763132acec"
        },
        "item": {
          "id": "e94f621b-c1a8-4be5-aae6-843c7f665be0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "9fa9e85b-1f88-494e-9d2b-8aa7ca5f3b32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c35866d-e52c-4d74-b78e-f9552fc7cf0d",
        "cursor": {
          "ref": "2c3d465d-aa21-4fb7-8b42-a2c77f14d38c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4fc2171d-7e9f-4f77-b9a2-2980e76df423"
        },
        "item": {
          "id": "6c35866d-e52c-4d74-b78e-f9552fc7cf0d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e182d1df-7c27-4c78-8aeb-e6a10b40224c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c35866d-e52c-4d74-b78e-f9552fc7cf0d",
        "cursor": {
          "ref": "2c3d465d-aa21-4fb7-8b42-a2c77f14d38c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4fc2171d-7e9f-4f77-b9a2-2980e76df423"
        },
        "item": {
          "id": "6c35866d-e52c-4d74-b78e-f9552fc7cf0d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e182d1df-7c27-4c78-8aeb-e6a10b40224c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b26562-84d4-47f7-842d-987ab3fb28bc",
        "cursor": {
          "ref": "672d3e92-9cf8-4278-9e76-e7005483fc84",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "50525344-0732-4840-83f1-189049678718"
        },
        "item": {
          "id": "04b26562-84d4-47f7-842d-987ab3fb28bc",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "23f896e7-0c64-4f05-91a4-084b1b69ea3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 94,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b26562-84d4-47f7-842d-987ab3fb28bc",
        "cursor": {
          "ref": "672d3e92-9cf8-4278-9e76-e7005483fc84",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "50525344-0732-4840-83f1-189049678718"
        },
        "item": {
          "id": "04b26562-84d4-47f7-842d-987ab3fb28bc",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "23f896e7-0c64-4f05-91a4-084b1b69ea3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 94,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2782314e-6ef7-40ac-b6cd-a9fe6ff85198",
        "cursor": {
          "ref": "accf0da6-1308-4b58-a272-b722ccd6db01",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fd13703d-1e76-4c47-84da-e832042c3a5b"
        },
        "item": {
          "id": "2782314e-6ef7-40ac-b6cd-a9fe6ff85198",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9a3a297f-d292-49b3-b3f1-8baeb5249697",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2782314e-6ef7-40ac-b6cd-a9fe6ff85198",
        "cursor": {
          "ref": "accf0da6-1308-4b58-a272-b722ccd6db01",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fd13703d-1e76-4c47-84da-e832042c3a5b"
        },
        "item": {
          "id": "2782314e-6ef7-40ac-b6cd-a9fe6ff85198",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "9a3a297f-d292-49b3-b3f1-8baeb5249697",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796be252-228f-482d-8d66-ff970a0d3bc8",
        "cursor": {
          "ref": "85fc7057-62fd-4576-8307-4578998f19ea",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "17e69be4-61d0-4d18-9058-b5d36b8fa1bd"
        },
        "item": {
          "id": "796be252-228f-482d-8d66-ff970a0d3bc8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ec8c3efe-9b19-4973-93b4-eab497a07ca9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796be252-228f-482d-8d66-ff970a0d3bc8",
        "cursor": {
          "ref": "85fc7057-62fd-4576-8307-4578998f19ea",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "17e69be4-61d0-4d18-9058-b5d36b8fa1bd"
        },
        "item": {
          "id": "796be252-228f-482d-8d66-ff970a0d3bc8",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ec8c3efe-9b19-4973-93b4-eab497a07ca9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a8a08b-e1c5-482f-b6f0-e4895e50f854",
        "cursor": {
          "ref": "bf922ee9-7400-4f15-b8e7-ea0fb7c50d90",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4d233b6e-14c0-4e32-9cc7-42df3b9b8bd0"
        },
        "item": {
          "id": "16a8a08b-e1c5-482f-b6f0-e4895e50f854",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "65415f51-61da-4c84-ad43-ae9fbf4cda78",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a8a08b-e1c5-482f-b6f0-e4895e50f854",
        "cursor": {
          "ref": "bf922ee9-7400-4f15-b8e7-ea0fb7c50d90",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4d233b6e-14c0-4e32-9cc7-42df3b9b8bd0"
        },
        "item": {
          "id": "16a8a08b-e1c5-482f-b6f0-e4895e50f854",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "65415f51-61da-4c84-ad43-ae9fbf4cda78",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8497d5d3-4acb-44c6-9e7a-3921cffd3d3d",
        "cursor": {
          "ref": "36b81665-6092-4477-9a0a-5ee7545fa808",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4297da0b-049f-4e41-8792-265dea417950"
        },
        "item": {
          "id": "8497d5d3-4acb-44c6-9e7a-3921cffd3d3d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8a41207e-0e55-458f-a652-9544ac81f6f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8497d5d3-4acb-44c6-9e7a-3921cffd3d3d",
        "cursor": {
          "ref": "36b81665-6092-4477-9a0a-5ee7545fa808",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "4297da0b-049f-4e41-8792-265dea417950"
        },
        "item": {
          "id": "8497d5d3-4acb-44c6-9e7a-3921cffd3d3d",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8a41207e-0e55-458f-a652-9544ac81f6f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed8d1fe-ef2a-45d7-a119-6951a96f4e38",
        "cursor": {
          "ref": "08074990-b57d-4315-a9e3-dd18dca08bc2",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a916e8b4-fd2f-4da0-a514-f04d822f8a62"
        },
        "item": {
          "id": "6ed8d1fe-ef2a-45d7-a119-6951a96f4e38",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "99101d53-03fa-46cc-a27b-3dcbb82e25f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ed8d1fe-ef2a-45d7-a119-6951a96f4e38",
        "cursor": {
          "ref": "08074990-b57d-4315-a9e3-dd18dca08bc2",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a916e8b4-fd2f-4da0-a514-f04d822f8a62"
        },
        "item": {
          "id": "6ed8d1fe-ef2a-45d7-a119-6951a96f4e38",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "99101d53-03fa-46cc-a27b-3dcbb82e25f8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac09be7-161d-4365-9684-7b1a84ec94b8",
        "cursor": {
          "ref": "fdc5f9e4-ff1c-49c4-880b-403ce992c5e0",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "25aab88c-014e-40c0-b65d-0a6a07d6dddc"
        },
        "item": {
          "id": "8ac09be7-161d-4365-9684-7b1a84ec94b8",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "15606eb1-371d-425f-bd45-64e6e3d6875a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ac09be7-161d-4365-9684-7b1a84ec94b8",
        "cursor": {
          "ref": "fdc5f9e4-ff1c-49c4-880b-403ce992c5e0",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "25aab88c-014e-40c0-b65d-0a6a07d6dddc"
        },
        "item": {
          "id": "8ac09be7-161d-4365-9684-7b1a84ec94b8",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "15606eb1-371d-425f-bd45-64e6e3d6875a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc9c8eb5-119f-4bb2-9d77-fe485da0cadd",
        "cursor": {
          "ref": "e374d85f-0611-4483-960b-8bb81bb5cb67",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "eefdef21-17d8-400f-ab72-9587f63946da"
        },
        "item": {
          "id": "bc9c8eb5-119f-4bb2-9d77-fe485da0cadd",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "a6772c74-77dd-4acd-9771-a312f3c44161",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "bc9c8eb5-119f-4bb2-9d77-fe485da0cadd",
        "cursor": {
          "ref": "e374d85f-0611-4483-960b-8bb81bb5cb67",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "eefdef21-17d8-400f-ab72-9587f63946da"
        },
        "item": {
          "id": "bc9c8eb5-119f-4bb2-9d77-fe485da0cadd",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "a6772c74-77dd-4acd-9771-a312f3c44161",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "459a319f-a279-4eff-a763-82e8dd828766",
        "cursor": {
          "ref": "a6fdbc37-cb7a-4d05-a47d-820cc664473c",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "860193a7-7d5e-47cf-9a8a-7355c6d1cc3b"
        },
        "item": {
          "id": "459a319f-a279-4eff-a763-82e8dd828766",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3a159f85-6709-4b5c-ac81-2aec508e4a5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "459a319f-a279-4eff-a763-82e8dd828766",
        "cursor": {
          "ref": "a6fdbc37-cb7a-4d05-a47d-820cc664473c",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "860193a7-7d5e-47cf-9a8a-7355c6d1cc3b"
        },
        "item": {
          "id": "459a319f-a279-4eff-a763-82e8dd828766",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3a159f85-6709-4b5c-ac81-2aec508e4a5a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "fd318667-89b9-4cf6-aaf1-d4b75527d66b",
        "cursor": {
          "ref": "35a820d2-5c9b-45dd-b703-fe0dfec22a8b",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "352ed2b9-1703-4c09-aeab-98fed973a286"
        },
        "item": {
          "id": "fd318667-89b9-4cf6-aaf1-d4b75527d66b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "20ba301c-0baf-49ed-8768-7a04b1b2c30e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "fd318667-89b9-4cf6-aaf1-d4b75527d66b",
        "cursor": {
          "ref": "35a820d2-5c9b-45dd-b703-fe0dfec22a8b",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "352ed2b9-1703-4c09-aeab-98fed973a286"
        },
        "item": {
          "id": "fd318667-89b9-4cf6-aaf1-d4b75527d66b",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "20ba301c-0baf-49ed-8768-7a04b1b2c30e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "e31ef91f-9afa-4d17-b78b-ed4951277d9f",
        "cursor": {
          "ref": "fff74839-d916-4b71-a7b3-f87c1370a0bd",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "52c81311-a7b9-4032-ba18-ef7528e2615c"
        },
        "item": {
          "id": "e31ef91f-9afa-4d17-b78b-ed4951277d9f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "eaf743a9-ea23-4312-9756-8082c0bd9e65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "e31ef91f-9afa-4d17-b78b-ed4951277d9f",
        "cursor": {
          "ref": "fff74839-d916-4b71-a7b3-f87c1370a0bd",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "52c81311-a7b9-4032-ba18-ef7528e2615c"
        },
        "item": {
          "id": "e31ef91f-9afa-4d17-b78b-ed4951277d9f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "eaf743a9-ea23-4312-9756-8082c0bd9e65",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "138cef30-5fd3-48f9-a025-26c1cf89bb6d",
        "cursor": {
          "ref": "f63f2f04-e5b6-4114-96c2-207d50a697d6",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ccd614b1-df11-4562-9f6e-77e741abb646"
        },
        "item": {
          "id": "138cef30-5fd3-48f9-a025-26c1cf89bb6d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1136ceaf-fd13-431c-80fe-81d0b00e8d93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "138cef30-5fd3-48f9-a025-26c1cf89bb6d",
        "cursor": {
          "ref": "f63f2f04-e5b6-4114-96c2-207d50a697d6",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ccd614b1-df11-4562-9f6e-77e741abb646"
        },
        "item": {
          "id": "138cef30-5fd3-48f9-a025-26c1cf89bb6d",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1136ceaf-fd13-431c-80fe-81d0b00e8d93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "8b3c2d23-0ba2-44ba-941b-5b554f9f4b69",
        "cursor": {
          "ref": "cfd2663c-18be-4ed7-accc-ad74140f35eb",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "86764636-c0a1-45a7-8f90-1d7cfcba41a2"
        },
        "item": {
          "id": "8b3c2d23-0ba2-44ba-941b-5b554f9f4b69",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "56c01b60-b584-491c-9125-820f7c03adb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "8b3c2d23-0ba2-44ba-941b-5b554f9f4b69",
        "cursor": {
          "ref": "cfd2663c-18be-4ed7-accc-ad74140f35eb",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "86764636-c0a1-45a7-8f90-1d7cfcba41a2"
        },
        "item": {
          "id": "8b3c2d23-0ba2-44ba-941b-5b554f9f4b69",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "56c01b60-b584-491c-9125-820f7c03adb0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "8b2e6861-379e-496f-bfe1-dba794d1f9ef",
        "cursor": {
          "ref": "10fecd9a-3ffb-4789-a1c2-ab6e1bce44da",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d9627112-d5e2-4040-8e19-85859cc2237c"
        },
        "item": {
          "id": "8b2e6861-379e-496f-bfe1-dba794d1f9ef",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c585306e-d832-49c7-8a1b-a0a43a8cdc29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "8b2e6861-379e-496f-bfe1-dba794d1f9ef",
        "cursor": {
          "ref": "10fecd9a-3ffb-4789-a1c2-ab6e1bce44da",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d9627112-d5e2-4040-8e19-85859cc2237c"
        },
        "item": {
          "id": "8b2e6861-379e-496f-bfe1-dba794d1f9ef",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "c585306e-d832-49c7-8a1b-a0a43a8cdc29",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "ca44a609-ddda-4f4f-a8b7-665707ab6d59",
        "cursor": {
          "ref": "57f6e652-d0ee-4f7d-a5bb-e87fc7091519",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "07918469-92ba-4096-863e-a9550a41a747"
        },
        "item": {
          "id": "ca44a609-ddda-4f4f-a8b7-665707ab6d59",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3e96d06c-ae9c-499e-b10e-0b39b284e208",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca44a609-ddda-4f4f-a8b7-665707ab6d59",
        "cursor": {
          "ref": "57f6e652-d0ee-4f7d-a5bb-e87fc7091519",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "07918469-92ba-4096-863e-a9550a41a747"
        },
        "item": {
          "id": "ca44a609-ddda-4f4f-a8b7-665707ab6d59",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "3e96d06c-ae9c-499e-b10e-0b39b284e208",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56105fe7-411c-416a-85eb-15e4516acc97",
        "cursor": {
          "ref": "d3740db5-a044-4c11-b915-553996072641",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9e9c5993-e65f-427d-b0d8-03c942050b9e"
        },
        "item": {
          "id": "56105fe7-411c-416a-85eb-15e4516acc97",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "edc3b7aa-4365-49bd-84b7-f94c4d238118",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56105fe7-411c-416a-85eb-15e4516acc97",
        "cursor": {
          "ref": "d3740db5-a044-4c11-b915-553996072641",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "9e9c5993-e65f-427d-b0d8-03c942050b9e"
        },
        "item": {
          "id": "56105fe7-411c-416a-85eb-15e4516acc97",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "edc3b7aa-4365-49bd-84b7-f94c4d238118",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf8acf6-bd4d-414c-9ef0-63a8acc92d09",
        "cursor": {
          "ref": "c55d61dc-f9ad-446b-8a68-2cfddd68eb3d",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e25d22ae-3d00-462a-84bf-cbeaa88475e2"
        },
        "item": {
          "id": "edf8acf6-bd4d-414c-9ef0-63a8acc92d09",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f2848d01-9f2a-4de7-acc6-2d1ec122a931",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf8acf6-bd4d-414c-9ef0-63a8acc92d09",
        "cursor": {
          "ref": "c55d61dc-f9ad-446b-8a68-2cfddd68eb3d",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e25d22ae-3d00-462a-84bf-cbeaa88475e2"
        },
        "item": {
          "id": "edf8acf6-bd4d-414c-9ef0-63a8acc92d09",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f2848d01-9f2a-4de7-acc6-2d1ec122a931",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86e2241-7d34-4c2c-9286-d7149e15e405",
        "cursor": {
          "ref": "ed483c7e-6c75-4160-8827-a4da39e6ab40",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e8752624-62e0-4d86-8e7e-e37e76844051"
        },
        "item": {
          "id": "a86e2241-7d34-4c2c-9286-d7149e15e405",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a98b694e-ce16-49e6-9522-d4c9972c642e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a86e2241-7d34-4c2c-9286-d7149e15e405",
        "cursor": {
          "ref": "ed483c7e-6c75-4160-8827-a4da39e6ab40",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e8752624-62e0-4d86-8e7e-e37e76844051"
        },
        "item": {
          "id": "a86e2241-7d34-4c2c-9286-d7149e15e405",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "a98b694e-ce16-49e6-9522-d4c9972c642e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa7d75d-5a28-407f-a34c-d5f572a7e056",
        "cursor": {
          "ref": "d3bac1c0-7b39-4925-a4ad-2e61ac8fccbe",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "38d08f66-28dd-42ee-9926-6cf10d60e8f5"
        },
        "item": {
          "id": "aaa7d75d-5a28-407f-a34c-d5f572a7e056",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "279d85ff-5783-4eea-a147-57ae55a1fae5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa7d75d-5a28-407f-a34c-d5f572a7e056",
        "cursor": {
          "ref": "d3bac1c0-7b39-4925-a4ad-2e61ac8fccbe",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "38d08f66-28dd-42ee-9926-6cf10d60e8f5"
        },
        "item": {
          "id": "aaa7d75d-5a28-407f-a34c-d5f572a7e056",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "279d85ff-5783-4eea-a147-57ae55a1fae5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64350896-4543-420c-9c4b-3418a3c81b0e",
        "cursor": {
          "ref": "f4783845-d418-4d22-922d-5aebc119b9c7",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7da2926b-4179-42fe-8b6f-10df3817b3a3"
        },
        "item": {
          "id": "64350896-4543-420c-9c4b-3418a3c81b0e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "990759c7-afaa-4ead-8109-854a1a206e0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64350896-4543-420c-9c4b-3418a3c81b0e",
        "cursor": {
          "ref": "f4783845-d418-4d22-922d-5aebc119b9c7",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7da2926b-4179-42fe-8b6f-10df3817b3a3"
        },
        "item": {
          "id": "64350896-4543-420c-9c4b-3418a3c81b0e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "990759c7-afaa-4ead-8109-854a1a206e0d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc2705c-b69d-48ae-bebd-b26308269cd6",
        "cursor": {
          "ref": "a12df256-5884-42b9-bf5c-a095ac49f9d9",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9854c0b9-7305-4793-8358-a4a642bd313f"
        },
        "item": {
          "id": "7dc2705c-b69d-48ae-bebd-b26308269cd6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5f234fae-366b-4c52-bb0c-4e9b1597320e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc2705c-b69d-48ae-bebd-b26308269cd6",
        "cursor": {
          "ref": "a12df256-5884-42b9-bf5c-a095ac49f9d9",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9854c0b9-7305-4793-8358-a4a642bd313f"
        },
        "item": {
          "id": "7dc2705c-b69d-48ae-bebd-b26308269cd6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "5f234fae-366b-4c52-bb0c-4e9b1597320e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728e1670-33f9-471b-8b49-5e75f90c717c",
        "cursor": {
          "ref": "4caf56ac-531c-46aa-bfc0-3634b9f960aa",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b206acc8-8f85-43e5-ad2d-75fa579c6a9e"
        },
        "item": {
          "id": "728e1670-33f9-471b-8b49-5e75f90c717c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "df985e9e-2676-40e8-b8e4-390b627c5da5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "728e1670-33f9-471b-8b49-5e75f90c717c",
        "cursor": {
          "ref": "4caf56ac-531c-46aa-bfc0-3634b9f960aa",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b206acc8-8f85-43e5-ad2d-75fa579c6a9e"
        },
        "item": {
          "id": "728e1670-33f9-471b-8b49-5e75f90c717c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "df985e9e-2676-40e8-b8e4-390b627c5da5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb45850-a739-4e67-82e3-fb936cfa2260",
        "cursor": {
          "ref": "ea36f7b7-5016-4124-b839-63d22d0f1105",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7ddb4bd1-b3a8-4bbd-8bf0-235c4d17a84f"
        },
        "item": {
          "id": "dcb45850-a739-4e67-82e3-fb936cfa2260",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ebdbfc4c-e0b5-4180-905c-28f78c8e801f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb45850-a739-4e67-82e3-fb936cfa2260",
        "cursor": {
          "ref": "ea36f7b7-5016-4124-b839-63d22d0f1105",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "7ddb4bd1-b3a8-4bbd-8bf0-235c4d17a84f"
        },
        "item": {
          "id": "dcb45850-a739-4e67-82e3-fb936cfa2260",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ebdbfc4c-e0b5-4180-905c-28f78c8e801f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9fe8eef-0f3a-4560-bae0-4636d21cda0d",
        "cursor": {
          "ref": "4938397c-6396-41bc-9f7a-75d6c930ba3c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d00e5b03-8617-4f35-8541-39127ab52168"
        },
        "item": {
          "id": "c9fe8eef-0f3a-4560-bae0-4636d21cda0d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d0fcbb8e-61dc-4cad-9ea7-001b7f4dd0dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9fe8eef-0f3a-4560-bae0-4636d21cda0d",
        "cursor": {
          "ref": "4938397c-6396-41bc-9f7a-75d6c930ba3c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d00e5b03-8617-4f35-8541-39127ab52168"
        },
        "item": {
          "id": "c9fe8eef-0f3a-4560-bae0-4636d21cda0d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d0fcbb8e-61dc-4cad-9ea7-001b7f4dd0dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc29192-8f84-47a9-93b3-4fdd21090a5f",
        "cursor": {
          "ref": "195e0a0b-382b-4791-b041-f98658ac8590",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bb8056c7-97ff-4a20-8cb4-967b36cf1565"
        },
        "item": {
          "id": "dcc29192-8f84-47a9-93b3-4fdd21090a5f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3d498e71-37e3-4097-8a22-f740801ec5e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcc29192-8f84-47a9-93b3-4fdd21090a5f",
        "cursor": {
          "ref": "195e0a0b-382b-4791-b041-f98658ac8590",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bb8056c7-97ff-4a20-8cb4-967b36cf1565"
        },
        "item": {
          "id": "dcc29192-8f84-47a9-93b3-4fdd21090a5f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3d498e71-37e3-4097-8a22-f740801ec5e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b49e9a-2972-43d3-9039-9c83d85221b9",
        "cursor": {
          "ref": "a7385fef-e287-49ce-b9ef-fc7b3aa71125",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "dd83e060-413d-4631-addb-c143dcb29be3"
        },
        "item": {
          "id": "d5b49e9a-2972-43d3-9039-9c83d85221b9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "aeb8960f-bfee-4432-9a9a-62b62ddffdb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5b49e9a-2972-43d3-9039-9c83d85221b9",
        "cursor": {
          "ref": "a7385fef-e287-49ce-b9ef-fc7b3aa71125",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "dd83e060-413d-4631-addb-c143dcb29be3"
        },
        "item": {
          "id": "d5b49e9a-2972-43d3-9039-9c83d85221b9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "aeb8960f-bfee-4432-9a9a-62b62ddffdb3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77721cd0-4ce0-4b8b-ae80-11b11bb807b0",
        "cursor": {
          "ref": "973915f4-5f9d-4e2b-bdcb-d5343f54b95a",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "615ca6dc-50c5-42a2-9714-be5fc1ccf3eb"
        },
        "item": {
          "id": "77721cd0-4ce0-4b8b-ae80-11b11bb807b0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2d805e48-9c0d-405d-9feb-ff66fc041dc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77721cd0-4ce0-4b8b-ae80-11b11bb807b0",
        "cursor": {
          "ref": "973915f4-5f9d-4e2b-bdcb-d5343f54b95a",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "615ca6dc-50c5-42a2-9714-be5fc1ccf3eb"
        },
        "item": {
          "id": "77721cd0-4ce0-4b8b-ae80-11b11bb807b0",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2d805e48-9c0d-405d-9feb-ff66fc041dc9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e31231-6e1f-4a93-a720-fc38a2dd1010",
        "cursor": {
          "ref": "cc455cf2-a535-4fa6-884e-2bc239691d2d",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "31d426df-f0a6-4e9b-8f12-7fcc05c2107a"
        },
        "item": {
          "id": "d3e31231-6e1f-4a93-a720-fc38a2dd1010",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e43777ab-75b5-4e80-8de7-8ec84b77bf75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e31231-6e1f-4a93-a720-fc38a2dd1010",
        "cursor": {
          "ref": "cc455cf2-a535-4fa6-884e-2bc239691d2d",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "31d426df-f0a6-4e9b-8f12-7fcc05c2107a"
        },
        "item": {
          "id": "d3e31231-6e1f-4a93-a720-fc38a2dd1010",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e43777ab-75b5-4e80-8de7-8ec84b77bf75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0201c14c-9767-478a-ae60-ff5a46af714e",
        "cursor": {
          "ref": "272a9c76-c08e-4868-af10-bfcb9a3486ca",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8a0e0d2b-8454-4b9a-bd89-46350feea24f"
        },
        "item": {
          "id": "0201c14c-9767-478a-ae60-ff5a46af714e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5e3e5cbc-c037-48ee-b885-2e0e0182d889",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0201c14c-9767-478a-ae60-ff5a46af714e",
        "cursor": {
          "ref": "272a9c76-c08e-4868-af10-bfcb9a3486ca",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "8a0e0d2b-8454-4b9a-bd89-46350feea24f"
        },
        "item": {
          "id": "0201c14c-9767-478a-ae60-ff5a46af714e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "5e3e5cbc-c037-48ee-b885-2e0e0182d889",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8190a812-59dc-4af1-a979-c4f626a4faad",
        "cursor": {
          "ref": "0484e86f-483e-4459-9c88-6f95b8959d02",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "22210f8f-75f7-4a8c-ad74-563fd9465bb0"
        },
        "item": {
          "id": "8190a812-59dc-4af1-a979-c4f626a4faad",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "46ff1e25-64bf-4685-9f60-221b1cea8b6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8190a812-59dc-4af1-a979-c4f626a4faad",
        "cursor": {
          "ref": "0484e86f-483e-4459-9c88-6f95b8959d02",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "22210f8f-75f7-4a8c-ad74-563fd9465bb0"
        },
        "item": {
          "id": "8190a812-59dc-4af1-a979-c4f626a4faad",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "46ff1e25-64bf-4685-9f60-221b1cea8b6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33256b41-1331-434c-beb8-f4c20b293286",
        "cursor": {
          "ref": "62fdb26d-a75f-4386-ada3-e5714bf1f444",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3197667f-69bd-4ef3-bca0-5d8b01c838ba"
        },
        "item": {
          "id": "33256b41-1331-434c-beb8-f4c20b293286",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a29fa204-fff9-4d60-8956-4b95fcc9a58b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33256b41-1331-434c-beb8-f4c20b293286",
        "cursor": {
          "ref": "62fdb26d-a75f-4386-ada3-e5714bf1f444",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "3197667f-69bd-4ef3-bca0-5d8b01c838ba"
        },
        "item": {
          "id": "33256b41-1331-434c-beb8-f4c20b293286",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a29fa204-fff9-4d60-8956-4b95fcc9a58b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ba9534-f13f-4f7f-b237-90bd943e8894",
        "cursor": {
          "ref": "76997c70-2e8e-44f7-9c81-912dec4bacd2",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c29b1d56-0c2c-4d08-b284-f8d090cec259"
        },
        "item": {
          "id": "63ba9534-f13f-4f7f-b237-90bd943e8894",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5906310b-bc0b-4a34-9964-a5c3f04d7cdf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ba9534-f13f-4f7f-b237-90bd943e8894",
        "cursor": {
          "ref": "76997c70-2e8e-44f7-9c81-912dec4bacd2",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c29b1d56-0c2c-4d08-b284-f8d090cec259"
        },
        "item": {
          "id": "63ba9534-f13f-4f7f-b237-90bd943e8894",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5906310b-bc0b-4a34-9964-a5c3f04d7cdf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e9fa3b-888e-4e1c-bd37-1b79b88a36ff",
        "cursor": {
          "ref": "eaa64a84-17d6-4391-b9d7-c388c5fa0d0b",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ac366850-a754-4403-a49e-17f05545df3d"
        },
        "item": {
          "id": "c4e9fa3b-888e-4e1c-bd37-1b79b88a36ff",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "99ce3132-34a3-4d56-8059-b77b24f64724",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e9fa3b-888e-4e1c-bd37-1b79b88a36ff",
        "cursor": {
          "ref": "eaa64a84-17d6-4391-b9d7-c388c5fa0d0b",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ac366850-a754-4403-a49e-17f05545df3d"
        },
        "item": {
          "id": "c4e9fa3b-888e-4e1c-bd37-1b79b88a36ff",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "99ce3132-34a3-4d56-8059-b77b24f64724",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519f5286-4452-4981-b1f7-42f9012de60d",
        "cursor": {
          "ref": "715c8898-cc11-4597-a9c3-a1355cdf9c38",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "695cb09a-e083-4a9c-b817-cdcc481f3110"
        },
        "item": {
          "id": "519f5286-4452-4981-b1f7-42f9012de60d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "46761239-a430-41f3-955e-64de364b1a28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "519f5286-4452-4981-b1f7-42f9012de60d",
        "cursor": {
          "ref": "715c8898-cc11-4597-a9c3-a1355cdf9c38",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "695cb09a-e083-4a9c-b817-cdcc481f3110"
        },
        "item": {
          "id": "519f5286-4452-4981-b1f7-42f9012de60d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "46761239-a430-41f3-955e-64de364b1a28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4492c0d-3fc5-4128-a405-9b8b55148ed6",
        "cursor": {
          "ref": "fdcc7c29-1d21-4be1-859a-d4554383c418",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1b953c3f-a45f-481d-90c7-14e1fa5a8e44"
        },
        "item": {
          "id": "a4492c0d-3fc5-4128-a405-9b8b55148ed6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9a7fa777-dc35-4b7e-b06c-667cd92ebb3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4492c0d-3fc5-4128-a405-9b8b55148ed6",
        "cursor": {
          "ref": "fdcc7c29-1d21-4be1-859a-d4554383c418",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1b953c3f-a45f-481d-90c7-14e1fa5a8e44"
        },
        "item": {
          "id": "a4492c0d-3fc5-4128-a405-9b8b55148ed6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "9a7fa777-dc35-4b7e-b06c-667cd92ebb3f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c884d9ae-bf46-4567-96a9-9a401e601115",
        "cursor": {
          "ref": "9184f589-46bb-474c-8347-5e9803b0f3ff",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "be2e3453-42b2-4630-a843-0dc9b1901dbc"
        },
        "item": {
          "id": "c884d9ae-bf46-4567-96a9-9a401e601115",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ceddfe0d-23e6-421f-acb4-0fcc678ad9b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c884d9ae-bf46-4567-96a9-9a401e601115",
        "cursor": {
          "ref": "9184f589-46bb-474c-8347-5e9803b0f3ff",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "be2e3453-42b2-4630-a843-0dc9b1901dbc"
        },
        "item": {
          "id": "c884d9ae-bf46-4567-96a9-9a401e601115",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ceddfe0d-23e6-421f-acb4-0fcc678ad9b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ff6483-8c64-43c5-8bc4-0ba54f49a89e",
        "cursor": {
          "ref": "75544aa0-8488-4975-a57a-c3bf801191a2",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "088705a8-e013-445c-b4a2-a12d02198e01"
        },
        "item": {
          "id": "64ff6483-8c64-43c5-8bc4-0ba54f49a89e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8196927c-60c4-43d0-b478-232091932834",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ff6483-8c64-43c5-8bc4-0ba54f49a89e",
        "cursor": {
          "ref": "75544aa0-8488-4975-a57a-c3bf801191a2",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "088705a8-e013-445c-b4a2-a12d02198e01"
        },
        "item": {
          "id": "64ff6483-8c64-43c5-8bc4-0ba54f49a89e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8196927c-60c4-43d0-b478-232091932834",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16e2185-15db-44b3-9912-04b241c9da63",
        "cursor": {
          "ref": "62bcd632-d658-4bd9-882e-deb76b8a6292",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7774a6aa-1204-424f-b2b4-76f258864287"
        },
        "item": {
          "id": "a16e2185-15db-44b3-9912-04b241c9da63",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c5a65eee-e621-4e5b-acea-2ea3dd0ac428",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a16e2185-15db-44b3-9912-04b241c9da63",
        "cursor": {
          "ref": "62bcd632-d658-4bd9-882e-deb76b8a6292",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7774a6aa-1204-424f-b2b4-76f258864287"
        },
        "item": {
          "id": "a16e2185-15db-44b3-9912-04b241c9da63",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c5a65eee-e621-4e5b-acea-2ea3dd0ac428",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8665c3fc-9360-43ae-8dda-8fc95cd9e2ec",
        "cursor": {
          "ref": "cd9c886d-2bbf-4370-9e21-49c67161ca05",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f3adb455-efe8-4f02-8eae-11bf628c92e2"
        },
        "item": {
          "id": "8665c3fc-9360-43ae-8dda-8fc95cd9e2ec",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e9805fcf-af30-4061-9f66-624f94f0de67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8665c3fc-9360-43ae-8dda-8fc95cd9e2ec",
        "cursor": {
          "ref": "cd9c886d-2bbf-4370-9e21-49c67161ca05",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "f3adb455-efe8-4f02-8eae-11bf628c92e2"
        },
        "item": {
          "id": "8665c3fc-9360-43ae-8dda-8fc95cd9e2ec",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e9805fcf-af30-4061-9f66-624f94f0de67",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03acc967-abc8-4950-86b9-53f78b5fe9bc",
        "cursor": {
          "ref": "56841394-05fd-413c-9ade-eee3a344d741",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "107d5650-7d0f-4ffb-8789-76e9c2375a71"
        },
        "item": {
          "id": "03acc967-abc8-4950-86b9-53f78b5fe9bc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e3bf17c8-3760-4d03-b207-11dbe357122d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03acc967-abc8-4950-86b9-53f78b5fe9bc",
        "cursor": {
          "ref": "56841394-05fd-413c-9ade-eee3a344d741",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "107d5650-7d0f-4ffb-8789-76e9c2375a71"
        },
        "item": {
          "id": "03acc967-abc8-4950-86b9-53f78b5fe9bc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e3bf17c8-3760-4d03-b207-11dbe357122d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9c728d-c758-45c4-a3ec-a581bf583598",
        "cursor": {
          "ref": "2993f238-fd15-4097-a7b6-9b61917fea61",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0ac89768-5648-47f5-a8df-940e54cbde0b"
        },
        "item": {
          "id": "8a9c728d-c758-45c4-a3ec-a581bf583598",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d29ce9da-7eac-4053-8d9b-0d5ede1f7e28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 103,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9c728d-c758-45c4-a3ec-a581bf583598",
        "cursor": {
          "ref": "2993f238-fd15-4097-a7b6-9b61917fea61",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "0ac89768-5648-47f5-a8df-940e54cbde0b"
        },
        "item": {
          "id": "8a9c728d-c758-45c4-a3ec-a581bf583598",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d29ce9da-7eac-4053-8d9b-0d5ede1f7e28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 103,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "127ada6e-695b-43b0-a623-f74be1a6efc3",
        "cursor": {
          "ref": "d05222be-6a60-4f45-9274-e6b89d56a457",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d37428fb-21a8-4c5f-8254-23767d6ce7f9"
        },
        "item": {
          "id": "127ada6e-695b-43b0-a623-f74be1a6efc3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b32b9163-e19f-4ad2-a056-7d781005faad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "127ada6e-695b-43b0-a623-f74be1a6efc3",
        "cursor": {
          "ref": "d05222be-6a60-4f45-9274-e6b89d56a457",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d37428fb-21a8-4c5f-8254-23767d6ce7f9"
        },
        "item": {
          "id": "127ada6e-695b-43b0-a623-f74be1a6efc3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b32b9163-e19f-4ad2-a056-7d781005faad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83aaaac3-fb8d-4282-906b-c7fa7f5cb3f1",
        "cursor": {
          "ref": "61b700f2-f345-470b-85de-5f35089ec461",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a4ce8bf5-bdea-4662-9789-0f8b80e4219d"
        },
        "item": {
          "id": "83aaaac3-fb8d-4282-906b-c7fa7f5cb3f1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "825db493-010d-41e7-a99c-c3151bc1954f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83aaaac3-fb8d-4282-906b-c7fa7f5cb3f1",
        "cursor": {
          "ref": "61b700f2-f345-470b-85de-5f35089ec461",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a4ce8bf5-bdea-4662-9789-0f8b80e4219d"
        },
        "item": {
          "id": "83aaaac3-fb8d-4282-906b-c7fa7f5cb3f1",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "825db493-010d-41e7-a99c-c3151bc1954f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fdb91e8-6ef6-4b38-a641-fda5df2498f7",
        "cursor": {
          "ref": "4c6f74ba-d83e-49b6-a5a2-f9fb0df3190e",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e6daf975-ec1b-4dc0-9181-30e50fa73359"
        },
        "item": {
          "id": "5fdb91e8-6ef6-4b38-a641-fda5df2498f7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "37cceced-3c8e-4165-96e9-b565705eada0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fdb91e8-6ef6-4b38-a641-fda5df2498f7",
        "cursor": {
          "ref": "4c6f74ba-d83e-49b6-a5a2-f9fb0df3190e",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e6daf975-ec1b-4dc0-9181-30e50fa73359"
        },
        "item": {
          "id": "5fdb91e8-6ef6-4b38-a641-fda5df2498f7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "37cceced-3c8e-4165-96e9-b565705eada0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f72f29-b564-4442-8eaf-195b1df4cd5e",
        "cursor": {
          "ref": "8a13f884-d17a-4373-8058-e5acd3dbf248",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e0a8a271-7c2c-4b45-a8c9-c7798b17c8ed"
        },
        "item": {
          "id": "12f72f29-b564-4442-8eaf-195b1df4cd5e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "576049b1-263f-4f15-a53f-bcf32d696e6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f72f29-b564-4442-8eaf-195b1df4cd5e",
        "cursor": {
          "ref": "8a13f884-d17a-4373-8058-e5acd3dbf248",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "e0a8a271-7c2c-4b45-a8c9-c7798b17c8ed"
        },
        "item": {
          "id": "12f72f29-b564-4442-8eaf-195b1df4cd5e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "576049b1-263f-4f15-a53f-bcf32d696e6e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7127bd7-3aea-42a5-a4c4-a4725241e78f",
        "cursor": {
          "ref": "1bedb959-1382-47a2-a944-a7d6bda6eec5",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a3236bce-b72f-4602-9f65-18ebc57b9e74"
        },
        "item": {
          "id": "e7127bd7-3aea-42a5-a4c4-a4725241e78f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "847fb986-420d-4d9c-8c6b-0c1bbf56cdd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7127bd7-3aea-42a5-a4c4-a4725241e78f",
        "cursor": {
          "ref": "1bedb959-1382-47a2-a944-a7d6bda6eec5",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "a3236bce-b72f-4602-9f65-18ebc57b9e74"
        },
        "item": {
          "id": "e7127bd7-3aea-42a5-a4c4-a4725241e78f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "847fb986-420d-4d9c-8c6b-0c1bbf56cdd7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "817798a9-47c4-468b-a216-d4739c9be150",
        "cursor": {
          "ref": "a58fc048-fa1e-4dd2-a535-a3bf3f77fa4d",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "94513260-628d-4b5e-9167-a1fd7701b464"
        },
        "item": {
          "id": "817798a9-47c4-468b-a216-d4739c9be150",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "111b8369-d49f-48ea-87c5-0e0d2a465082",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "817798a9-47c4-468b-a216-d4739c9be150",
        "cursor": {
          "ref": "a58fc048-fa1e-4dd2-a535-a3bf3f77fa4d",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "94513260-628d-4b5e-9167-a1fd7701b464"
        },
        "item": {
          "id": "817798a9-47c4-468b-a216-d4739c9be150",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "111b8369-d49f-48ea-87c5-0e0d2a465082",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ce8ee0-08a1-41b4-912f-3dcd0de266af",
        "cursor": {
          "ref": "f3ac26df-c7c8-4f7c-9ec0-2910000f6a1e",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "88f62eb1-18e3-40aa-a1f8-207f69b0b957"
        },
        "item": {
          "id": "f3ce8ee0-08a1-41b4-912f-3dcd0de266af",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7cc754ba-1bcd-4bf8-8c36-39db8dc365c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3ce8ee0-08a1-41b4-912f-3dcd0de266af",
        "cursor": {
          "ref": "f3ac26df-c7c8-4f7c-9ec0-2910000f6a1e",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "88f62eb1-18e3-40aa-a1f8-207f69b0b957"
        },
        "item": {
          "id": "f3ce8ee0-08a1-41b4-912f-3dcd0de266af",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7cc754ba-1bcd-4bf8-8c36-39db8dc365c0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4eaaec-6d21-4d98-8444-832e05cfb82e",
        "cursor": {
          "ref": "ecce686d-f392-464f-966a-6d6912596fd5",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a09a879f-159a-4d2d-aa45-ad87b9cc7f8d"
        },
        "item": {
          "id": "8a4eaaec-6d21-4d98-8444-832e05cfb82e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e128a519-0c15-49ff-8650-799c6a2d2ab3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4eaaec-6d21-4d98-8444-832e05cfb82e",
        "cursor": {
          "ref": "ecce686d-f392-464f-966a-6d6912596fd5",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a09a879f-159a-4d2d-aa45-ad87b9cc7f8d"
        },
        "item": {
          "id": "8a4eaaec-6d21-4d98-8444-832e05cfb82e",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "e128a519-0c15-49ff-8650-799c6a2d2ab3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434d8177-bca4-41ce-bf1e-b68843e51f1e",
        "cursor": {
          "ref": "4847a21f-f0f2-4316-91e8-2a2b4ef649dc",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "395e5856-1296-4812-83cd-71d787cfddf4"
        },
        "item": {
          "id": "434d8177-bca4-41ce-bf1e-b68843e51f1e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d9da5a89-90eb-46ed-97ee-672e5a87a016",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "434d8177-bca4-41ce-bf1e-b68843e51f1e",
        "cursor": {
          "ref": "4847a21f-f0f2-4316-91e8-2a2b4ef649dc",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "395e5856-1296-4812-83cd-71d787cfddf4"
        },
        "item": {
          "id": "434d8177-bca4-41ce-bf1e-b68843e51f1e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d9da5a89-90eb-46ed-97ee-672e5a87a016",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ea1877-5ef6-4939-86ca-43c128d46019",
        "cursor": {
          "ref": "665ecd38-7eaf-4a92-ba3d-f1c0ddd8f932",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7429d986-caf8-47c4-886f-ac535782f026"
        },
        "item": {
          "id": "d3ea1877-5ef6-4939-86ca-43c128d46019",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "420a902a-dad9-4c3a-98b5-6f4fa479bba8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ea1877-5ef6-4939-86ca-43c128d46019",
        "cursor": {
          "ref": "665ecd38-7eaf-4a92-ba3d-f1c0ddd8f932",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "7429d986-caf8-47c4-886f-ac535782f026"
        },
        "item": {
          "id": "d3ea1877-5ef6-4939-86ca-43c128d46019",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "420a902a-dad9-4c3a-98b5-6f4fa479bba8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c786e7b7-8fb3-4128-97c3-cb5fa6545821",
        "cursor": {
          "ref": "a0891b8b-11bd-4a8d-96bd-68f069a0a13b",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8bcb7657-9034-4562-82dd-c787694fe556"
        },
        "item": {
          "id": "c786e7b7-8fb3-4128-97c3-cb5fa6545821",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "eb04eac5-49bc-4877-8f82-4c0f4bb93fe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c786e7b7-8fb3-4128-97c3-cb5fa6545821",
        "cursor": {
          "ref": "a0891b8b-11bd-4a8d-96bd-68f069a0a13b",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8bcb7657-9034-4562-82dd-c787694fe556"
        },
        "item": {
          "id": "c786e7b7-8fb3-4128-97c3-cb5fa6545821",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "eb04eac5-49bc-4877-8f82-4c0f4bb93fe7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1043cecf-dfa0-447a-bf6f-97ab01eb18f4",
        "cursor": {
          "ref": "c788b189-b2cf-47ec-b1cf-20be49f6845e",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c0466be8-835b-4be1-8cd7-ca88f9c9a211"
        },
        "item": {
          "id": "1043cecf-dfa0-447a-bf6f-97ab01eb18f4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2ad72eef-b0a2-47ac-8165-db2f5d1ccc6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1043cecf-dfa0-447a-bf6f-97ab01eb18f4",
        "cursor": {
          "ref": "c788b189-b2cf-47ec-b1cf-20be49f6845e",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c0466be8-835b-4be1-8cd7-ca88f9c9a211"
        },
        "item": {
          "id": "1043cecf-dfa0-447a-bf6f-97ab01eb18f4",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2ad72eef-b0a2-47ac-8165-db2f5d1ccc6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdcd3e65-f191-4980-acaf-96670de873c6",
        "cursor": {
          "ref": "fb0a1256-db1e-42e9-9d7a-f8b48de656a1",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "52a4879e-601a-41f1-aff3-65965699a114"
        },
        "item": {
          "id": "bdcd3e65-f191-4980-acaf-96670de873c6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "707cc018-9176-4830-b99a-1d07fb08faa2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdcd3e65-f191-4980-acaf-96670de873c6",
        "cursor": {
          "ref": "fb0a1256-db1e-42e9-9d7a-f8b48de656a1",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "52a4879e-601a-41f1-aff3-65965699a114"
        },
        "item": {
          "id": "bdcd3e65-f191-4980-acaf-96670de873c6",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "707cc018-9176-4830-b99a-1d07fb08faa2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c10a292-1478-4179-b13e-d678416ea49e",
        "cursor": {
          "ref": "70784349-6aa6-4a01-aba9-b86be7583060",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "03b7921b-f820-4b36-963f-27e1e367c5f0"
        },
        "item": {
          "id": "7c10a292-1478-4179-b13e-d678416ea49e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9ff6dd67-3012-4b5d-b29f-5daabd53804e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c10a292-1478-4179-b13e-d678416ea49e",
        "cursor": {
          "ref": "70784349-6aa6-4a01-aba9-b86be7583060",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "03b7921b-f820-4b36-963f-27e1e367c5f0"
        },
        "item": {
          "id": "7c10a292-1478-4179-b13e-d678416ea49e",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9ff6dd67-3012-4b5d-b29f-5daabd53804e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a58533-26be-433a-9440-bf678fe8db82",
        "cursor": {
          "ref": "e10609b7-8f24-48e6-8291-897ccec8cf3a",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "011e1702-03a6-4aba-be72-4a0054bade2b"
        },
        "item": {
          "id": "75a58533-26be-433a-9440-bf678fe8db82",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "64c0c1b9-0f82-4d0f-8b86-14d2c5907fdb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a58533-26be-433a-9440-bf678fe8db82",
        "cursor": {
          "ref": "e10609b7-8f24-48e6-8291-897ccec8cf3a",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "011e1702-03a6-4aba-be72-4a0054bade2b"
        },
        "item": {
          "id": "75a58533-26be-433a-9440-bf678fe8db82",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "64c0c1b9-0f82-4d0f-8b86-14d2c5907fdb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c741a5-d361-48c1-8aca-bed1e12c16a7",
        "cursor": {
          "ref": "6df99320-e5b5-4d15-ab35-bcfa373f999b",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c431ecf5-954e-4bf5-a658-be86c425c0e1"
        },
        "item": {
          "id": "e7c741a5-d361-48c1-8aca-bed1e12c16a7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d43e72bc-5f2a-4856-a01d-e2a0ac83c5ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c741a5-d361-48c1-8aca-bed1e12c16a7",
        "cursor": {
          "ref": "6df99320-e5b5-4d15-ab35-bcfa373f999b",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c431ecf5-954e-4bf5-a658-be86c425c0e1"
        },
        "item": {
          "id": "e7c741a5-d361-48c1-8aca-bed1e12c16a7",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d43e72bc-5f2a-4856-a01d-e2a0ac83c5ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a8f51c-944f-42e2-8cfb-0bd5d7c8b309",
        "cursor": {
          "ref": "5d8f2ab5-4fc9-4c4e-8623-5645e086a7b4",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "dce38034-de9f-403f-9ccb-444af92fd89e"
        },
        "item": {
          "id": "37a8f51c-944f-42e2-8cfb-0bd5d7c8b309",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dfe571d8-4797-41f4-93da-d94eaa1e166c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37a8f51c-944f-42e2-8cfb-0bd5d7c8b309",
        "cursor": {
          "ref": "5d8f2ab5-4fc9-4c4e-8623-5645e086a7b4",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "dce38034-de9f-403f-9ccb-444af92fd89e"
        },
        "item": {
          "id": "37a8f51c-944f-42e2-8cfb-0bd5d7c8b309",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "dfe571d8-4797-41f4-93da-d94eaa1e166c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf01165-bc41-4247-b4a2-54ed145d56b7",
        "cursor": {
          "ref": "87f7805e-1c5d-4304-962b-e1331c1be585",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "52fdfc2d-9140-4346-a05b-0adb34dd17f3"
        },
        "item": {
          "id": "8bf01165-bc41-4247-b4a2-54ed145d56b7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e33e8d72-9f3b-43bb-b5b5-36fd97a77b75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf01165-bc41-4247-b4a2-54ed145d56b7",
        "cursor": {
          "ref": "87f7805e-1c5d-4304-962b-e1331c1be585",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "52fdfc2d-9140-4346-a05b-0adb34dd17f3"
        },
        "item": {
          "id": "8bf01165-bc41-4247-b4a2-54ed145d56b7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e33e8d72-9f3b-43bb-b5b5-36fd97a77b75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab76b81c-7f54-4735-b45c-01ca64419266",
        "cursor": {
          "ref": "53fdd329-3b93-4ccb-b711-14b0a0b6e4e9",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "149bfebd-b594-436c-b140-ee9a9400e5c9"
        },
        "item": {
          "id": "ab76b81c-7f54-4735-b45c-01ca64419266",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e6638364-1f97-4d5a-90ec-e1d803969250",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab76b81c-7f54-4735-b45c-01ca64419266",
        "cursor": {
          "ref": "53fdd329-3b93-4ccb-b711-14b0a0b6e4e9",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "149bfebd-b594-436c-b140-ee9a9400e5c9"
        },
        "item": {
          "id": "ab76b81c-7f54-4735-b45c-01ca64419266",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e6638364-1f97-4d5a-90ec-e1d803969250",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a77438-84e1-4dfb-885f-7a5db672e3f1",
        "cursor": {
          "ref": "b564b016-c2ef-455f-8b4a-dffbf4d1d8de",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e708279f-5cd1-421b-a236-32685cb50657"
        },
        "item": {
          "id": "d2a77438-84e1-4dfb-885f-7a5db672e3f1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9a2180e4-3afc-42e3-a533-a07aa5705b19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a77438-84e1-4dfb-885f-7a5db672e3f1",
        "cursor": {
          "ref": "b564b016-c2ef-455f-8b4a-dffbf4d1d8de",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "e708279f-5cd1-421b-a236-32685cb50657"
        },
        "item": {
          "id": "d2a77438-84e1-4dfb-885f-7a5db672e3f1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9a2180e4-3afc-42e3-a533-a07aa5705b19",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8f57b7-7886-4811-8f7f-c5a501d579d6",
        "cursor": {
          "ref": "2d744e06-7142-4daf-bc2a-1caaf57eb1b1",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "dd87f960-ea48-4102-97a0-d4564ed07e88"
        },
        "item": {
          "id": "af8f57b7-7886-4811-8f7f-c5a501d579d6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "01d186ec-220c-40e8-b642-e319a889be34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af8f57b7-7886-4811-8f7f-c5a501d579d6",
        "cursor": {
          "ref": "2d744e06-7142-4daf-bc2a-1caaf57eb1b1",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "dd87f960-ea48-4102-97a0-d4564ed07e88"
        },
        "item": {
          "id": "af8f57b7-7886-4811-8f7f-c5a501d579d6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "01d186ec-220c-40e8-b642-e319a889be34",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9703b251-e267-4e35-a6e3-7572e6a2444a",
        "cursor": {
          "ref": "caed1b36-957c-4d85-b868-75d01025f5a2",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "353f7566-5649-4b31-bca5-6c696b7a8d62"
        },
        "item": {
          "id": "9703b251-e267-4e35-a6e3-7572e6a2444a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "baedb766-ac2c-4769-843d-9e3d89487ee1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9703b251-e267-4e35-a6e3-7572e6a2444a",
        "cursor": {
          "ref": "caed1b36-957c-4d85-b868-75d01025f5a2",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "353f7566-5649-4b31-bca5-6c696b7a8d62"
        },
        "item": {
          "id": "9703b251-e267-4e35-a6e3-7572e6a2444a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "baedb766-ac2c-4769-843d-9e3d89487ee1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd982f64-faac-4853-8a2f-31fe50bb26cc",
        "cursor": {
          "ref": "0e97a5d9-af04-4c31-8d30-d365c0b3f18e",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e953c102-2bd5-45ae-98a8-89f7e906f828"
        },
        "item": {
          "id": "bd982f64-faac-4853-8a2f-31fe50bb26cc",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d4bfdc79-baa1-4608-8ae5-6dfdc1b95686",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd982f64-faac-4853-8a2f-31fe50bb26cc",
        "cursor": {
          "ref": "0e97a5d9-af04-4c31-8d30-d365c0b3f18e",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e953c102-2bd5-45ae-98a8-89f7e906f828"
        },
        "item": {
          "id": "bd982f64-faac-4853-8a2f-31fe50bb26cc",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d4bfdc79-baa1-4608-8ae5-6dfdc1b95686",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42271cf-205c-4983-b273-0af7637f524f",
        "cursor": {
          "ref": "22a3e352-9867-46c7-8653-e49098e19bb0",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "00d0a308-6988-480b-a062-44ea4ac70904"
        },
        "item": {
          "id": "b42271cf-205c-4983-b273-0af7637f524f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8dd7790d-169b-46ca-bed6-b43adc9bdea0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b42271cf-205c-4983-b273-0af7637f524f",
        "cursor": {
          "ref": "22a3e352-9867-46c7-8653-e49098e19bb0",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "00d0a308-6988-480b-a062-44ea4ac70904"
        },
        "item": {
          "id": "b42271cf-205c-4983-b273-0af7637f524f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8dd7790d-169b-46ca-bed6-b43adc9bdea0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf3eaab-41ce-44f4-a351-e57930d7ac8a",
        "cursor": {
          "ref": "df472a9b-0c21-43d6-b034-e49e230865d4",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e08be297-76d1-427c-87ad-7529555d705a"
        },
        "item": {
          "id": "daf3eaab-41ce-44f4-a351-e57930d7ac8a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "735bc3b0-b5c6-427b-998f-4aca821de36c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daf3eaab-41ce-44f4-a351-e57930d7ac8a",
        "cursor": {
          "ref": "df472a9b-0c21-43d6-b034-e49e230865d4",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e08be297-76d1-427c-87ad-7529555d705a"
        },
        "item": {
          "id": "daf3eaab-41ce-44f4-a351-e57930d7ac8a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "735bc3b0-b5c6-427b-998f-4aca821de36c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8f6678-131e-4821-9a08-93e0cc485946",
        "cursor": {
          "ref": "9e4eb4df-4081-4c5a-87f9-98712355b3bf",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "500f6941-37e0-4d7c-a44a-f4ae0f209b38"
        },
        "item": {
          "id": "df8f6678-131e-4821-9a08-93e0cc485946",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "66ddd147-c084-443b-b507-6a573bfab2e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df8f6678-131e-4821-9a08-93e0cc485946",
        "cursor": {
          "ref": "9e4eb4df-4081-4c5a-87f9-98712355b3bf",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "500f6941-37e0-4d7c-a44a-f4ae0f209b38"
        },
        "item": {
          "id": "df8f6678-131e-4821-9a08-93e0cc485946",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "66ddd147-c084-443b-b507-6a573bfab2e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e203c36-7117-4957-885b-a213fd8a07bd",
        "cursor": {
          "ref": "9cfcd061-8493-4829-9234-8f1130483164",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4e63633f-a31f-4839-965e-3cfbcfed7f6c"
        },
        "item": {
          "id": "6e203c36-7117-4957-885b-a213fd8a07bd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b31963af-6550-4ff4-874c-93f8feabecd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e203c36-7117-4957-885b-a213fd8a07bd",
        "cursor": {
          "ref": "9cfcd061-8493-4829-9234-8f1130483164",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4e63633f-a31f-4839-965e-3cfbcfed7f6c"
        },
        "item": {
          "id": "6e203c36-7117-4957-885b-a213fd8a07bd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "b31963af-6550-4ff4-874c-93f8feabecd0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2ab45d-1ed3-4834-bbf1-cceec2636d8a",
        "cursor": {
          "ref": "c24feb25-ce90-43ff-ab99-735ee79cc01d",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8b5d502d-3e7e-4c89-a2f4-758fb37c7df5"
        },
        "item": {
          "id": "dc2ab45d-1ed3-4834-bbf1-cceec2636d8a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "15256ecd-82df-4deb-8b04-dab9a0bcce50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc2ab45d-1ed3-4834-bbf1-cceec2636d8a",
        "cursor": {
          "ref": "c24feb25-ce90-43ff-ab99-735ee79cc01d",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8b5d502d-3e7e-4c89-a2f4-758fb37c7df5"
        },
        "item": {
          "id": "dc2ab45d-1ed3-4834-bbf1-cceec2636d8a",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "15256ecd-82df-4deb-8b04-dab9a0bcce50",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b03be8e1-8bbe-4b40-ba09-934b85e06ffa",
        "cursor": {
          "ref": "3ec5fb10-66e2-4008-a2fe-b5f0f1070693",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "be02bdb7-ee25-46a5-9cd4-d9f0b8dc38df"
        },
        "item": {
          "id": "b03be8e1-8bbe-4b40-ba09-934b85e06ffa",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "19f9a8cc-339b-434e-a9ad-b07f318b14f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b03be8e1-8bbe-4b40-ba09-934b85e06ffa",
        "cursor": {
          "ref": "3ec5fb10-66e2-4008-a2fe-b5f0f1070693",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "be02bdb7-ee25-46a5-9cd4-d9f0b8dc38df"
        },
        "item": {
          "id": "b03be8e1-8bbe-4b40-ba09-934b85e06ffa",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "19f9a8cc-339b-434e-a9ad-b07f318b14f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa78902c-477c-4368-af1f-74ed356a2c72",
        "cursor": {
          "ref": "eea159f4-f706-4e30-9430-cdddeb0ee701",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "495781f0-aa7c-4766-9911-a3a97fbd7004"
        },
        "item": {
          "id": "aa78902c-477c-4368-af1f-74ed356a2c72",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "eaed0eba-c145-4c0a-b7d4-d1652d8c0471",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 116,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa78902c-477c-4368-af1f-74ed356a2c72",
        "cursor": {
          "ref": "eea159f4-f706-4e30-9430-cdddeb0ee701",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "495781f0-aa7c-4766-9911-a3a97fbd7004"
        },
        "item": {
          "id": "aa78902c-477c-4368-af1f-74ed356a2c72",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "eaed0eba-c145-4c0a-b7d4-d1652d8c0471",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 116,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc7c230-df54-4a23-b96a-3e8e44b76630",
        "cursor": {
          "ref": "2fecde64-6f5c-4afd-ae7f-565bed492261",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c602ea07-b7ba-47dd-894d-825a6007bb21"
        },
        "item": {
          "id": "3fc7c230-df54-4a23-b96a-3e8e44b76630",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "945f8c0d-42a2-47cb-8e34-067fd45e897e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fc7c230-df54-4a23-b96a-3e8e44b76630",
        "cursor": {
          "ref": "2fecde64-6f5c-4afd-ae7f-565bed492261",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c602ea07-b7ba-47dd-894d-825a6007bb21"
        },
        "item": {
          "id": "3fc7c230-df54-4a23-b96a-3e8e44b76630",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "945f8c0d-42a2-47cb-8e34-067fd45e897e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 90,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d572fa-825b-42c7-b11c-17c105c636ae",
        "cursor": {
          "ref": "4d65cdef-b16a-4d33-9599-e5aa7b612753",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c0c8a1d5-ecaf-4b62-89a0-cb8d562fdebb"
        },
        "item": {
          "id": "78d572fa-825b-42c7-b11c-17c105c636ae",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "aec2c7e2-e68d-4a9d-87a4-b819c23408bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d572fa-825b-42c7-b11c-17c105c636ae",
        "cursor": {
          "ref": "4d65cdef-b16a-4d33-9599-e5aa7b612753",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "c0c8a1d5-ecaf-4b62-89a0-cb8d562fdebb"
        },
        "item": {
          "id": "78d572fa-825b-42c7-b11c-17c105c636ae",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "aec2c7e2-e68d-4a9d-87a4-b819c23408bb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a04508e-d195-4328-afe7-39c2c7331413",
        "cursor": {
          "ref": "a8f0da8d-73f6-4de9-85a8-2bc015cf3cf8",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "084f97dd-0272-4da0-ba8a-0acd4b6d0323"
        },
        "item": {
          "id": "2a04508e-d195-4328-afe7-39c2c7331413",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8c472868-ae21-4755-b630-efc97e212fb2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a04508e-d195-4328-afe7-39c2c7331413",
        "cursor": {
          "ref": "a8f0da8d-73f6-4de9-85a8-2bc015cf3cf8",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "084f97dd-0272-4da0-ba8a-0acd4b6d0323"
        },
        "item": {
          "id": "2a04508e-d195-4328-afe7-39c2c7331413",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8c472868-ae21-4755-b630-efc97e212fb2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ed0613-0135-4a27-abce-d30b2743f864",
        "cursor": {
          "ref": "2fdf92aa-2f18-42dd-8ed1-333c768c15b7",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "18d2dc89-c770-4944-9971-dc5ea90617b3"
        },
        "item": {
          "id": "75ed0613-0135-4a27-abce-d30b2743f864",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "73ae4304-4207-4384-962e-1f0fb820879d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ed0613-0135-4a27-abce-d30b2743f864",
        "cursor": {
          "ref": "2fdf92aa-2f18-42dd-8ed1-333c768c15b7",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "18d2dc89-c770-4944-9971-dc5ea90617b3"
        },
        "item": {
          "id": "75ed0613-0135-4a27-abce-d30b2743f864",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "73ae4304-4207-4384-962e-1f0fb820879d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b60bd5c-2ed6-4333-9dd7-a2145e2fe241",
        "cursor": {
          "ref": "c31ee6b6-a4fe-42d8-a33e-1f3b3ef6184f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f101ccbb-2b7e-4e27-9b75-e9928a34537e"
        },
        "item": {
          "id": "2b60bd5c-2ed6-4333-9dd7-a2145e2fe241",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2136b20e-481a-44e8-8209-e01870a4cb2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b60bd5c-2ed6-4333-9dd7-a2145e2fe241",
        "cursor": {
          "ref": "c31ee6b6-a4fe-42d8-a33e-1f3b3ef6184f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f101ccbb-2b7e-4e27-9b75-e9928a34537e"
        },
        "item": {
          "id": "2b60bd5c-2ed6-4333-9dd7-a2145e2fe241",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2136b20e-481a-44e8-8209-e01870a4cb2a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efff9a0-adea-4ece-91d0-c5d18f0b7771",
        "cursor": {
          "ref": "1bf03a3e-c40f-44de-8673-06b5f41b0171",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "56a9ca8d-11d9-4cb3-95b9-6e37bcf9958b"
        },
        "item": {
          "id": "4efff9a0-adea-4ece-91d0-c5d18f0b7771",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "599e778b-d5e5-4458-b76d-1adf8067c46e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efff9a0-adea-4ece-91d0-c5d18f0b7771",
        "cursor": {
          "ref": "1bf03a3e-c40f-44de-8673-06b5f41b0171",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "56a9ca8d-11d9-4cb3-95b9-6e37bcf9958b"
        },
        "item": {
          "id": "4efff9a0-adea-4ece-91d0-c5d18f0b7771",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "599e778b-d5e5-4458-b76d-1adf8067c46e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827bb8f0-56ba-4a1b-9ccd-2910feeedbda",
        "cursor": {
          "ref": "b746bc58-fc26-4941-b301-4d8b69244fcf",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c578bd28-4205-4c65-bd8e-dc6aab190c52"
        },
        "item": {
          "id": "827bb8f0-56ba-4a1b-9ccd-2910feeedbda",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c82df2a7-ed6a-41c5-9679-2c4e2f0dc15e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "827bb8f0-56ba-4a1b-9ccd-2910feeedbda",
        "cursor": {
          "ref": "b746bc58-fc26-4941-b301-4d8b69244fcf",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "c578bd28-4205-4c65-bd8e-dc6aab190c52"
        },
        "item": {
          "id": "827bb8f0-56ba-4a1b-9ccd-2910feeedbda",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c82df2a7-ed6a-41c5-9679-2c4e2f0dc15e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c37d48-f151-46ad-85dd-4dab4a65b37b",
        "cursor": {
          "ref": "6431b47a-5f13-4b9c-a22a-1c77d8ec0c96",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bf1b1ce5-5540-4ea2-9ef6-777c9bf6a51b"
        },
        "item": {
          "id": "27c37d48-f151-46ad-85dd-4dab4a65b37b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7dd6dc59-8413-4c11-b2fb-c44c447aa59b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c37d48-f151-46ad-85dd-4dab4a65b37b",
        "cursor": {
          "ref": "6431b47a-5f13-4b9c-a22a-1c77d8ec0c96",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "bf1b1ce5-5540-4ea2-9ef6-777c9bf6a51b"
        },
        "item": {
          "id": "27c37d48-f151-46ad-85dd-4dab4a65b37b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7dd6dc59-8413-4c11-b2fb-c44c447aa59b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2732518-3fb2-4891-8b35-283752dc828d",
        "cursor": {
          "ref": "3761fe89-6d3d-4097-b15d-6e25abce2919",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c32585ee-9f6a-45cb-b9ed-6a91f87ca92f"
        },
        "item": {
          "id": "f2732518-3fb2-4891-8b35-283752dc828d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "929d3c6c-bfa5-4de2-9b7f-701735aaa848",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2732518-3fb2-4891-8b35-283752dc828d",
        "cursor": {
          "ref": "3761fe89-6d3d-4097-b15d-6e25abce2919",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c32585ee-9f6a-45cb-b9ed-6a91f87ca92f"
        },
        "item": {
          "id": "f2732518-3fb2-4891-8b35-283752dc828d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "929d3c6c-bfa5-4de2-9b7f-701735aaa848",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5defd162-7c85-4703-90a9-ca429637ec39",
        "cursor": {
          "ref": "6ce66dfd-4ad7-479b-880e-b32db1c75c09",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b5bc8154-1bb0-4b22-9bf8-d8c7bd7feead"
        },
        "item": {
          "id": "5defd162-7c85-4703-90a9-ca429637ec39",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d81fbd70-55e9-4417-af9a-ee3dfb502c17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5defd162-7c85-4703-90a9-ca429637ec39",
        "cursor": {
          "ref": "6ce66dfd-4ad7-479b-880e-b32db1c75c09",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b5bc8154-1bb0-4b22-9bf8-d8c7bd7feead"
        },
        "item": {
          "id": "5defd162-7c85-4703-90a9-ca429637ec39",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "d81fbd70-55e9-4417-af9a-ee3dfb502c17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa403b2-eaa8-494d-8bd1-bbb1d7ce2511",
        "cursor": {
          "ref": "846724c1-97d5-4f1a-a150-82b47eb2423e",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7182ae2c-8d14-48ac-bc5b-54d8c8580aa5"
        },
        "item": {
          "id": "4fa403b2-eaa8-494d-8bd1-bbb1d7ce2511",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5b7c2ead-cbd0-4cbf-a919-4ebbb7f91818",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa403b2-eaa8-494d-8bd1-bbb1d7ce2511",
        "cursor": {
          "ref": "846724c1-97d5-4f1a-a150-82b47eb2423e",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7182ae2c-8d14-48ac-bc5b-54d8c8580aa5"
        },
        "item": {
          "id": "4fa403b2-eaa8-494d-8bd1-bbb1d7ce2511",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5b7c2ead-cbd0-4cbf-a919-4ebbb7f91818",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83109c89-a5d2-42b9-acd7-6903862f6b9d",
        "cursor": {
          "ref": "5cd89da0-af57-464c-80a0-d5ef75bcc099",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5c8a024b-fe96-4739-bdb2-3d57dd199d86"
        },
        "item": {
          "id": "83109c89-a5d2-42b9-acd7-6903862f6b9d",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8a3a471c-1244-4ce9-8088-0cda5c454f05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83109c89-a5d2-42b9-acd7-6903862f6b9d",
        "cursor": {
          "ref": "5cd89da0-af57-464c-80a0-d5ef75bcc099",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "5c8a024b-fe96-4739-bdb2-3d57dd199d86"
        },
        "item": {
          "id": "83109c89-a5d2-42b9-acd7-6903862f6b9d",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8a3a471c-1244-4ce9-8088-0cda5c454f05",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3810fc9c-fd80-4716-ac61-4b471f529330",
        "cursor": {
          "ref": "32a1c9f1-e811-4218-acdf-93322898826e",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "586a2028-476f-4b83-a739-31d6e60e43f0"
        },
        "item": {
          "id": "3810fc9c-fd80-4716-ac61-4b471f529330",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "15f1f7bc-ff47-4dfb-aa32-adda7b544248",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3810fc9c-fd80-4716-ac61-4b471f529330",
        "cursor": {
          "ref": "32a1c9f1-e811-4218-acdf-93322898826e",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "586a2028-476f-4b83-a739-31d6e60e43f0"
        },
        "item": {
          "id": "3810fc9c-fd80-4716-ac61-4b471f529330",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "15f1f7bc-ff47-4dfb-aa32-adda7b544248",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f835b3b-8e3b-463a-9dab-007832817b1f",
        "cursor": {
          "ref": "6ffdee32-0914-4c58-ad9c-abed4a37b771",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f9ba2b0c-9620-43db-a779-7154a2e11066"
        },
        "item": {
          "id": "9f835b3b-8e3b-463a-9dab-007832817b1f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "32104257-87af-436f-b3bf-46a4f72cd8dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f835b3b-8e3b-463a-9dab-007832817b1f",
        "cursor": {
          "ref": "6ffdee32-0914-4c58-ad9c-abed4a37b771",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f9ba2b0c-9620-43db-a779-7154a2e11066"
        },
        "item": {
          "id": "9f835b3b-8e3b-463a-9dab-007832817b1f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "32104257-87af-436f-b3bf-46a4f72cd8dd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e83c87bf-4ea1-48f1-bb10-f76c4bb705e4",
        "cursor": {
          "ref": "1c57b94e-c1b9-4e09-b47d-9decca7858b7",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "450f508a-6751-4277-bc83-1aba090badce"
        },
        "item": {
          "id": "e83c87bf-4ea1-48f1-bb10-f76c4bb705e4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b5bb48d6-74a0-43a7-b108-fa8416ba6552",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e83c87bf-4ea1-48f1-bb10-f76c4bb705e4",
        "cursor": {
          "ref": "1c57b94e-c1b9-4e09-b47d-9decca7858b7",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "450f508a-6751-4277-bc83-1aba090badce"
        },
        "item": {
          "id": "e83c87bf-4ea1-48f1-bb10-f76c4bb705e4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b5bb48d6-74a0-43a7-b108-fa8416ba6552",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cedbd107-0e9f-4c03-828a-1b3a02292af5",
        "cursor": {
          "ref": "edb58399-6605-4011-a104-be4cd4352da2",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "be367d9c-1a49-4b3c-934f-66d8466ff1f0"
        },
        "item": {
          "id": "cedbd107-0e9f-4c03-828a-1b3a02292af5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1331770e-76a7-4141-8e5c-04bec9d82a24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cedbd107-0e9f-4c03-828a-1b3a02292af5",
        "cursor": {
          "ref": "edb58399-6605-4011-a104-be4cd4352da2",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "be367d9c-1a49-4b3c-934f-66d8466ff1f0"
        },
        "item": {
          "id": "cedbd107-0e9f-4c03-828a-1b3a02292af5",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1331770e-76a7-4141-8e5c-04bec9d82a24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d87d05-2858-46cb-9609-b6db3f50ef6d",
        "cursor": {
          "ref": "2d7e41b6-cda7-4663-ad42-f381a18bfa37",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "fe63b5a4-49a4-4c36-a166-adf95a1159e5"
        },
        "item": {
          "id": "62d87d05-2858-46cb-9609-b6db3f50ef6d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e61f043a-aabd-4d2f-b441-c8143bec3ef9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d87d05-2858-46cb-9609-b6db3f50ef6d",
        "cursor": {
          "ref": "2d7e41b6-cda7-4663-ad42-f381a18bfa37",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "fe63b5a4-49a4-4c36-a166-adf95a1159e5"
        },
        "item": {
          "id": "62d87d05-2858-46cb-9609-b6db3f50ef6d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "e61f043a-aabd-4d2f-b441-c8143bec3ef9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e1da183-71a8-4c75-b51a-04376b2d90b3",
        "cursor": {
          "ref": "40e12ea6-6eda-4412-b520-4bdc0ed044f6",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "89b45b18-88db-4597-bab2-31c2f0981bcf"
        },
        "item": {
          "id": "1e1da183-71a8-4c75-b51a-04376b2d90b3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "11078f20-ba54-45e5-9188-e888c0b7d192",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e1da183-71a8-4c75-b51a-04376b2d90b3",
        "cursor": {
          "ref": "40e12ea6-6eda-4412-b520-4bdc0ed044f6",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "89b45b18-88db-4597-bab2-31c2f0981bcf"
        },
        "item": {
          "id": "1e1da183-71a8-4c75-b51a-04376b2d90b3",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "11078f20-ba54-45e5-9188-e888c0b7d192",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16eb311e-90b0-400f-847f-033d37e75d39",
        "cursor": {
          "ref": "ba763cfb-33ad-4794-819d-24bfbdedd35f",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "388d2058-d65b-47ed-b93e-bcfcfe9113d7"
        },
        "item": {
          "id": "16eb311e-90b0-400f-847f-033d37e75d39",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9192c581-2fba-4dcd-8e4f-34ec823c51e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16eb311e-90b0-400f-847f-033d37e75d39",
        "cursor": {
          "ref": "ba763cfb-33ad-4794-819d-24bfbdedd35f",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "388d2058-d65b-47ed-b93e-bcfcfe9113d7"
        },
        "item": {
          "id": "16eb311e-90b0-400f-847f-033d37e75d39",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "9192c581-2fba-4dcd-8e4f-34ec823c51e3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7416e852-12d1-4fca-b8bc-aa93336c2bc6",
        "cursor": {
          "ref": "ea4e90e3-8526-4c4b-aa21-9e2a5f3f47ba",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1239d475-3e62-4e00-972a-595feed39a0c"
        },
        "item": {
          "id": "7416e852-12d1-4fca-b8bc-aa93336c2bc6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9ac3449f-1421-4d5b-b736-332306feae32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7416e852-12d1-4fca-b8bc-aa93336c2bc6",
        "cursor": {
          "ref": "ea4e90e3-8526-4c4b-aa21-9e2a5f3f47ba",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1239d475-3e62-4e00-972a-595feed39a0c"
        },
        "item": {
          "id": "7416e852-12d1-4fca-b8bc-aa93336c2bc6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9ac3449f-1421-4d5b-b736-332306feae32",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867e398c-5452-4850-b4e5-05eb942cfa47",
        "cursor": {
          "ref": "d4be8b8f-b14e-4abf-866a-997834994c63",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3d0971e8-1e8c-4269-8ef7-43d767d76279"
        },
        "item": {
          "id": "867e398c-5452-4850-b4e5-05eb942cfa47",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2011ab33-f0b7-4e58-abe2-812ffb402cc7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "867e398c-5452-4850-b4e5-05eb942cfa47",
        "cursor": {
          "ref": "d4be8b8f-b14e-4abf-866a-997834994c63",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "3d0971e8-1e8c-4269-8ef7-43d767d76279"
        },
        "item": {
          "id": "867e398c-5452-4850-b4e5-05eb942cfa47",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "2011ab33-f0b7-4e58-abe2-812ffb402cc7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590afb01-117a-44f6-a362-4109028e7347",
        "cursor": {
          "ref": "6628f926-756f-4a0a-9339-89fd2f72c200",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "361c9594-6afe-46b8-a3ec-29a5928b2794"
        },
        "item": {
          "id": "590afb01-117a-44f6-a362-4109028e7347",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9201dc4f-34c8-43d7-9079-30e5481d6cf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590afb01-117a-44f6-a362-4109028e7347",
        "cursor": {
          "ref": "6628f926-756f-4a0a-9339-89fd2f72c200",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "361c9594-6afe-46b8-a3ec-29a5928b2794"
        },
        "item": {
          "id": "590afb01-117a-44f6-a362-4109028e7347",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "9201dc4f-34c8-43d7-9079-30e5481d6cf7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6279e86-7d64-4956-ad02-d47a92853a32",
        "cursor": {
          "ref": "79f11d6a-0cc5-41db-9dc0-c8f63a8d44ea",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d4b30843-44db-427c-a732-4eae42484b4c"
        },
        "item": {
          "id": "c6279e86-7d64-4956-ad02-d47a92853a32",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c782df5e-b9cb-48b1-a89a-094a13cb7f24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6279e86-7d64-4956-ad02-d47a92853a32",
        "cursor": {
          "ref": "79f11d6a-0cc5-41db-9dc0-c8f63a8d44ea",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "d4b30843-44db-427c-a732-4eae42484b4c"
        },
        "item": {
          "id": "c6279e86-7d64-4956-ad02-d47a92853a32",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c782df5e-b9cb-48b1-a89a-094a13cb7f24",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 86,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acef49d2-6469-4efe-9cbc-ac10cd8b33be",
        "cursor": {
          "ref": "ddb98d04-bec2-490b-8286-bec6ea649008",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2ef721bd-11d3-4cd7-bd71-ae00de20365e"
        },
        "item": {
          "id": "acef49d2-6469-4efe-9cbc-ac10cd8b33be",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d4b01a5a-c2f6-4f16-b428-537a12570309",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acef49d2-6469-4efe-9cbc-ac10cd8b33be",
        "cursor": {
          "ref": "ddb98d04-bec2-490b-8286-bec6ea649008",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2ef721bd-11d3-4cd7-bd71-ae00de20365e"
        },
        "item": {
          "id": "acef49d2-6469-4efe-9cbc-ac10cd8b33be",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d4b01a5a-c2f6-4f16-b428-537a12570309",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d149bfa2-e756-41f4-9fd6-f46e83ce8f4d",
        "cursor": {
          "ref": "59cb45e1-a6a9-45a0-91b7-5e5671d91ecb",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8f5d66ce-24cc-4e01-b508-adbc5aea98fd"
        },
        "item": {
          "id": "d149bfa2-e756-41f4-9fd6-f46e83ce8f4d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6345fa6d-e7ae-4ea5-ab24-fde226bec65c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d149bfa2-e756-41f4-9fd6-f46e83ce8f4d",
        "cursor": {
          "ref": "59cb45e1-a6a9-45a0-91b7-5e5671d91ecb",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8f5d66ce-24cc-4e01-b508-adbc5aea98fd"
        },
        "item": {
          "id": "d149bfa2-e756-41f4-9fd6-f46e83ce8f4d",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "6345fa6d-e7ae-4ea5-ab24-fde226bec65c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60aaf649-5dc1-4540-8779-ccf754976a81",
        "cursor": {
          "ref": "4f72206c-da6a-4de3-a584-f87f30ec54b8",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f05ef487-1e4d-48b2-b39b-68ffb78639f4"
        },
        "item": {
          "id": "60aaf649-5dc1-4540-8779-ccf754976a81",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a5c03746-d498-473c-9c2b-2a5e74580a71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60aaf649-5dc1-4540-8779-ccf754976a81",
        "cursor": {
          "ref": "4f72206c-da6a-4de3-a584-f87f30ec54b8",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "f05ef487-1e4d-48b2-b39b-68ffb78639f4"
        },
        "item": {
          "id": "60aaf649-5dc1-4540-8779-ccf754976a81",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a5c03746-d498-473c-9c2b-2a5e74580a71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c41aee-bccf-4b47-ac5d-3623ed90a646",
        "cursor": {
          "ref": "31e125f0-f6c5-4939-968c-e5c0476cd76e",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e14006cb-87c6-4fe4-bcb8-cc96b0b83893"
        },
        "item": {
          "id": "e6c41aee-bccf-4b47-ac5d-3623ed90a646",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "53eeb2c0-0cad-4683-a068-d378567b1fc5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6c41aee-bccf-4b47-ac5d-3623ed90a646",
        "cursor": {
          "ref": "31e125f0-f6c5-4939-968c-e5c0476cd76e",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e14006cb-87c6-4fe4-bcb8-cc96b0b83893"
        },
        "item": {
          "id": "e6c41aee-bccf-4b47-ac5d-3623ed90a646",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "53eeb2c0-0cad-4683-a068-d378567b1fc5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed570da7-ded7-4ff5-b218-65e96c1c9746",
        "cursor": {
          "ref": "8080e8fd-3c5b-4e6c-8d73-4aa812232286",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8b8801f2-65c2-4bf3-a127-4511ab8cc6e9"
        },
        "item": {
          "id": "ed570da7-ded7-4ff5-b218-65e96c1c9746",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f0cc0aa8-ca74-46bd-a8e2-ad66a19870b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed570da7-ded7-4ff5-b218-65e96c1c9746",
        "cursor": {
          "ref": "8080e8fd-3c5b-4e6c-8d73-4aa812232286",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8b8801f2-65c2-4bf3-a127-4511ab8cc6e9"
        },
        "item": {
          "id": "ed570da7-ded7-4ff5-b218-65e96c1c9746",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f0cc0aa8-ca74-46bd-a8e2-ad66a19870b2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc4f77e-f903-44e8-aa6d-6e6509c1aa75",
        "cursor": {
          "ref": "0cf4cdca-26b4-4c44-8b1a-c60dad1ccfc5",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "64ea065f-6948-415f-9531-bfbeee7d26be"
        },
        "item": {
          "id": "acc4f77e-f903-44e8-aa6d-6e6509c1aa75",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d5792f6f-7139-4098-9285-8c5c57fc172f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc4f77e-f903-44e8-aa6d-6e6509c1aa75",
        "cursor": {
          "ref": "0cf4cdca-26b4-4c44-8b1a-c60dad1ccfc5",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "64ea065f-6948-415f-9531-bfbeee7d26be"
        },
        "item": {
          "id": "acc4f77e-f903-44e8-aa6d-6e6509c1aa75",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d5792f6f-7139-4098-9285-8c5c57fc172f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 85,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d21e0ef-d4a7-4f17-bd5a-12b8d6292786",
        "cursor": {
          "ref": "9a6484e1-94d1-47cc-923b-cebe0331eade",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "203f3800-10da-4ac3-a06e-3f5c224f713e"
        },
        "item": {
          "id": "8d21e0ef-d4a7-4f17-bd5a-12b8d6292786",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3340296a-d61e-496a-a47e-11dd9377e2b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d21e0ef-d4a7-4f17-bd5a-12b8d6292786",
        "cursor": {
          "ref": "9a6484e1-94d1-47cc-923b-cebe0331eade",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "203f3800-10da-4ac3-a06e-3f5c224f713e"
        },
        "item": {
          "id": "8d21e0ef-d4a7-4f17-bd5a-12b8d6292786",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "3340296a-d61e-496a-a47e-11dd9377e2b8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a60a69-7c5b-4b06-aa33-ee7f8371aaf8",
        "cursor": {
          "ref": "f702f985-551a-4360-a4eb-aace3aa2efae",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "36e819d3-3475-416e-9293-3446e17c414d"
        },
        "item": {
          "id": "34a60a69-7c5b-4b06-aa33-ee7f8371aaf8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2da386b4-5da1-4a96-8b01-b5d47c8ce370",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34a60a69-7c5b-4b06-aa33-ee7f8371aaf8",
        "cursor": {
          "ref": "f702f985-551a-4360-a4eb-aace3aa2efae",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "36e819d3-3475-416e-9293-3446e17c414d"
        },
        "item": {
          "id": "34a60a69-7c5b-4b06-aa33-ee7f8371aaf8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "2da386b4-5da1-4a96-8b01-b5d47c8ce370",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af62879-c653-40b9-9f4c-2f9c9ba6b2fa",
        "cursor": {
          "ref": "f42d3e76-7ee4-4a60-9b23-cf524024c2b3",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d64feff5-8970-46d0-9c49-458e3f906388"
        },
        "item": {
          "id": "6af62879-c653-40b9-9f4c-2f9c9ba6b2fa",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "80087f75-8f23-42e4-8390-fcca1c08414c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af62879-c653-40b9-9f4c-2f9c9ba6b2fa",
        "cursor": {
          "ref": "f42d3e76-7ee4-4a60-9b23-cf524024c2b3",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d64feff5-8970-46d0-9c49-458e3f906388"
        },
        "item": {
          "id": "6af62879-c653-40b9-9f4c-2f9c9ba6b2fa",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "80087f75-8f23-42e4-8390-fcca1c08414c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762be539-0723-402e-ba92-8ed954a236e2",
        "cursor": {
          "ref": "ee677dc8-3658-4789-8b33-daaeb611a14f",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "dfdce226-3f79-4e3a-90b6-475c6683b7ac"
        },
        "item": {
          "id": "762be539-0723-402e-ba92-8ed954a236e2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "77ae8044-f678-4f06-9aeb-a9bd8ae5579b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762be539-0723-402e-ba92-8ed954a236e2",
        "cursor": {
          "ref": "ee677dc8-3658-4789-8b33-daaeb611a14f",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "dfdce226-3f79-4e3a-90b6-475c6683b7ac"
        },
        "item": {
          "id": "762be539-0723-402e-ba92-8ed954a236e2",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "77ae8044-f678-4f06-9aeb-a9bd8ae5579b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbec185d-a861-4ad7-bee5-cc4e1207816f",
        "cursor": {
          "ref": "44c93566-457e-41cf-933a-45eb6558ada7",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3a1fe091-be84-4082-bdde-b7c02fc3aa50"
        },
        "item": {
          "id": "cbec185d-a861-4ad7-bee5-cc4e1207816f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "27db6921-abff-4475-97ec-29972acdd508",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbec185d-a861-4ad7-bee5-cc4e1207816f",
        "cursor": {
          "ref": "44c93566-457e-41cf-933a-45eb6558ada7",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3a1fe091-be84-4082-bdde-b7c02fc3aa50"
        },
        "item": {
          "id": "cbec185d-a861-4ad7-bee5-cc4e1207816f",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "27db6921-abff-4475-97ec-29972acdd508",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 71,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8902227-0a03-4d3e-b318-6071258e3a89",
        "cursor": {
          "ref": "814cfcf0-933b-4920-82dd-511f5caa2097",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "aee43860-44d5-40fe-8ff4-df0c3fe3908d"
        },
        "item": {
          "id": "b8902227-0a03-4d3e-b318-6071258e3a89",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7afbb8a5-b3a8-44eb-90e7-2cd19ec479aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8902227-0a03-4d3e-b318-6071258e3a89",
        "cursor": {
          "ref": "814cfcf0-933b-4920-82dd-511f5caa2097",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "aee43860-44d5-40fe-8ff4-df0c3fe3908d"
        },
        "item": {
          "id": "b8902227-0a03-4d3e-b318-6071258e3a89",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7afbb8a5-b3a8-44eb-90e7-2cd19ec479aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3f4576-ae1e-42e5-b0f6-c012257795cd",
        "cursor": {
          "ref": "50424808-9301-461b-9210-4c019e0689d8",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7ec8b737-9405-4cab-8355-d3f4e82551cb"
        },
        "item": {
          "id": "ad3f4576-ae1e-42e5-b0f6-c012257795cd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "44d4cbcb-285e-4200-af9a-ac138a6c2d86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad3f4576-ae1e-42e5-b0f6-c012257795cd",
        "cursor": {
          "ref": "50424808-9301-461b-9210-4c019e0689d8",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7ec8b737-9405-4cab-8355-d3f4e82551cb"
        },
        "item": {
          "id": "ad3f4576-ae1e-42e5-b0f6-c012257795cd",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "44d4cbcb-285e-4200-af9a-ac138a6c2d86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8dd9155-027d-4db9-a8db-3b3a828299f6",
        "cursor": {
          "ref": "1618f39e-9581-4a13-9052-d04bfc5cb21b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "97b6e321-3c94-4ad2-9c3f-7948ca7fd349"
        },
        "item": {
          "id": "f8dd9155-027d-4db9-a8db-3b3a828299f6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9b923576-1c90-42e7-9e79-5ab158ab3a7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8dd9155-027d-4db9-a8db-3b3a828299f6",
        "cursor": {
          "ref": "1618f39e-9581-4a13-9052-d04bfc5cb21b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "97b6e321-3c94-4ad2-9c3f-7948ca7fd349"
        },
        "item": {
          "id": "f8dd9155-027d-4db9-a8db-3b3a828299f6",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9b923576-1c90-42e7-9e79-5ab158ab3a7a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb09172a-f946-4ecd-872a-2581a73679a1",
        "cursor": {
          "ref": "7fe35290-214f-401b-ad38-65a066606541",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cd863f72-7762-4389-8120-e8d2b91bddf6"
        },
        "item": {
          "id": "cb09172a-f946-4ecd-872a-2581a73679a1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a7f8166c-5725-4c32-bef8-4098fb9d677e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb09172a-f946-4ecd-872a-2581a73679a1",
        "cursor": {
          "ref": "7fe35290-214f-401b-ad38-65a066606541",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "cd863f72-7762-4389-8120-e8d2b91bddf6"
        },
        "item": {
          "id": "cb09172a-f946-4ecd-872a-2581a73679a1",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a7f8166c-5725-4c32-bef8-4098fb9d677e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272db088-b9fe-4744-aff4-3418eb6c405e",
        "cursor": {
          "ref": "c7b0b928-fd9a-4fca-a4e9-b0283e8c465e",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fd0b53ac-3453-4a85-ae15-bb0419bee48d"
        },
        "item": {
          "id": "272db088-b9fe-4744-aff4-3418eb6c405e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e89e8071-3c25-4b69-a33f-d47f719d4298",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "272db088-b9fe-4744-aff4-3418eb6c405e",
        "cursor": {
          "ref": "c7b0b928-fd9a-4fca-a4e9-b0283e8c465e",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "fd0b53ac-3453-4a85-ae15-bb0419bee48d"
        },
        "item": {
          "id": "272db088-b9fe-4744-aff4-3418eb6c405e",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e89e8071-3c25-4b69-a33f-d47f719d4298",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "684ee66f-d03a-41f7-9cd8-bc6dc491d30e",
        "cursor": {
          "ref": "2293f5fb-7f38-471e-a183-76b49cc3306c",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7f463082-dc47-47a4-b873-e62535767e1c"
        },
        "item": {
          "id": "684ee66f-d03a-41f7-9cd8-bc6dc491d30e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3ba21c02-ded7-4125-97a1-4efcda9b24ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "684ee66f-d03a-41f7-9cd8-bc6dc491d30e",
        "cursor": {
          "ref": "2293f5fb-7f38-471e-a183-76b49cc3306c",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "7f463082-dc47-47a4-b873-e62535767e1c"
        },
        "item": {
          "id": "684ee66f-d03a-41f7-9cd8-bc6dc491d30e",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3ba21c02-ded7-4125-97a1-4efcda9b24ef",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035a5d83-6232-4bcd-8772-fbd707e9003b",
        "cursor": {
          "ref": "16908bce-063e-4c55-b3ad-d897c0820330",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d4121769-56bb-491e-99bd-730dcee32ded"
        },
        "item": {
          "id": "035a5d83-6232-4bcd-8772-fbd707e9003b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "85ceb41f-59f2-4de2-bb83-e8486ce1aebc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "035a5d83-6232-4bcd-8772-fbd707e9003b",
        "cursor": {
          "ref": "16908bce-063e-4c55-b3ad-d897c0820330",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d4121769-56bb-491e-99bd-730dcee32ded"
        },
        "item": {
          "id": "035a5d83-6232-4bcd-8772-fbd707e9003b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "85ceb41f-59f2-4de2-bb83-e8486ce1aebc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71775a55-8933-4b89-92fd-9b931b8f56b0",
        "cursor": {
          "ref": "725dd082-fdb1-4236-aade-5ce5b42b0318",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a06b196a-1f79-410e-b748-34c981213f51"
        },
        "item": {
          "id": "71775a55-8933-4b89-92fd-9b931b8f56b0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c848165d-c5db-4dd5-9ec6-510954376b21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71775a55-8933-4b89-92fd-9b931b8f56b0",
        "cursor": {
          "ref": "725dd082-fdb1-4236-aade-5ce5b42b0318",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a06b196a-1f79-410e-b748-34c981213f51"
        },
        "item": {
          "id": "71775a55-8933-4b89-92fd-9b931b8f56b0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "c848165d-c5db-4dd5-9ec6-510954376b21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3687de29-8f52-4fc0-b7ee-6ecaffaf7805",
        "cursor": {
          "ref": "a123bd51-0b4e-4afd-8b8f-6beec53cae68",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8077a158-6b78-40aa-b729-3a8f05e6a5f8"
        },
        "item": {
          "id": "3687de29-8f52-4fc0-b7ee-6ecaffaf7805",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "df2a392f-2706-4ed7-b12b-9253b972fd12",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3687de29-8f52-4fc0-b7ee-6ecaffaf7805",
        "cursor": {
          "ref": "a123bd51-0b4e-4afd-8b8f-6beec53cae68",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "8077a158-6b78-40aa-b729-3a8f05e6a5f8"
        },
        "item": {
          "id": "3687de29-8f52-4fc0-b7ee-6ecaffaf7805",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "df2a392f-2706-4ed7-b12b-9253b972fd12",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491de4be-2631-4e73-bdb2-5d7b72a0fd9b",
        "cursor": {
          "ref": "a1cd3ed8-7e45-435c-9ce6-e2c8cf04b1a8",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4cbebbaf-8700-400e-a349-71f662d10ff1"
        },
        "item": {
          "id": "491de4be-2631-4e73-bdb2-5d7b72a0fd9b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5af3f5e4-4cf0-49b3-b24f-7f1d5b520299",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "491de4be-2631-4e73-bdb2-5d7b72a0fd9b",
        "cursor": {
          "ref": "a1cd3ed8-7e45-435c-9ce6-e2c8cf04b1a8",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4cbebbaf-8700-400e-a349-71f662d10ff1"
        },
        "item": {
          "id": "491de4be-2631-4e73-bdb2-5d7b72a0fd9b",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5af3f5e4-4cf0-49b3-b24f-7f1d5b520299",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f1ede8-42f6-45a3-a091-f501d44b61a1",
        "cursor": {
          "ref": "3ae4031f-728a-4563-b960-3e22f896e017",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5be6acdf-ad64-4cde-a349-a686b794bd42"
        },
        "item": {
          "id": "01f1ede8-42f6-45a3-a091-f501d44b61a1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "52455df3-752d-4181-8e13-6f50c90b3690",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f1ede8-42f6-45a3-a091-f501d44b61a1",
        "cursor": {
          "ref": "3ae4031f-728a-4563-b960-3e22f896e017",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5be6acdf-ad64-4cde-a349-a686b794bd42"
        },
        "item": {
          "id": "01f1ede8-42f6-45a3-a091-f501d44b61a1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "52455df3-752d-4181-8e13-6f50c90b3690",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05101b58-67c6-4c40-be73-b80930365f21",
        "cursor": {
          "ref": "4ba021cd-c735-4a48-8b42-bd76850d1d92",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6753477d-6137-4294-aebf-24207d928600"
        },
        "item": {
          "id": "05101b58-67c6-4c40-be73-b80930365f21",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "93f2b546-283e-4388-9ab0-bee3f9eca510",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05101b58-67c6-4c40-be73-b80930365f21",
        "cursor": {
          "ref": "4ba021cd-c735-4a48-8b42-bd76850d1d92",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6753477d-6137-4294-aebf-24207d928600"
        },
        "item": {
          "id": "05101b58-67c6-4c40-be73-b80930365f21",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "93f2b546-283e-4388-9ab0-bee3f9eca510",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300ea198-5f8f-4eb5-a2e4-0639602df02c",
        "cursor": {
          "ref": "7508f9bb-cd0b-46e0-986d-c1bd2786ab40",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4f93826f-249b-4036-993e-bccdb50b5c51"
        },
        "item": {
          "id": "300ea198-5f8f-4eb5-a2e4-0639602df02c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "fe000bab-e97a-4614-81b9-9d70cd183a6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "300ea198-5f8f-4eb5-a2e4-0639602df02c",
        "cursor": {
          "ref": "7508f9bb-cd0b-46e0-986d-c1bd2786ab40",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "4f93826f-249b-4036-993e-bccdb50b5c51"
        },
        "item": {
          "id": "300ea198-5f8f-4eb5-a2e4-0639602df02c",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "fe000bab-e97a-4614-81b9-9d70cd183a6a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a10b378-8a95-49ac-847e-6b813e71fe0c",
        "cursor": {
          "ref": "abc03215-aff5-44bf-9909-fea8f1f26a75",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "77106567-9725-4c2b-9616-ccafd255abce"
        },
        "item": {
          "id": "3a10b378-8a95-49ac-847e-6b813e71fe0c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2c28bf22-577b-41d4-bc1c-992299179a86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a10b378-8a95-49ac-847e-6b813e71fe0c",
        "cursor": {
          "ref": "abc03215-aff5-44bf-9909-fea8f1f26a75",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "77106567-9725-4c2b-9616-ccafd255abce"
        },
        "item": {
          "id": "3a10b378-8a95-49ac-847e-6b813e71fe0c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "2c28bf22-577b-41d4-bc1c-992299179a86",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c28a49d-50a7-47ec-9a4f-d4fce1171fc9",
        "cursor": {
          "ref": "99efc099-5303-45a7-a100-6d4da586ed86",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e8b51459-ae0d-4112-9246-bd23380434a9"
        },
        "item": {
          "id": "5c28a49d-50a7-47ec-9a4f-d4fce1171fc9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "030569f4-8c35-4b55-97b2-4c187e085f2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c28a49d-50a7-47ec-9a4f-d4fce1171fc9",
        "cursor": {
          "ref": "99efc099-5303-45a7-a100-6d4da586ed86",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e8b51459-ae0d-4112-9246-bd23380434a9"
        },
        "item": {
          "id": "5c28a49d-50a7-47ec-9a4f-d4fce1171fc9",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "030569f4-8c35-4b55-97b2-4c187e085f2e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955ccfbb-cfe4-488e-8d2c-2aae3c1eb3df",
        "cursor": {
          "ref": "33bc0977-5bc4-4551-b1e1-553e128794bf",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8067c0cf-2ba3-402d-9a58-bbc54b4420e9"
        },
        "item": {
          "id": "955ccfbb-cfe4-488e-8d2c-2aae3c1eb3df",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c0411084-6e62-47ec-bd64-315d78c5e3e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "955ccfbb-cfe4-488e-8d2c-2aae3c1eb3df",
        "cursor": {
          "ref": "33bc0977-5bc4-4551-b1e1-553e128794bf",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "8067c0cf-2ba3-402d-9a58-bbc54b4420e9"
        },
        "item": {
          "id": "955ccfbb-cfe4-488e-8d2c-2aae3c1eb3df",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c0411084-6e62-47ec-bd64-315d78c5e3e6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed01e10-0079-44e6-a568-bc04049abbd4",
        "cursor": {
          "ref": "1965c3d2-156f-41ab-97ed-bd575d0c0684",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c6106403-48e0-4522-a9f4-5e2f9950fc5a"
        },
        "item": {
          "id": "aed01e10-0079-44e6-a568-bc04049abbd4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "26693ecc-07e2-4dee-ad3f-48542bfa9fee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aed01e10-0079-44e6-a568-bc04049abbd4",
        "cursor": {
          "ref": "1965c3d2-156f-41ab-97ed-bd575d0c0684",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c6106403-48e0-4522-a9f4-5e2f9950fc5a"
        },
        "item": {
          "id": "aed01e10-0079-44e6-a568-bc04049abbd4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "26693ecc-07e2-4dee-ad3f-48542bfa9fee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a6a7b64-7ad1-45e5-898b-9834ae498190",
        "cursor": {
          "ref": "304c1393-7698-4fad-be88-00add2b58e89",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a2973241-2c94-4c95-b7af-d960890b6ce1"
        },
        "item": {
          "id": "7a6a7b64-7ad1-45e5-898b-9834ae498190",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "38f75979-3c90-4785-bcf2-bdd51b7585b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a6a7b64-7ad1-45e5-898b-9834ae498190",
        "cursor": {
          "ref": "304c1393-7698-4fad-be88-00add2b58e89",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "a2973241-2c94-4c95-b7af-d960890b6ce1"
        },
        "item": {
          "id": "7a6a7b64-7ad1-45e5-898b-9834ae498190",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "38f75979-3c90-4785-bcf2-bdd51b7585b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3c1ff3-806d-49ce-8ecf-b4dd08ff8cb6",
        "cursor": {
          "ref": "4efb64e1-c06a-4a6d-aaf0-45b6b6812ca7",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "648ad9a5-81dc-4e5c-8f4b-517401f466e2"
        },
        "item": {
          "id": "5f3c1ff3-806d-49ce-8ecf-b4dd08ff8cb6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "85565a5a-070f-4833-b01b-3b357d1f4093",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f3c1ff3-806d-49ce-8ecf-b4dd08ff8cb6",
        "cursor": {
          "ref": "4efb64e1-c06a-4a6d-aaf0-45b6b6812ca7",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "648ad9a5-81dc-4e5c-8f4b-517401f466e2"
        },
        "item": {
          "id": "5f3c1ff3-806d-49ce-8ecf-b4dd08ff8cb6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "85565a5a-070f-4833-b01b-3b357d1f4093",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e751c8-2971-4601-a503-aeb99497c8ed",
        "cursor": {
          "ref": "cf864a7a-5491-4f6b-900d-d6bcc2536f82",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1a5def37-a6c7-4824-8659-60812cb6c1b8"
        },
        "item": {
          "id": "66e751c8-2971-4601-a503-aeb99497c8ed",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d39587d2-5f82-42cc-9aaa-f17d0c361eaf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e751c8-2971-4601-a503-aeb99497c8ed",
        "cursor": {
          "ref": "cf864a7a-5491-4f6b-900d-d6bcc2536f82",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1a5def37-a6c7-4824-8659-60812cb6c1b8"
        },
        "item": {
          "id": "66e751c8-2971-4601-a503-aeb99497c8ed",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d39587d2-5f82-42cc-9aaa-f17d0c361eaf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c129fe-033f-4586-a0fe-fb88937f4661",
        "cursor": {
          "ref": "88cfd8f0-0ce8-4431-8c2a-45b01b0a7a95",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4239bc2f-e7e3-4613-a409-73d9f925a008"
        },
        "item": {
          "id": "e2c129fe-033f-4586-a0fe-fb88937f4661",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "080d1176-91bb-4b4d-9710-3d841a44866e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c129fe-033f-4586-a0fe-fb88937f4661",
        "cursor": {
          "ref": "88cfd8f0-0ce8-4431-8c2a-45b01b0a7a95",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "4239bc2f-e7e3-4613-a409-73d9f925a008"
        },
        "item": {
          "id": "e2c129fe-033f-4586-a0fe-fb88937f4661",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "080d1176-91bb-4b4d-9710-3d841a44866e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f288ee-2c73-4a5d-8c34-e3c5a97f2b14",
        "cursor": {
          "ref": "9e05fd11-1a32-4cd7-8057-66dda99688a6",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "81ee4d16-9937-4f12-86d7-aa3a56b5a80c"
        },
        "item": {
          "id": "49f288ee-2c73-4a5d-8c34-e3c5a97f2b14",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ed953f82-65ff-46c6-a9d6-41fdbbf6ff17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f288ee-2c73-4a5d-8c34-e3c5a97f2b14",
        "cursor": {
          "ref": "9e05fd11-1a32-4cd7-8057-66dda99688a6",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "81ee4d16-9937-4f12-86d7-aa3a56b5a80c"
        },
        "item": {
          "id": "49f288ee-2c73-4a5d-8c34-e3c5a97f2b14",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ed953f82-65ff-46c6-a9d6-41fdbbf6ff17",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a25fb3-7030-419b-8d63-5bbc062219aa",
        "cursor": {
          "ref": "2509fb9d-7ae5-466e-b3df-c06ed68d7dbb",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f451d5e3-d746-4371-8d42-28a236a2ee58"
        },
        "item": {
          "id": "f3a25fb3-7030-419b-8d63-5bbc062219aa",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c800fd11-24ac-4eb9-bec8-77706ac1bad1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3a25fb3-7030-419b-8d63-5bbc062219aa",
        "cursor": {
          "ref": "2509fb9d-7ae5-466e-b3df-c06ed68d7dbb",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f451d5e3-d746-4371-8d42-28a236a2ee58"
        },
        "item": {
          "id": "f3a25fb3-7030-419b-8d63-5bbc062219aa",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c800fd11-24ac-4eb9-bec8-77706ac1bad1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bf38bd-4d22-40fc-b1ed-a00654cf3c3c",
        "cursor": {
          "ref": "2b291fca-6ad5-42aa-93ab-fe45dd0b120e",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "05d91d24-ffb6-42b3-8eb2-2e46c5a26468"
        },
        "item": {
          "id": "59bf38bd-4d22-40fc-b1ed-a00654cf3c3c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "82ccdf69-5e43-434c-9cdb-48f7963fc7c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bf38bd-4d22-40fc-b1ed-a00654cf3c3c",
        "cursor": {
          "ref": "2b291fca-6ad5-42aa-93ab-fe45dd0b120e",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "05d91d24-ffb6-42b3-8eb2-2e46c5a26468"
        },
        "item": {
          "id": "59bf38bd-4d22-40fc-b1ed-a00654cf3c3c",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "82ccdf69-5e43-434c-9cdb-48f7963fc7c7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "168eb569-0c83-4a5a-9d2a-7265de171cbd",
        "cursor": {
          "ref": "de3f00a0-c450-4892-958d-f8ace5b9027f",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "52603563-9a75-4ef1-87f8-9d22ed240ee0"
        },
        "item": {
          "id": "168eb569-0c83-4a5a-9d2a-7265de171cbd",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "55f0f83a-4833-4b98-8243-7439281267f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "168eb569-0c83-4a5a-9d2a-7265de171cbd",
        "cursor": {
          "ref": "de3f00a0-c450-4892-958d-f8ace5b9027f",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "52603563-9a75-4ef1-87f8-9d22ed240ee0"
        },
        "item": {
          "id": "168eb569-0c83-4a5a-9d2a-7265de171cbd",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "55f0f83a-4833-4b98-8243-7439281267f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e54afd-cc5b-49f3-9d61-50161df20a49",
        "cursor": {
          "ref": "7ad0ab88-2468-4a38-aa07-0acd3e6907bf",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "55dc6285-d95a-497c-a272-de618912901b"
        },
        "item": {
          "id": "87e54afd-cc5b-49f3-9d61-50161df20a49",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3ef63e42-5a23-4a86-8ec3-c34235009d81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e54afd-cc5b-49f3-9d61-50161df20a49",
        "cursor": {
          "ref": "7ad0ab88-2468-4a38-aa07-0acd3e6907bf",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "55dc6285-d95a-497c-a272-de618912901b"
        },
        "item": {
          "id": "87e54afd-cc5b-49f3-9d61-50161df20a49",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "3ef63e42-5a23-4a86-8ec3-c34235009d81",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f46131-c396-4d15-b4fe-4c65121932cf",
        "cursor": {
          "ref": "cad23012-4a5c-4caf-81c7-5e4f6711485c",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6c540f14-4089-4381-a974-54f7d1c982c9"
        },
        "item": {
          "id": "67f46131-c396-4d15-b4fe-4c65121932cf",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "aefd6941-a884-4ccc-8475-e38c4bd87f2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f46131-c396-4d15-b4fe-4c65121932cf",
        "cursor": {
          "ref": "cad23012-4a5c-4caf-81c7-5e4f6711485c",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6c540f14-4089-4381-a974-54f7d1c982c9"
        },
        "item": {
          "id": "67f46131-c396-4d15-b4fe-4c65121932cf",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "aefd6941-a884-4ccc-8475-e38c4bd87f2b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c27691-b5ef-44b7-b41a-4afc431484d5",
        "cursor": {
          "ref": "39271f19-56d9-48fa-b1a7-d86664b44f8c",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6449fe2d-a5e3-4c46-8f09-9ac659afb432"
        },
        "item": {
          "id": "66c27691-b5ef-44b7-b41a-4afc431484d5",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c0f49cbe-7b4f-473c-97d7-60052da3d371",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66c27691-b5ef-44b7-b41a-4afc431484d5",
        "cursor": {
          "ref": "39271f19-56d9-48fa-b1a7-d86664b44f8c",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6449fe2d-a5e3-4c46-8f09-9ac659afb432"
        },
        "item": {
          "id": "66c27691-b5ef-44b7-b41a-4afc431484d5",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c0f49cbe-7b4f-473c-97d7-60052da3d371",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6a683d-53f3-49c5-90c8-709dba291f89",
        "cursor": {
          "ref": "a02eec48-24e6-4d91-bc63-5b52157d4150",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "76cac67a-b45a-498a-ae02-f0196656f11f"
        },
        "item": {
          "id": "3e6a683d-53f3-49c5-90c8-709dba291f89",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d212dcdb-0214-447a-9753-0109c80f9c5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e6a683d-53f3-49c5-90c8-709dba291f89",
        "cursor": {
          "ref": "a02eec48-24e6-4d91-bc63-5b52157d4150",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "76cac67a-b45a-498a-ae02-f0196656f11f"
        },
        "item": {
          "id": "3e6a683d-53f3-49c5-90c8-709dba291f89",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "d212dcdb-0214-447a-9753-0109c80f9c5d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbef3757-b856-41f9-bf89-2b0ec44c65cb",
        "cursor": {
          "ref": "a407b4c7-9a6d-4749-9a9a-3783bbacbbbf",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "30a26c3e-da5a-4e9b-95d5-b5cd4cd3ab02"
        },
        "item": {
          "id": "fbef3757-b856-41f9-bf89-2b0ec44c65cb",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "346a4222-f5e1-4118-ada7-42f108b89fbf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbef3757-b856-41f9-bf89-2b0ec44c65cb",
        "cursor": {
          "ref": "a407b4c7-9a6d-4749-9a9a-3783bbacbbbf",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "30a26c3e-da5a-4e9b-95d5-b5cd4cd3ab02"
        },
        "item": {
          "id": "fbef3757-b856-41f9-bf89-2b0ec44c65cb",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "346a4222-f5e1-4118-ada7-42f108b89fbf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8df065-8389-4791-82ed-543713306ac2",
        "cursor": {
          "ref": "2e800a98-8449-45da-a325-27d93f0c16e7",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "aa8e3879-dd45-40ff-b8c0-3dcdba2c2a26"
        },
        "item": {
          "id": "2b8df065-8389-4791-82ed-543713306ac2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e0bed6c6-2cc7-4647-b81e-a48d4a25c74d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8df065-8389-4791-82ed-543713306ac2",
        "cursor": {
          "ref": "2e800a98-8449-45da-a325-27d93f0c16e7",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "aa8e3879-dd45-40ff-b8c0-3dcdba2c2a26"
        },
        "item": {
          "id": "2b8df065-8389-4791-82ed-543713306ac2",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e0bed6c6-2cc7-4647-b81e-a48d4a25c74d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000d87fa-1e06-493d-91d9-ff20cc6cc9b9",
        "cursor": {
          "ref": "61e9fb5e-bf52-4179-8bbd-925efd0b4966",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9db7a3b3-1392-4e9a-ae3e-2861113dd85c"
        },
        "item": {
          "id": "000d87fa-1e06-493d-91d9-ff20cc6cc9b9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "94cd14a7-ef84-4548-a1ed-0b4a76d86d48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000d87fa-1e06-493d-91d9-ff20cc6cc9b9",
        "cursor": {
          "ref": "61e9fb5e-bf52-4179-8bbd-925efd0b4966",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9db7a3b3-1392-4e9a-ae3e-2861113dd85c"
        },
        "item": {
          "id": "000d87fa-1e06-493d-91d9-ff20cc6cc9b9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "94cd14a7-ef84-4548-a1ed-0b4a76d86d48",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0af612-4c72-4a73-a0c6-651aa3707937",
        "cursor": {
          "ref": "93839988-030b-47f4-9740-ca88dc6d5c7a",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b1e23342-9b97-4a26-9aa4-f2081d9a9572"
        },
        "item": {
          "id": "2e0af612-4c72-4a73-a0c6-651aa3707937",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "38894f06-371c-4159-a0de-3ce65c7b2c6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0af612-4c72-4a73-a0c6-651aa3707937",
        "cursor": {
          "ref": "93839988-030b-47f4-9740-ca88dc6d5c7a",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b1e23342-9b97-4a26-9aa4-f2081d9a9572"
        },
        "item": {
          "id": "2e0af612-4c72-4a73-a0c6-651aa3707937",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "38894f06-371c-4159-a0de-3ce65c7b2c6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0cf4db-c2d6-48a3-90f1-9d4b45a871cc",
        "cursor": {
          "ref": "ef4eb73e-c1d8-4295-b001-4ca147a34465",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a2155ca0-6b09-4c9a-a57d-8f029aa7dd25"
        },
        "item": {
          "id": "ee0cf4db-c2d6-48a3-90f1-9d4b45a871cc",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "72166ecc-e265-4975-bc86-bc732e642fa8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0cf4db-c2d6-48a3-90f1-9d4b45a871cc",
        "cursor": {
          "ref": "ef4eb73e-c1d8-4295-b001-4ca147a34465",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a2155ca0-6b09-4c9a-a57d-8f029aa7dd25"
        },
        "item": {
          "id": "ee0cf4db-c2d6-48a3-90f1-9d4b45a871cc",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "72166ecc-e265-4975-bc86-bc732e642fa8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2f3f95-4e25-4f9b-a036-57556d93ccb3",
        "cursor": {
          "ref": "8b2873ae-023c-4c3b-900a-8970f4704597",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6242395f-1653-45e7-9d29-0ffcd80f8c2d"
        },
        "item": {
          "id": "3f2f3f95-4e25-4f9b-a036-57556d93ccb3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "15eb34c2-9a20-45fd-b40f-136f67e6b2a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f2f3f95-4e25-4f9b-a036-57556d93ccb3",
        "cursor": {
          "ref": "8b2873ae-023c-4c3b-900a-8970f4704597",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "6242395f-1653-45e7-9d29-0ffcd80f8c2d"
        },
        "item": {
          "id": "3f2f3f95-4e25-4f9b-a036-57556d93ccb3",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "15eb34c2-9a20-45fd-b40f-136f67e6b2a9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746faa88-4577-49be-bb32-0e30b1b0e616",
        "cursor": {
          "ref": "7108d27d-5331-41b0-b053-a0a53b02ed74",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7708b42c-97a3-41cf-9068-acc7175f82b5"
        },
        "item": {
          "id": "746faa88-4577-49be-bb32-0e30b1b0e616",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0f96e80a-804e-4ac9-8fe9-cced0fa3e7e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "746faa88-4577-49be-bb32-0e30b1b0e616",
        "cursor": {
          "ref": "7108d27d-5331-41b0-b053-a0a53b02ed74",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7708b42c-97a3-41cf-9068-acc7175f82b5"
        },
        "item": {
          "id": "746faa88-4577-49be-bb32-0e30b1b0e616",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0f96e80a-804e-4ac9-8fe9-cced0fa3e7e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d0352f-187e-4781-8963-03837264359c",
        "cursor": {
          "ref": "b2e0b4ef-0877-4204-aa3b-294c8fe83024",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b4836c5f-fe53-43a4-ac43-48979b741307"
        },
        "item": {
          "id": "94d0352f-187e-4781-8963-03837264359c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "72d8cfff-2e8d-4c29-8a41-b9ee313ed81e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d0352f-187e-4781-8963-03837264359c",
        "cursor": {
          "ref": "b2e0b4ef-0877-4204-aa3b-294c8fe83024",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "b4836c5f-fe53-43a4-ac43-48979b741307"
        },
        "item": {
          "id": "94d0352f-187e-4781-8963-03837264359c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "72d8cfff-2e8d-4c29-8a41-b9ee313ed81e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8793837a-ff03-4f35-afa8-723659e1a13b",
        "cursor": {
          "ref": "b630a5f1-cc18-424a-8273-fa74b3579571",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "db4e2ff0-707e-4600-8f39-1c96a7576a3f"
        },
        "item": {
          "id": "8793837a-ff03-4f35-afa8-723659e1a13b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "01e56b31-3d92-492e-a87f-1d878eff0652",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8793837a-ff03-4f35-afa8-723659e1a13b",
        "cursor": {
          "ref": "b630a5f1-cc18-424a-8273-fa74b3579571",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "db4e2ff0-707e-4600-8f39-1c96a7576a3f"
        },
        "item": {
          "id": "8793837a-ff03-4f35-afa8-723659e1a13b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "01e56b31-3d92-492e-a87f-1d878eff0652",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3751c0ea-d95d-491d-8856-8c5b4ccaff88",
        "cursor": {
          "ref": "71583f45-1d07-4a98-8598-838774db4081",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e8b50ffb-6c11-4150-87b7-39311dd09167"
        },
        "item": {
          "id": "3751c0ea-d95d-491d-8856-8c5b4ccaff88",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8e62f9e8-ec75-4611-8d74-7b5fc0d2ed3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 95,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3751c0ea-d95d-491d-8856-8c5b4ccaff88",
        "cursor": {
          "ref": "71583f45-1d07-4a98-8598-838774db4081",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e8b50ffb-6c11-4150-87b7-39311dd09167"
        },
        "item": {
          "id": "3751c0ea-d95d-491d-8856-8c5b4ccaff88",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8e62f9e8-ec75-4611-8d74-7b5fc0d2ed3e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 95,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8dee784-e49a-448f-a762-0c214acdb170",
        "cursor": {
          "ref": "5162d190-84ee-40f5-a68d-f42c5f9b9ffc",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3cf47812-3c58-44ec-a8a4-34f448b1e2ea"
        },
        "item": {
          "id": "f8dee784-e49a-448f-a762-0c214acdb170",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3331ad56-d9d9-4413-9eb0-38e6b9d232a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8dee784-e49a-448f-a762-0c214acdb170",
        "cursor": {
          "ref": "5162d190-84ee-40f5-a68d-f42c5f9b9ffc",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3cf47812-3c58-44ec-a8a4-34f448b1e2ea"
        },
        "item": {
          "id": "f8dee784-e49a-448f-a762-0c214acdb170",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3331ad56-d9d9-4413-9eb0-38e6b9d232a2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0035fa9e-839e-45f2-aa5e-839ffc0fef41",
        "cursor": {
          "ref": "c7f87127-6295-4141-b79f-cc0f7a29019b",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "67903665-2427-4733-9b4b-e49187c84aba"
        },
        "item": {
          "id": "0035fa9e-839e-45f2-aa5e-839ffc0fef41",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0b4c8480-7b9b-4a32-8b94-5f0067843f62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0035fa9e-839e-45f2-aa5e-839ffc0fef41",
        "cursor": {
          "ref": "c7f87127-6295-4141-b79f-cc0f7a29019b",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "67903665-2427-4733-9b4b-e49187c84aba"
        },
        "item": {
          "id": "0035fa9e-839e-45f2-aa5e-839ffc0fef41",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0b4c8480-7b9b-4a32-8b94-5f0067843f62",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1109c22-6067-45ae-86c7-9cadc13fed62",
        "cursor": {
          "ref": "67ad0851-c5ba-4692-9358-180fecb13a82",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a3c63080-bee2-4a12-8ff5-78a3fadd7237"
        },
        "item": {
          "id": "f1109c22-6067-45ae-86c7-9cadc13fed62",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "95d37c94-4487-437e-86ea-f5f04243a487",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1109c22-6067-45ae-86c7-9cadc13fed62",
        "cursor": {
          "ref": "67ad0851-c5ba-4692-9358-180fecb13a82",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a3c63080-bee2-4a12-8ff5-78a3fadd7237"
        },
        "item": {
          "id": "f1109c22-6067-45ae-86c7-9cadc13fed62",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "95d37c94-4487-437e-86ea-f5f04243a487",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 73,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70e2572-abb6-4c1d-97e2-4ac79c5cb4f3",
        "cursor": {
          "ref": "c4f608fe-60ad-4913-98bc-8928579809dc",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5a785956-7fd2-4dbb-86c9-5c1d79ff75c0"
        },
        "item": {
          "id": "f70e2572-abb6-4c1d-97e2-4ac79c5cb4f3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "81cb4140-33a9-46d0-99e3-23f99777fc4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70e2572-abb6-4c1d-97e2-4ac79c5cb4f3",
        "cursor": {
          "ref": "c4f608fe-60ad-4913-98bc-8928579809dc",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5a785956-7fd2-4dbb-86c9-5c1d79ff75c0"
        },
        "item": {
          "id": "f70e2572-abb6-4c1d-97e2-4ac79c5cb4f3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "81cb4140-33a9-46d0-99e3-23f99777fc4d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87039860-a62f-4ed4-83bd-ec936fa6b571",
        "cursor": {
          "ref": "4499a0df-6b02-458c-ad6d-0ecba005b4b1",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d24f70f8-a169-4ae4-8bf9-47b83cacf443"
        },
        "item": {
          "id": "87039860-a62f-4ed4-83bd-ec936fa6b571",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "750d387d-93c6-420a-bd83-9d2a367f055b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87039860-a62f-4ed4-83bd-ec936fa6b571",
        "cursor": {
          "ref": "4499a0df-6b02-458c-ad6d-0ecba005b4b1",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d24f70f8-a169-4ae4-8bf9-47b83cacf443"
        },
        "item": {
          "id": "87039860-a62f-4ed4-83bd-ec936fa6b571",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "750d387d-93c6-420a-bd83-9d2a367f055b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31e96cf-6913-4fb8-8ab1-a5268fd09136",
        "cursor": {
          "ref": "a5d7d54f-db99-45a7-9a6a-25c936c248ac",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "80a65a87-e6e6-4da7-aa6c-d983c7323121"
        },
        "item": {
          "id": "c31e96cf-6913-4fb8-8ab1-a5268fd09136",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d1111f4e-fe30-4682-88f6-c47d07e76bf2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c31e96cf-6913-4fb8-8ab1-a5268fd09136",
        "cursor": {
          "ref": "a5d7d54f-db99-45a7-9a6a-25c936c248ac",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "80a65a87-e6e6-4da7-aa6c-d983c7323121"
        },
        "item": {
          "id": "c31e96cf-6913-4fb8-8ab1-a5268fd09136",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d1111f4e-fe30-4682-88f6-c47d07e76bf2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c770e5-f60f-4a55-91df-a94a1d156693",
        "cursor": {
          "ref": "e8c38d2f-21dd-42dd-88fa-1d383892a018",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "05606eac-4e89-4ad0-996c-04965c65a1fb"
        },
        "item": {
          "id": "89c770e5-f60f-4a55-91df-a94a1d156693",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "211c2cf3-f4db-4091-b0e5-651e4cef05ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c770e5-f60f-4a55-91df-a94a1d156693",
        "cursor": {
          "ref": "e8c38d2f-21dd-42dd-88fa-1d383892a018",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "05606eac-4e89-4ad0-996c-04965c65a1fb"
        },
        "item": {
          "id": "89c770e5-f60f-4a55-91df-a94a1d156693",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "211c2cf3-f4db-4091-b0e5-651e4cef05ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cd2bf71-3f5f-4302-9097-a91123754fd1",
        "cursor": {
          "ref": "edac82c5-eee3-4121-bae5-50cffc79043c",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a7f0181d-3863-4bb2-b4a4-e220795e2bf6"
        },
        "item": {
          "id": "0cd2bf71-3f5f-4302-9097-a91123754fd1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5e7d9b75-0c0b-49bc-82da-f53bdaa5cfc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cd2bf71-3f5f-4302-9097-a91123754fd1",
        "cursor": {
          "ref": "edac82c5-eee3-4121-bae5-50cffc79043c",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a7f0181d-3863-4bb2-b4a4-e220795e2bf6"
        },
        "item": {
          "id": "0cd2bf71-3f5f-4302-9097-a91123754fd1",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "5e7d9b75-0c0b-49bc-82da-f53bdaa5cfc0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2bb04c5-e51c-4580-a4d3-a4b2e3c4d095",
        "cursor": {
          "ref": "c8262ee7-febd-4f7d-af45-f1ce61100656",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "409c2125-2663-4a82-aeb9-492bc321259a"
        },
        "item": {
          "id": "e2bb04c5-e51c-4580-a4d3-a4b2e3c4d095",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "60c24bd8-bd04-409d-ada0-b03c41733120",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2bb04c5-e51c-4580-a4d3-a4b2e3c4d095",
        "cursor": {
          "ref": "c8262ee7-febd-4f7d-af45-f1ce61100656",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "409c2125-2663-4a82-aeb9-492bc321259a"
        },
        "item": {
          "id": "e2bb04c5-e51c-4580-a4d3-a4b2e3c4d095",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "60c24bd8-bd04-409d-ada0-b03c41733120",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3028a0a-93e0-480b-9e25-dbe8bce2b86c",
        "cursor": {
          "ref": "44a54669-ef52-4e2b-b8fc-89f7f695260b",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b7795f6c-09b0-4fce-8e4d-270dcc388d65"
        },
        "item": {
          "id": "a3028a0a-93e0-480b-9e25-dbe8bce2b86c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0c3d9c8e-9a3b-4051-ac64-3d27c3ab43b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3028a0a-93e0-480b-9e25-dbe8bce2b86c",
        "cursor": {
          "ref": "44a54669-ef52-4e2b-b8fc-89f7f695260b",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b7795f6c-09b0-4fce-8e4d-270dcc388d65"
        },
        "item": {
          "id": "a3028a0a-93e0-480b-9e25-dbe8bce2b86c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0c3d9c8e-9a3b-4051-ac64-3d27c3ab43b3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c597931-6646-4924-b157-db3f5d1f9cdc",
        "cursor": {
          "ref": "e38910f0-32c5-4283-93ac-3c19e0354568",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e0deda19-00ba-44fc-b274-f73803501894"
        },
        "item": {
          "id": "5c597931-6646-4924-b157-db3f5d1f9cdc",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "aca8f34a-f450-4bb4-8281-2d4e47b5ec4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c597931-6646-4924-b157-db3f5d1f9cdc",
        "cursor": {
          "ref": "e38910f0-32c5-4283-93ac-3c19e0354568",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e0deda19-00ba-44fc-b274-f73803501894"
        },
        "item": {
          "id": "5c597931-6646-4924-b157-db3f5d1f9cdc",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "aca8f34a-f450-4bb4-8281-2d4e47b5ec4b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad222f90-81f2-4116-bed5-a8627d997085",
        "cursor": {
          "ref": "3544e1dc-10e8-415a-baf7-60a85076f172",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1f667f23-3d90-4ed2-9f7a-923369547c43"
        },
        "item": {
          "id": "ad222f90-81f2-4116-bed5-a8627d997085",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6291406c-1057-42ea-af4b-f21f158f9c9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad222f90-81f2-4116-bed5-a8627d997085",
        "cursor": {
          "ref": "3544e1dc-10e8-415a-baf7-60a85076f172",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1f667f23-3d90-4ed2-9f7a-923369547c43"
        },
        "item": {
          "id": "ad222f90-81f2-4116-bed5-a8627d997085",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6291406c-1057-42ea-af4b-f21f158f9c9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4109bf94-6c3a-4f88-9fe1-f1683a61a897",
        "cursor": {
          "ref": "a50788d3-eaf7-45cf-8dca-99f494cd2dfb",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c742e0ae-7198-453c-83ab-82fb21b243af"
        },
        "item": {
          "id": "4109bf94-6c3a-4f88-9fe1-f1683a61a897",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2e1bc1dc-5d0c-4589-9746-1a01d551354d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4109bf94-6c3a-4f88-9fe1-f1683a61a897",
        "cursor": {
          "ref": "a50788d3-eaf7-45cf-8dca-99f494cd2dfb",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "c742e0ae-7198-453c-83ab-82fb21b243af"
        },
        "item": {
          "id": "4109bf94-6c3a-4f88-9fe1-f1683a61a897",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2e1bc1dc-5d0c-4589-9746-1a01d551354d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284f6e1d-f954-4ece-9f58-d501d0987aeb",
        "cursor": {
          "ref": "1ce49a17-16ab-4f67-93f8-5e88b0b75382",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "3e7d9ebe-529b-41e0-8ac5-c3de61dac1a0"
        },
        "item": {
          "id": "284f6e1d-f954-4ece-9f58-d501d0987aeb",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9af73c62-5e72-4ef6-aedd-db4a4989d43a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284f6e1d-f954-4ece-9f58-d501d0987aeb",
        "cursor": {
          "ref": "1ce49a17-16ab-4f67-93f8-5e88b0b75382",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "3e7d9ebe-529b-41e0-8ac5-c3de61dac1a0"
        },
        "item": {
          "id": "284f6e1d-f954-4ece-9f58-d501d0987aeb",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "9af73c62-5e72-4ef6-aedd-db4a4989d43a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbedf1b2-eae2-4e0a-bacd-322b8f5ee50b",
        "cursor": {
          "ref": "fdcb3f35-ff9e-4deb-ba99-e79bc66b284e",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "01ea2d0a-f7d1-46cb-b76e-5d89d3a6ef29"
        },
        "item": {
          "id": "bbedf1b2-eae2-4e0a-bacd-322b8f5ee50b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e45a4ef0-c3e9-4997-823a-2a277e8523cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbedf1b2-eae2-4e0a-bacd-322b8f5ee50b",
        "cursor": {
          "ref": "fdcb3f35-ff9e-4deb-ba99-e79bc66b284e",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "01ea2d0a-f7d1-46cb-b76e-5d89d3a6ef29"
        },
        "item": {
          "id": "bbedf1b2-eae2-4e0a-bacd-322b8f5ee50b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e45a4ef0-c3e9-4997-823a-2a277e8523cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877cdd8e-641d-4117-97e5-32ab0a50f6db",
        "cursor": {
          "ref": "c468cc0f-4172-49fc-8627-ada99070e982",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "b6ff4d3c-d54d-47ca-8b6b-1bd658f48295"
        },
        "item": {
          "id": "877cdd8e-641d-4117-97e5-32ab0a50f6db",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "57e237b1-2b4c-4a83-bb7b-58d98759fc1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877cdd8e-641d-4117-97e5-32ab0a50f6db",
        "cursor": {
          "ref": "c468cc0f-4172-49fc-8627-ada99070e982",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "b6ff4d3c-d54d-47ca-8b6b-1bd658f48295"
        },
        "item": {
          "id": "877cdd8e-641d-4117-97e5-32ab0a50f6db",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "57e237b1-2b4c-4a83-bb7b-58d98759fc1d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:254)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55740de8-1c8f-43c2-b5eb-a65cc6f287d3",
        "cursor": {
          "ref": "04feb409-6181-4fb1-83c0-137277f09424",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b0066a4c-408e-4e04-8e0f-373244428446"
        },
        "item": {
          "id": "55740de8-1c8f-43c2-b5eb-a65cc6f287d3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "717afbce-cb5e-42b7-957b-e4eb856f190a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55740de8-1c8f-43c2-b5eb-a65cc6f287d3",
        "cursor": {
          "ref": "04feb409-6181-4fb1-83c0-137277f09424",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "b0066a4c-408e-4e04-8e0f-373244428446"
        },
        "item": {
          "id": "55740de8-1c8f-43c2-b5eb-a65cc6f287d3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "717afbce-cb5e-42b7-957b-e4eb856f190a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:255)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1edec95c-e1b2-4dfe-a115-0d1140b6d547",
        "cursor": {
          "ref": "98fcb266-a9b1-4bbe-93d2-2bc20404cd77",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "3d1ab23d-4034-4155-9833-a9f5c826c3d4"
        },
        "item": {
          "id": "1edec95c-e1b2-4dfe-a115-0d1140b6d547",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "dc0dceb3-63b6-4de3-bf1a-d828f92ba84f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1edec95c-e1b2-4dfe-a115-0d1140b6d547",
        "cursor": {
          "ref": "98fcb266-a9b1-4bbe-93d2-2bc20404cd77",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "3d1ab23d-4034-4155-9833-a9f5c826c3d4"
        },
        "item": {
          "id": "1edec95c-e1b2-4dfe-a115-0d1140b6d547",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "dc0dceb3-63b6-4de3-bf1a-d828f92ba84f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:256)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac60f0f-1bfe-4e54-907d-9bd891f1c75e",
        "cursor": {
          "ref": "39416bb2-f874-4334-b669-3961235c4969",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "bddbcce2-7e7c-46ef-83db-f4b4626885cf"
        },
        "item": {
          "id": "2ac60f0f-1bfe-4e54-907d-9bd891f1c75e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "30f98f28-1a74-4b8f-b3d1-80dc9cb6d929",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac60f0f-1bfe-4e54-907d-9bd891f1c75e",
        "cursor": {
          "ref": "39416bb2-f874-4334-b669-3961235c4969",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "bddbcce2-7e7c-46ef-83db-f4b4626885cf"
        },
        "item": {
          "id": "2ac60f0f-1bfe-4e54-907d-9bd891f1c75e",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "30f98f28-1a74-4b8f-b3d1-80dc9cb6d929",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:257)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41eb2649-2527-423a-bf2a-5ad65c640050",
        "cursor": {
          "ref": "b4803d14-404e-4220-920a-13187439bac5",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "c5f6db9f-35a0-434a-9fd1-6688b86674b4"
        },
        "item": {
          "id": "41eb2649-2527-423a-bf2a-5ad65c640050",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3dab148f-1395-4b28-bce4-987d29ad4417",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41eb2649-2527-423a-bf2a-5ad65c640050",
        "cursor": {
          "ref": "b4803d14-404e-4220-920a-13187439bac5",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "c5f6db9f-35a0-434a-9fd1-6688b86674b4"
        },
        "item": {
          "id": "41eb2649-2527-423a-bf2a-5ad65c640050",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "3dab148f-1395-4b28-bce4-987d29ad4417",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:258)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0087da98-574f-402b-b4b9-2ea774d99f71",
        "cursor": {
          "ref": "237898f4-c028-44ca-a6b6-5fb603c344e4",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "8f39bbb7-5767-483e-a800-d7b8b4ea092a"
        },
        "item": {
          "id": "0087da98-574f-402b-b4b9-2ea774d99f71",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "37ae52b7-32f7-480f-871b-87260e583a10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0087da98-574f-402b-b4b9-2ea774d99f71",
        "cursor": {
          "ref": "237898f4-c028-44ca-a6b6-5fb603c344e4",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "8f39bbb7-5767-483e-a800-d7b8b4ea092a"
        },
        "item": {
          "id": "0087da98-574f-402b-b4b9-2ea774d99f71",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "37ae52b7-32f7-480f-871b-87260e583a10",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 82,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:259)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6700d9d-0e89-4293-9830-006a55e6b516",
        "cursor": {
          "ref": "1ceffc27-20ec-4bda-95c0-761489455a45",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "446b9efa-0a07-47be-b866-8859911f9031"
        },
        "item": {
          "id": "e6700d9d-0e89-4293-9830-006a55e6b516",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9b8d2dc6-f534-4896-a3dd-1d4fef6373b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6700d9d-0e89-4293-9830-006a55e6b516",
        "cursor": {
          "ref": "1ceffc27-20ec-4bda-95c0-761489455a45",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "446b9efa-0a07-47be-b866-8859911f9031"
        },
        "item": {
          "id": "e6700d9d-0e89-4293-9830-006a55e6b516",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "9b8d2dc6-f534-4896-a3dd-1d4fef6373b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:260)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff65404-d4c2-4905-b2a9-7a9f092c0beb",
        "cursor": {
          "ref": "e3cca291-c424-4392-b793-967053063938",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "d4e25c11-33dd-4e0b-a96a-0f9e619d02b6"
        },
        "item": {
          "id": "fff65404-d4c2-4905-b2a9-7a9f092c0beb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ae6b2507-8c86-47fa-b0dd-31f0209dcbb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff65404-d4c2-4905-b2a9-7a9f092c0beb",
        "cursor": {
          "ref": "e3cca291-c424-4392-b793-967053063938",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "d4e25c11-33dd-4e0b-a96a-0f9e619d02b6"
        },
        "item": {
          "id": "fff65404-d4c2-4905-b2a9-7a9f092c0beb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "ae6b2507-8c86-47fa-b0dd-31f0209dcbb8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 83,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:261)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11056e1-94a1-423b-97e7-c6dd5cae65f3",
        "cursor": {
          "ref": "1af0c975-a744-4ce1-b36b-a36b9d15ee5d",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8f049e49-38da-4c42-a82a-efde7afae150"
        },
        "item": {
          "id": "b11056e1-94a1-423b-97e7-c6dd5cae65f3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f9008a2f-302c-480a-a901-dcd575403a80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11056e1-94a1-423b-97e7-c6dd5cae65f3",
        "cursor": {
          "ref": "1af0c975-a744-4ce1-b36b-a36b9d15ee5d",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8f049e49-38da-4c42-a82a-efde7afae150"
        },
        "item": {
          "id": "b11056e1-94a1-423b-97e7-c6dd5cae65f3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f9008a2f-302c-480a-a901-dcd575403a80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:262)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18db6e7-dfed-4c32-8d94-c8221da79acb",
        "cursor": {
          "ref": "048a8cc4-91c3-4caa-b1ae-61a24351379e",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "b08beb58-176a-4924-b445-5aa2528b58eb"
        },
        "item": {
          "id": "b18db6e7-dfed-4c32-8d94-c8221da79acb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c59d4f58-527a-444f-b49a-b5c77653c177",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18db6e7-dfed-4c32-8d94-c8221da79acb",
        "cursor": {
          "ref": "048a8cc4-91c3-4caa-b1ae-61a24351379e",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "b08beb58-176a-4924-b445-5aa2528b58eb"
        },
        "item": {
          "id": "b18db6e7-dfed-4c32-8d94-c8221da79acb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c59d4f58-527a-444f-b49a-b5c77653c177",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072d5f56-626e-4d44-9e1f-8daf5fd461fc",
        "cursor": {
          "ref": "1ac50d72-e7e9-43f6-a8ff-8ea87370d20b",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "9caa812a-2d3b-4eec-b673-f6646f1bd8db"
        },
        "item": {
          "id": "072d5f56-626e-4d44-9e1f-8daf5fd461fc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d0802c87-b661-4dc9-ae24-ba9cee3fb20b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072d5f56-626e-4d44-9e1f-8daf5fd461fc",
        "cursor": {
          "ref": "1ac50d72-e7e9-43f6-a8ff-8ea87370d20b",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "9caa812a-2d3b-4eec-b673-f6646f1bd8db"
        },
        "item": {
          "id": "072d5f56-626e-4d44-9e1f-8daf5fd461fc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d0802c87-b661-4dc9-ae24-ba9cee3fb20b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:264)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78be68c-06b4-4b1c-8dd8-1b24f83d2c94",
        "cursor": {
          "ref": "e8a3eee4-0035-4dfb-8abf-70bf4f13cb8d",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "2023f321-c5db-402a-b916-a6be33391cc8"
        },
        "item": {
          "id": "d78be68c-06b4-4b1c-8dd8-1b24f83d2c94",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "50fdfa4b-6cfd-48b1-95ff-dd7ce423f830",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78be68c-06b4-4b1c-8dd8-1b24f83d2c94",
        "cursor": {
          "ref": "e8a3eee4-0035-4dfb-8abf-70bf4f13cb8d",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "2023f321-c5db-402a-b916-a6be33391cc8"
        },
        "item": {
          "id": "d78be68c-06b4-4b1c-8dd8-1b24f83d2c94",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "50fdfa4b-6cfd-48b1-95ff-dd7ce423f830",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c32764-5299-4e9c-af9e-1c76ac1e67e3",
        "cursor": {
          "ref": "2a8e0264-8e96-4a46-9409-98a9cb651987",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "3de45fb3-8c4c-4efe-a194-66eba19f8b12"
        },
        "item": {
          "id": "08c32764-5299-4e9c-af9e-1c76ac1e67e3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f19a98de-5fea-4e1a-ab9b-36f6cdee0ad6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c32764-5299-4e9c-af9e-1c76ac1e67e3",
        "cursor": {
          "ref": "2a8e0264-8e96-4a46-9409-98a9cb651987",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "3de45fb3-8c4c-4efe-a194-66eba19f8b12"
        },
        "item": {
          "id": "08c32764-5299-4e9c-af9e-1c76ac1e67e3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f19a98de-5fea-4e1a-ab9b-36f6cdee0ad6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6673eb24-aa16-4555-a273-2e10aca28136",
        "cursor": {
          "ref": "4163059e-1b21-47f5-b7cb-fd9551d2f737",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "c2d3072f-3753-4192-9066-c5501ecbd601"
        },
        "item": {
          "id": "6673eb24-aa16-4555-a273-2e10aca28136",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "825309f1-1704-4447-9fb7-b8213436c139",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6673eb24-aa16-4555-a273-2e10aca28136",
        "cursor": {
          "ref": "4163059e-1b21-47f5-b7cb-fd9551d2f737",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "c2d3072f-3753-4192-9066-c5501ecbd601"
        },
        "item": {
          "id": "6673eb24-aa16-4555-a273-2e10aca28136",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "825309f1-1704-4447-9fb7-b8213436c139",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f1dcc1-16c4-4144-9424-5a12ca067a52",
        "cursor": {
          "ref": "e9992219-4cd4-4b09-a042-c1ed453fd169",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "d1d27d75-4ca8-48f8-9f0c-9b3d297caf44"
        },
        "item": {
          "id": "50f1dcc1-16c4-4144-9424-5a12ca067a52",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "69e082f0-477d-4e40-8801-e3da17d87719",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50f1dcc1-16c4-4144-9424-5a12ca067a52",
        "cursor": {
          "ref": "e9992219-4cd4-4b09-a042-c1ed453fd169",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "d1d27d75-4ca8-48f8-9f0c-9b3d297caf44"
        },
        "item": {
          "id": "50f1dcc1-16c4-4144-9424-5a12ca067a52",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "69e082f0-477d-4e40-8801-e3da17d87719",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55adc500-28f4-4d54-9c15-8dbc60563e81",
        "cursor": {
          "ref": "9d275345-7642-4c7d-a60d-f56dd84ae4c6",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "b8612b56-2bd5-4c79-9af2-f4f8cb4b512b"
        },
        "item": {
          "id": "55adc500-28f4-4d54-9c15-8dbc60563e81",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "09457f6d-a9f2-4b58-8dac-ac9df7f1a6fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55adc500-28f4-4d54-9c15-8dbc60563e81",
        "cursor": {
          "ref": "9d275345-7642-4c7d-a60d-f56dd84ae4c6",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "b8612b56-2bd5-4c79-9af2-f4f8cb4b512b"
        },
        "item": {
          "id": "55adc500-28f4-4d54-9c15-8dbc60563e81",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "09457f6d-a9f2-4b58-8dac-ac9df7f1a6fc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1589181d-862e-4fb6-9140-a00201e6ae4c",
        "cursor": {
          "ref": "e4280ec1-9de7-45a1-9af2-485056bd58ba",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "8cce89bd-7a03-41ff-866f-f993c00a0cf3"
        },
        "item": {
          "id": "1589181d-862e-4fb6-9140-a00201e6ae4c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5af820b5-985d-407e-9804-fefbf3eb0352",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1589181d-862e-4fb6-9140-a00201e6ae4c",
        "cursor": {
          "ref": "e4280ec1-9de7-45a1-9af2-485056bd58ba",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "8cce89bd-7a03-41ff-866f-f993c00a0cf3"
        },
        "item": {
          "id": "1589181d-862e-4fb6-9140-a00201e6ae4c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "5af820b5-985d-407e-9804-fefbf3eb0352",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:270)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1c0e39-a4bb-4e09-9e6a-ff128ec38020",
        "cursor": {
          "ref": "1dd15e52-2fd0-40c3-974d-24437605dcd1",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "b0a44aa7-c4b2-4002-9eaf-dae12b65de36"
        },
        "item": {
          "id": "4f1c0e39-a4bb-4e09-9e6a-ff128ec38020",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "aa8e045f-3e6c-4459-8c08-44413eed6fa2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1c0e39-a4bb-4e09-9e6a-ff128ec38020",
        "cursor": {
          "ref": "1dd15e52-2fd0-40c3-974d-24437605dcd1",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "b0a44aa7-c4b2-4002-9eaf-dae12b65de36"
        },
        "item": {
          "id": "4f1c0e39-a4bb-4e09-9e6a-ff128ec38020",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "aa8e045f-3e6c-4459-8c08-44413eed6fa2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:271)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3aca93-2e2c-4838-8d2a-5594495e5467",
        "cursor": {
          "ref": "b6558f80-d293-4f2c-a118-2067d1f245f0",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "aa73a8ab-7554-4913-9367-deee24c466a6"
        },
        "item": {
          "id": "ab3aca93-2e2c-4838-8d2a-5594495e5467",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9a55488e-8354-4510-9af0-89334286a7b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3aca93-2e2c-4838-8d2a-5594495e5467",
        "cursor": {
          "ref": "b6558f80-d293-4f2c-a118-2067d1f245f0",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "aa73a8ab-7554-4913-9367-deee24c466a6"
        },
        "item": {
          "id": "ab3aca93-2e2c-4838-8d2a-5594495e5467",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "9a55488e-8354-4510-9af0-89334286a7b4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 89,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:272)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebecaa5a-623a-408b-998e-e532fcedcc05",
        "cursor": {
          "ref": "d5ddb1b8-210d-4b06-943a-461ac5d5d8a2",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "73b69dc1-80be-4f7c-b40c-fbbf7f66036e"
        },
        "item": {
          "id": "ebecaa5a-623a-408b-998e-e532fcedcc05",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c9c71655-881d-4094-a1c5-9b0efabe9e97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebecaa5a-623a-408b-998e-e532fcedcc05",
        "cursor": {
          "ref": "d5ddb1b8-210d-4b06-943a-461ac5d5d8a2",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "73b69dc1-80be-4f7c-b40c-fbbf7f66036e"
        },
        "item": {
          "id": "ebecaa5a-623a-408b-998e-e532fcedcc05",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c9c71655-881d-4094-a1c5-9b0efabe9e97",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:273)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3b0fc1-2a76-46c8-81c8-f16ea3efd3f5",
        "cursor": {
          "ref": "23ea026e-9bbe-4559-8d3b-1c6524159d8b",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "105d68db-d8a5-4f58-84ef-ad01828141b7"
        },
        "item": {
          "id": "7b3b0fc1-2a76-46c8-81c8-f16ea3efd3f5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d665000d-4d37-4411-a561-5a405f8fe779",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b3b0fc1-2a76-46c8-81c8-f16ea3efd3f5",
        "cursor": {
          "ref": "23ea026e-9bbe-4559-8d3b-1c6524159d8b",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "105d68db-d8a5-4f58-84ef-ad01828141b7"
        },
        "item": {
          "id": "7b3b0fc1-2a76-46c8-81c8-f16ea3efd3f5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d665000d-4d37-4411-a561-5a405f8fe779",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:274)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01cf5c50-ef37-4e66-a1e4-2e7e993b89dc",
        "cursor": {
          "ref": "c0376ca4-c141-4a81-a172-b6986ba4510b",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "04fad9b8-3eea-428a-a96e-bdff9e97391c"
        },
        "item": {
          "id": "01cf5c50-ef37-4e66-a1e4-2e7e993b89dc",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4ab4ce74-b53c-49bd-9175-b8c34c68007a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01cf5c50-ef37-4e66-a1e4-2e7e993b89dc",
        "cursor": {
          "ref": "c0376ca4-c141-4a81-a172-b6986ba4510b",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "04fad9b8-3eea-428a-a96e-bdff9e97391c"
        },
        "item": {
          "id": "01cf5c50-ef37-4e66-a1e4-2e7e993b89dc",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4ab4ce74-b53c-49bd-9175-b8c34c68007a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:275)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38f2cd1-7608-4b5a-9769-1bb58f1cf5d4",
        "cursor": {
          "ref": "44d2d297-3b21-4fd8-8450-e613f40b576f",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "f5ab27cd-167e-4f00-bfc9-edf04a2d2e19"
        },
        "item": {
          "id": "a38f2cd1-7608-4b5a-9769-1bb58f1cf5d4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "69830ac3-ecc2-44b4-873c-1fc82049d9cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a38f2cd1-7608-4b5a-9769-1bb58f1cf5d4",
        "cursor": {
          "ref": "44d2d297-3b21-4fd8-8450-e613f40b576f",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "f5ab27cd-167e-4f00-bfc9-edf04a2d2e19"
        },
        "item": {
          "id": "a38f2cd1-7608-4b5a-9769-1bb58f1cf5d4",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "69830ac3-ecc2-44b4-873c-1fc82049d9cd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 401",
              "stack": "AssertionError: expected response to have status code 400 but got 401\n   at Object.eval sandbox-script.js:1:276)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a08bf5-6974-4653-8f20-0822b7450294",
        "cursor": {
          "ref": "45df13e9-11d9-4350-99fd-c921e0aac1e6",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "eb48e81b-0f05-48ad-981e-0be01d245e01"
        },
        "item": {
          "id": "e5a08bf5-6974-4653-8f20-0822b7450294",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b50332a0-bdcc-4f63-bb59-fe09a112715e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5a08bf5-6974-4653-8f20-0822b7450294",
        "cursor": {
          "ref": "45df13e9-11d9-4350-99fd-c921e0aac1e6",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "eb48e81b-0f05-48ad-981e-0be01d245e01"
        },
        "item": {
          "id": "e5a08bf5-6974-4653-8f20-0822b7450294",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b50332a0-bdcc-4f63-bb59-fe09a112715e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cf1914b-8eb3-4c15-ac98-f582cb5c775c",
        "cursor": {
          "ref": "c61dde67-7056-4f2f-a497-1ad94b8b4abc",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "d0e27f16-b9bd-4a9e-b8a2-16e3a4980072"
        },
        "item": {
          "id": "9cf1914b-8eb3-4c15-ac98-f582cb5c775c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f9eec7f5-d3ba-4b2e-926a-a94a15871230",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "9cf1914b-8eb3-4c15-ac98-f582cb5c775c",
        "cursor": {
          "ref": "c61dde67-7056-4f2f-a497-1ad94b8b4abc",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "d0e27f16-b9bd-4a9e-b8a2-16e3a4980072"
        },
        "item": {
          "id": "9cf1914b-8eb3-4c15-ac98-f582cb5c775c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f9eec7f5-d3ba-4b2e-926a-a94a15871230",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:278)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:278)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "f6774725-8cf6-4525-bf1d-3c8f27d3e775",
        "cursor": {
          "ref": "45997f7f-9c5f-43e4-98c3-ba299e4b0952",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ce1ecdc8-7516-4fb7-86ae-7bf81edcc94e"
        },
        "item": {
          "id": "f6774725-8cf6-4525-bf1d-3c8f27d3e775",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4e669c49-82d0-458e-86c9-5853ba9a89b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "f6774725-8cf6-4525-bf1d-3c8f27d3e775",
        "cursor": {
          "ref": "45997f7f-9c5f-43e4-98c3-ba299e4b0952",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "ce1ecdc8-7516-4fb7-86ae-7bf81edcc94e"
        },
        "item": {
          "id": "f6774725-8cf6-4525-bf1d-3c8f27d3e775",
          "name": "credentials_verify"
        },
        "response": {
          "id": "4e669c49-82d0-458e-86c9-5853ba9a89b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "664b5f52-fef1-4331-80de-746d6e2002e5",
        "cursor": {
          "ref": "c5a426ae-54ff-4ab6-9788-554692a4bb42",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "9830bc1f-9ac1-4d3d-991c-cef9a3f5e555"
        },
        "item": {
          "id": "664b5f52-fef1-4331-80de-746d6e2002e5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "aae09554-0490-4e1d-a8c3-6f53bba7d832",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "664b5f52-fef1-4331-80de-746d6e2002e5",
        "cursor": {
          "ref": "c5a426ae-54ff-4ab6-9788-554692a4bb42",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "9830bc1f-9ac1-4d3d-991c-cef9a3f5e555"
        },
        "item": {
          "id": "664b5f52-fef1-4331-80de-746d6e2002e5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "aae09554-0490-4e1d-a8c3-6f53bba7d832",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 401",
              "stack": "AssertionError: expected response to have status code 200 but got 401\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:280)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:280)"
            }
          }
        ]
      },
      {
        "id": "8d525e29-113d-4a4e-8587-dd8be3de52f4",
        "cursor": {
          "ref": "542d6ca5-4cc5-430c-bc42-69e769766215",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f97173e2-7226-476a-b9b8-f9246f033f97"
        },
        "item": {
          "id": "8d525e29-113d-4a4e-8587-dd8be3de52f4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7af9c043-2119-4f72-8bb0-1d316c73381d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d525e29-113d-4a4e-8587-dd8be3de52f4",
        "cursor": {
          "ref": "542d6ca5-4cc5-430c-bc42-69e769766215",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f97173e2-7226-476a-b9b8-f9246f033f97"
        },
        "item": {
          "id": "8d525e29-113d-4a4e-8587-dd8be3de52f4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7af9c043-2119-4f72-8bb0-1d316c73381d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d525e29-113d-4a4e-8587-dd8be3de52f4",
        "cursor": {
          "ref": "542d6ca5-4cc5-430c-bc42-69e769766215",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "f97173e2-7226-476a-b9b8-f9246f033f97"
        },
        "item": {
          "id": "8d525e29-113d-4a4e-8587-dd8be3de52f4",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "7af9c043-2119-4f72-8bb0-1d316c73381d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b4def8-47d0-4fed-827d-f0983f283a1b",
        "cursor": {
          "ref": "2c77a1df-33d9-4f6e-8362-21afdd39b2c6",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "df0e6205-cdb7-4e8a-b2ff-14cacde7b813"
        },
        "item": {
          "id": "27b4def8-47d0-4fed-827d-f0983f283a1b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "963e67a8-21ad-4365-bb48-413886932e54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b4def8-47d0-4fed-827d-f0983f283a1b",
        "cursor": {
          "ref": "2c77a1df-33d9-4f6e-8362-21afdd39b2c6",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "df0e6205-cdb7-4e8a-b2ff-14cacde7b813"
        },
        "item": {
          "id": "27b4def8-47d0-4fed-827d-f0983f283a1b",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "963e67a8-21ad-4365-bb48-413886932e54",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb19992-1866-4531-8752-a01cf83c59ef",
        "cursor": {
          "ref": "fe455326-a0ec-4d67-be5d-1bed43c48583",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "5a9650c6-5d02-4224-bb3e-a24ead4b0cce"
        },
        "item": {
          "id": "abb19992-1866-4531-8752-a01cf83c59ef",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4b7e8d35-f8dd-4f8b-980d-2a748f526865",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb19992-1866-4531-8752-a01cf83c59ef",
        "cursor": {
          "ref": "fe455326-a0ec-4d67-be5d-1bed43c48583",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "5a9650c6-5d02-4224-bb3e-a24ead4b0cce"
        },
        "item": {
          "id": "abb19992-1866-4531-8752-a01cf83c59ef",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4b7e8d35-f8dd-4f8b-980d-2a748f526865",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 84,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}