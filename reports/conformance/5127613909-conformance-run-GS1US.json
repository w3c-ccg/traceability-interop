{
  "collection": {
    "info": {
      "_postman_id": "e9c7f21a-ef69-4217-8f40-0424834c0fdc",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "448b5743-a428-4f56-a622-9f9ebb46e9e8",
        "name": "Clear Cache",
        "item": [
          {
            "id": "0e7491d5-c4f8-424d-b7f1-519e3389a7a5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a23734ff-45ba-4462-9f17-8f2ec54ef83a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ea5f3b51-13a1-4273-900c-ca9140e69796"
                }
              }
            ]
          },
          {
            "id": "18f96919-8296-4960-805d-f1cc44595de9",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73bb8245-8f93-492f-ba56-747bd725c10a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "00b24af9-2a34-4b28-bd81-0e58aa6ef3ba"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7358fb4c-8ab7-4675-b95c-421871ef0834",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d790cc7d-471a-4793-9362-eaee50815b56",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b552500b-9fc5-457b-85b5-d8e4ebb1c8c5",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ae82e7c-e8d0-40d4-8024-7cc96d7183d1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f2b5e50-5ac8-4adc-a914-b2bb3be37644"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "df451ad8-83d6-4bfa-848b-2f389db931aa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "18e7304d-bd6d-41fc-9f82-be515e42b06d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "463b290d-9b1f-4afa-bae0-de5d4c5cbdb2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "de962117-d1eb-4aed-8083-3de743a8fa60"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b534dfcd-13db-474d-81dd-f39d771d9c17",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "a07cf934-4263-42a0-be43-75f1a66976d4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fbe79eb4-d0b7-4189-803b-ea44c07974c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db84407b-9b87-4eb6-bfc7-f2bba6485d3d"
            }
          }
        ]
      },
      {
        "id": "3200b166-723a-4986-b17a-a568bbbadc18",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ac7483f2-f714-472d-95d1-84aa60fff77d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "24dc509e-d7f2-4544-892a-cc066792f16a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a4b5fb3e-ecc3-4759-b222-889916e49813",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92ac702b-7003-4d4d-aaec-b4ee4793aa70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1f3c4cf-af10-49b8-8709-9ac02055ff7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a50af485-4213-48d9-bebf-e08cadd58067",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c83fa6-9a91-415d-83e5-7801eecb7c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d737c476-ca5a-4c6e-b92b-833ac9cc429c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ec98b4-c000-40fd-9178-6e51c51f37fe",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5b3f06-9a76-41d9-8fcc-562ea82fc812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0ddac153-b490-475c-b542-4c4c41e9f221"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d1f565d9-7938-4a62-babf-6210d8490ddf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "783ba126-e0a8-44e1-9304-8f4dac4dd8b7",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c8506c-bacc-4cd1-990a-73a74dde6a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0cb02182-661e-4be8-ac5c-88d642ffa28f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27228821-4ad8-4f5c-ab78-7cb7d5336c2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bcc8b69-dca4-4788-a844-5f5cb59b44c2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c5aa5036-3c46-4a8e-83c6-3a29d7bd8e63",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0f8b4fe4-7cb8-4ac6-b178-adcee7788bf0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b10413ea-ada3-440d-9b23-541e9f7606e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "2b822f0c-14fe-4cee-9918-f94e5c1df1c5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fab03dad-1505-4f30-b484-7fdf83dd1999",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "15ef75ee-d108-4e20-bd94-fd96cdcc2b3b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab880e7f-395b-410c-b877-4601e9225e1d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ec4f654f-e432-4fe2-9574-74c9299a519c"
            }
          }
        ]
      },
      {
        "id": "3bef4602-a35f-47ed-bc6d-f347f5cceda2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "4bd2568f-5426-46b9-a3e5-2b6ad98ffddc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4528bc9-3a11-476f-9ec4-e9d057c0815d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "566b57c7-a111-480e-85dc-8af07e91f039",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a68d5f67-66dd-4f00-8683-ee2f3677b198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2b8dc77-9c31-4ab0-8824-900e6996f732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d280b1b4-4e48-469a-8e42-cf73366321c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b93e4677-a0dd-411d-857a-93856ad48aad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0df7f51-284c-41d6-bcd8-2db6195264b1",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27eb6856-a21b-4667-b6f0-3381061453fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd706ba6-b738-4ced-bc41-595040e0612d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75e3d224-8c0e-4444-ba93-2a6ccea65d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2fb234a-507a-46d4-bb79-751510ec9cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e48464-5e2b-41e3-8996-02f782763453",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1959050-e20d-430f-b70b-6ee5659dcb39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "920a57bf-80f4-4b58-9dc2-02b656cab772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "575fb930-d608-4d48-8522-6796af5fb968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d6edcdd-237f-40ef-92c8-2a5ec7f6ef31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b6ea1a-a6e0-43d4-a8ce-0c307478a092",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b842bfb-2cc7-4aa0-8c95-cad44b1dfcf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a438356-b4ab-43c8-a365-151f5e83a2ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc99f10c-b68b-4406-9d4c-b0d9ba5ad954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b257e6ce-d6e2-4e38-b09a-bf0b240f6dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81277b10-8c1e-4700-b3f6-6cf808a47a51",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e89d7e-39d4-4da2-8962-f6c2168b4523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad8201e0-faa1-4608-98bf-ce93ee607526"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4559a0d-9a40-4a60-b900-e9c05902dcc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8ae0ce60-7366-4e04-82ad-4c14b33ed085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96b1cf6-c496-4fdb-b782-789a506adf0d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc49850-8316-4df5-acb4-12edbf144ada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf0f2b6-b588-4832-95cf-6e176b795e0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d31e730-aaa8-41ea-84b9-d7a238c91c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0fd18295-e41e-48ae-84d9-b442b841726e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933a87c9-647c-4f81-a4b4-276faefe48e5",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3681e382-b611-43e9-81e7-12f74c222586",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3bd1d47-2b01-493b-9d08-da3612d3b419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1922934-145e-4d41-9955-a95140b60aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1e1d4ad7-cea5-4b19-8be5-375abe731123"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd6786c2-3ad8-4001-bed9-bb6c18a5efd4",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "627d8130-e32d-4626-a53d-f5af98362eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bf57e20-13ad-4685-adf0-b95bbb7287af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b435dda-1c74-4e4d-915d-0a8afe295a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f793932c-5a86-46af-910e-3f73a39ce1cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "808ef0fc-6db5-4cca-88ea-24498cf7be73",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66478e45-4074-4cde-bd98-7070421ba03a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693f6fa6-1305-46e5-b96e-b6c8708c22ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b6958e-cf8f-4bec-b4e2-8a7f4b81e22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7dc3b1a3-3464-42d4-af09-fb53fa5951f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b420b660-73a6-4be7-b2d4-7456eb947405",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6640558-4e95-4d5e-ba0f-e2e9f9707c44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ecf72d4-ec17-4792-9465-9897232dfc0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bea8062-02d8-4be6-85bc-ec9602564eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbb3035f-edaa-47e8-9fdf-3a6c23181840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "403e0f5a-b342-4672-be54-b8dbe31d83a8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c071fff0-8dcf-4d3c-add9-5f9669b6f74a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a4143d-b136-4854-bab1-938be63fe473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f70b5b4-e5c7-4b3d-9aca-d9cfd02bde49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6df41b3a-3dc4-4a8e-99e9-0b98b1dac891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fa3f9d1-bebb-4238-8af6-acce9d3dd667",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ea1d41-10e3-490b-afdf-df728ccbce30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0736212-837d-425a-bf46-f344de122c42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8ee3eb-5d76-42b7-98c3-87485f28027d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d37c1f2-3c69-4855-ad8e-24d9c7d1fe1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f6d6437-536f-49ad-ba0f-71f629e0f15f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4282b6f0-e165-4993-9393-9e782c90ff8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "908d3bb4-8f43-4487-8420-2ce2680a5888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256a0301-7915-4b61-8a39-467cbe96a172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a65b3c4c-4148-487c-ba4a-00eee1dc9b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f51e8b-f6f6-4948-9b2d-45a938ba8012",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cc7d852-f421-4913-aab8-2dbcbb81bfc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98ebe095-758b-4b7f-9d0a-a2e4b4e5b84c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acfa6c61-817f-4e2c-9dbb-30c1bb1b649d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17b0eba7-230b-4e3a-8f12-da0998774c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ced6cf8-fa64-4450-b740-5e3409647f0b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b6bf30b-68f5-465b-80f4-2de1dc6e089f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "105d109b-71f8-4d2a-9208-29fe5e698375"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5764ae6-172f-4b67-a089-f4feb425ac06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc64b350-3390-4cdc-b1d4-a44d208b5a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a154b7-854c-4ea4-ad98-4df59e8565e5",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f469479-eedc-46ce-b31b-be7416a177fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114360a5-3b30-4526-8f6e-95af7b667631"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b88641-d992-45c2-92ce-87cccde3980a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2cfa87b4-06eb-4164-8b44-dead5fa982d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ec2563-f06f-44f8-8472-79fe0e4f9b78",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e80d4615-4ab3-4332-b2d6-044ca39a60f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11f2e939-7f22-41de-9e72-e9f228661c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad523c08-9bcb-4a95-bd8b-2f3f7aeceddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17c463ac-d144-4e45-a31b-b328ec3c20c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe65c741-40d8-4d68-a918-9339fae5c94e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7323982-170c-4044-8c69-e608f9dc42db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc905a69-7e30-4e30-9cba-87c8f454b35e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8ad2f6-efb0-40dd-ad65-67e58c2b1c0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "13e7d26c-b61a-43ae-935d-d4a4fc629be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57035abf-d30c-4e60-a9ce-39ce41408302",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ea7ba5-488c-4aac-95ad-a15daa9f3936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3988747f-651d-479b-b8cb-3ea6236cd27c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53af83a8-a27c-4f1b-aa33-840ed5f96266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a27d1323-a3ff-43e0-8ec8-e8989f5ee1f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b1d1d8f-23ee-42ac-94b8-c4ec11b1be2c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aea891b-b3f4-4692-ab71-9ba2e669d285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eebd40a3-38af-492a-9c09-c67c73b7e0af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3b43527-58bd-4d01-95a7-8068f717fded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac036e42-c423-423d-bb5d-c09eecc5866f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e58afd-e031-4b9b-8d49-591ab8251249",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a126ba8-a71d-4e58-a821-61dab353f31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3417cd0d-86ee-414b-b2f8-75e44c88e644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaacd668-ad6c-4e48-8faa-b5fa735ee890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b616fc18-7777-4553-8dd3-c32b3dc46091"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b53db292-2768-40f7-9fb6-76d9a252aa68",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "722f4061-b48a-496d-8c0d-2ea370c8c3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d175bc-f089-4d14-8728-606bee638880"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c7ee289-96bc-42ee-94c9-628e5dcc5fd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d76958c5-5e24-4fe9-8c63-134fad4d6d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78af8f62-537e-4aa3-bdc7-4c017d66ee82",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8ad395-8a7f-45b3-ad82-7a155aadd3f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a10ffbfe-002c-427a-a343-b6de0884b68a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d394707-cd06-4857-b260-57905c829d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0b4edb48-c9d6-44c5-974a-e5da6705a7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3ee6dd-8468-4b77-9ee9-f77259455668",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e79b71-0c2c-433a-9d47-27395e7e8924",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a95b2331-5dd0-47fa-a6a7-44eaab69726c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3661be62-3576-4f80-821e-3ab835f9267b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca39fcc9-e034-491c-b4df-3b0f00040562"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee11343-a144-48d1-bdf0-7e9c3e6c455f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a9ca07-a07c-4b8d-a7b1-499fd3f1481f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaa05842-f2b0-4dda-bf72-e153fddea84a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea834f4-8828-48c6-91fa-64ba5e912d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ced21ea2-39c9-4e04-8bf9-688aa49d50e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63dbb5f-7001-4ed7-b976-a9c044be821e",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac933a7-3c34-4574-80b0-19b1c57c9ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46f01a00-5bb1-4525-8d15-e5eef931bfe4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891a5599-e3af-42d6-94da-b88fa5b0327e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9195b81-49bd-453c-8c5f-4fb85fa0d078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bfbc13b-bb14-4381-937d-1b4575744811",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf0285c-a57b-46ac-be65-f4eac193e400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14b7ec2c-9b4a-4a12-a0be-8ac3e83cc17b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffd4568-5602-400f-afc7-0b9dd3c8670a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4db9aab2-2036-4cea-bd79-ff4a3c614abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84cde9d2-9d73-4e91-b879-17d9c97b246c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3bd408-96d5-479e-8279-423e973a8c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "457cbe13-7af7-4b3a-b5fe-30685ac44458"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b576910e-5f62-42c4-8d15-6e06afa09dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f9743d-a428-470b-b377-37e9f0826e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e682ef6-fabd-4a33-8f83-c4bd21638f57",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7810d2ec-f1b1-4e2d-a2bb-13581f2d8114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f27e4c16-c5f5-4db6-a54c-597919015040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f770ea82-8569-4204-9140-303a4c272488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "00c8a97b-1c32-4202-a0d8-aed10a7a1b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89cba3f5-5cf5-4f58-b02d-8884dcf59b58",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d45ab304-747f-422c-b04c-705695bd520d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c1cc352-d3dd-4c6f-86e7-530803b2c09c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae1e9742-70f1-4434-979e-829044b59964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b65fe27a-58f9-479c-a5eb-3a540827651c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2c4653-ce26-4f07-afcb-88762aa96087",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "975e27dc-47bb-4539-bbe9-7034fe1174e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f566ea-e55e-45a3-8da2-1c2ba44672c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4b30fb-820f-48b0-aa07-a1cd56b40091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a9c445e-9313-4215-af66-4350888a2c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b113bb-75f1-417a-bcbc-607ffdffcc40",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8d90f45-e590-40ce-958c-154a631e3b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98e8aaa3-7fe0-448e-b8ca-401f3c617f3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa72b2c-6152-4ec9-bcdc-8810d12a23c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74969a7e-af0c-4311-8c37-ec969d7ede0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a487dd0b-f486-4bf1-ac1f-f08c157e39a5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46933876-b174-4e2a-a91b-e7d9671bf5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e68bf8b3-1eb4-454e-b7d9-d3098975bc4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f13fe6-d7a7-47f0-8a07-e158592cbb2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0cc49b6-5146-4ce3-910b-90279b1c7088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e9f3d0-4eb6-48f0-8ea6-b9f8d521e39b",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c017071-7d3c-407b-8a4a-e9fdd2427b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44949ae4-8f8b-4f36-84cd-75db58c94f86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5200ed82-4404-4a0e-9684-1fd8b42fecb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53186cb5-7bcd-41c5-a732-63f5b9203c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f46a420-6663-48c2-9620-0fc9ab5d6bb3",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba1a720-e08b-44b2-a7bb-ed66403edc5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1978ce7b-245a-46b4-bec7-e3a511104a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1f0d62-a3f6-4f36-bdf6-33de75a386ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8cad5b-1043-46be-852b-24592faa6af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "088c0bae-2cdf-4a1b-b235-a23631a575ac",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1a09033-a31c-4d1a-be3d-46e14da0383f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15f7e41e-2f6e-48e3-a630-aeca1c662890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "591122b3-31aa-4541-8538-0dc96eb843ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "55fc0553-501a-43d4-be43-124902481f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c599ee-f346-4b68-a772-aa67eebf2070",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfdd257-f5a2-4a07-bca5-70b30da1f965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f609cae4-8464-4522-a5c9-45123f30ca03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c222ba9-8194-482a-8112-d2c0ba1d86af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f97d6e58-f62c-482f-a83c-22e7e0b6f9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca44ebad-e6a1-48b7-af0b-6b657bed77f3",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0410f9fb-b3e2-4fe3-aedb-3be3eeca5ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a827364-e211-4efc-a176-8b92b2bdc1e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "281eedf5-e54c-4dec-99bf-516acabd1b5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2191bdd2-744a-4e06-b618-d8b14d026dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74eda372-f097-4389-b8ec-76fb6d874a86",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d82323-7f13-4ef1-a62e-8f57f92c5329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c45cae7-d2e8-42e5-a775-32312eb70bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e231288f-f861-4ac5-baa5-4f64952e5b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "53d8c7e8-6cdd-45bc-bdc4-575dcad09c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dcab1d8-7f1e-4497-9aef-c1f4374a47e6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "235f5c2b-79d3-40d8-a8c6-80e4d83cbcc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "735d5f22-6cce-4d60-a513-6144c07199e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6770e7-ec95-4f6d-8f86-67d83abbc0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ebb300-730f-47c8-8771-1c33844b36c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37fa7aa-38a3-4300-9490-45b314ac8937",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7cdd69a-269f-466a-a842-e628994bee0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e0d7296-6c95-4401-befc-d958b06b3900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2047d606-e65c-4b74-8d2f-e35eff4cdad8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "804f6ec9-3bb4-4471-a3fc-809a4ac78026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ded3b82-ea46-48a4-ae59-db8afcb35835",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba69b8f-4098-44a8-8b43-6ebc6e159757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85243131-f46b-4f1a-bcc8-f964e96cc18d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2034e1-0811-4314-8ba8-2c3fcecd2ece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "31cf58c5-e01f-4f15-9cca-acc6e72f9da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b03a4c7-777c-4895-a3ee-fc48abe98cca",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad20bded-8cf6-417d-8222-6c9c2477bdd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9dea551-f585-410c-af47-807875c08e0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4d763d2-b7f7-453b-a957-0859ea3fe611",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a5e49504-b05f-4234-9550-d67198a37d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f0d94b1-67c2-4d50-8c8a-2acd9dd636ed",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13cf584-de60-4d8a-9657-f1e5fef4b4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "808070d7-0881-4081-9000-10e86ca093e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c27a2e5-62fa-4b9a-86f7-4970f408e13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "74339f89-cc7b-4d71-836f-2d3caa3b17cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae06a5b-3480-4b6f-808a-b6783a2aa490",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750f694d-f889-4cda-a3ea-9a0c0e5ebcb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91882643-3428-4af8-b761-2e039894962f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4f2617-7016-4517-8590-a1b3ae4a9a4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5928ffd-367a-44e4-81d3-ab84992f0ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c09bff3-0786-4dfa-9260-18145b17182c",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e9d496c-659e-486d-b47f-d80da623b79c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b034aa69-00dd-4950-bddf-d9bb4171bc2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ea7b04-3904-4083-b891-d7ab7aeb1f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f4bfff2-43b2-491f-b2e4-15eabb8ce934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b292e8b-a9c4-4bd0-ac17-214d44af4668",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8eaa4c-719a-482a-9a7a-4bdf76c06c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "417d852b-762f-4c89-a411-15e284f28123"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea727bc-54a1-452d-abb2-54beca06d2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7b4cf40-36eb-40b7-b20c-db0ff967d572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c75e5b-f9d2-4965-9d1b-ab4f316a7711",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab87c7cd-f00b-4fdd-8921-cab2683cc264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd0c0506-a355-4949-b689-9933ec55fff4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1cd56b4-ffbc-4fc8-841e-a9486b452e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "711278f1-abc8-4034-a5e1-5707b027f54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d916388-15db-4b88-90a3-906572f2356e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a95d7967-9e13-489d-a398-92fa37c75c02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f3ce32b-30bb-449e-a528-07e4cf70403e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4b5ead-85c0-4a3a-ad27-34a2af7118d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "754009df-21a3-4ed6-9fcd-69d2aef1d00c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f926f789-5491-46e4-a22a-b83bb83f63de",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0191d1cb-007d-4aad-b004-d817f915ab00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f088045-497c-4d28-9af5-3d781b441ed8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b572f9c-3327-4fb0-9b46-430d2d6c43ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "603bc808-ccc2-4818-b396-66e92d48c05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d509b2e-f12b-4949-9552-7daabdaa7cd9",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cac9d06-5ce7-4c53-9420-57aacf345056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8190ce5-b455-411d-8e6f-d7581350c981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0871728e-d03b-44e1-a134-a7c0352e60bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "aab21d33-7e3c-4b0f-a1cf-ced44cd4fafb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c23c491-fe24-4df1-a608-43bb43d9dfb5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4513dedb-972c-47b4-be0f-c2427ab14c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "044c0c37-43ad-441b-85f4-f9b3dd898031"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a429e22-b1fa-4c34-9c39-2067168912a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca8d36f5-1d26-44e9-b0c9-7eacebe6449a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64679ad9-ad03-45d4-85a7-cbda5ca67724",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "341d172d-8a83-413d-9358-bb2f3c46b0c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1680e6a7-2bf7-4d65-906f-62dad68a6b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf1a6e1-0cf6-4cab-9c77-d0f0184f680e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a605e681-d621-457e-aa4b-64624ce7b798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec29a997-c39e-48ab-8e95-76961334219d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf88a30b-1e02-4239-91a0-de2782924225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0242cfa-11b4-47df-965e-cdf321c4f145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20368ad-3c14-4aee-84c1-6dc8f5c76003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1cff1c8-c95b-40f4-90d5-b552642d6f5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496f9134-dc7c-4890-b2c5-558b44fc2468",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5021be1b-59c0-46a6-bee2-f2841efbf8e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11cbe052-25f3-4661-add6-9d9f5a98f2ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19836728-9765-40ed-9e47-e3484cc63340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7070ed6-c863-4e01-a643-f96beabfe994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1459144-17c7-4ed9-b1fb-05259744ce1e",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f42659-a729-470f-8e15-5f2a6c52b45b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc9194ec-c059-4066-a8db-0937adcec9b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfa22ec-0b65-4dba-a2c3-d31d66fd513d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a6118915-0085-43a9-b665-95c9ebbcc3be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bbcd5d2-cf79-4ff8-9511-7ae70cb686cc",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7001bd87-bb55-46b7-9787-0b1368bc0985",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e8b395d-a086-4394-823d-35f8ab5effb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac7bb64-172f-44ac-95a8-dedc15ecf25e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc8e756c-e762-44ce-a0eb-a2c74ecb198a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d27327c-4770-4803-a0e1-8b19222c01f4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8df5a37b-8b21-49f2-9c03-db2ce497ee6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a35f3573-0907-4f24-8403-b76f1791717e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58bab490-4aa8-43aa-9744-3978c89ad52d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0cc255c7-a622-4679-beaa-748ec530be0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e750ab42-7199-4e9f-aeeb-4756ec84673f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee33a74c-fe7c-40b4-8b25-44c9c8bf50c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15dd3628-c45f-449d-8b76-04b7c4d5133e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df5793a6-e4b8-4d5a-9884-693bbcb0b715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "750715e3-d7cc-415c-803e-026316b77265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3cedb60-0387-4180-9e13-a0223dde7382",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ff46d83-bed1-4fd5-954b-7abd95d16763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0be5bcf7-07cb-417f-9a35-9ff279c1dcfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8c8df7-053a-4bba-98dd-2dc1cc4236ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5268ba9d-2fc7-4969-8983-5a7989e6a0ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2a80cb-314f-4399-9718-9fd8952ff2c1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d30e9140-f2c3-43e3-a552-c5f3e812134c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b232fdef-46f3-4be3-a3bf-5f297ec81650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40f0745d-06d9-4d2c-9def-d65b1995d915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "900decd6-319b-450f-9fa5-29596a9fe98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17e8868-1445-4239-b372-835bfb2e8500",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8754b1fe-e265-497f-b6c4-1d1ea7c2f400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe3708c2-de62-4762-ab62-835d0a1a4c64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a476ca3b-62bc-4f56-8f5c-0c4191b09824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "869e2656-8b92-45bc-8626-dededebb687d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d27f39-051e-4bf6-892f-8eeb0f8826b9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a282eeb7-04d6-470a-88dc-889942562ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29a727b3-8ed3-4fb7-b996-4c61a2878ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67aeebc-5b62-4b7e-89e1-7ba3f7abab9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8b3024b-738d-4107-b596-7a0841e1445d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eae15c4-7714-488a-b8ef-1dff55db0d67",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c3a0f9-4b82-4504-8af7-47c9b9a042ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeafc3b6-4f32-4764-a2b8-71c9cb449d88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f39bfd2d-6fdf-4148-ae47-f1f3fb430091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d2b862f-b16f-4667-9172-b351e0c579d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44d99417-9795-4246-9295-3f978d03872e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db8e37b-ba3d-49aa-8718-78d6c5fb1cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e291206-4a70-4085-a7a3-5850c290d29f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bd51465-da03-423d-bc9c-f4509d7347b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2c32e6e-7ed9-4ccb-a518-3b7b20d2608e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3d30ff-6b4c-4911-b7c0-40704672eab2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec3401e0-d716-4460-ac8d-2d1e597fcdc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bca07ee3-dcde-4f26-86ee-48d115597c28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae45d78b-5a78-4f74-b192-7dea0e89be0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "128b1a01-1b28-47a4-89ab-9bd4a6225a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f3b88d-ed10-47b4-a143-239632b1fb43",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5010b1fb-7816-4823-bf4c-4ed795b9ed53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23846490-d14a-4cc1-a653-96ed932a2210"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a20aa82-070c-4a70-8879-db0bafe5fcf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0aff55a9-e0bb-48fd-8258-18eed404a52e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aa8e0f9-b50f-4bd0-9cf0-f570e1ab0b69",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c511bb-2114-4402-ad6a-eef5cc39845d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97f77daf-cdc8-4362-91e5-9a141f244f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658db6b3-0f4b-4c7a-a461-d49e393a8f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccb46283-71d6-4d56-8423-1f9796073db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60870613-19c1-4058-bc47-f92dd875f044",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57cc961f-47a0-422e-a2c2-26fbc0513d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7b8029d-bf69-43f9-a8ca-0e1bead50db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d788d67c-6938-4c78-aee7-e5cfc2d555b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c691cefd-ecd9-479d-8d72-1cf2f8c5f25f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fcfbefd-9f1d-4ddf-b658-90e96bb71a80",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c83eb51-fbb4-42ff-bc1c-254dc5e0e37d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b50fd25-e49b-43ad-91a3-3fc284093bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f873b059-25ed-49d8-83de-0c7651d9ff61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c948d20-76ea-4bac-9113-0146167fdfd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0605b16c-b795-4b10-a5b1-e42b79256add",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc0d62e-e6d8-42fe-9340-a7d2688ea1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd454b9-e86a-4b78-80d2-5480b6af4d29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c934c2a6-fd45-4833-9a54-3f0b3935410f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c10f50a-7f7d-4a34-8ee2-485034868733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d33227b4-7864-49df-90ac-bfa7d9a498e9",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1747006d-c1b3-455f-b8b4-89024016bee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89ed62a1-ef6b-460b-a670-d1749e9a7257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401b20b9-4639-4cfd-88dd-bf12568d6905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2744d8d-0095-46fc-967d-d7f04098edb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3101aa-3a24-4252-ae82-843c94f621e7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d9e8f1-7e76-4477-ad7b-10a5e5c830f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c580385e-d130-45f5-89b0-8df1e3a0dcca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4fea69c-bf34-40f0-b934-cd4f03e3b70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f364f55-f90d-4f37-a6d6-c1efaf9e741a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d991850e-9946-4a92-9d57-a7ea58d9ff66",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71cf98a4-4208-492f-ba0c-bd16a6495203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48cebf82-b75c-4b2a-883d-fa7dbe7f90ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad2d2296-9882-46db-a917-a6e25cb42158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d699d48-85dc-4af7-bc3b-9b9cfe2a65aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eba3836-04e3-4eae-b081-035228fe4d95",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23df12c6-c1de-4390-8978-cb550f950783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ad60370-e4c7-4675-a688-9563c993b369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d275adf-a4e5-4d3f-ac74-f67b382386da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "02a09c3f-9afb-47b2-ad99-83480cfef287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458a7326-c609-45c6-bc22-de86153f683c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbd96eec-6a01-43d7-ad47-3fa3d424af46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "125d9e12-c009-4900-bf30-ae9d4f4490d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472d016f-8eb2-4fad-a035-7ea9acee2b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7477e7d-28e2-4c56-95ef-a69620c6bb19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9300f0f9-1471-432e-be09-496283b3f57b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6640ea94-0f08-4503-883a-bc2ba00b7a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26d24632-3fd2-4a2c-b0f5-c5af8f094e64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7789e556-15e9-4b36-a44e-3ed1490074c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30ffd340-faf9-4113-a1bc-a3414dfe94c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e51aae-78ca-4ec1-9dcb-206e8384b272",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c38088-67bb-4960-b7fc-e01c1984ea07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42827cbf-1f67-4d5b-b2b2-17543bd1adfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a45652-fdc8-44ba-88a9-9767791c7c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea84de49-cb4f-48d4-b889-7fe06067a1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333e3ea1-3468-4f96-a1e5-fca4163e17d9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d58d59-33c9-4050-bb9e-dc77b82fd3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14869209-a602-4b05-ab8b-e1c8eccf23f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86c98ecb-8c35-4e9f-b2b1-093833046bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7e3e7d-94c6-42e0-aea2-df49710b517c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a651057-e806-42c6-9661-59f351b4f63f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5dfc5b-298b-4e59-9309-e87f4d816be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c54aadae-6e74-4136-a7fd-d867ddf7dbb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b14eee6-429b-458a-8706-83dcf4f7967a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b0feec87-a2af-41b9-98b3-1eee39e31afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1824685-c71b-4086-aaf7-1560fcc7ab2a",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd148a2-f86b-4f12-938a-5777842d03df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab17ad8a-028a-4b80-9d04-246b22f3c3b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4766908b-7d85-439c-a903-7421dd3ced38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c92083ab-bb7c-4f6b-ac0c-923d1db2a85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "818dbe7a-1f84-40bb-9724-5f63220fd49b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8529b922-ea62-4d64-8515-890781bcef2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da99045-f028-4308-9df0-94e230cc107f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3a59141-12f1-44d0-a9ed-0992dcf37db6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48b206f8-57e1-4ab2-85ce-161f34e071dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ac51863-2e58-4d6e-a563-6b8c5cc36ed4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e544b6d-039f-49ea-beb7-5c9c23a8e22a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff94ae68-82de-49ab-8ec1-caeb81fe4fea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "370d1e3f-994c-404f-ae2c-2184cee8ad53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed231a16-a94e-4619-9105-60249ec001c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c29f757f-e3dc-4692-9b48-a78a21380a15",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "376fd733-e858-4989-8658-5753e1ca289f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ee62781-5abe-4147-b582-d585207a1e04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224a24de-fa24-4de0-b39f-c393abd1921b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f756a40-793b-443b-9d8b-38625fd97a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ecde92-5ca0-4e5f-bcfc-580bd149adfb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38e9c975-aaf7-4713-82ae-b64792f642d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20883524-bf32-4035-8004-5ec2b953731d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16c483f9-4264-44cf-97ed-c62cc9bfdb05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a0b648d0-75b6-49ba-92f4-004a4b948aa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5e5c52a-86c2-4122-a883-894b702faa38",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f690c5ae-44db-4013-b959-5e7b4a51adf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb4b4d5-711d-42f4-9c94-58a7d64921bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ecc180f-5685-4c87-bef1-ed71596081cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "73097d99-a0d4-45f9-880f-edddc295d6c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce972be-c288-4d0d-81e9-b03506a7e127",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "959ed6eb-24a4-4eb5-a2fe-9c3bdc8d1f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bec324ee-35a8-4857-9c2b-22e83447353a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d04bc80-e207-4b64-8a2b-ee9b1329d2b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "16fa75d2-5e82-44df-ae73-273c74c1918a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850eead8-4ecd-4df6-b8d2-39d42ee2c5fa",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0598004c-d225-46ef-a1c6-6cf8d82ed96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1264b2c0-5616-4a63-b76b-4ea10b36be5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc1d834-7a42-4684-a35b-73e6fd598792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "adcae105-abce-4884-bbe4-ccc321bd69f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837c4600-294b-4712-9488-aac134cf00d2",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f12582b-b7bd-4d68-82ad-62f134a59927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50d11ed0-8960-49b3-89e1-b78752e40cf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c8391e3-5613-47be-b1ca-f6c2cbb622cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "572a62b9-672d-46d8-9d51-1c8f415ae05d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf20a9a-8efa-4ab5-a715-705b4623b2a9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52eb060-7df3-46e8-a3e1-30ce5a90dd94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97e920d7-377f-46ad-a070-19650eca8464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86f2249b-bfd1-491a-b968-e0ad51a28698",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "98f2b098-9585-434e-a03d-ca1c4606857e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f495d517-7d36-4773-b506-db0e411917bb",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b348e5-1049-4532-81ee-f36fa1f084b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b47fddc-4d56-41a1-ad65-0a741ce420ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260fbb90-6ef3-4d27-8bcb-af6c14fdc0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee7efc86-1331-4883-afb3-daa393c47a77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd7d9586-0cd1-4401-8a99-583d558ef39c",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "842e27f6-9fd3-415d-90c1-15454fb1c5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e55c34ca-9ee6-4ba1-b462-15e2f831257f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e283a8-e818-4bb5-ba99-34116e978024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "017ae1c1-4299-4873-a4a5-67228492655c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a0a515e4-10b3-46a2-832f-0bf7ce225d10",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "23328a0a-6853-43ed-93a7-56fe1db43fe2",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d933e0-3e10-451d-8416-5de9f952ee9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47dfb09f-3f9e-42f8-8b99-36329cb21608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db0d00c4-0fd4-4904-afd6-948cc26c2119",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "58fc0037-df74-496c-8c03-076a193b64ab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ced82de0-fc66-4b89-946a-ca6e71ac6e09",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0020b6f6-b889-48cd-9ece-acc3acb4eb25"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ab53d9da-e920-4cb4-b9b2-92e15fe222b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12ed9ca9-d878-465d-936f-4372e74287b8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f9494900-ac8e-406d-b7c4-96aeb0533bc1",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7737796e-30f0-4dce-89c8-3362be85d825"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a8c8f460-e011-4919-a44d-39d55b05a843",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "250d9015-dcaa-4bfa-a05f-32861e936459"
                }
              }
            ]
          },
          {
            "id": "05d82723-176f-47f8-abb8-4c99f023affc",
            "name": "Positive Testing",
            "item": [
              {
                "id": "da1718ba-70fe-425f-8e09-13d3ca63b340",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6313dfea-83bd-443a-b064-d9e1a9d3b577",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "781e6c40-8f3f-4ec5-a4e5-04357dee33e2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b968ea8a-dbfe-4928-8fd2-7e85d552465d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "04e25247-0a9a-4238-882b-1563142ef10b"
                    }
                  }
                ]
              },
              {
                "id": "11f08279-391c-446f-a79b-c750e3b167e9",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4fc6c1e-3110-40a0-a566-616a4d8aaf4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "173a7c83-e6eb-4020-a3b2-6d0c00f398e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8116e50-4285-4b51-99e8-d5ce641ef386",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e6c84c4c-7ff1-4734-9975-470bcbc6ad70"
                    }
                  }
                ]
              },
              {
                "id": "7c065e85-b3dd-44e0-b6ca-d1745ccf8dc8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2d7075c-f4aa-4c69-a52b-52d8e631c246",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fe1cce3f-8149-4968-a259-9398bbab54fe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "24953a94-bed4-4f0f-ba50-8cbab9fa55f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "32256e55-fc13-4fb8-b293-b7bb9dd4704e"
                    }
                  }
                ]
              },
              {
                "id": "ee17ff88-bd12-4590-bc93-0b896ebb4bbc",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7576a493-b985-4b5c-a3b0-4f78efe33f10",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "79f56680-b8bd-48a0-bde0-b533f129877e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e395cb80-7dfe-46eb-841d-4aded4a7874d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "c631bc7a-67cd-4c0b-96cc-21e4a9429dc7"
                    }
                  }
                ]
              },
              {
                "id": "66186843-2402-4a56-8759-2e69750ca1e2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9010a09f-ad4b-4b86-9637-1f568639beae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3991cfde-87a5-4e42-909f-24e5b50c0eb0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4612c4e6-d30c-461c-bedc-c6becd75cea3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e62c38f4-bc31-4904-9350-fc691394093c"
                    }
                  }
                ]
              },
              {
                "id": "ab5f96e5-4cad-40e6-b150-d848dd765cb4",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f3026d50-6f08-47fb-a51d-ae0d7e50a822",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "294dcdf5-9ceb-45bf-81c3-6ae88d0011d8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e03a3b88-8174-4dd8-8bf3-90efafc65d67",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4921cb55-b72e-451c-8199-64cd7f8d1736"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73bddf4b-d10c-4066-a091-0f929ec7fc7e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a511d118-1f6d-4d2d-9d1b-5a7ff03fde5e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bc9491bf-8dfd-46b7-b779-74c53c1b9ad8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6da4f899-8fd8-4503-a270-8474413ee467"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3da7f1ee-62d1-4be0-b9bd-aeeef94e011c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "d3e2e04c-b077-4d38-8a3d-8bef021885c2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8d33457e-be59-4c41-bf2b-98290d4f89b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "03cc9ffa-f8d5-4c7e-b00f-c4a4521bbd79"
            }
          }
        ]
      },
      {
        "id": "3725d33d-71de-4eb7-b654-1011ceca5afe",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "33a8640e-906d-4796-94a9-3df476159608",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b421b07b-74f7-4788-bc49-6a392883dbdc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7e4d2b1b-b473-42fb-94fb-436ce80c7867",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e5c7cd-1062-4386-9f77-75dff50aae1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2edea939-d046-48b1-bc1c-378afa27d4dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cfcf4c5-42e6-49f9-928c-139899bc5577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f4eaf51-f11a-4bcd-8fd7-1c49b3e47f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747eb661-479f-4f1e-a39c-e2837d7bc830",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "122360b7-5c28-4082-b4e9-479e35105e2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b14a464d-1fdd-4261-aa11-1a864ab93d82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a25059-7250-43da-8584-cc7a779d9ad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d421c891-b1b6-4062-95d6-d0b90acf5055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f972da-f985-489e-81b9-56c7d7ee825c",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4967ea8b-96a2-4e43-a33c-9453a8045d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "346922a3-8296-4759-a62d-404ff4e9e429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ed0c53-3716-4d02-ad85-36f308ea7f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8066a6ba-a4f2-42fe-aab4-c3369b48c767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4f7d09-5e66-43c6-95e1-32a5f7b13790",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4be67fa-1d17-4fb0-a3d2-c70f188b6760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc76415-eefd-4138-a061-de3fc11f0b7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d9a9353-5864-4c36-b118-f2dfb6456752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90951ed2-af90-46a8-bd96-5c6fd35c9d98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181c3745-45d7-4969-a5d2-90ee9fa22748",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3aa59b0-5d21-4c2b-a258-1f3ef23d2013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38503b9f-29c6-4a2a-8eb6-d3583fcc9e9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f4288d-7c34-4100-a3b3-2804d4fb679b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2bc70aec-272b-46ff-843c-b1e0282549f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75136259-d6b5-4dc2-82a9-bbbbade097fc",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0821d98c-22b3-46c7-a5eb-16f689bb5d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5545b68d-fb6e-43c9-a424-10c80e5d6091"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582fe3b0-fc60-47fe-8b75-3f1739dcafd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc1b2f0a-a01c-4e0a-ac82-a4ee94f22a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46dd925-a839-43b5-8b0b-a1ecff0f9fce",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ddabbfb-dff3-46d7-ac65-58dc333eb1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0d129a-1d0e-4196-b279-1e8d4eee814b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5529da7-06fe-4422-ae91-3512a514d258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "29f13052-7540-436a-9be5-250c58bd2f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72080fe0-609d-4f05-bcae-56a7f1bcf252",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaed4233-93f6-4f3a-a039-2c9b6a11789a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc9d74e-617c-4f56-ad65-04cd41036eeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68a08c1-d3ed-4b71-8e19-342809bf0a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ead604f8-f0d6-4668-bb58-ae5c28f4a7a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d04e39f-f5cc-40d9-9463-625ae6af2cac",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ce203e7-94f4-47de-8695-b7c5e134bbba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3efa9f3-7001-41a6-81b9-733badc65f55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b376aa-8e27-4a1e-8177-4b941651a9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cde5eb5e-a3ba-4605-b2df-1bba50cecc9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88fd3cea-10f6-4741-b7dd-9d115954d652",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0c0643-d72a-40fd-b47f-c3e7bebd918c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6727d0f8-e32a-4d10-9aa9-3c764e9976df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db4383da-920f-4979-bb0d-bd5ef1e98eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e90b7c31-ddbb-431c-a5ba-69eaeb954922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b20b11-6c7f-4335-8308-8eef34412539",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9c6331-1406-4a68-9b92-68137f436e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f8f488-88f7-4ae7-b0cb-f94ecad751dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cf1a930-223e-45db-9ade-c7175fa36056",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4b4d629d-69a0-4f8d-a7d7-9d84bb849cc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a897b4b0-6117-4d01-9056-d96cb7c056ba",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36467447-7af1-4ee6-9d9e-ec89f9860bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81127fbf-a712-423e-98b7-67b1f43c7aa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4534990f-ac5f-4b5e-bc6e-670a8d9b7a9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a8b1a6c2-5118-4c97-bffa-321cd0ffeeee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "506bec54-ea97-464a-b336-88b4d5116cda",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd762b37-cacd-40c3-ad40-2e1741085a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5b09c3b-ab26-4241-9e57-0d0a4e1b15a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e268feca-24ea-445e-96a6-03ce5b42657f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ace63347-35cb-44e0-bc7a-e79eaf8077f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35c5c10-7aac-4dda-9252-e19660b210cc",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2de5844-3fda-48ab-822d-637a0afdbdd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f7ad0f-b3eb-4ee4-b8e7-83f5892824e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa18bd9c-104e-4f6e-acf9-00ba7491775b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "02b9a890-3aed-4a72-89bf-47f756803364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c3a140e-e846-4d39-93a2-2c1d51f12fc9",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7695a6a-ecf4-4763-9d2d-ad0c56f953b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f776e0d-9c4c-43f6-ab86-71aca1e4b6b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "056a5973-d392-472f-81e8-d49123d8abae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7bd0333-12ea-4d7c-a0d8-2e5a68284395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dafcf71-6a9a-44ca-8d83-cfcc768173f2",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "052fb76b-7b79-4940-99a2-7a361240ff09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84c36519-cb6a-4f26-8832-f28bf81db851"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92fd007f-6478-4077-b5fa-5ac486e5fd47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "056543ba-2c40-4a03-9284-07017f635e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d7b5ab-4438-4cd8-b725-7a8753b73e79",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d93fb9-a659-4408-9714-75e62916712c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57a2af9e-1517-4067-82f2-35014b1288a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ffe22d-781a-408d-b88b-c2c89bb8f6e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "309993f5-aaf6-4113-a5b7-15b87e2c5532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572efdca-f696-4ee4-ac5d-f14c1c39ea14",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49538820-bb84-4db2-b0e4-51b4c4288370",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fceae02b-7933-4a04-982a-828623f13f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b926efa5-125f-452a-9792-a532634a35e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e3db4c1-eefd-46be-a936-e99fe164048f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983a4046-7e0a-46e5-9a08-c9d0fb29b4c3",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7dbfd42-45b6-4c00-ba97-4059d44296b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18af0512-2d47-469c-a97e-169d4aa1ab33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9af99eed-4353-4af1-af1d-355ac99279e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e4980da-cf8d-4519-ab37-c79f907705de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f59a5b35-5a3d-4f94-a9ca-bccf28bad7d5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a02707-a1f4-40c8-8d32-6fd5b1ff3950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f404f02b-5700-45bc-9204-3f65ff2fce27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76b6e778-34d6-44b2-b8c2-c37ab179cb31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b154cda-a625-48a1-b6d1-48e22bb840f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5093ac41-a7bf-498c-bde3-d55ad19bd2a6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9140c5d-1582-463c-b807-0e05f7fc9575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "282020f6-94c7-4dae-82e1-9b281bb5d0af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d85f4fe-80c2-470c-8178-f6ba847ae853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f580fca5-715d-416d-a17c-60b164c11f0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de1fe7e-9446-40b7-9545-2b96cbc40674",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77fe312f-d340-4311-8275-868bc9bff3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fb9beb4-f562-43f9-b867-aeb8e51368d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0531c9e8-0100-4833-a874-602ddf4276a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43acbea8-cd4c-4e25-8fba-99c659ae9024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9533ba29-fab1-44ea-8016-b376ace425e6",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0f1c22-2363-46f1-aff9-37623b182ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32224dd1-a0c5-40b9-be07-f203c4d2cf01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86882b93-1aeb-4325-8df2-a748d843a54e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b1e07eb-c523-4ae2-ae0b-1ab0027b6dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4905307a-e932-4db1-91ae-db8cf5c922c5",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3825a9f-2ca3-4af9-bcb2-4b77f0472b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e4de1f8-9c28-450b-b538-339738725c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f438719-f97c-4e9b-896d-d4ce4929bbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8db85e64-1f66-4ac2-84ed-cf0ebb563927"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796f4dc2-5004-477b-b80f-9adabc41d1ab",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e85aa79-2a0a-4a5d-afe6-17dfc7376d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9ef4802-37a9-45b7-9944-291974168ae1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "085d6979-7de7-4310-acc8-c97c91a598c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66e508ec-cc83-4628-a6fa-2ac23e9af47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89230ea0-3244-410c-a9df-f4167e6e8177",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a980a05-08ab-477a-8106-807ae8df0ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59221009-b0c4-4e1b-ac86-491a37818a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b0e350-9762-4c67-823c-35e79681a47a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c76269fa-8eba-4ea5-a28f-862538cecbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4ca588-689b-4339-9384-4c703f05cf9a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46360669-3c1d-49fe-9d20-3af35e3a3ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c327e735-61e3-4cd6-b9e2-1e8ab1795264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6c1958-8231-403f-9013-7a70d85479c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "579fe6c7-1a90-4716-b929-9d86d3938ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3bff0a-6cdf-43f4-8f30-afc2c5353a10",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bec3f6f-f972-490a-8085-c6ebb5e393ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c516420-39db-4df7-9b7e-c560ac5b48f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fc093da-8ddb-4305-bcea-e8113cfab1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c50b0b-a4d8-4625-a234-fce26ebce5ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b18d958b-8bf0-44b0-bb64-15b0741b2a35",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d81463-b69e-40ff-a4c5-f7bba5f03e3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14e68500-8f77-4371-a273-d835ef87375d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22338ef3-f95b-4099-b29f-4a976bf0feb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad013ecf-0122-4266-8b84-8bae2ef71ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a1103d-c9a6-46ea-86d9-d2b9480f2adf",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22919c7-d0e6-4df1-8e18-e54debb524c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "903be5a2-9f7e-44bf-921d-6c7f6ca7696e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae95d446-89ce-4b2e-b8b9-a485173dfcb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ba9a2ca-5156-47b8-8c3a-491faa9b72b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ef984d2-f502-4d14-81aa-2e6fe4445090",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "968ae6a4-1bd3-493a-a812-de92c992970a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f9d61a4-1e17-4c72-ae87-b66003e1d7cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabf812d-e6cb-43a7-be94-7c4426e807dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d350d6ee-e31a-415e-9bd4-006b50033eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4c612c-f57d-43d7-9a57-e7358e4c76c5",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f3acf4-aac3-4721-9647-7e7d12580211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7dbda3e1-da12-46bb-9ec1-235ad9d4c539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86ef04d7-2eb0-4065-9f79-308f87fbdb31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf8daea-eb5a-4e3b-8591-90744ac93df5"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "040e9c45-3835-4061-bcad-44b29d1ede85",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0ac9263b-8bcc-484e-a609-edcfc7dbad99",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0911c558-731c-4159-b8b9-f4d67b8ddcb9",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "29a9a387-d057-46c6-853c-871da8ec893a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "794c144f-7331-4c65-8d88-f5f9e1f671b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7c7121c3-4e7a-4c0b-8640-3ed6af26d59b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18621f11-8a2d-4fff-b3ff-037fd9e9689b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "beeef314-e1d6-43c0-b7a0-70163cfd96c3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "98de9e19-e66c-4e81-93af-42aba240ccd5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec9649dc-6e9a-4a6a-832c-556bd3f9c066"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "01dac135-2e4b-4608-8db0-fc4e50eeefe4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "42b1524e-b61e-4dc8-9e74-5d30f48faf49"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "801ec673-74f6-442e-b47d-d19924318a4a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e446928-7e37-495e-a654-3a61709a8cf5"
            }
          }
        ]
      },
      {
        "id": "15663a28-d73f-4cff-ad96-93a4c0b7ae63",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "ca01970b-6baf-4373-85e8-c1e8c92b27c7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21114f76-7f69-483a-84b4-bdf4d074d68d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "84934492-6d15-4574-b5a8-e7f55d36eac4",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f613bdbd-be9b-4ab5-9b51-7affa096ac6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "777980d8-e50e-4893-873e-015354584a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028b1171-adfe-4a62-8fb0-175caf537fb3",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b40ea6b-faf2-4733-b34a-c71f693ea238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8625262b-377e-4d92-8396-414ae6fdfdaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bbc9edb-51b6-4c77-9d78-3081c95107fc",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138014ce-0d09-41cf-8880-f29446baae85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459ff143-c613-4449-8607-9f0f2b7bca7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0e13db-abfa-499d-9d2e-297c839d32ce",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aaec27a-c1b3-4bd1-84b8-7da7897ed32e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "938ad578-5cc3-42a0-a4c6-3acdb63cf80c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0470002c-55c0-45a6-96e3-f629341a48ba",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "872d32a6-2dc0-47b7-848e-9c9de450b737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5aad5972-0994-44e7-b13c-ff29eac49d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb015f0-e5a0-473f-a095-dc74997b6b8b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2696376-eb98-4fe1-a705-6e1576ffe17a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2023e440-3bd6-4c08-94a9-3a342e2c80d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477f5ee0-d8a3-49bc-80f3-b5f68bb7675c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01f0eba-3254-4d00-8ed2-e6ee26c7b7a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b49a8ef-b9f8-489f-bc37-2824cc703b55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1ee3d7-7e5c-4ef6-a2c6-817794300cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acecc297-fa81-4165-9be4-85d0e6cfc377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d3e4dc-e4a8-476d-9399-f346b8e860b8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c0311f-a994-4334-96a5-2cd8aff8ac0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71574042-aa10-45f7-8a93-ef09eb104b1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33cdd31-2fda-46de-aee3-808110664dce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "877411a9-0335-46ac-bba5-71d119cbf3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49299d4-9391-40ed-93f3-5625b4e369c0",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f428bc4-cbc9-4728-9eda-0d8998d5f0b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eb833d5-93d8-463a-8a40-5e93b8d044b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6228d29b-006b-4372-908d-947747ef2379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78793024-c7f0-458d-b914-6330aaadb671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed88625-dbe5-4973-873f-d74f46ce583a",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e75272-dbf5-4888-92de-93715db755d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7fb1a5bb-ab6d-456b-8953-07ac8e24eec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f80d9f-7263-4907-99fd-94f77c73b75e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7015f10-0fdf-4003-a509-58138ec84bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e7c0cc3-6cbb-4da8-bce7-074a4c803b0a",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca544b7-3566-4d94-8ceb-382e79d1c86a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "125b8c1c-4a7b-4c8f-acbb-bdf58aeec28e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a7cf39-c478-4778-a812-cefd73108d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7de0c8a8-6a72-4cdf-82e7-53e683cdcc33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8883ca9-8fad-4f1d-9b01-edb0283cf9cb",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd987b92-3c39-40a6-8f26-33461f790192",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14a5e167-e88d-4d8b-97bb-e84fa9eb296d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8467fefb-3972-4213-aae3-9ba5cffcf233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "682f27cf-808f-47da-869e-e6bf8cdde86d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e66f0295-7e37-4dfc-b4f0-346ce2c30648",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7d2210-3a9d-461d-b34f-9319d98cc82e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03473ab1-217f-4271-a17b-35dacf1267f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be985d78-66f4-42f8-8fd9-789fb5b68456",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda300ad-fab2-42ba-b2eb-5d2d72f31c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce2bfd0e-de4c-4898-8a54-0057ccad6ddb",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2ed50a-c763-4fd9-a3f5-358a26d0c31a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ffa62533-9609-421d-90cd-e5dd9788b96c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c550ac-a883-45f5-bb24-5e16b5468309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27ef16fc-786d-450c-815a-a1aee0a93d42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d28c570-bdc7-4632-a761-07451d5aa9eb",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32bb81bf-04a7-43e7-b4a9-b2800368a191",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b234d07-3a5b-4209-9f50-4770f404623d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d342f3-49e7-46c7-a047-072b6645cc8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8eba4662-beb1-4991-8304-579fffedb065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c506a003-da41-4f6a-87b3-af85f3936fe8",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d6479a-eb69-4fef-8f3a-a71b0e9f699d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d938e86b-6d74-4f06-b9ed-83a1bb7e5f26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff9cc2a-5e12-48a7-9769-a5c73952a837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92dc0de8-2d9e-4959-8102-14de6e9b5b95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9176d0f-c0df-45fc-9ad8-d9b26ad6e19b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2fd40c0-867e-4e13-8f1d-c170ff568775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db0821d9-1009-4631-8110-5a93163b1804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "323f3d11-b0b6-4ede-b4ea-82ac62878b02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "045d18df-1e8f-427d-a751-3c742b29675a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1543fe13-b60f-42c9-b07a-d006d7c7c9db",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9839667-5177-4383-a6ed-7978d573b122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e39d2a4-34aa-4854-b832-a1a05dabf521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1369966-7cf3-4644-8756-de0b5692b3ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab3caf0-a52d-4afc-83a5-020b1905b108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d3fdde-817c-4178-9ef2-db64d8b6df13",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdbf7b0-46a5-4d65-8f3a-28f8966028b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daf75439-e4fa-4f6e-a6fb-af71ee9405af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "979d3c6f-2d76-45b3-9f16-5848fd52b178",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363794ec-4d96-478a-8ede-bce40b67b79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4994c62f-dde1-4f24-8528-57cf48d6cacc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92805a2d-e0f5-4459-9f92-5b5e3d57a90c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f0ee195-4662-4e85-90da-86478a4a6745"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2261762e-0fb0-4522-b02b-fa12d2a6e9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6cd5ad6-3eff-48f3-a154-a5021103b7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b566531-935c-4702-b72d-1f882c15a9f9",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae48ccf9-87d2-4354-b98e-464ec55559cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "393db999-b509-4685-a282-80e716224a7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa48c56-bf10-4d91-a30a-6e4c837fdb6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae01971f-6a9b-433f-a983-9a06fcf1fc03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99b929eb-723d-4450-b1fe-32630997ff42",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15940fb1-326c-44bc-8fb6-3aea5a2eae73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee5cb281-09af-4687-8d49-473febc567f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e397ff13-7498-420f-9643-2fb11ce8f140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e179f192-4799-4d7d-a43b-bc851f44d6a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea1acaa-bff7-40f4-8731-3debed2cf7c1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326840c9-69e7-4467-97d1-835560c02e7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04f2f9f0-6adc-4041-aaa2-f3385375dcd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69dcc1a-1da3-4161-9050-30818be09e3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "723d817d-08a3-4c91-84c2-11b4dae15ac6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4beb8af4-6531-4c79-b2d7-b8ab0e97bf1e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20c69195-a716-4fa0-a5c5-30926ab6ce7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d51f049e-b34b-4fc7-8ae8-2102da430b87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b79316c-d9a3-4272-a306-9ad0a2440449",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abcdca38-3d73-4668-92ec-75938bbe3382"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35871c3-67a2-4c8d-9c08-ff31d49a12da",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99eaf3e-c2d7-4194-bcb7-74a1047d032b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf22b68b-1b60-43c4-966f-0037035c458a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "999e415c-0cf3-4c0b-96d9-bcc42d2249c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "718e9080-0d12-44d2-8bd9-5d6da00c3cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fbd37ec-daf5-44f6-8bf8-68aa7e2a42f9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f086d9-4ce8-4b89-8a0b-bb506dcb4060",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2ce9264-e5a2-4864-822e-87b6fb26a517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff297c2-eb5f-46c9-b1ce-cd4516b1d3fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186de4b5-a81a-4436-a576-ade07c2d0c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f30d51-3c8b-4ae4-966c-c50a240f2e7b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e7fec5-7eb0-4e62-92ac-e00a1b820978",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d462ae34-1a82-48fa-a523-7d794dcceaa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ebe6841-2fe7-4be3-a807-5f112a6bc29f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adaf30af-17fe-4c07-8e5b-60006ed80f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8103322-1710-42aa-a421-f98a60cf342b",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6daf2ad-5717-4089-9725-9b4eb8aeea61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6f28c33-fa11-4d70-ab3c-b022035935de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "809d18cc-cf61-4f8a-924a-0a73a089aa02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "878325b7-44ad-48ed-a112-1ef10ffaffac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a25d0ac-b938-4ea3-8200-bb336cf9d353",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069db7c3-1e83-43aa-af0e-16f03e1fb047",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5554cecd-0415-45c2-a090-190b9c7b9c74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9177a0-b134-41c3-8449-ecf3061d0d9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "536a8f08-6387-405f-89ad-af066f5e7628"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc5ed30-23c7-4fcb-8a10-c877b88866f8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0b7d4a-28df-43e3-871b-15441fc42843",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b2cb49f-ca01-4b34-828c-e9c0e6acd469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45df40aa-0790-4ca9-8ad7-99be8255aaac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3995dd3-791a-450e-b608-7d2282ed1f2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba41559-e10a-4f75-9f1d-b86c2edf9fc3",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ade83058-842a-4538-8a62-d811a873e1a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4398e8ce-116f-4662-8f27-9d9010832a65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc21ea8-430a-4c61-948e-6771f009aab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d781771c-6cb9-4073-9446-5c678d654b05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cac5f08-9fff-400d-af95-96700438270a",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71164b46-5ffe-40b8-bca9-7d81d9969a13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fda7a0c5-7b40-4512-8414-6008a34e69c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42636f32-a4c1-4653-a811-0ea77af879e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee20414-1abd-4c29-8f27-4b46ff369840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdaa66eb-b762-4fa3-9b14-3c56844180c8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c6d254-6faa-4e71-b617-2168f6382059",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "484afd3b-550e-49f4-a0c4-be359c1eb5f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e3a2976-d9de-4117-a229-d175a0d780cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33efd0c6-c3bd-4eb6-b09f-5d6b703cbfd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939250f2-a2a2-4f2f-bc7d-b418e6cd62e8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4213538d-3319-4ef9-87cd-ba3f84d6b425",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8058d100-54fe-48ff-9eb1-e9d437148313"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba64f50-a86b-4ba2-857a-b013e423cd0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d864bd4-cec2-481b-b114-a48b2e1774b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14f92ce-6c50-417a-8664-9db35864e76d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3745fb85-db79-44d5-9d5d-e62494c85905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41076c97-7e99-4358-9a08-36781bed8d3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f95eacd-daf6-438e-a29b-b665d476a9e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b85be551-b6bf-43cf-bc69-e2fc91d628fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76401064-1eac-4349-9fb3-b9257dd7c3b8",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e43296c-6e25-410f-8145-456a2137d015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4045f983-45c0-42c1-98c9-6862c0245e6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a96e17e-d7db-4add-8ef5-2df90e57393c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a478419-5370-49eb-b190-427f04e94f31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b645d6-c0b6-43c2-8281-60bbd085242c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a24ce7-21f6-4304-8203-4069f4c1445e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f7d4ea6-4e2b-4ded-adfa-3883ffd348df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daa7715b-9487-434c-b78e-57117c526184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4270dbeb-1774-48d5-bc03-af856abcfa53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae601803-1434-4c3f-b6ee-258d400e5dc1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6f85e0c-31fc-407b-bfbe-c93b4cf7f5de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38420da2-dae5-40d3-afb4-2de1399d1597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c29937-7e42-45be-a583-61f07c59e145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ddcf7b-ea89-4696-bd1a-289b9df01120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a642ef31-2706-470f-9ed1-10fea0f855ad",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16564583-8b0d-426b-a29b-eb238313f643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ba38c97-2d91-4e78-8832-aa5bcac7c13d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f9fc4c-8230-4157-9011-d26240514e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "171e5cb3-4474-4bc0-bd63-c89b36b117f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47367b2-bf71-457c-922e-043a83e10a0e",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee8cbb2-2ef7-489b-8ee2-8011d4149488",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4e565cd-aaba-4bf1-b434-22c4c6b47794"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "685c4a3d-3b32-4324-8f15-3bb004e9f0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f89edd8-325d-450c-b4e6-7a9d1e2a9f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d11fdddb-1cf0-4c88-ae83-ed1e882f816a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ae26d6-05dc-4c6f-a39c-6dbb914a2dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e8ff75-4f40-4e8b-9586-29fe0824a020"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b38ff8c-20bf-4832-96d1-1a17057d87c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f476c8c3-3c98-4942-b33b-916f84c4668b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fcd9ba9-7895-4352-a752-5102ce3224d0",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5aca7ea-7c11-4692-8ef2-2dd7ba3cf836",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1752947-b3c8-4f99-a467-0df65a5e43d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ceb34e-c53d-4b51-9c43-a9ca7ddce184",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb736cd4-a963-42fb-99bb-980757d6cd2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30531e86-bcce-4540-ba3e-0e4cbb3d8aa7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b06680f1-cf23-4b24-8f68-02668aa7d15a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45044c47-0b5f-4e26-94a1-9a21c0ec6da1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8a8c5e-4c89-4dec-8b9a-c0d18d5f1aaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa384b29-be75-4908-93ed-78dc50e8e545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b1dddad-aff4-4382-83de-9089d79866ce",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f414ab63-16bc-41a6-8c40-07c3fc73c97d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88032b5a-79ec-4f32-b8d7-913cfb476365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c53424-76e3-46d6-96e6-02881d39d847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0574c061-ab1b-4103-a581-1ce8a4d678ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c34833a-d100-4d1b-96bb-905617d2c563",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6df16ece-0a6e-4e58-b68c-490c36dabb5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebd59c12-25f2-49e6-9c41-a8333fe701a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede64a95-4f7c-455b-af49-8cf176db4416",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e329603-22cf-44e5-ae17-177283c34b2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8b7dce9-3ed2-46ca-bf14-95a90d912bcd",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9c94b50-d2e0-484e-b2c9-dcbc1c0042cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f62aeed-442b-4ce1-a684-96041838b13c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3d09c5-efac-45f5-8ab1-087348ca815e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b0a3e2-fe97-46d7-abc5-bf3ed137739d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce2723e-39fd-4710-9ca7-902b1550325d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1244f06-e978-4772-aa3e-a058e25a4c92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebb4ae94-38cd-4f7a-9a71-3f8231c4e8c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d085f5c3-f1ce-44c7-b4a1-38b7162345fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa595e80-b06a-4308-9edb-e0b064f711fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69db18a-ab6f-43d4-9c50-4125a15e71e0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0facfec4-5d4a-43b8-93a0-ee85c10a6d65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7263d33-5172-4359-aafd-db378e4fa108"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24ef457-083d-411a-98ef-cd7247ffda22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25a3cd78-7e6e-49e6-badf-1a66f00eef99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "149f4630-2060-4225-9563-1b9acda8e082",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc75c4e6-d1dc-428f-8593-03fe44377a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04182fe0-9bd1-4484-9e04-e0761be86426"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aebd5639-68fe-4087-be72-028b7b4031d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ed1fa3-6758-4841-8641-d411d2037d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4b2b2ef-95d0-4dc0-a9e4-bcbbf841d771",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8841fdb0-f7b9-40d7-83ee-53e379745303",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3806e900-7222-40bf-a249-718d14aeb7b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "890ce00e-7626-478b-8d7b-ce4c1e39c8c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf625de-9675-4b67-bdba-0dabef363740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6fe4b0-aab4-4ace-ac3e-c16e8210c304",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1bfeff-e700-4802-a68f-2bbb43fcdf93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a47124ef-931d-49b0-b788-149f6bf805f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da2af2b-ead5-49a2-9c4f-7121ba739b4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eae55d5-0921-475d-83a8-9e3e11752bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62419f80-5861-4107-8bf1-3cc7cdfb3339",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b44b7ff-0964-42f9-ba22-ee353b1268ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80212382-f679-4ce5-9b7d-d27463e5b3dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce09722-5444-4d9a-8a11-4093bd73c2e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec114454-150a-482d-881b-54771895d18a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce2f81c-a7fe-4010-9677-0ac93f31b82d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee42805-bf2e-425d-9b91-e5e0990d77a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44da1910-3203-4c56-8fea-0505995b97eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "235bd59f-cf65-47fa-ab08-71224b3917c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2cb5030-e0a0-47e8-a48b-5aa2253b53ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d213193f-7943-43ea-af80-07a0adf10285",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4aae9a-df7f-4b96-8f2d-1362c682dccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34174ddf-53b8-413f-9ab5-fa66de22801d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dd96f16-1e70-4d53-a0d4-de59d6493dad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ae45e2-baaf-4ea0-8830-719862c22cc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b20dfb3-327e-440e-8e35-32793ebb6c42",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64f0b7cf-9af1-48e3-8345-890d185b22e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aff01f59-1901-4b92-b28c-4924a3ca3405"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf8778a-184f-4aab-92c0-2eab24a46265",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "911cb043-9cee-4f9a-953b-7d6c66b4685a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2148799a-ad4d-4069-a981-966a02156667",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a4a4a4e-5075-451b-9678-a11c312cf319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dde86888-712b-40d7-b1b4-97c642402fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee4cc74d-5ad1-4b7c-abf2-65f14a6221c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "255e219b-9195-45d1-baa3-831402c521e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f64eb0-eb12-4cad-b8f2-0a3814efb528",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08b1e73-aebc-470f-8567-2aeb201500d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4db21406-19f6-4607-96c8-aafe8bcb1ddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d5ebc21-27fc-47f0-86fd-9d6e735aa8c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afd1ff08-caa0-4835-9de5-b420009737ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60153203-284d-4589-b9d6-3c512d7bb657",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88bd08c-23d9-4705-b0c3-a479bbb8b0a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6825f339-1d5e-4986-97ca-67d3068747fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1df85c5-4196-420c-9ca8-0d8799bab3d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e13be6-dba2-41a1-9286-e06041ea7bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9d7bf8-b213-4c01-91a9-c586638773f7",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b83223-5c57-4263-8816-4bbccf4a730e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8466a3ef-3380-40ff-bdf1-df9cdc919be7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a3cd5d-1547-4f6d-9b55-4a6430cdd32b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7da21069-4939-47b6-a5a4-016a5a2c3126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daff80fa-15cc-454c-90b9-3fc7bfcb8418",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1693d220-e23f-4c2e-805b-23d9713c505c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6ee9d00-5323-45c4-8ce0-4d16816b48cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "077cc1d4-eda5-4874-a136-f63981319eb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e065b200-fced-4793-b120-bad48988c9aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ef7e33-b84f-41fd-9e27-fd1a10b5dbfb",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f96ebb2-21ac-49d5-8c50-674b5ae76a9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d12913b-d178-452e-8a63-3bda2b7596f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cd66586-7e81-4319-9717-9583be0ba4ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "564b08e2-8344-470a-b0ed-c3b534ee5e7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00606c04-3dbd-4c93-9fae-1195483d1ac5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47539141-b369-4b6a-a3b4-044bfe3a41c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e62ba6a-dff8-4950-923c-136be504df00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "211ececa-c6ab-4781-a4f9-b6dc0a9313ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3d22c31-0231-4c75-a0df-e989f60df76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0154571-d94f-4e54-9422-8d3392e00425",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd0d912-1870-45d4-8201-487714992266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b2b5ce-bddd-4aa5-9252-78e7195e4c06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad10a9b-d2ab-44c2-a2e3-948c443114fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6679aad3-5309-4a8b-b29f-bac554649c2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ef1b997-b0f9-42e8-992c-6d3a27567bf8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ef271b5-86c7-409e-9e48-170d1f2c61e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5e44d7f-cb62-4954-8b5e-66e3eeae438d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "224aa650-cf28-4221-be65-a03776484632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db7c0bbb-7aa8-4346-bc7a-656daaab7de2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079a3f84-9f25-4b8a-ae18-09ee4ed85259",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f267eeb-4f8e-42a2-9da1-a2e94fef28c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b543f17e-d6ec-4211-83e6-656515acef54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75e3e75-daf8-47fc-98d2-7eafbeef2dcb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925fbcf7-8307-494e-8b98-28d9cf9cff31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ddc86c-a26a-46b2-8969-6325ac546c13",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a132936f-9d89-4ea9-a0c8-ba18b47a9ea5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5737aa6-adc3-4cef-a3d3-b52b5469da05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9405b78e-b547-4d96-a48a-56a94943b9f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd1e3815-67d0-44c3-9912-285be42c9d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1869643-a208-4749-afb7-64cafcf23cd6",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1434728-0b48-4670-8b5d-12ecd38dac4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6222a387-c8f9-4eae-992e-b2713168e05a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bda848-4d89-4aa3-856d-fb373502bef9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72726a00-f603-48d2-8fa6-55a18358066b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00213ba7-25eb-4912-a04b-6df9df8d187a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91b551c-aebf-4c30-8182-88809ee127bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07741175-70b3-47da-b630-05b6ebfc905b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c72b75b-0e61-462b-bcfc-6d72f01efd21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d1fb24-2d1c-4181-b6f4-b0286f066145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf38d0d0-ebda-4c90-95ba-c6393fbbd749",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4186eadc-4430-4dc8-bf55-444633dbd547",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e86768c2-08a9-40f8-8489-a566c5dcd321"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "738cca32-f019-4a5e-b4dc-7f8960f7e2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2259703d-a11c-4ce4-8c84-83ada40fc971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25c5af8-534b-4aab-91dc-4150b81c0deb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f70c15d-cbdc-4333-a972-1c5e02bc9fc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beebae48-8d6d-4eb6-99c8-45adfcd0c24f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c26a062a-54a8-4d04-b363-216070f928d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14243533-e914-48d6-a426-13e7f29b9cba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2743fb-b5a1-4bd0-b564-3ad15701b2bf",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c37b4a8-b290-420f-b20a-3b6d4dda201c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9950f2ee-c782-45fa-b9da-fc1c0381352c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e80524b-838f-4dea-a2b7-e138ee7af4bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743f5ba2-4b7f-4b93-a17f-27e8dcca268a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a321eaf2-2b67-4d67-a06d-5954f9877686",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5b37f0a-c921-488f-a5c5-58601dc9618c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18324e71-444b-4ce0-a019-4bbfbd79f29e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f9d0b5a-e32c-41cf-b16d-be698f2a4607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "345b46e4-3052-4ade-ad6c-1ccdd0bfdd1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2101f8ac-7cc3-4288-9953-8649f8c9ac32",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9340cee4-32f9-47f9-ba91-a33061cdc80f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75a17bbe-0892-497f-9f2a-71472af278cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "656aab7b-bb6f-452d-995b-131cef01d442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a35af83d-3988-424a-b674-f8123dfae46a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a05e643-33c8-4fac-81fd-ebfafd523363",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75eb73cb-dea3-4e33-bc49-eeb04cc4f0a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d2fa07b-2295-49d7-a087-e6448c0f641e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76130480-9e30-4a6a-8d4b-ee0605225d35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "368e82b0-e8b6-487c-9ed3-5af7e8fe51fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c66cc375-b89b-4030-b547-4c79f1ea2ed0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a35646-15b3-4f75-b38e-10647ac10954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca366811-679d-435c-8a85-f8edd70f4dec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ff2a41-f856-4eac-8e3c-7c339a670285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a59e39fe-cdea-4449-8704-accc86d576fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db246a67-2135-49ee-990e-4a139382e3c2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bceca22-abe7-46c1-9bb3-dd8ee84a92aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d898b6c0-7ea6-4358-9ad0-9de4f06ae4a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f7e22b-a1a8-474d-9d61-56acee0ba5b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65a254fd-5e58-42aa-be25-3889ac5f4fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e7d7b6-a599-4b15-bb9e-3533d0c5b6df",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f3d27e5-6a7f-4bf1-879a-3ca3604e6f39",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a711069a-dd66-402a-b144-7aa357ed1a19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "929e5547-2da8-45c1-9b02-1ead2df21b29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0752fc5d-7d2c-4351-bddc-6fe0414c5d7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6947528b-379e-4bfe-b37c-b1122f66bc12",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37576b65-e79c-48f7-a93d-03d7918d65f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "014d6c5e-9124-407c-b9f5-1cf5e975a1ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f4a8ed7-52a2-4d5f-bbff-6bd214f671b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "216ba3bb-50dc-4eb9-925c-bb7d85ac9e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5529da0-1376-48c2-82a1-76fae17ad499",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2b1818c-840f-4715-b500-8c4f472afb17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b1b5296-a258-4d7b-a2d4-0c790ef31236"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1a0727-0571-4d35-8581-9628ccc05f12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f74c78-8cf7-456a-b0f7-33619bb161bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec032881-5995-41d5-803a-d275fd40b71f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a85a599-408b-4e11-ba15-b9aa69ff956c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ff641d2-49dd-4565-92cc-2b86ebdf1c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a22c504-ac3c-4257-ab3e-fd1b6a79889b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d994f1f2-12db-457c-8593-66eaafe9b79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c87cb0-98f1-4652-bbee-6417be87cdda",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "571a3a25-16d4-4df1-a9bc-488aff7eab26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae35615b-cdc9-4e26-a181-2be855e7f3dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcb3f5f4-b69f-46ae-bea0-3d1cc67460d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba4ff5f-ae1a-4a15-ba89-607641035f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d7e514-51e0-4f78-90c9-d8b5abf36a3f",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737af185-e4e6-4099-addd-a85640a1b153",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76f0db60-e290-4ca7-a158-8d20fee2b111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c28f3f-89f5-4900-be1a-b0656744c8f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a3e50c5-e22d-41dd-824e-543824e3ecdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0495165-9a23-44b7-9829-2e15700c225e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb3532a2-fe4b-4acb-a140-bf0c84197d1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87789962-936e-4d49-a655-cadef7baa6ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bcd5de-066e-41d2-99de-97aebecd4d89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df2bd0d1-51b2-4502-96d5-8ecff8f92edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecca71ef-18a2-4ce1-8f6f-727e4b4b91bb",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61a213b-633b-418d-b7b8-dab65a35c84f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3cf438a-2216-4f41-bc81-98199610e7aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fd18b4b-4de7-4380-aa6f-1557e3b8110f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94adc0e7-56f3-4df5-aa90-62cbe81f5835"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f054a7ba-547e-4067-bba0-a2fdbf598011",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90f57097-c2c5-431a-af3e-242bd16c3ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf50d250-4590-4aa9-bf6a-5da6e1585a67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b0de1c6-30f8-447d-be30-dbd9a12111f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99f435d1-872a-4af0-b8dd-2e33b14ad315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549f8ecc-3f2e-44e4-bfb5-d8fb82c59e46",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560c3331-884f-4513-8fe3-d82810deb5ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7dd58b4-dcae-4a5c-ac31-b2c656287e1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8803619a-3073-47e3-9223-c405dffae4ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9f1e62d-beea-45bb-a02d-419dccd279f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb42b750-0fe2-4b39-b6bf-02f79b4c0635",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de220a1-d641-4f6f-b18a-9c8588305f81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cefafa4-d6c1-40cb-930d-42e419a0ef13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "894d4322-b60a-4615-87e2-bfb14d855371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fd7413f-0716-44c7-9a18-ea7dfd97de04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e34204-9df7-4de8-afa2-59a850371e23",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13af406c-cfb2-44bd-b37c-1f415b2f0bfb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e256271-de9b-4e26-8415-3a6edf7b84f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a45295-2202-4c07-99d7-f670bdc0d42d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d4b5dc2-1659-4093-bf47-24cceac472a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7205bb00-7886-4bd3-b518-c2738bf3cf89",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1362b4-2c78-4fd0-b48a-7a8533e5f427",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63f6b98d-3f61-499e-87ec-42ba2e89214b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b15bfa3-5173-4223-bd67-57a4e5592bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cee47fca-2b0d-4ed9-acad-9ae05c269dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce3be869-09a9-4a17-89fb-987d2d6245cc",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ec8872d-e15d-4072-a8be-177dea417adb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d79d77ef-2aab-4a29-bf38-51631fcdd32c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0522c4b9-aafd-4ee8-9c7c-2fd5005f4c6c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c13d19e-ddba-4ee9-8a32-77cee0e4e799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f255dbbd-29c7-4a0d-9703-e0c3f533d631",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6c8386-6f9c-4043-a401-bc0f65fd7810",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec202fe4-fa05-40c1-9f6d-e5fc1c6e0da1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80154909-fc10-4ec5-8b56-f1258b4235db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "432471a0-2e71-4c80-ae91-836b67cb8f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23dfca65-5bd4-4e41-9cfa-23b13edfebfd",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8a12cd-9a7e-4329-a348-04688991a3fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1862675-9c43-4bb8-8141-3ec8d813545c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c20f7a1-385b-48d5-b4aa-de35ded3ee9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10654351-0927-4934-902c-1466b2ac2634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5051a816-09ce-44e5-a3dc-57471d92080f",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5a3e76-7e89-4aa0-b0b5-b9eb180e5c7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "796b4194-ece6-48bd-9014-f6e11bdda2ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d9e8a5b-7463-4047-8482-7630a70046cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79a35090-d146-4c07-ab22-226e6f16dd96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "652c9290-d962-4b62-9cb6-37f527d06385",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68a98fd1-5244-45cd-97be-3ea3039da180",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "056cec24-b669-498a-8bca-0080865471ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fb4e637-010f-4655-856b-350bb1ea0d52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e38bc17-d257-4b0c-9a7a-fb06668ffae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ab42fa-6ce5-418f-8df1-a3c204816411",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3641c45a-a402-44c9-834c-1fa8d4b7b397",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "983d1150-afdc-418d-ade2-d28b07a76fcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ae7b283-856c-4b89-9e54-d9695052e25f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dbe7767-fc35-4e0e-8af5-b6afbfc2dd7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb6072c-a21c-4c34-af4a-52ef9d316d87",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6becfa-dbd6-4350-8644-a28f2097db2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ad6d1d0-0292-42f2-9a3a-9505736f3d3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14beec1b-50c8-4c39-bc19-856de5ee5b5a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31461aaf-b309-406c-8d7e-0e6ac69721b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c51e89-31a1-406a-bd78-32456a9c020a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60cb54a-8551-47d3-a2db-e663c3125ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80b0c8ee-64a0-4c29-9616-759cf4c2e474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d38d20eb-0a7e-446f-9bbe-689d6d539d8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1835fd7a-04cc-45f9-94fc-b8298179852f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29b3ed21-33f3-4b02-9ba5-5ed1991758e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78045bc9-3fc0-4683-ab7f-e51add395d71"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e89ce1a9-09b3-421a-b7c1-df79461d8e26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6f44dea2-61ca-44c4-a135-848ab662f645"
                    }
                  }
                ]
              },
              {
                "id": "4b4905f0-8388-47fb-9d16-abee63cf7361",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba1eaa38-4823-468b-b90c-3cf78ee4fd51",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82129a4a-aa9a-44c6-8d23-2c3170ff2d43",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "89eecf16-334e-4938-ad33-40d91499eb8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5b0cf2-4ad3-4b3d-8833-14ad8995b7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35be134e-6ad4-44c7-b7a7-fc27d313342e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89a15342-b881-4acc-a148-7bab7447f195",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "35cb4079-7369-49dd-9ba6-fe45ef5f3dd1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "61fba5b8-06c3-42e8-969a-eb911737ae48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a19c3865-7868-4ede-8f8e-c81d32c3b995"
                    }
                  }
                ]
              },
              {
                "id": "7146cd9c-f6cf-4738-8098-0b09b9778745",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "05d85ce8-0e9f-4769-ac14-5e10c490dc5e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eaf9297-6de9-4253-976e-bbe955377eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7824546a-64f1-4654-aeea-8221b253b241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77741570-d98e-4f50-8d47-68b6e809a20a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89a57ad8-ba3e-4972-8319-c22cca17c922"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "8b02317b-9362-41ba-ad96-da3aeffb0e66",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3cdc9d82-94b6-47d3-86b4-7aaf16048433",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae25d7dd-9c75-40bb-8e0f-928374194eb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b9d3d67f-76a5-42e3-92ab-2aee72477139"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "88727de5-748c-40f2-993c-d63aa47fb6f2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1bb937b-0ee7-41a3-9c56-9bfcd35b1cd2"
                    }
                  }
                ]
              },
              {
                "id": "efe33a25-767d-4551-a5d3-c5525bc2c94e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "325607fc-3177-42ac-b78e-c46e6ce899f9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "48b38574-6f40-421e-ae77-bac6fb62f825"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c3e7682e-fef0-47f5-9755-9d337827669b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb944cbb-bcd4-41cf-885d-c35bd15884ab"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e997cd7b-7993-45ab-9e85-9fb70d12272a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "9e7384ed-5197-4a06-bb35-4aae8ae4788d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "99f24dff-f177-47a4-bd81-9ac3b241f7a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d0d1e37-4c50-47fd-8c42-aef9de833679"
            }
          }
        ]
      },
      {
        "id": "e899f292-ca58-41b4-bdc7-ae4927238bff",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "de10da3a-8642-4bd6-be1b-da96210f51bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c1811203-3509-405d-9063-d4e0e5f0c5f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa93f6d2-b755-492d-9079-9cf3f12b59bb",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35679d8e-6564-4100-be5e-b0b60e91c03d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8b627216-7849-4756-a4f3-f0aba93057b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55f88d68-8959-49a9-ab7d-964d464e7a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a024d4b-795a-40da-be2c-fd2f382b2620"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fbbaa3a-c9ce-4f28-bdef-db02c0befd1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68460a40-07fb-4a5e-a247-aafdf41c0e12"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "05cc477d-645d-412f-8084-d14711f9468b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e85cc09-8ea6-479c-a29f-fcf5a335fdd3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "09065436-287f-42d7-8461-ae5f6a348bf0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dae4e770-6871-4d25-bbe7-ff28dab2ad20"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ac6ab5e-5e29-4dd3-b611-3219ce000c44",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "148d0833-2242-43e5-9b4d-86c89743fa4a"
            }
          }
        ]
      },
      {
        "id": "1f2422f6-49e7-422c-bebc-93e1287648f6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "37a8660c-c311-4995-b4df-e07815ca5ef8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "487b4203-ec28-42df-a239-4c86712e8b94",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82670641-5fa0-4f8d-89c7-be96f8cb0c18",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78bcc60-c78a-4e42-b7f5-177bdae1d5a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a9a9391-3139-46b9-94d5-eeb69a97dca2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8770de-4d79-47ef-b9e1-e4d579dd4cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "832587b0-0d1d-4285-9e82-1ca346e470eb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a073e9b-00d8-4443-ba90-cf0331e55f5b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87e6c8e3-6aea-42d7-8b61-504fe5bf13fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0ffbf88-7481-4962-b5be-351050c5921e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd5146c0-801b-4ccd-a244-775189142155"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ba9cc3cd-3149-43d3-8c28-8bcf9961c320",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e7d37bf6-9e00-4f2d-ac83-d13b394064b8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "acabf388-763d-4e40-808a-69dfeb9b2b5b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e64255cf-ba64-460e-9fdb-b13486e27463"
            }
          }
        ]
      },
      {
        "id": "5cc54692-b290-49eb-bd0e-ea80c32134c2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4ed78809-a267-415e-9480-337f078fc0b5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "40bfd5ba-1332-4d5b-a0d6-c9c8c1a16962",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "28d1ab8c-1376-4341-8946-ac62fb2de18a",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31954c7f-cf56-4589-8957-c3f3f946284d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5dfcf6bc-5867-4859-a684-91bea962bae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d577fc-c97d-4e7b-95ef-f7e9dee63079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6b59c8c9-f570-48ae-a52b-56141b9997f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "785a760c-3905-4512-b744-f7f492a85b07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "393142db-64f8-49a9-ad48-3a52b50afd1d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e683653a-b43a-4284-996a-28da134e28d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f7be5f4-eb0f-41fa-8ea6-2daaed180414"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8e1a11f-79c6-4d46-9742-916f4a5fd6e3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "285e3bfc-a529-4fa0-be57-ab8902443aac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b2132e19-8019-473d-ba3c-bbc7484dd5cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1efb0b75-bd25-4325-8c31-ca6fae564045"
            }
          }
        ]
      },
      {
        "id": "b15dc876-535a-4931-82a8-42ea71810246",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8f90b0b6-5614-45ef-ae25-0d66d9a1577a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eece1b48-1c61-4fd8-b4f9-237f111f6d30",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "96c02a10-bc1c-4cbf-8a07-160153707bf4",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "17057c49-bdc6-48a7-941d-f64d2ff632b7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7300dae4-7d26-4864-a4a5-af13e74f1852",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1853,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 246,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 244,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 495,
        "pending": 0,
        "failed": 30
      },
      "testScripts": {
        "total": 931,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 922,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 274.6219512195123,
      "responseMin": 11,
      "responseMax": 9248,
      "responseSd": 898.5692417851684,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1685493732825,
      "completed": 1685493811044
    },
    "executions": [
      {
        "id": "0e7491d5-c4f8-424d-b7f1-519e3389a7a5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 244,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "565ec652-fb5e-48bd-919e-f5cd0d449d0b",
          "httpRequestId": "d625c84a-4234-49ac-a96b-14a569566f7f"
        },
        "item": {
          "id": "0e7491d5-c4f8-424d-b7f1-519e3389a7a5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "36a98c17-f816-43fd-b4e5-38afaaa30863",
          "status": "OK",
          "code": 200,
          "responseTime": 62,
          "responseSize": 0
        }
      },
      {
        "id": "18f96919-8296-4960-805d-f1cc44595de9",
        "cursor": {
          "ref": "b40a9907-89c3-46d3-9036-e995c044e792",
          "length": 244,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b01c4e1a-8a24-4dca-8ec8-a68893630e3c"
        },
        "item": {
          "id": "18f96919-8296-4960-805d-f1cc44595de9",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a2111c1a-fb4d-4a89-809a-6923d7b7b37b",
          "status": "OK",
          "code": 200,
          "responseTime": 11,
          "responseSize": 0
        }
      },
      {
        "id": "b552500b-9fc5-457b-85b5-d8e4ebb1c8c5",
        "cursor": {
          "ref": "3a2a8af9-49b1-4963-b475-8836e3446ad8",
          "length": 244,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "587bfe34-35bd-4ace-93a6-edf1a96867eb"
        },
        "item": {
          "id": "b552500b-9fc5-457b-85b5-d8e4ebb1c8c5",
          "name": "did_json"
        },
        "response": {
          "id": "b64d0641-21ff-4441-a84a-521ae82cf9e6",
          "status": "OK",
          "code": 200,
          "responseTime": 457,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b5fb3e-ecc3-4759-b222-889916e49813",
        "cursor": {
          "ref": "a65bea67-2bee-4111-afc8-8c9627ae89af",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1cc62bee-1e93-4c26-96e2-9ee96f9bd314"
        },
        "item": {
          "id": "a4b5fb3e-ecc3-4759-b222-889916e49813",
          "name": "did:invalid"
        },
        "response": {
          "id": "c70b7eb0-293b-4efc-93cf-a5aacd2811ca",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2003,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a4b5fb3e-ecc3-4759-b222-889916e49813",
        "cursor": {
          "ref": "a65bea67-2bee-4111-afc8-8c9627ae89af",
          "length": 244,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1cc62bee-1e93-4c26-96e2-9ee96f9bd314"
        },
        "item": {
          "id": "a4b5fb3e-ecc3-4759-b222-889916e49813",
          "name": "did:invalid"
        },
        "response": {
          "id": "c70b7eb0-293b-4efc-93cf-a5aacd2811ca",
          "status": "Not Found",
          "code": 404,
          "responseTime": 2003,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a50af485-4213-48d9-bebf-e08cadd58067",
        "cursor": {
          "ref": "683094c6-95df-47f1-a39b-5a0f670e21e5",
          "length": 244,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c4e6080a-a423-4581-89c1-992d74358c60"
        },
        "item": {
          "id": "a50af485-4213-48d9-bebf-e08cadd58067",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ccec752e-2f8c-4269-b0f7-1f55fa13e249",
          "status": "Not Found",
          "code": 404,
          "responseTime": 139,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ec98b4-c000-40fd-9178-6e51c51f37fe",
        "cursor": {
          "ref": "7254c763-dd2a-4115-9e2c-68a07222616c",
          "length": 244,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "7b80ddec-9d41-4ac3-9730-fa256ee4817d"
        },
        "item": {
          "id": "45ec98b4-c000-40fd-9178-6e51c51f37fe",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "2b3a9c60-0b24-4063-b30f-c850abd2b1f7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 60,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "783ba126-e0a8-44e1-9304-8f4dac4dd8b7",
        "cursor": {
          "ref": "aeb07b1e-2a92-436c-8577-e08a24f0d338",
          "length": 244,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6f69a648-97b5-40f6-b575-6583ca374c7e"
        },
        "item": {
          "id": "783ba126-e0a8-44e1-9304-8f4dac4dd8b7",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0e1909cf-6729-4d5a-8af6-6230cc7a3676",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 104,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "0f8b4fe4-7cb8-4ac6-b178-adcee7788bf0",
        "cursor": {
          "ref": "475c9524-4f1b-4000-8583-9e9c3e84a438",
          "length": 244,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c74c5a05-f843-4436-9071-f05c86ebc84e"
        },
        "item": {
          "id": "0f8b4fe4-7cb8-4ac6-b178-adcee7788bf0",
          "name": "identifiers"
        },
        "response": {
          "id": "33deede8-fd7a-47e2-bc9a-fd17c568ca3b",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "566b57c7-a111-480e-85dc-8af07e91f039",
        "cursor": {
          "ref": "daaa8af5-6a35-4cbf-a578-89a4e650337f",
          "length": 244,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9052466d-1dea-4d72-a173-e17c7c2ef36b"
        },
        "item": {
          "id": "566b57c7-a111-480e-85dc-8af07e91f039",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "98fada0b-9f17-4da1-8fdf-4be833aafca9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0df7f51-284c-41d6-bcd8-2db6195264b1",
        "cursor": {
          "ref": "6c4ed1e4-30ea-4697-9e7c-a428a0ecf526",
          "length": 244,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5bf50da7-833e-426e-a4ed-0d80f404b4d8"
        },
        "item": {
          "id": "e0df7f51-284c-41d6-bcd8-2db6195264b1",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b8776a2a-ab48-4780-81f7-0e68ee6e0ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 218,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e48464-5e2b-41e3-8996-02f782763453",
        "cursor": {
          "ref": "d36ebf52-5805-494e-90ec-4f57ea8ba312",
          "length": 244,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "cae05339-68b9-4fbe-ac60-2053cd4cdd25"
        },
        "item": {
          "id": "50e48464-5e2b-41e3-8996-02f782763453",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ce1be204-4bc7-43a1-bae9-0eca87a789f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b6ea1a-a6e0-43d4-a8ce-0c307478a092",
        "cursor": {
          "ref": "64965aa0-3d3c-4422-a460-5b6d3ec093c6",
          "length": 244,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "38002572-d5f3-469a-9c1d-54b350435a5b"
        },
        "item": {
          "id": "58b6ea1a-a6e0-43d4-a8ce-0c307478a092",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2d8b19c4-924b-48de-83f9-23f0b0c05962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 141,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81277b10-8c1e-4700-b3f6-6cf808a47a51",
        "cursor": {
          "ref": "97a14f8a-4563-4090-b21e-2331b4932535",
          "length": 244,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a8b92066-fb36-403f-809b-31fad6cf53e5"
        },
        "item": {
          "id": "81277b10-8c1e-4700-b3f6-6cf808a47a51",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1e92212d-4585-4f4b-a839-4690efd11c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96b1cf6-c496-4fdb-b782-789a506adf0d",
        "cursor": {
          "ref": "57f2fe70-7af2-495e-ac38-e85796b3f81c",
          "length": 244,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "74588e7c-1df9-4aac-b0dc-521c4ae43091"
        },
        "item": {
          "id": "e96b1cf6-c496-4fdb-b782-789a506adf0d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3e5de622-2dc7-482f-8eae-f53806337104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933a87c9-647c-4f81-a4b4-276faefe48e5",
        "cursor": {
          "ref": "00f6e148-cb08-487d-9869-0391c569365b",
          "length": 244,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "42ceb807-876e-4520-967d-9e6825839d60"
        },
        "item": {
          "id": "933a87c9-647c-4f81-a4b4-276faefe48e5",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "dbb6e19f-30ef-40c6-b294-5a660744b77f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 492,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd6786c2-3ad8-4001-bed9-bb6c18a5efd4",
        "cursor": {
          "ref": "28d76d52-7495-41d5-8033-92bb24bd2dbb",
          "length": 244,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fdcc141a-b0d4-4ba8-8fea-c396335a3e47"
        },
        "item": {
          "id": "dd6786c2-3ad8-4001-bed9-bb6c18a5efd4",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4ae3da33-ca7e-4ec6-86e5-5f7b8dc34e80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "808ef0fc-6db5-4cca-88ea-24498cf7be73",
        "cursor": {
          "ref": "dbc08f26-802e-4f63-b9fb-2d7848561f59",
          "length": 244,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "0c24ad7d-299b-45bd-a36e-1df02637da0e"
        },
        "item": {
          "id": "808ef0fc-6db5-4cca-88ea-24498cf7be73",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "10524a31-517f-43c3-b257-a251ae04e07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b420b660-73a6-4be7-b2d4-7456eb947405",
        "cursor": {
          "ref": "4f44a980-5339-4581-b044-a12f614cd305",
          "length": 244,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3fb208d1-164f-4b3d-a049-f4007c96ba93"
        },
        "item": {
          "id": "b420b660-73a6-4be7-b2d4-7456eb947405",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f72526fc-0796-4ae1-a20b-4f3b7e68c22e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "403e0f5a-b342-4672-be54-b8dbe31d83a8",
        "cursor": {
          "ref": "44a0ed4a-a2be-4cc2-9ff3-f26d20a713ec",
          "length": 244,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b4c8fe9f-1d78-4fa6-b99a-a4c817bed67a"
        },
        "item": {
          "id": "403e0f5a-b342-4672-be54-b8dbe31d83a8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "370aaa48-552d-4cb7-b934-6153cab059e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fa3f9d1-bebb-4238-8af6-acce9d3dd667",
        "cursor": {
          "ref": "1af70253-96a3-4571-bc40-d0075253ec24",
          "length": 244,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0fa7eef3-dcf7-4748-a0a1-8b17f8df665a"
        },
        "item": {
          "id": "0fa3f9d1-bebb-4238-8af6-acce9d3dd667",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "62ce54cc-329b-4907-8599-8d7e31daefdf",
          "status": "Created",
          "code": 201,
          "responseTime": 863,
          "responseSize": 983
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "9f6d6437-536f-49ad-ba0f-71f629e0f15f",
        "cursor": {
          "ref": "8ca8bf46-734d-46a5-9a6d-16ab9ec6c54d",
          "length": 244,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "9e819b8f-323e-48be-b3a1-3c6342755fea"
        },
        "item": {
          "id": "9f6d6437-536f-49ad-ba0f-71f629e0f15f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b1e68c36-3ac7-456c-8911-1317bf7f5f51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f51e8b-f6f6-4948-9b2d-45a938ba8012",
        "cursor": {
          "ref": "d8502b1c-3a60-47c1-8b86-a927e57ab22f",
          "length": 244,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "6c908efc-a4c9-4ec1-b5b0-365392144148"
        },
        "item": {
          "id": "83f51e8b-f6f6-4948-9b2d-45a938ba8012",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4af5c560-dddd-4cc3-be27-4a1a35199f86",
          "status": "Created",
          "code": 201,
          "responseTime": 9248,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "6ced6cf8-fa64-4450-b740-5e3409647f0b",
        "cursor": {
          "ref": "16792206-2c2a-4263-b1c1-3ddf78a63b41",
          "length": 244,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ae89416f-994d-42b5-af84-21694e20fb15"
        },
        "item": {
          "id": "6ced6cf8-fa64-4450-b740-5e3409647f0b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "59087fbf-f762-4229-98fb-28565cc56280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a154b7-854c-4ea4-ad98-4df59e8565e5",
        "cursor": {
          "ref": "7132cb03-7c0c-458f-8a0c-37bf5bda5a08",
          "length": 244,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "c7637006-7b4a-4242-b97d-dd23b3fb035c"
        },
        "item": {
          "id": "40a154b7-854c-4ea4-ad98-4df59e8565e5",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "e0dd777d-6f30-4e88-8bd9-efaf15a20dbf",
          "status": "Created",
          "code": 201,
          "responseTime": 4704,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "03ec2563-f06f-44f8-8472-79fe0e4f9b78",
        "cursor": {
          "ref": "86c1c7ce-0b62-444b-8103-677bee695768",
          "length": 244,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a5b349c2-4733-4e19-bb9a-a4fada49bcfd"
        },
        "item": {
          "id": "03ec2563-f06f-44f8-8472-79fe0e4f9b78",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ff36563b-8ca5-4be8-87dd-ae53b1d5daa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe65c741-40d8-4d68-a918-9339fae5c94e",
        "cursor": {
          "ref": "3cf1ee69-e121-4219-9190-ab9f0cdc7b48",
          "length": 244,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "56b59c6a-91bb-4f7d-9301-fc823019283b"
        },
        "item": {
          "id": "fe65c741-40d8-4d68-a918-9339fae5c94e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1ec7fd4a-3eb5-4285-9641-b0196cd3360f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57035abf-d30c-4e60-a9ce-39ce41408302",
        "cursor": {
          "ref": "bf0b8025-10fb-4ec0-b256-6e27a8bfabe6",
          "length": 244,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "c3610383-a7a1-44e7-8fc0-ce8f5771424d"
        },
        "item": {
          "id": "57035abf-d30c-4e60-a9ce-39ce41408302",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "14dea4fc-d43d-4a6a-9319-768ef04910d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b1d1d8f-23ee-42ac-94b8-c4ec11b1be2c",
        "cursor": {
          "ref": "4b2f9c40-e316-4a65-a535-6752e0ef31ee",
          "length": 244,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "33bef5e9-7e9f-4ed6-8ab2-f820aa0deced"
        },
        "item": {
          "id": "9b1d1d8f-23ee-42ac-94b8-c4ec11b1be2c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7b811a1e-f42c-4c74-bd36-7c29a408cdf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e58afd-e031-4b9b-8d49-591ab8251249",
        "cursor": {
          "ref": "3b507f01-9721-42c5-bec7-e7db48fc88b0",
          "length": 244,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5f452010-dabe-4720-a100-6e7ed5529a26"
        },
        "item": {
          "id": "16e58afd-e031-4b9b-8d49-591ab8251249",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "45e83d07-e892-4a04-9360-f9d27a56ba63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b53db292-2768-40f7-9fb6-76d9a252aa68",
        "cursor": {
          "ref": "7c5b5b3f-a4d1-4ad6-b958-a626adb3b3c2",
          "length": 244,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "515b9caf-757f-4df8-b21c-a9fda4472f21"
        },
        "item": {
          "id": "b53db292-2768-40f7-9fb6-76d9a252aa68",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f37c73fb-97a4-4ae6-8f5e-2d3a8f690f95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78af8f62-537e-4aa3-bdc7-4c017d66ee82",
        "cursor": {
          "ref": "d7baf71f-3d93-4804-98bf-6e78d526d012",
          "length": 244,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "88d74127-723a-4f42-b928-626ae0f2a1e5"
        },
        "item": {
          "id": "78af8f62-537e-4aa3-bdc7-4c017d66ee82",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4bcdc65d-8549-4cb5-83b5-b274624b2303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3ee6dd-8468-4b77-9ee9-f77259455668",
        "cursor": {
          "ref": "d429bf04-b953-4455-b5a5-5f95e3b4edde",
          "length": 244,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "12e2673c-0918-47a1-82ec-727be73d8aaf"
        },
        "item": {
          "id": "8e3ee6dd-8468-4b77-9ee9-f77259455668",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "43641bd5-dbb5-4825-94d4-556747571a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee11343-a144-48d1-bdf0-7e9c3e6c455f",
        "cursor": {
          "ref": "61955b88-10b5-446a-88f1-d2a05520edde",
          "length": 244,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "3f648e02-d958-4f75-be9a-db2c0820c5a3"
        },
        "item": {
          "id": "4ee11343-a144-48d1-bdf0-7e9c3e6c455f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "34be21b9-6ad7-4e69-a233-f5a44bf54135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f63dbb5f-7001-4ed7-b976-a9c044be821e",
        "cursor": {
          "ref": "3d5bdafb-3113-4f50-a122-d6b6fcfcbb15",
          "length": 244,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ea32d3b4-127b-45c5-a217-6375eb238a67"
        },
        "item": {
          "id": "f63dbb5f-7001-4ed7-b976-a9c044be821e",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "9fc1f7f3-3ab8-4327-b8f6-140506bb6267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bfbc13b-bb14-4381-937d-1b4575744811",
        "cursor": {
          "ref": "d59ada62-9456-4476-b411-daa8b961598f",
          "length": 244,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "49659e5d-586e-4521-9b7a-c47cc2cedde9"
        },
        "item": {
          "id": "2bfbc13b-bb14-4381-937d-1b4575744811",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "188bdd33-2acc-421e-b91f-a64bc43bedf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84cde9d2-9d73-4e91-b879-17d9c97b246c",
        "cursor": {
          "ref": "17c22a3d-b68d-4060-8ded-29164bfe2145",
          "length": 244,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b1dd7e25-eb2a-4d2d-84dc-529589c74aaa"
        },
        "item": {
          "id": "84cde9d2-9d73-4e91-b879-17d9c97b246c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4fca414c-376e-44d2-8100-fb9357e18383",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e682ef6-fabd-4a33-8f83-c4bd21638f57",
        "cursor": {
          "ref": "35a20301-32f6-4f84-821d-04dcfc20aaab",
          "length": 244,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "189b330c-20a9-43ea-8429-3e20e3ac9d79"
        },
        "item": {
          "id": "8e682ef6-fabd-4a33-8f83-c4bd21638f57",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "c879c8e1-5fb1-4273-b7ca-8d964d313e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89cba3f5-5cf5-4f58-b02d-8884dcf59b58",
        "cursor": {
          "ref": "2e80d7ae-23f4-41a7-81b1-8866fba7bf79",
          "length": 244,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7f092744-c890-4bd4-85bc-73c8f9d33a39"
        },
        "item": {
          "id": "89cba3f5-5cf5-4f58-b02d-8884dcf59b58",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "fd30193d-4ae4-4241-a448-0698d6a9db00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2c4653-ce26-4f07-afcb-88762aa96087",
        "cursor": {
          "ref": "37c074c1-055a-4927-9d9b-acb144b9b695",
          "length": 244,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "7e6dfb54-0924-4af3-9198-5427fa81aadd"
        },
        "item": {
          "id": "ec2c4653-ce26-4f07-afcb-88762aa96087",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "5e15a2c7-6ddd-4cda-9253-9107e6efc57a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b113bb-75f1-417a-bcbc-607ffdffcc40",
        "cursor": {
          "ref": "a5335cfc-2f3e-48bd-a9f6-2a9b717617b2",
          "length": 244,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a1bcefe3-4121-4f82-bbdb-a9cb1e2d406e"
        },
        "item": {
          "id": "f2b113bb-75f1-417a-bcbc-607ffdffcc40",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "74a03880-d205-4585-acc5-493eab90d846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a487dd0b-f486-4bf1-ac1f-f08c157e39a5",
        "cursor": {
          "ref": "5fddbe5a-d341-49d6-b01c-6b518a7e18a4",
          "length": 244,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "d9cb3abc-d6b7-489d-9b58-b4ac4e3d4bb1"
        },
        "item": {
          "id": "a487dd0b-f486-4bf1-ac1f-f08c157e39a5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "5ae7db8d-5be5-4cbf-bf20-751bc7daf722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e9f3d0-4eb6-48f0-8ea6-b9f8d521e39b",
        "cursor": {
          "ref": "3c0f034d-4a7c-4b90-a5f3-3b1804a89dd1",
          "length": 244,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "b1bdffa5-54c9-4bab-80a5-59bd86555aed"
        },
        "item": {
          "id": "d9e9f3d0-4eb6-48f0-8ea6-b9f8d521e39b",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b05e376b-96e2-4eb9-ba25-0c14d1717fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f46a420-6663-48c2-9620-0fc9ab5d6bb3",
        "cursor": {
          "ref": "7d6b81d1-a0b8-4930-b3f8-fa9a69ff551a",
          "length": 244,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "511cdf82-8b01-4d0c-acdb-f7dd2383fbe4"
        },
        "item": {
          "id": "3f46a420-6663-48c2-9620-0fc9ab5d6bb3",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2de777b6-c149-4407-b5ca-f9e4a0a68024",
          "status": "Created",
          "code": 201,
          "responseTime": 2605,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "088c0bae-2cdf-4a1b-b235-a23631a575ac",
        "cursor": {
          "ref": "32339e2c-7c7f-4343-9c83-7017d4100fbf",
          "length": 244,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3b8161bb-0385-4a0e-9bcf-539b040c900b"
        },
        "item": {
          "id": "088c0bae-2cdf-4a1b-b235-a23631a575ac",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e452c269-9a60-4cde-a6ff-c9271ba7edd7",
          "status": "Created",
          "code": 201,
          "responseTime": 2350,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "17c599ee-f346-4b68-a772-aa67eebf2070",
        "cursor": {
          "ref": "5bd6fc1f-0a70-4147-9954-2451ba95aba3",
          "length": 244,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "ca4c95c6-1163-4cab-b24d-1a509eb7ba5b"
        },
        "item": {
          "id": "17c599ee-f346-4b68-a772-aa67eebf2070",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1c16fbb1-bf7e-4389-b2df-7f1355ebd945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca44ebad-e6a1-48b7-af0b-6b657bed77f3",
        "cursor": {
          "ref": "d1368322-8c9f-4788-9059-9fa27d558050",
          "length": 244,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7588f977-111b-44d9-b13b-f2a1bae73e04"
        },
        "item": {
          "id": "ca44ebad-e6a1-48b7-af0b-6b657bed77f3",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "5039e04b-58d9-4db6-8c12-4bb2c832ff19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74eda372-f097-4389-b8ec-76fb6d874a86",
        "cursor": {
          "ref": "8504c682-c357-4938-a904-80b0363b6240",
          "length": 244,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "49e4f90f-e9a7-4bbe-bb25-0c4182bac78c"
        },
        "item": {
          "id": "74eda372-f097-4389-b8ec-76fb6d874a86",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "a8341bd6-9e48-4a6a-94ee-4553829289de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dcab1d8-7f1e-4497-9aef-c1f4374a47e6",
        "cursor": {
          "ref": "9b082964-d42c-49bb-b288-3775bc490b99",
          "length": 244,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "42c741a1-390f-46b2-93a5-ab0841f01546"
        },
        "item": {
          "id": "5dcab1d8-7f1e-4497-9aef-c1f4374a47e6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3b81da46-967d-48db-99d1-364679de8640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37fa7aa-38a3-4300-9490-45b314ac8937",
        "cursor": {
          "ref": "8fdf8fac-3402-481e-8e96-426158c33992",
          "length": 244,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1b285ebf-e966-4475-9f11-c0cc6ffcf9a8"
        },
        "item": {
          "id": "e37fa7aa-38a3-4300-9490-45b314ac8937",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "83980761-bfee-487e-a919-89574e0880b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ded3b82-ea46-48a4-ae59-db8afcb35835",
        "cursor": {
          "ref": "ceb7aa2c-5aae-4ee3-bf27-ef5566496b9b",
          "length": 244,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "248aeb9f-1c60-45d6-9409-d12fce87650c"
        },
        "item": {
          "id": "2ded3b82-ea46-48a4-ae59-db8afcb35835",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "194fb062-60c1-4342-b924-4c94a336d88d",
          "status": "Created",
          "code": 201,
          "responseTime": 2691,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "0b03a4c7-777c-4895-a3ee-fc48abe98cca",
        "cursor": {
          "ref": "fe30add1-6b70-4a87-a5bc-6a4f9b79a1ff",
          "length": 244,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3b76f1da-1ebb-4b7a-8c37-8672cf9ef61a"
        },
        "item": {
          "id": "0b03a4c7-777c-4895-a3ee-fc48abe98cca",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9f0777c4-093d-418a-b397-c918ebd79981",
          "status": "Created",
          "code": 201,
          "responseTime": 2402,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4f0d94b1-67c2-4d50-8c8a-2acd9dd636ed",
        "cursor": {
          "ref": "d80dbf6c-a333-41fb-a493-5cc0a39d331e",
          "length": 244,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f94d1946-4ffb-401e-bfd0-d56aa229ee2d"
        },
        "item": {
          "id": "4f0d94b1-67c2-4d50-8c8a-2acd9dd636ed",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "7657584a-3c60-451e-9e53-8dd9ce0f1e3a",
          "status": "Created",
          "code": 201,
          "responseTime": 2096,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "1ae06a5b-3480-4b6f-808a-b6783a2aa490",
        "cursor": {
          "ref": "394cc51e-9d9c-4ddd-8f13-66bd251018d0",
          "length": 244,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "0f49d037-c8a9-4e4f-8705-e26a7aafcd11"
        },
        "item": {
          "id": "1ae06a5b-3480-4b6f-808a-b6783a2aa490",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "76bbaa50-c13b-47dd-bdc1-bbebfb1dd58c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c09bff3-0786-4dfa-9260-18145b17182c",
        "cursor": {
          "ref": "78473a73-7a6e-4f50-a094-3b0b30942615",
          "length": 244,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "54beeda1-9846-4762-bcfb-1a5d80288793"
        },
        "item": {
          "id": "4c09bff3-0786-4dfa-9260-18145b17182c",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ff9628d8-2dd8-4457-a2ac-bfacb0b266c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b292e8b-a9c4-4bd0-ac17-214d44af4668",
        "cursor": {
          "ref": "2701c90b-78f0-465f-98f5-f7930b84cb8a",
          "length": 244,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "87229eac-f5ff-40c7-b544-95e8bb389d8a"
        },
        "item": {
          "id": "5b292e8b-a9c4-4bd0-ac17-214d44af4668",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "1e530b96-40f0-4178-8752-1db1be31f0c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c75e5b-f9d2-4965-9d1b-ab4f316a7711",
        "cursor": {
          "ref": "7e4eac83-6311-4394-8083-67a9d6640d23",
          "length": 244,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "add99807-3f74-4670-a726-50490a3ea227"
        },
        "item": {
          "id": "b0c75e5b-f9d2-4965-9d1b-ab4f316a7711",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "ceeecb92-6641-456f-bafd-b47ba101a301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d916388-15db-4b88-90a3-906572f2356e",
        "cursor": {
          "ref": "cc72b8be-a3f8-443f-a2ec-6fbafce1f5ed",
          "length": 244,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b5190df2-51ef-4fea-843b-65055ec266b8"
        },
        "item": {
          "id": "6d916388-15db-4b88-90a3-906572f2356e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "aaef309d-4796-4db9-8862-ec57c7309ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f926f789-5491-46e4-a22a-b83bb83f63de",
        "cursor": {
          "ref": "3d3923c6-9938-4994-8c71-f715a696df32",
          "length": 244,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "14f61a9e-090d-4285-8614-84630070678b"
        },
        "item": {
          "id": "f926f789-5491-46e4-a22a-b83bb83f63de",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "20547e90-a296-4308-8680-7732963d6a73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d509b2e-f12b-4949-9552-7daabdaa7cd9",
        "cursor": {
          "ref": "1beb9286-ef1a-4fb0-88f7-8d3ff6a5b52e",
          "length": 244,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "505d6872-5066-409f-a24d-a41fc829da8a"
        },
        "item": {
          "id": "3d509b2e-f12b-4949-9552-7daabdaa7cd9",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "55f33039-d509-4d20-a06e-53f8645c12a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c23c491-fe24-4df1-a608-43bb43d9dfb5",
        "cursor": {
          "ref": "b1f19592-ae7b-4594-96d2-1a81ff79da56",
          "length": 244,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ef3ca0ad-2fef-4e13-8fab-5af4847107f0"
        },
        "item": {
          "id": "2c23c491-fe24-4df1-a608-43bb43d9dfb5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "9012f5c7-9b61-411d-a49f-3cc228dadd7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64679ad9-ad03-45d4-85a7-cbda5ca67724",
        "cursor": {
          "ref": "9c59c872-824b-4db8-9146-884ddbc8fe4c",
          "length": 244,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "0e799aed-6ac7-4b84-b2e9-8de49facd95a"
        },
        "item": {
          "id": "64679ad9-ad03-45d4-85a7-cbda5ca67724",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e9ec8097-f806-44d3-b92b-8649a3d79486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec29a997-c39e-48ab-8e95-76961334219d",
        "cursor": {
          "ref": "1bc7662d-a0dd-48b2-aa14-642a1bf607e5",
          "length": 244,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7d97f36f-04e6-4365-9589-32b4536fa06d"
        },
        "item": {
          "id": "ec29a997-c39e-48ab-8e95-76961334219d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "818fdc48-8f97-4a25-8f64-b14a5885c645",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496f9134-dc7c-4890-b2c5-558b44fc2468",
        "cursor": {
          "ref": "ec06cefc-97f8-4fe9-a499-105a1ea63fe8",
          "length": 244,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "09b5e2d3-f95a-4c8a-9031-f5a67d8852c8"
        },
        "item": {
          "id": "496f9134-dc7c-4890-b2c5-558b44fc2468",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e3c2f824-f746-4d6a-999d-36ff74c1864e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1459144-17c7-4ed9-b1fb-05259744ce1e",
        "cursor": {
          "ref": "62166b1f-2ee2-4934-ab3c-291c871b1624",
          "length": 244,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f390ab47-0531-449c-8049-b483485957b0"
        },
        "item": {
          "id": "d1459144-17c7-4ed9-b1fb-05259744ce1e",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "ea46644d-2e4b-4801-b7c6-78f76bf4b22a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bbcd5d2-cf79-4ff8-9511-7ae70cb686cc",
        "cursor": {
          "ref": "292378e5-b7a0-4ff2-b538-d7ef2a76df67",
          "length": 244,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8f976ae8-5f98-4991-9d9b-4bb8b0e49fd4"
        },
        "item": {
          "id": "2bbcd5d2-cf79-4ff8-9511-7ae70cb686cc",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "2646f38c-0fe9-4207-848a-cbc030f86c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d27327c-4770-4803-a0e1-8b19222c01f4",
        "cursor": {
          "ref": "1d7f2524-002a-48a8-9f82-c77928efe2f7",
          "length": 244,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "43431110-4a38-421c-946e-2b8205d18d2c"
        },
        "item": {
          "id": "5d27327c-4770-4803-a0e1-8b19222c01f4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "c566b882-b6f0-4dae-8cc6-9c3027ea0036",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e750ab42-7199-4e9f-aeeb-4756ec84673f",
        "cursor": {
          "ref": "7115aa12-245b-4147-b5cf-bfd17d66669f",
          "length": 244,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "74b25934-fdad-4e99-a772-6b0231ead129"
        },
        "item": {
          "id": "e750ab42-7199-4e9f-aeeb-4756ec84673f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a622eaba-fa73-4f29-8e8e-e04a768af16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3cedb60-0387-4180-9e13-a0223dde7382",
        "cursor": {
          "ref": "87965bf2-278b-4421-b94e-abf7e4ad3baa",
          "length": 244,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a00ec244-06f4-4a17-95c3-0a27d7c5a01f"
        },
        "item": {
          "id": "a3cedb60-0387-4180-9e13-a0223dde7382",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "1019604a-3f8f-486e-9e4a-f1f5c1ef27cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2a80cb-314f-4399-9718-9fd8952ff2c1",
        "cursor": {
          "ref": "96234fa8-57d5-4af5-82c2-5de62eeae8c7",
          "length": 244,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "83ad261a-94db-4118-be4a-3d5261bf5120"
        },
        "item": {
          "id": "ac2a80cb-314f-4399-9718-9fd8952ff2c1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ea853135-4bdb-40e7-9e68-4f265d64529b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17e8868-1445-4239-b372-835bfb2e8500",
        "cursor": {
          "ref": "5e5fcfef-fd12-4ffa-a022-e8c28ddd3c25",
          "length": 244,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "5e14c693-418f-4c9a-b7d4-28d604bd1431"
        },
        "item": {
          "id": "b17e8868-1445-4239-b372-835bfb2e8500",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "64884ac7-7321-447b-911c-4b8da6679157",
          "status": "Created",
          "code": 201,
          "responseTime": 2734,
          "responseSize": 976
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "43d27f39-051e-4bf6-892f-8eeb0f8826b9",
        "cursor": {
          "ref": "1f3f4782-3238-44e6-affd-629173b66cb1",
          "length": 244,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "190d1ed4-2ee2-48e1-a036-d4c91658abb8"
        },
        "item": {
          "id": "43d27f39-051e-4bf6-892f-8eeb0f8826b9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3c60437a-63e9-44b0-b0b4-5c83f008f2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eae15c4-7714-488a-b8ef-1dff55db0d67",
        "cursor": {
          "ref": "e8e98f8a-0eb2-4e08-a097-3a007de1e734",
          "length": 244,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9b023648-cf19-4fea-b5ea-f18030b5b591"
        },
        "item": {
          "id": "5eae15c4-7714-488a-b8ef-1dff55db0d67",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "265003aa-b552-4b74-9ecb-4459fd261641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44d99417-9795-4246-9295-3f978d03872e",
        "cursor": {
          "ref": "9a6d92d8-1554-4fea-94da-c3569f76c666",
          "length": 244,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "9a859135-861a-4a73-9a56-690c6a9a6b1d"
        },
        "item": {
          "id": "44d99417-9795-4246-9295-3f978d03872e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "50c09094-86f2-4569-aea2-28173c3ee239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3d30ff-6b4c-4911-b7c0-40704672eab2",
        "cursor": {
          "ref": "f7fbf288-8868-4eb7-9b98-7ed7342bb6c0",
          "length": 244,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f19e82ef-cff3-4db1-8fa6-87909eca825c"
        },
        "item": {
          "id": "bb3d30ff-6b4c-4911-b7c0-40704672eab2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f72dc6c6-c285-46a4-a52d-3787b0c209d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f3b88d-ed10-47b4-a143-239632b1fb43",
        "cursor": {
          "ref": "b8b64a0b-19ac-4d2a-81b4-2e7a82c242e2",
          "length": 244,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "1df0db3a-a64e-4464-82a8-cf8c72ba5353"
        },
        "item": {
          "id": "d6f3b88d-ed10-47b4-a143-239632b1fb43",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3ebaeb4f-79ac-4a6a-a653-2314714f86da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aa8e0f9-b50f-4bd0-9cf0-f570e1ab0b69",
        "cursor": {
          "ref": "25241cca-ec67-49ff-b556-29554bdfe655",
          "length": 244,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "14899714-e3a7-4ba3-bbb4-1a5722feb88f"
        },
        "item": {
          "id": "6aa8e0f9-b50f-4bd0-9cf0-f570e1ab0b69",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f28fa9dd-13cc-4ff3-b199-719d82c0ee42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60870613-19c1-4058-bc47-f92dd875f044",
        "cursor": {
          "ref": "eefcc327-a294-4746-8b99-5704eaca4ea7",
          "length": 244,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "ff6f6f14-ebaf-4064-8d19-2d80c347eff7"
        },
        "item": {
          "id": "60870613-19c1-4058-bc47-f92dd875f044",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "71533d12-d0e9-4647-8fd9-225a910bfc91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fcfbefd-9f1d-4ddf-b658-90e96bb71a80",
        "cursor": {
          "ref": "fa09ba82-338c-4baa-ae28-60902eede89f",
          "length": 244,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "6743e2bd-5602-4190-88fd-a4a9f2f8fad9"
        },
        "item": {
          "id": "9fcfbefd-9f1d-4ddf-b658-90e96bb71a80",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5767b1fa-ef45-461f-9f78-74ef5abfcb69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0605b16c-b795-4b10-a5b1-e42b79256add",
        "cursor": {
          "ref": "7d5b3f71-c54a-4603-a9b0-54dccb808e0d",
          "length": 244,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4e0d6770-f011-4701-95b3-111171436b10"
        },
        "item": {
          "id": "0605b16c-b795-4b10-a5b1-e42b79256add",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "6a7d5a4b-3514-451e-825d-e0f76da2e15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d33227b4-7864-49df-90ac-bfa7d9a498e9",
        "cursor": {
          "ref": "3c16b6ca-6da2-4efd-b2f2-b0256a503902",
          "length": 244,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "eb3fcaa4-dc04-4fad-b738-2d9307fc0201"
        },
        "item": {
          "id": "d33227b4-7864-49df-90ac-bfa7d9a498e9",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "8884a12a-f932-45d2-8252-9d0df864c79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3101aa-3a24-4252-ae82-843c94f621e7",
        "cursor": {
          "ref": "b70247fc-28cc-48d0-8f61-388580f6ac5b",
          "length": 244,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "93db1c14-d122-4f04-95d7-4337c1c6b479"
        },
        "item": {
          "id": "ab3101aa-3a24-4252-ae82-843c94f621e7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9c5285b8-02c5-449e-9a61-f5c443c47216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d991850e-9946-4a92-9d57-a7ea58d9ff66",
        "cursor": {
          "ref": "71f275f4-3f5f-4ce1-be6e-d0b0a762ba6b",
          "length": 244,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "3f0e6e77-0b9f-4632-8d82-801d47467089"
        },
        "item": {
          "id": "d991850e-9946-4a92-9d57-a7ea58d9ff66",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "6b592dd9-33ac-4c0d-a329-c4eb08a076aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eba3836-04e3-4eae-b081-035228fe4d95",
        "cursor": {
          "ref": "dd71a4fc-1e4b-4312-930a-85b17dae4fb0",
          "length": 244,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "8f91381e-0862-459b-8656-529cc81f62f7"
        },
        "item": {
          "id": "1eba3836-04e3-4eae-b081-035228fe4d95",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "58df8c2e-0e5f-45b7-a21f-ea4146a1bc9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458a7326-c609-45c6-bc22-de86153f683c",
        "cursor": {
          "ref": "21185cd9-2369-49aa-8f15-ed8c1177f83d",
          "length": 244,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "47f6d72b-bea0-4310-a82b-33a15eca9f8a"
        },
        "item": {
          "id": "458a7326-c609-45c6-bc22-de86153f683c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f49f98ac-fe4d-4056-aba8-01adbb01bce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9300f0f9-1471-432e-be09-496283b3f57b",
        "cursor": {
          "ref": "00930f7f-29e3-416f-ae82-6ac5d7996c92",
          "length": 244,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "d18e6c3e-bdcb-4278-8aa4-ddad5d3369f1"
        },
        "item": {
          "id": "9300f0f9-1471-432e-be09-496283b3f57b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7cc0d9ff-fe22-4a71-806f-13da6681c5c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e51aae-78ca-4ec1-9dcb-206e8384b272",
        "cursor": {
          "ref": "81e9e03d-72be-40b6-8d97-db88491e3a26",
          "length": 244,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "0974aff3-961d-45f1-9390-b230524fdd23"
        },
        "item": {
          "id": "27e51aae-78ca-4ec1-9dcb-206e8384b272",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "67b11727-8b9d-4405-8c1f-e898f09bb9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333e3ea1-3468-4f96-a1e5-fca4163e17d9",
        "cursor": {
          "ref": "5362bf5a-951c-4b90-ba81-af35cd80ba0a",
          "length": 244,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cf02781c-266c-42e2-913a-7d25c5a73f9d"
        },
        "item": {
          "id": "333e3ea1-3468-4f96-a1e5-fca4163e17d9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "03a49a89-198c-4b0f-aba8-5f58773496b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a651057-e806-42c6-9661-59f351b4f63f",
        "cursor": {
          "ref": "56a5328d-0af5-4b31-9ba2-10330aa2e2c5",
          "length": 244,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4121d3bf-5822-49ea-b1b4-e6abf0715ac1"
        },
        "item": {
          "id": "5a651057-e806-42c6-9661-59f351b4f63f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "28573afd-bcfb-45ab-b542-d827ca7c2a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1824685-c71b-4086-aaf7-1560fcc7ab2a",
        "cursor": {
          "ref": "16265bd7-acc6-40d5-8f5c-c60f7e1b754c",
          "length": 244,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6c8781c6-fbca-4804-b9b0-0d85eb8b5cd1"
        },
        "item": {
          "id": "f1824685-c71b-4086-aaf7-1560fcc7ab2a",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "106f8140-6e81-4b7a-bf0b-18b403237b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "818dbe7a-1f84-40bb-9724-5f63220fd49b",
        "cursor": {
          "ref": "9ea64206-8356-4e0f-a213-5d2df0e5b219",
          "length": 244,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "040f3ba5-1224-4db5-8a08-d71278d96bae"
        },
        "item": {
          "id": "818dbe7a-1f84-40bb-9724-5f63220fd49b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "72c4537d-4fbc-4bcf-a776-72b799cb4a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac51863-2e58-4d6e-a563-6b8c5cc36ed4",
        "cursor": {
          "ref": "a9f56d6a-1dde-43ee-918e-ecde40b797a5",
          "length": 244,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "b029f91f-6694-492a-bb9f-056ce0be4171"
        },
        "item": {
          "id": "0ac51863-2e58-4d6e-a563-6b8c5cc36ed4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "e98b9a8f-9b6e-43e9-9297-c2095a124b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c29f757f-e3dc-4692-9b48-a78a21380a15",
        "cursor": {
          "ref": "32757d0e-9647-4993-b374-92bdac4987b3",
          "length": 244,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b88b3c14-1fea-4bf2-aaed-91e9216bbd81"
        },
        "item": {
          "id": "c29f757f-e3dc-4692-9b48-a78a21380a15",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "08c46cb9-108e-4262-a1e1-01a30ad2f81a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ecde92-5ca0-4e5f-bcfc-580bd149adfb",
        "cursor": {
          "ref": "8a57ea4f-a611-4057-b7be-7e62f13aa893",
          "length": 244,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "fe0c0cba-91ae-4573-8dd6-1dbfe6b39c9c"
        },
        "item": {
          "id": "15ecde92-5ca0-4e5f-bcfc-580bd149adfb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "995185c2-62b8-446e-ae11-ab271abaccea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5e5c52a-86c2-4122-a883-894b702faa38",
        "cursor": {
          "ref": "58727010-dae8-46be-ad70-91c8807c8e3d",
          "length": 244,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "faa8311c-acaf-4e97-955b-a0d33808981c"
        },
        "item": {
          "id": "a5e5c52a-86c2-4122-a883-894b702faa38",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "aa656544-7b86-4443-b93b-26dac2f1c074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce972be-c288-4d0d-81e9-b03506a7e127",
        "cursor": {
          "ref": "c7f56d60-92f1-4981-b9c1-f03a8a9ce833",
          "length": 244,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a3db98b0-9222-443f-b64c-84fbde30e09d"
        },
        "item": {
          "id": "5ce972be-c288-4d0d-81e9-b03506a7e127",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "92bfdf41-24a6-4411-80f5-a389cd51f6eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850eead8-4ecd-4df6-b8d2-39d42ee2c5fa",
        "cursor": {
          "ref": "23ea7f6f-5c50-453a-8ce8-fdccd658e1ce",
          "length": 244,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9ca94644-e9f8-43fa-a143-bd62897acc46"
        },
        "item": {
          "id": "850eead8-4ecd-4df6-b8d2-39d42ee2c5fa",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a4306570-5bc0-4685-9e43-de3b73638569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837c4600-294b-4712-9488-aac134cf00d2",
        "cursor": {
          "ref": "ba643aff-0f1a-49d5-8dd1-b6911a90284c",
          "length": 244,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9cbdbda4-cc1a-43bb-89a1-31b7821d05ca"
        },
        "item": {
          "id": "837c4600-294b-4712-9488-aac134cf00d2",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "aa893bfc-af39-43f1-8a30-3c424c55a861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf20a9a-8efa-4ab5-a715-705b4623b2a9",
        "cursor": {
          "ref": "5571d115-4334-41c1-8fa0-500ce06e5a5a",
          "length": 244,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "88a68d1d-5a49-465c-b8f0-01fd2fb03eba"
        },
        "item": {
          "id": "4cf20a9a-8efa-4ab5-a715-705b4623b2a9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "161b8c0c-efec-46ec-a79c-604e13a18177",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f495d517-7d36-4773-b506-db0e411917bb",
        "cursor": {
          "ref": "e5674f59-d35d-45d6-b388-840eff091b4e",
          "length": 244,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3c4af53b-b198-4760-869c-21dbc711384e"
        },
        "item": {
          "id": "f495d517-7d36-4773-b506-db0e411917bb",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "05d44e0e-9f49-4fe9-91b9-251acf7cf86e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd7d9586-0cd1-4401-8a99-583d558ef39c",
        "cursor": {
          "ref": "bd9db753-45f6-4028-a1ac-e50ad95ff4e9",
          "length": 244,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "93383a50-b2ad-47b3-a063-46fd9d43505b"
        },
        "item": {
          "id": "fd7d9586-0cd1-4401-8a99-583d558ef39c",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c4a79bd5-195b-4173-ab17-951cff19138c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23328a0a-6853-43ed-93a7-56fe1db43fe2",
        "cursor": {
          "ref": "489297cb-5401-4358-94d0-ee0e12197339",
          "length": 244,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "6457b765-f726-4c93-9b8b-f194897532c6"
        },
        "item": {
          "id": "23328a0a-6853-43ed-93a7-56fe1db43fe2",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "86cd5c89-fae5-4e2c-b7e5-5c78915f0228",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "da1718ba-70fe-425f-8e09-13d3ca63b340",
        "cursor": {
          "ref": "4990ca87-a820-4bab-8787-e2762159f1a1",
          "length": 244,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6479a9e9-e452-4f25-8913-01319ef52807"
        },
        "item": {
          "id": "da1718ba-70fe-425f-8e09-13d3ca63b340",
          "name": "credentials_issue"
        },
        "response": {
          "id": "f883bc00-ac77-4b9d-a9b9-a2f271f29b9f",
          "status": "Created",
          "code": 201,
          "responseTime": 1972,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "11f08279-391c-446f-a79b-c750e3b167e9",
        "cursor": {
          "ref": "175eabc8-2dbc-418c-b49c-2b0c5d09c27e",
          "length": 244,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b7f92f91-7fee-48e2-afa7-2a07b96fdf87"
        },
        "item": {
          "id": "11f08279-391c-446f-a79b-c750e3b167e9",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "eacdf577-b1f2-4e8b-b86b-4145540dc894",
          "status": "Created",
          "code": 201,
          "responseTime": 2652,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c065e85-b3dd-44e0-b6ca-d1745ccf8dc8",
        "cursor": {
          "ref": "f0af3253-3876-49de-a4fd-ca94b15ad6bd",
          "length": 244,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ffdf592a-1d25-421e-9b3f-c3cf5713ac5b"
        },
        "item": {
          "id": "7c065e85-b3dd-44e0-b6ca-d1745ccf8dc8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "4c9c0363-e9ed-42f7-844f-0ef4f6362403",
          "status": "Created",
          "code": 201,
          "responseTime": 2902,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee17ff88-bd12-4590-bc93-0b896ebb4bbc",
        "cursor": {
          "ref": "d50f3734-251b-4dba-8a88-166216a91ff4",
          "length": 244,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "bf3393e9-76b4-44d5-ab44-d93a47bde360"
        },
        "item": {
          "id": "ee17ff88-bd12-4590-bc93-0b896ebb4bbc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "852b60d4-8b0c-452a-a3c6-517758499cf0",
          "status": "Created",
          "code": 201,
          "responseTime": 2497,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "66186843-2402-4a56-8759-2e69750ca1e2",
        "cursor": {
          "ref": "2d993719-d69c-499f-bdd0-62e364a6df72",
          "length": 244,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "798f9cbd-a4b6-4984-97a4-870922ba9ea2"
        },
        "item": {
          "id": "66186843-2402-4a56-8759-2e69750ca1e2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "be04491b-f018-490d-a45b-6468363a6d72",
          "status": "Created",
          "code": 201,
          "responseTime": 2620,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-31T00:43:09Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-31T00:43:09Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "ab5f96e5-4cad-40e6-b150-d848dd765cb4",
        "cursor": {
          "ref": "9ab7092c-fb70-494a-8407-24376d4a06e4",
          "length": 244,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "b0b3b5c8-6acb-4f24-9f1c-0e288303c927"
        },
        "item": {
          "id": "ab5f96e5-4cad-40e6-b150-d848dd765cb4",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2982ebaf-3ca7-495f-b88f-bf58f9d87064",
          "status": "Created",
          "code": 201,
          "responseTime": 2526,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e4d2b1b-b473-42fb-94fb-436ce80c7867",
        "cursor": {
          "ref": "145089b8-ac01-4dfd-8bee-ba7388349e81",
          "length": 244,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a5ff42fb-3d3b-4e01-ab4b-8def6e99558a"
        },
        "item": {
          "id": "7e4d2b1b-b473-42fb-94fb-436ce80c7867",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "033909d1-95c5-4dc9-8c85-d6a644230b6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "747eb661-479f-4f1e-a39c-e2837d7bc830",
        "cursor": {
          "ref": "b6293d2d-e47c-4c89-9859-3d6362621340",
          "length": 244,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ba3c030b-949f-4c2b-9a0d-cb86c753e036"
        },
        "item": {
          "id": "747eb661-479f-4f1e-a39c-e2837d7bc830",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "302cf838-7b23-4a11-9951-58e1451bf9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f972da-f985-489e-81b9-56c7d7ee825c",
        "cursor": {
          "ref": "08945f67-8788-4a00-9204-ce174cfb6dc5",
          "length": 244,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "74111e4d-7513-4c9e-984a-1b887fed7dbf"
        },
        "item": {
          "id": "93f972da-f985-489e-81b9-56c7d7ee825c",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f08ad2a1-41a3-442d-9508-9ff3ac46d010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4f7d09-5e66-43c6-95e1-32a5f7b13790",
        "cursor": {
          "ref": "1b565ab2-e749-4ea7-b947-6d7ace4fa5c4",
          "length": 244,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e7c5ad6f-1e94-45af-b3b1-f8f7bcc170f9"
        },
        "item": {
          "id": "5e4f7d09-5e66-43c6-95e1-32a5f7b13790",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f0a1a8e3-c5e5-4f8d-b317-41a02c0c221d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "181c3745-45d7-4969-a5d2-90ee9fa22748",
        "cursor": {
          "ref": "7defb18f-1995-4e16-9b64-23736934b4b3",
          "length": 244,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7c9e4996-af91-49e3-88e1-0ec0f7ad273b"
        },
        "item": {
          "id": "181c3745-45d7-4969-a5d2-90ee9fa22748",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a9d2c4e3-d261-4092-afd1-ad689bedd6ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75136259-d6b5-4dc2-82a9-bbbbade097fc",
        "cursor": {
          "ref": "8ab6ece1-bfbd-4284-8295-ca24880862ff",
          "length": 244,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "31cca1ba-81ec-4b04-8d95-4daa6c8194b7"
        },
        "item": {
          "id": "75136259-d6b5-4dc2-82a9-bbbbade097fc",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2c434e49-9d98-42bc-851d-9b9b0a7aede0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46dd925-a839-43b5-8b0b-a1ecff0f9fce",
        "cursor": {
          "ref": "bd4ef666-127f-402a-a48a-f5cf4bca46ea",
          "length": 244,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "11400904-541e-4362-ab00-02128220ed7b"
        },
        "item": {
          "id": "a46dd925-a839-43b5-8b0b-a1ecff0f9fce",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b3212b28-a6b1-4f22-9c6c-fff6eacdfb2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72080fe0-609d-4f05-bcae-56a7f1bcf252",
        "cursor": {
          "ref": "56a7a4ac-d85e-43ab-add1-0cb23faf58db",
          "length": 244,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6dd51f61-335f-4edb-8bb2-051085a07341"
        },
        "item": {
          "id": "72080fe0-609d-4f05-bcae-56a7f1bcf252",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "7cac84b6-146d-4000-8c2a-fb05fa7b8cfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d04e39f-f5cc-40d9-9463-625ae6af2cac",
        "cursor": {
          "ref": "5d00a198-69ff-46a5-a462-139e6e05774e",
          "length": 244,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "202dec7d-4416-4201-bb70-f412fcd9e0a8"
        },
        "item": {
          "id": "2d04e39f-f5cc-40d9-9463-625ae6af2cac",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "eb5c5f2f-2eef-4796-aa03-c1d58e09c4e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88fd3cea-10f6-4741-b7dd-9d115954d652",
        "cursor": {
          "ref": "aff77fa3-3e4a-4d8d-ba01-56f851ab48be",
          "length": 244,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4a11a7a4-38c4-41a7-932f-70d57fb46a97"
        },
        "item": {
          "id": "88fd3cea-10f6-4741-b7dd-9d115954d652",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "97694adc-34ed-46f5-a2ab-acc06b5596f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b20b11-6c7f-4335-8308-8eef34412539",
        "cursor": {
          "ref": "6d0a3e74-232a-4c0f-b49e-8788aba6da16",
          "length": 244,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "351296ac-8f51-4e85-8910-018f81f807c2"
        },
        "item": {
          "id": "01b20b11-6c7f-4335-8308-8eef34412539",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "55c5e43b-f4b2-4dad-8bc3-9126e6ab2ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a897b4b0-6117-4d01-9056-d96cb7c056ba",
        "cursor": {
          "ref": "c139d890-9f24-429f-ad1c-a5f7e4278b46",
          "length": 244,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c77fc49a-d2d9-408f-96c8-7cadf734252d"
        },
        "item": {
          "id": "a897b4b0-6117-4d01-9056-d96cb7c056ba",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c7faacb1-c46f-4fa7-8a99-a603de12104d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "506bec54-ea97-464a-b336-88b4d5116cda",
        "cursor": {
          "ref": "ec85c1df-d206-4fb0-a7bb-96c3ea17663e",
          "length": 244,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8589f92c-dc67-4732-906a-34ba9bafc245"
        },
        "item": {
          "id": "506bec54-ea97-464a-b336-88b4d5116cda",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7b2705bd-2f90-4d16-98d1-5b1c2b4410f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f35c5c10-7aac-4dda-9252-e19660b210cc",
        "cursor": {
          "ref": "a558c643-7e7b-4887-8f7f-0c5de06cd53c",
          "length": 244,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b5db84c3-f7b8-417b-8881-70b2e42aa95c"
        },
        "item": {
          "id": "f35c5c10-7aac-4dda-9252-e19660b210cc",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "92c8d0a8-3692-4922-8552-f798a71cc9ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c3a140e-e846-4d39-93a2-2c1d51f12fc9",
        "cursor": {
          "ref": "0bbd489a-8693-4680-b81f-493659d56698",
          "length": 244,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "049583fa-e48b-4521-9dfe-1935ba863869"
        },
        "item": {
          "id": "5c3a140e-e846-4d39-93a2-2c1d51f12fc9",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "826a30c1-1167-4f7f-8b64-fa0817cff480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dafcf71-6a9a-44ca-8d83-cfcc768173f2",
        "cursor": {
          "ref": "672fb190-de7d-4b4e-8f51-efbf74afcd04",
          "length": 244,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "95fc8cd9-ff2b-4adf-be24-fe28fdc9a0da"
        },
        "item": {
          "id": "6dafcf71-6a9a-44ca-8d83-cfcc768173f2",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "14b7500c-1758-44f8-9e04-76c39e85f770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d7b5ab-4438-4cd8-b725-7a8753b73e79",
        "cursor": {
          "ref": "8c2ca5e7-6065-4584-9d1d-4910a7306343",
          "length": 244,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4dee6670-c114-422a-a284-91b2b4b778ef"
        },
        "item": {
          "id": "76d7b5ab-4438-4cd8-b725-7a8753b73e79",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f4091b2c-6843-41fd-94d8-23ab8233b102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572efdca-f696-4ee4-ac5d-f14c1c39ea14",
        "cursor": {
          "ref": "d28654b0-1629-4331-9922-6b132b05b4d3",
          "length": 244,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "792f74dd-1ede-4d74-90ff-35bc296c9fb3"
        },
        "item": {
          "id": "572efdca-f696-4ee4-ac5d-f14c1c39ea14",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e6f5becf-3278-4f97-aa32-194c258f1be7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983a4046-7e0a-46e5-9a08-c9d0fb29b4c3",
        "cursor": {
          "ref": "dac5384d-06bd-4adf-a6e2-54b60486915b",
          "length": 244,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "33016cef-7547-4195-a5b2-bfe462cad07f"
        },
        "item": {
          "id": "983a4046-7e0a-46e5-9a08-c9d0fb29b4c3",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "729532f7-719f-43a7-bfc0-c03d6e661c00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f59a5b35-5a3d-4f94-a9ca-bccf28bad7d5",
        "cursor": {
          "ref": "fbfc5e80-9525-491f-be4c-944e2d92ea70",
          "length": 244,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "59fe28fe-9524-4f5c-b17d-e77fa6cdf72b"
        },
        "item": {
          "id": "f59a5b35-5a3d-4f94-a9ca-bccf28bad7d5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "743dad3e-88cc-4479-acc4-2861c920f76b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5093ac41-a7bf-498c-bde3-d55ad19bd2a6",
        "cursor": {
          "ref": "44d89877-31e3-4f70-9be3-fc1fd5245641",
          "length": 244,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ce4b6e9a-6153-4684-8bc1-65a0a0f5e408"
        },
        "item": {
          "id": "5093ac41-a7bf-498c-bde3-d55ad19bd2a6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "c0429db4-68e3-4ff5-9896-2723cec7a6d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de1fe7e-9446-40b7-9545-2b96cbc40674",
        "cursor": {
          "ref": "28c91284-f8c8-4018-ad14-fef391a9d019",
          "length": 244,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "899aa66b-0022-4196-8954-18e17469022d"
        },
        "item": {
          "id": "8de1fe7e-9446-40b7-9545-2b96cbc40674",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b6f84312-3bdd-4d2f-a549-319486c43bb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9533ba29-fab1-44ea-8016-b376ace425e6",
        "cursor": {
          "ref": "14a74bf9-097f-4255-a736-2009c9857da7",
          "length": 244,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "fa235d91-3b6d-47a0-a124-03d0180cc148"
        },
        "item": {
          "id": "9533ba29-fab1-44ea-8016-b376ace425e6",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ecdf29ba-0379-4a5f-98bc-9710c6843be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4905307a-e932-4db1-91ae-db8cf5c922c5",
        "cursor": {
          "ref": "53f5cb19-9e00-49b9-90ef-12928f57228b",
          "length": 244,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "18755eee-1a3c-4fc4-90df-5aebfcdcfc1a"
        },
        "item": {
          "id": "4905307a-e932-4db1-91ae-db8cf5c922c5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "46879743-9c90-462d-b60f-475d26f7a761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796f4dc2-5004-477b-b80f-9adabc41d1ab",
        "cursor": {
          "ref": "d47cc9a1-c5b4-4a53-b523-cb65a30573e1",
          "length": 244,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3f070464-62ca-458c-8093-733f2e0b3ca7"
        },
        "item": {
          "id": "796f4dc2-5004-477b-b80f-9adabc41d1ab",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "eb679cb5-aecb-4397-a3c8-99ec4fdd82e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89230ea0-3244-410c-a9df-f4167e6e8177",
        "cursor": {
          "ref": "ff5375c1-6bdb-4595-9ed7-4e7b45a1013a",
          "length": 244,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "645ca415-9729-4b5a-be9d-241fef0ffcf9"
        },
        "item": {
          "id": "89230ea0-3244-410c-a9df-f4167e6e8177",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d9fee9ba-9d8b-45a7-8497-e74ef61982cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4ca588-689b-4339-9384-4c703f05cf9a",
        "cursor": {
          "ref": "2facd242-eb07-4057-8377-22204a15af53",
          "length": 244,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a95d3a3e-e4cd-4af1-b5c4-b228e4f85326"
        },
        "item": {
          "id": "0a4ca588-689b-4339-9384-4c703f05cf9a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "660fbffb-3dde-4a04-9b09-baf29c8a62da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e3bff0a-6cdf-43f4-8f30-afc2c5353a10",
        "cursor": {
          "ref": "81a22e39-712d-4de9-bf7d-385e645d5942",
          "length": 244,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d05ab8e8-5c64-4f6d-925f-2822d10ed035"
        },
        "item": {
          "id": "3e3bff0a-6cdf-43f4-8f30-afc2c5353a10",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "086cb2e7-a999-41ba-87d5-41591854fc23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b18d958b-8bf0-44b0-bb64-15b0741b2a35",
        "cursor": {
          "ref": "3abd657c-b155-4e36-88c5-84a0100d7be0",
          "length": 244,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "238cbf93-82c8-4e12-9239-861325ef17b8"
        },
        "item": {
          "id": "b18d958b-8bf0-44b0-bb64-15b0741b2a35",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "01c2ab02-587e-40c0-8e1c-2ffc3dfef9a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a1103d-c9a6-46ea-86d9-d2b9480f2adf",
        "cursor": {
          "ref": "6b4a04a7-04c1-4072-a170-3ba4b11d99cb",
          "length": 244,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "432de10d-c3b9-465d-9bcf-e7cb7f158c51"
        },
        "item": {
          "id": "f4a1103d-c9a6-46ea-86d9-d2b9480f2adf",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "50f6933f-5c7c-4690-beda-2c783e936514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ef984d2-f502-4d14-81aa-2e6fe4445090",
        "cursor": {
          "ref": "dac0eecb-b2e2-49d3-83b0-f5905ca43371",
          "length": 244,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1ace27c6-1da3-47ba-9a78-3e07cc5d75e0"
        },
        "item": {
          "id": "1ef984d2-f502-4d14-81aa-2e6fe4445090",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "232b0353-714c-44e4-84b0-ffe8598ca4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4c612c-f57d-43d7-9a57-e7358e4c76c5",
        "cursor": {
          "ref": "c9ffc522-595a-4715-b08e-f47b3e4b0c30",
          "length": 244,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c083ad90-7ffd-40ac-b057-a330b5c46db5"
        },
        "item": {
          "id": "8b4c612c-f57d-43d7-9a57-e7358e4c76c5",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "c59b77da-6e2c-4fe7-815e-fe10f48dd946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ac9263b-8bcc-484e-a609-edcfc7dbad99",
        "cursor": {
          "ref": "1843eeeb-5fe6-422b-932f-680bf2d81efc",
          "length": 244,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "8d653af8-5b1a-465d-81b1-87762560e0c7"
        },
        "item": {
          "id": "0ac9263b-8bcc-484e-a609-edcfc7dbad99",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "00280034-fd18-4568-80e2-535d2e0d94ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "84934492-6d15-4574-b5a8-e7f55d36eac4",
        "cursor": {
          "ref": "cc8ffab8-3232-43e9-b3ab-58ddf63dee78",
          "length": 244,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "47449099-9332-441f-8091-1d1b340970ca"
        },
        "item": {
          "id": "84934492-6d15-4574-b5a8-e7f55d36eac4",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "295956c6-6001-4050-9e71-baa511173e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028b1171-adfe-4a62-8fb0-175caf537fb3",
        "cursor": {
          "ref": "c39ad2e5-9770-4607-ad23-ceaacc58bf12",
          "length": 244,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d4a3e108-c560-4333-b8f5-2f41c8a38f09"
        },
        "item": {
          "id": "028b1171-adfe-4a62-8fb0-175caf537fb3",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "956daec3-e5c3-4596-87e8-4a4987c54b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bbc9edb-51b6-4c77-9d78-3081c95107fc",
        "cursor": {
          "ref": "69282822-21aa-47fb-8228-3123573f28ca",
          "length": 244,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "832df344-01fc-46ac-9d5c-2ad1ed1aadb5"
        },
        "item": {
          "id": "5bbc9edb-51b6-4c77-9d78-3081c95107fc",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "17bdb3b0-a58a-4faa-b04e-387a719c6edd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0e13db-abfa-499d-9d2e-297c839d32ce",
        "cursor": {
          "ref": "53bf0bde-9f1e-4553-bd50-0c204bb84c30",
          "length": 244,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5d65ee09-7ff7-4394-9881-a8232be230c3"
        },
        "item": {
          "id": "7d0e13db-abfa-499d-9d2e-297c839d32ce",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "383b048b-c6c6-4d6c-819e-76ebaec6d9e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0470002c-55c0-45a6-96e3-f629341a48ba",
        "cursor": {
          "ref": "3488d82d-9d5c-4b84-b3cc-2dfa30b2d621",
          "length": 244,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "946ba6e5-92e8-4a28-9897-98de499530e2"
        },
        "item": {
          "id": "0470002c-55c0-45a6-96e3-f629341a48ba",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "412d0fc5-b9c2-45e9-be16-c27a6f2391d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb015f0-e5a0-473f-a095-dc74997b6b8b",
        "cursor": {
          "ref": "69219c9d-3e6d-4992-91cc-6697c88643ef",
          "length": 244,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "89fd3503-7471-4b09-be4d-3c4169100ed9"
        },
        "item": {
          "id": "8cb015f0-e5a0-473f-a095-dc74997b6b8b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "e8b6fd87-7982-487a-a6f4-f7b162712d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477f5ee0-d8a3-49bc-80f3-b5f68bb7675c",
        "cursor": {
          "ref": "245842cf-66fe-4016-84fe-134c0a575239",
          "length": 244,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "86f065b2-4717-48b8-88dc-7429d71a719a"
        },
        "item": {
          "id": "477f5ee0-d8a3-49bc-80f3-b5f68bb7675c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "877df659-6f9a-419a-8899-866c588f1c8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d3e4dc-e4a8-476d-9399-f346b8e860b8",
        "cursor": {
          "ref": "5a54f84a-edc0-48b6-b7bb-62a0188b6ff6",
          "length": 244,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9e6da3f6-7b53-42e5-af0a-ecd3071c5811"
        },
        "item": {
          "id": "b8d3e4dc-e4a8-476d-9399-f346b8e860b8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "65dca8a2-bb3f-49b0-864e-c175c2f9f199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a49299d4-9391-40ed-93f3-5625b4e369c0",
        "cursor": {
          "ref": "8d87fb04-2f8d-4995-a3c7-08ef0e2e9b6a",
          "length": 244,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "80e60cfa-e33f-42ad-b332-233c100d53bf"
        },
        "item": {
          "id": "a49299d4-9391-40ed-93f3-5625b4e369c0",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "7ea7c240-15c0-4868-938c-5c8827817647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ed88625-dbe5-4973-873f-d74f46ce583a",
        "cursor": {
          "ref": "ee77dbe8-37a5-42da-991e-877efa7d5d49",
          "length": 244,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "a8449538-6fd6-460b-808b-e4ed06cbe939"
        },
        "item": {
          "id": "1ed88625-dbe5-4973-873f-d74f46ce583a",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "b03826e4-42ed-4615-b687-98f1c5e860b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e7c0cc3-6cbb-4da8-bce7-074a4c803b0a",
        "cursor": {
          "ref": "92f37f0f-ab34-449e-8c6c-a8f29f9243a6",
          "length": 244,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "1907305d-e1e9-454f-9f9c-bdb2ea098c85"
        },
        "item": {
          "id": "1e7c0cc3-6cbb-4da8-bce7-074a4c803b0a",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8ac6a14b-1595-4af5-a115-c3fbab54081f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8883ca9-8fad-4f1d-9b01-edb0283cf9cb",
        "cursor": {
          "ref": "41dd7c18-8d6a-4365-9785-df63bdd5117f",
          "length": 244,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9622e34b-99e9-46d5-a145-1b9a8858c535"
        },
        "item": {
          "id": "e8883ca9-8fad-4f1d-9b01-edb0283cf9cb",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7c30035c-5d1d-4ed4-b0bc-a15eb88bef68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e66f0295-7e37-4dfc-b4f0-346ce2c30648",
        "cursor": {
          "ref": "d9851d82-a01b-4bec-b9a0-18ac21d55184",
          "length": 244,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0fb4267c-8989-47df-9084-801de1668081"
        },
        "item": {
          "id": "e66f0295-7e37-4dfc-b4f0-346ce2c30648",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8f68e478-f35c-47f2-b432-2522e1759fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce2bfd0e-de4c-4898-8a54-0057ccad6ddb",
        "cursor": {
          "ref": "f2167061-c582-4810-b099-075fa03e6cb1",
          "length": 244,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "9f00d288-ad52-4435-b1ef-4ba71d9ca845"
        },
        "item": {
          "id": "ce2bfd0e-de4c-4898-8a54-0057ccad6ddb",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a25af35c-d79b-42db-9a31-b25487391d9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 185,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d28c570-bdc7-4632-a761-07451d5aa9eb",
        "cursor": {
          "ref": "cc18c75a-453e-4689-afed-6969a69b2933",
          "length": 244,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f355e891-2d23-4031-a1a3-24f90e3c020f"
        },
        "item": {
          "id": "2d28c570-bdc7-4632-a761-07451d5aa9eb",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "287843b0-b43a-4748-8568-bb16f9326db4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c506a003-da41-4f6a-87b3-af85f3936fe8",
        "cursor": {
          "ref": "019de019-9f4b-4fec-9f0a-a0273e72e842",
          "length": 244,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "76a462f6-b1d8-4c8b-a853-0f26885f8924"
        },
        "item": {
          "id": "c506a003-da41-4f6a-87b3-af85f3936fe8",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ed1682e6-d09c-4fbc-9679-3ea51d72c1d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9176d0f-c0df-45fc-9ad8-d9b26ad6e19b",
        "cursor": {
          "ref": "5290b98a-0a60-4416-a43c-52b9bfd84ca2",
          "length": 244,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "07d16a36-1ba0-4eae-bdcb-a606e3247c45"
        },
        "item": {
          "id": "f9176d0f-c0df-45fc-9ad8-d9b26ad6e19b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a50c53a8-871d-43b9-b091-21b0e95c0704",
          "status": "OK",
          "code": 200,
          "responseTime": 1081,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "1543fe13-b60f-42c9-b07a-d006d7c7c9db",
        "cursor": {
          "ref": "907d71cd-bf7e-44ef-81eb-e9a58b78dc28",
          "length": 244,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ee7a025e-015e-4744-afc1-0eb438af8e4e"
        },
        "item": {
          "id": "1543fe13-b60f-42c9-b07a-d006d7c7c9db",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "74da593c-e746-4178-9935-75875410a703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d3fdde-817c-4178-9ef2-db64d8b6df13",
        "cursor": {
          "ref": "cf3d30e6-3022-48ee-9f37-c0b11535a857",
          "length": 244,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "35a912d7-25f7-4502-9bd6-7d1ca281f4bf"
        },
        "item": {
          "id": "61d3fdde-817c-4178-9ef2-db64d8b6df13",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "a3d90537-efa7-43f6-8767-e68894cd501d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 189,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4994c62f-dde1-4f24-8528-57cf48d6cacc",
        "cursor": {
          "ref": "b1a7dd74-6acf-4966-a4d6-f689b744cfbf",
          "length": 244,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "76c485a3-de39-4536-a1d3-6c40fbf9fda8"
        },
        "item": {
          "id": "4994c62f-dde1-4f24-8528-57cf48d6cacc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "6994b40d-b316-43b8-9377-14fa870773f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b566531-935c-4702-b72d-1f882c15a9f9",
        "cursor": {
          "ref": "23327e13-d7ad-436f-88ff-7db3237f1038",
          "length": 244,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "415a2976-0ae1-495d-a01e-b78388517ca8"
        },
        "item": {
          "id": "2b566531-935c-4702-b72d-1f882c15a9f9",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "e1b65d91-14dc-41c3-9a92-1e16d2a99418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99b929eb-723d-4450-b1fe-32630997ff42",
        "cursor": {
          "ref": "543b0373-3062-4f2f-9efb-90cc61bec8cb",
          "length": 244,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "6bf3b937-6c56-4780-86c7-12b5a37c9bb8"
        },
        "item": {
          "id": "99b929eb-723d-4450-b1fe-32630997ff42",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5f7583b8-cbd1-432f-9cda-fd651f7ef502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea1acaa-bff7-40f4-8731-3debed2cf7c1",
        "cursor": {
          "ref": "5a7061c2-5e6c-4599-80b7-60fefa19c5fc",
          "length": 244,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ad93db28-a06f-411e-91c4-f640b95912c4"
        },
        "item": {
          "id": "9ea1acaa-bff7-40f4-8731-3debed2cf7c1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "cd59c2ec-90bb-413a-86f1-2dcd0aa129b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4beb8af4-6531-4c79-b2d7-b8ab0e97bf1e",
        "cursor": {
          "ref": "dd7c8de6-c56f-45d2-b186-44fe2a96371d",
          "length": 244,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7d4857a0-0c6a-487b-a5d8-a9f11e0f76df"
        },
        "item": {
          "id": "4beb8af4-6531-4c79-b2d7-b8ab0e97bf1e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6b838899-6e04-4c52-8edb-9824fc5ae811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35871c3-67a2-4c8d-9c08-ff31d49a12da",
        "cursor": {
          "ref": "0d867307-abbf-439e-a59e-7857146e4cee",
          "length": 244,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "db1c2c78-1312-427b-9ccd-4e78000578b4"
        },
        "item": {
          "id": "d35871c3-67a2-4c8d-9c08-ff31d49a12da",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "648af5d6-e41a-4146-9536-78f6d38f3753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fbd37ec-daf5-44f6-8bf8-68aa7e2a42f9",
        "cursor": {
          "ref": "baaac26f-5a54-4b4f-81b7-9e137fd905f6",
          "length": 244,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a21d5083-9eee-42a7-a9f2-532ae0f1dab5"
        },
        "item": {
          "id": "7fbd37ec-daf5-44f6-8bf8-68aa7e2a42f9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ef945148-ad5e-409f-b474-67fcc656b7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f30d51-3c8b-4ae4-966c-c50a240f2e7b",
        "cursor": {
          "ref": "d25b7db6-d8a2-402e-8783-e9331c7a81a2",
          "length": 244,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "7abb39d6-c88a-423f-a6a8-757ec9f7d1b1"
        },
        "item": {
          "id": "71f30d51-3c8b-4ae4-966c-c50a240f2e7b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "c55508db-dbb8-4f43-ad65-3ef9b4916534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8103322-1710-42aa-a421-f98a60cf342b",
        "cursor": {
          "ref": "ab32d7c3-9415-46d2-be62-33092222cb41",
          "length": 244,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3b9ae6e9-0ed7-46c4-953a-d9301f5dffb7"
        },
        "item": {
          "id": "d8103322-1710-42aa-a421-f98a60cf342b",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a281f38c-e9f9-4de6-b0d2-c0c7ca5a85da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a25d0ac-b938-4ea3-8200-bb336cf9d353",
        "cursor": {
          "ref": "3cb6b1cf-6ef0-4056-8e04-6d8fea24782d",
          "length": 244,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "44ad9d80-b31b-44dc-8e96-e2bab6864554"
        },
        "item": {
          "id": "4a25d0ac-b938-4ea3-8200-bb336cf9d353",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "65aa4e1b-c7f8-45fc-934d-79c11d64075b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fc5ed30-23c7-4fcb-8a10-c877b88866f8",
        "cursor": {
          "ref": "3fbffa87-1885-4aa8-9ddd-7f116c22a42e",
          "length": 244,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "e690c153-574e-4a28-b0a9-3e4ac2f96c6b"
        },
        "item": {
          "id": "2fc5ed30-23c7-4fcb-8a10-c877b88866f8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "dce0e850-4f4b-4595-a7ab-efa92734a802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ba41559-e10a-4f75-9f1d-b86c2edf9fc3",
        "cursor": {
          "ref": "c9048784-26fc-4fe6-8456-ff08370107b5",
          "length": 244,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9aa3f8e7-2652-4621-9f70-6f2ec01e7852"
        },
        "item": {
          "id": "8ba41559-e10a-4f75-9f1d-b86c2edf9fc3",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "121907b6-66a3-4471-9012-b7b6b7afa9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cac5f08-9fff-400d-af95-96700438270a",
        "cursor": {
          "ref": "08b08f36-e66f-4d9f-9746-87beec224b31",
          "length": 244,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "246f3052-ffe5-4a70-ad3c-6fcdb9891b57"
        },
        "item": {
          "id": "1cac5f08-9fff-400d-af95-96700438270a",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "0d200284-b30e-4ed0-8f67-947a9b734697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdaa66eb-b762-4fa3-9b14-3c56844180c8",
        "cursor": {
          "ref": "2c16d8f6-3d4a-4510-85b3-205e641ba281",
          "length": 244,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "6bc8c14d-9a0d-4f24-aa5e-0d89b14c48f0"
        },
        "item": {
          "id": "cdaa66eb-b762-4fa3-9b14-3c56844180c8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "0a427276-1626-4c82-9891-134dea1fd9b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "939250f2-a2a2-4f2f-bc7d-b418e6cd62e8",
        "cursor": {
          "ref": "fe4945bc-2b11-4a27-b607-9f585e933436",
          "length": 244,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "05e055b7-e54c-49d7-a0b4-734bf4cfc99a"
        },
        "item": {
          "id": "939250f2-a2a2-4f2f-bc7d-b418e6cd62e8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ddd430a7-5b5d-48c6-bff0-0f8992adb7bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a14f92ce-6c50-417a-8664-9db35864e76d",
        "cursor": {
          "ref": "ff1dde8a-55c1-4960-b047-847f17c89db9",
          "length": 244,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "b58752c4-e442-4eaa-91c5-a28fb741a4a0"
        },
        "item": {
          "id": "a14f92ce-6c50-417a-8664-9db35864e76d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "1e30b7fc-0ab5-4ab7-987d-6bfa3348f7c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76401064-1eac-4349-9fb3-b9257dd7c3b8",
        "cursor": {
          "ref": "18cd9910-2810-4639-b426-67b736da2b6e",
          "length": 244,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "8a886174-6552-496b-931f-1c9ebb5e183a"
        },
        "item": {
          "id": "76401064-1eac-4349-9fb3-b9257dd7c3b8",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0df094f8-7139-40d0-8d60-f3504fc898ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b645d6-c0b6-43c2-8281-60bbd085242c",
        "cursor": {
          "ref": "f38bc66d-f0e5-4e34-a2fc-7bb2ef1230e0",
          "length": 244,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d3e311ff-40a7-4924-97ce-d0c6297a47fb"
        },
        "item": {
          "id": "52b645d6-c0b6-43c2-8281-60bbd085242c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "0921da40-4ee2-49ab-9a4a-e34f43d8223e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae601803-1434-4c3f-b6ee-258d400e5dc1",
        "cursor": {
          "ref": "b3da102b-e616-4613-b1cd-9b6b63cd80fb",
          "length": 244,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "4b3c2dad-0c9c-452c-984d-342ed846b7b7"
        },
        "item": {
          "id": "ae601803-1434-4c3f-b6ee-258d400e5dc1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "03540943-0578-4be2-b876-24f2e7454540",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a642ef31-2706-470f-9ed1-10fea0f855ad",
        "cursor": {
          "ref": "28b48ce7-e8a9-4fcf-954c-59b2fdcfa586",
          "length": 244,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0b83579a-180e-40d4-8225-b9a255b8b175"
        },
        "item": {
          "id": "a642ef31-2706-470f-9ed1-10fea0f855ad",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7c108951-e721-4115-ad15-ab82a5f4444d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a47367b2-bf71-457c-922e-043a83e10a0e",
        "cursor": {
          "ref": "8afe27a0-71f8-4c85-afe4-9065f95cb8b8",
          "length": 244,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ae24e5ad-c34b-46b6-84b2-43456bbe95a7"
        },
        "item": {
          "id": "a47367b2-bf71-457c-922e-043a83e10a0e",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ca02741f-326d-4c7a-8ed4-711c70a5d8b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d11fdddb-1cf0-4c88-ae83-ed1e882f816a",
        "cursor": {
          "ref": "f57fe1ba-7cd9-4291-88ae-82c48192edc4",
          "length": 244,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f78e6699-242d-460a-a776-216ad9884218"
        },
        "item": {
          "id": "d11fdddb-1cf0-4c88-ae83-ed1e882f816a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "7356a752-1427-4547-b5d9-0cd80445c0aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fcd9ba9-7895-4352-a752-5102ce3224d0",
        "cursor": {
          "ref": "0ddb7a38-4908-4dda-a334-08180de340eb",
          "length": 244,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5200b98e-33ff-4a16-ab08-8e19313b87a9"
        },
        "item": {
          "id": "3fcd9ba9-7895-4352-a752-5102ce3224d0",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "b50da3eb-959e-4bd6-8a77-48ce43d32d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30531e86-bcce-4540-ba3e-0e4cbb3d8aa7",
        "cursor": {
          "ref": "944abff6-b32f-487d-98ff-e2c6693faf67",
          "length": 244,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "78a6b02c-97b3-4ce8-ad1c-f06f3bf749cd"
        },
        "item": {
          "id": "30531e86-bcce-4540-ba3e-0e4cbb3d8aa7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "282e44ea-ba20-4884-a2bd-c57e2a57e97b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b1dddad-aff4-4382-83de-9089d79866ce",
        "cursor": {
          "ref": "969c5364-84f5-4bea-9e80-284bee1526a7",
          "length": 244,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "05551ff3-bffb-4d2d-b0ee-9b0958d84ab8"
        },
        "item": {
          "id": "3b1dddad-aff4-4382-83de-9089d79866ce",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "18efab09-5449-4b7a-bb1f-3c9a54c90be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c34833a-d100-4d1b-96bb-905617d2c563",
        "cursor": {
          "ref": "7c075a5d-51d8-4e9e-ae28-af24fe4b63d4",
          "length": 244,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c8819796-1118-4026-8cb4-d812338e6b4d"
        },
        "item": {
          "id": "1c34833a-d100-4d1b-96bb-905617d2c563",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "584dca24-ae5c-4d15-86dc-ca6464c5fc3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b7dce9-3ed2-46ca-bf14-95a90d912bcd",
        "cursor": {
          "ref": "48ccb547-1ba0-4343-9345-1356358b85a7",
          "length": 244,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9998b7c6-f526-44c1-9139-4d3761b96906"
        },
        "item": {
          "id": "b8b7dce9-3ed2-46ca-bf14-95a90d912bcd",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6ed424ba-8ee8-414e-874d-708f62703246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce2723e-39fd-4710-9ca7-902b1550325d",
        "cursor": {
          "ref": "807366aa-86eb-46ab-9515-613af7300665",
          "length": 244,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "40c1a64b-5688-47ef-8a1e-912b2ecc8f6a"
        },
        "item": {
          "id": "2ce2723e-39fd-4710-9ca7-902b1550325d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "d4f5af68-7d06-44cc-baaa-ee6cd3fa4b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69db18a-ab6f-43d4-9c50-4125a15e71e0",
        "cursor": {
          "ref": "31db507e-1813-4567-8cd1-7d9469376cee",
          "length": 244,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "84ad0d78-9faf-46c7-ab4f-217c7d456ea7"
        },
        "item": {
          "id": "c69db18a-ab6f-43d4-9c50-4125a15e71e0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "3a12a13e-9c92-4a1a-af9b-ef00cc38f6b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "149f4630-2060-4225-9563-1b9acda8e082",
        "cursor": {
          "ref": "f7bca5d3-08ae-4604-9753-30b338d2c67f",
          "length": 244,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "bb199976-853e-4221-8f72-28a89e9fa73c"
        },
        "item": {
          "id": "149f4630-2060-4225-9563-1b9acda8e082",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "916c4989-fdd3-4ca8-924e-aa2a546295a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b2b2ef-95d0-4dc0-a9e4-bcbbf841d771",
        "cursor": {
          "ref": "4d4f74c0-76db-42f2-8d54-298ba3b99cf5",
          "length": 244,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a04ad648-a80b-4e0c-859b-c6bfa68027f5"
        },
        "item": {
          "id": "a4b2b2ef-95d0-4dc0-a9e4-bcbbf841d771",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8e3476e4-bd0e-4637-a605-0c09161060f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6fe4b0-aab4-4ace-ac3e-c16e8210c304",
        "cursor": {
          "ref": "f7a61249-ac6f-4f6f-b6d3-f3d9df77f85b",
          "length": 244,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1c325f43-e68b-487a-bb8c-cd6ecc89363f"
        },
        "item": {
          "id": "9d6fe4b0-aab4-4ace-ac3e-c16e8210c304",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "075f7abc-6a19-4e5a-b484-02cf20e932b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62419f80-5861-4107-8bf1-3cc7cdfb3339",
        "cursor": {
          "ref": "0e29447e-da34-48a2-8fe4-7032ea15795e",
          "length": 244,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "bb9f691b-6a3d-42c9-92a2-d71e33f30019"
        },
        "item": {
          "id": "62419f80-5861-4107-8bf1-3cc7cdfb3339",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a95f4b0e-5f1e-4591-b06f-31ae358d364e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ce2f81c-a7fe-4010-9677-0ac93f31b82d",
        "cursor": {
          "ref": "25a95658-1d56-42d1-8a5b-5cdd1d6dd90b",
          "length": 244,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "b3a80fdb-833a-4db8-b8a4-c4b117342ebe"
        },
        "item": {
          "id": "5ce2f81c-a7fe-4010-9677-0ac93f31b82d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1837a91c-2322-4e82-b79b-a561b0873647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d213193f-7943-43ea-af80-07a0adf10285",
        "cursor": {
          "ref": "5cc215ac-2aaf-422d-ae5a-5e70939976d8",
          "length": 244,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "37061bde-46a5-4a40-bf87-bdcaff8af0e2"
        },
        "item": {
          "id": "d213193f-7943-43ea-af80-07a0adf10285",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "83b42aa4-8a93-49bb-8a13-c258b53046be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b20dfb3-327e-440e-8e35-32793ebb6c42",
        "cursor": {
          "ref": "1247de6e-9da3-4abd-8954-166ab9c377b7",
          "length": 244,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a7830912-9a11-468c-806b-250f68b1e7e8"
        },
        "item": {
          "id": "9b20dfb3-327e-440e-8e35-32793ebb6c42",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "af335d4f-bc48-4f85-8f32-251b679f7bd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2148799a-ad4d-4069-a981-966a02156667",
        "cursor": {
          "ref": "1e65414d-a46c-41e1-98b3-8ab0929fcfa0",
          "length": 244,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4b7d955e-bef9-4ba1-be18-b3ccf0bd0a28"
        },
        "item": {
          "id": "2148799a-ad4d-4069-a981-966a02156667",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "96e7b0de-259d-41c5-ac47-8992d94d2b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f64eb0-eb12-4cad-b8f2-0a3814efb528",
        "cursor": {
          "ref": "a4393a9d-576e-4272-9296-9a850a6cb488",
          "length": 244,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "175d7315-1d71-424b-b9f6-8ba7535c4dc0"
        },
        "item": {
          "id": "12f64eb0-eb12-4cad-b8f2-0a3814efb528",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "53e3a321-0c32-4b50-a575-4cf65f7afb52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60153203-284d-4589-b9d6-3c512d7bb657",
        "cursor": {
          "ref": "fd9cd53f-81c6-4f4d-9809-d68a4bbe21ee",
          "length": 244,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "bcb5389a-1a3c-4ebe-a305-a6d63326cc83"
        },
        "item": {
          "id": "60153203-284d-4589-b9d6-3c512d7bb657",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "1af10116-b912-4457-88ab-6ed436549128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9d7bf8-b213-4c01-91a9-c586638773f7",
        "cursor": {
          "ref": "edaccd06-9625-45af-81c3-f318593ae976",
          "length": 244,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "96199dae-08f3-4112-b4b5-d0262296670a"
        },
        "item": {
          "id": "4d9d7bf8-b213-4c01-91a9-c586638773f7",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "ca4f2886-2ac6-4a59-ba41-1ae8042086a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daff80fa-15cc-454c-90b9-3fc7bfcb8418",
        "cursor": {
          "ref": "ec0cf15c-ba38-4084-b288-0dffff19119e",
          "length": 244,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "6a1863a5-656a-4367-a3d4-666f8fac2364"
        },
        "item": {
          "id": "daff80fa-15cc-454c-90b9-3fc7bfcb8418",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "72f1a8c8-1689-4f08-8bb3-5fb78b012370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ef7e33-b84f-41fd-9e27-fd1a10b5dbfb",
        "cursor": {
          "ref": "0c3702c5-62a3-4939-8016-4551d2f10b2c",
          "length": 244,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a370530f-76c6-4be0-b43b-4004d479bd3b"
        },
        "item": {
          "id": "65ef7e33-b84f-41fd-9e27-fd1a10b5dbfb",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "27ebf901-3855-4cf4-b42d-4f6a39838fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00606c04-3dbd-4c93-9fae-1195483d1ac5",
        "cursor": {
          "ref": "b04eb714-00c1-4f00-b8ec-a766aebe1678",
          "length": 244,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7ecb4f27-ea10-4033-be9f-cb2770d29df5"
        },
        "item": {
          "id": "00606c04-3dbd-4c93-9fae-1195483d1ac5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "830dab7c-39e8-42be-affa-d02434717674",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0154571-d94f-4e54-9422-8d3392e00425",
        "cursor": {
          "ref": "ac970aef-c3d8-4437-a8b2-bd875d262653",
          "length": 244,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "dccbc48f-fcfb-4399-8813-a1deec2c5571"
        },
        "item": {
          "id": "c0154571-d94f-4e54-9422-8d3392e00425",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "2c97608f-d0ff-4ca2-906d-6b6d705595d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ef1b997-b0f9-42e8-992c-6d3a27567bf8",
        "cursor": {
          "ref": "122d4c46-a1a4-4436-bf0c-0bfbaededbca",
          "length": 244,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f06586f7-f002-401e-9130-8c90b387f37f"
        },
        "item": {
          "id": "0ef1b997-b0f9-42e8-992c-6d3a27567bf8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "4fa54a6e-b7d1-4982-b0ec-5e1f8d907aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079a3f84-9f25-4b8a-ae18-09ee4ed85259",
        "cursor": {
          "ref": "13412fdd-444d-4707-9c85-e3b20d34856c",
          "length": 244,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4a7411b6-b2b3-4bba-9571-c7825e9dfb41"
        },
        "item": {
          "id": "079a3f84-9f25-4b8a-ae18-09ee4ed85259",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4cd892bf-2f3b-4149-bf53-281f524d952b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ddc86c-a26a-46b2-8969-6325ac546c13",
        "cursor": {
          "ref": "84756246-917c-480a-9e17-5ca4e664b59f",
          "length": 244,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "b1e37fe5-baf6-4855-9f32-f7d4314f99c9"
        },
        "item": {
          "id": "c9ddc86c-a26a-46b2-8969-6325ac546c13",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "7fd740ec-74a6-48f0-ad17-edafc87753c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1869643-a208-4749-afb7-64cafcf23cd6",
        "cursor": {
          "ref": "58cb4f56-cfc2-44e4-a5da-13cb2c0cec00",
          "length": 244,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "13590d52-fc5c-4c61-ab32-8a1da195dfc7"
        },
        "item": {
          "id": "f1869643-a208-4749-afb7-64cafcf23cd6",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3445eb4b-742a-4f24-96f2-f8a33cb2c63d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00213ba7-25eb-4912-a04b-6df9df8d187a",
        "cursor": {
          "ref": "3b23d893-469a-40e6-8264-3f4e1f0a4391",
          "length": 244,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b5ec7cf6-cf45-4ca6-a2dc-5462bacb3360"
        },
        "item": {
          "id": "00213ba7-25eb-4912-a04b-6df9df8d187a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1d4ea222-c6a1-4a08-925c-b5a207ad914a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf38d0d0-ebda-4c90-95ba-c6393fbbd749",
        "cursor": {
          "ref": "bd573d87-21e8-4476-a236-8a45e4892185",
          "length": 244,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "dc05dd7b-8b50-49ce-a34a-bd8b454fed5a"
        },
        "item": {
          "id": "bf38d0d0-ebda-4c90-95ba-c6393fbbd749",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "77ff6a36-1a80-42d2-bcb5-e0c8cd610a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25c5af8-534b-4aab-91dc-4150b81c0deb",
        "cursor": {
          "ref": "d47652fe-3d4a-4ed5-ae79-c69e82b2b152",
          "length": 244,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "95e6c0d5-25d1-41c4-a6cc-a398021b9ca0"
        },
        "item": {
          "id": "d25c5af8-534b-4aab-91dc-4150b81c0deb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "18d5f7d8-c8a5-45f1-a6aa-5dcdf588972a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2743fb-b5a1-4bd0-b564-3ad15701b2bf",
        "cursor": {
          "ref": "0e2c0620-f14e-4c09-acad-7fa21194fa6c",
          "length": 244,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9b346271-4275-4b18-830c-b404d6d243af"
        },
        "item": {
          "id": "3a2743fb-b5a1-4bd0-b564-3ad15701b2bf",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6cb6df21-a23b-46fc-8555-ba8da501706a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a321eaf2-2b67-4d67-a06d-5954f9877686",
        "cursor": {
          "ref": "e6e12765-c3d0-431f-84cc-afbbfc125481",
          "length": 244,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "25725f0f-0d57-42a1-ac74-049534942f2d"
        },
        "item": {
          "id": "a321eaf2-2b67-4d67-a06d-5954f9877686",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "7998f020-8121-43e4-9650-879d5cbe9eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2101f8ac-7cc3-4288-9953-8649f8c9ac32",
        "cursor": {
          "ref": "0e02ea2a-675e-408b-85ae-7824b72188df",
          "length": 244,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "9aec1174-c26f-415c-a738-370374468278"
        },
        "item": {
          "id": "2101f8ac-7cc3-4288-9953-8649f8c9ac32",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "4aa1546e-fa7d-4d8f-b60a-97d70a270660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a05e643-33c8-4fac-81fd-ebfafd523363",
        "cursor": {
          "ref": "fa3802ad-6a30-4aac-b490-d62e808f1b9c",
          "length": 244,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "d09fba6c-89f9-4024-9aab-6179bcf19702"
        },
        "item": {
          "id": "5a05e643-33c8-4fac-81fd-ebfafd523363",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c08231b9-38cf-4719-84ea-115671613df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c66cc375-b89b-4030-b547-4c79f1ea2ed0",
        "cursor": {
          "ref": "463477cd-5de6-407f-8a0b-cb0c5741ef3d",
          "length": 244,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "25f39ec8-5f03-46fb-b5ae-a7b02e5c5894"
        },
        "item": {
          "id": "c66cc375-b89b-4030-b547-4c79f1ea2ed0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f291f3f7-a7b0-417d-aad3-f53b415c1348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db246a67-2135-49ee-990e-4a139382e3c2",
        "cursor": {
          "ref": "7f8ab83a-440e-49d0-9c3b-bfa3996d22d9",
          "length": 244,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e18e7f35-30c4-445a-b6cd-2430b4571b2a"
        },
        "item": {
          "id": "db246a67-2135-49ee-990e-4a139382e3c2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b74e2211-06ba-483c-96a2-f98b6c37025c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e7d7b6-a599-4b15-bb9e-3533d0c5b6df",
        "cursor": {
          "ref": "d532e2c1-7f48-4764-ae39-f853a7b31f27",
          "length": 244,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9d3765c8-b87e-4c44-b38e-54b0beacf53f"
        },
        "item": {
          "id": "96e7d7b6-a599-4b15-bb9e-3533d0c5b6df",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0dc79da6-359e-442d-8738-3f38d1b4063c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6947528b-379e-4bfe-b37c-b1122f66bc12",
        "cursor": {
          "ref": "c4a97aa2-27f3-47cd-b659-a96bacd61d6a",
          "length": 244,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a57d1273-4e9a-43ad-9b1b-c39dd2c0ae56"
        },
        "item": {
          "id": "6947528b-379e-4bfe-b37c-b1122f66bc12",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "78952f9b-462f-4a40-b5c5-8a7634fd7995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5529da0-1376-48c2-82a1-76fae17ad499",
        "cursor": {
          "ref": "f0e19b42-78de-436c-9017-24adbb308143",
          "length": 244,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "5379ddf4-5608-4931-9ed2-9e84c7b2b7e2"
        },
        "item": {
          "id": "e5529da0-1376-48c2-82a1-76fae17ad499",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7543fe8c-8bb6-4d73-b08e-7a218d7a4ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec032881-5995-41d5-803a-d275fd40b71f",
        "cursor": {
          "ref": "22574518-39fa-4dff-8b0a-d0009b2d7fa6",
          "length": 244,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "f1487d0c-bdf1-44ae-adbe-9cc11d1fd784"
        },
        "item": {
          "id": "ec032881-5995-41d5-803a-d275fd40b71f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "17c0d81d-f0ba-4006-a405-f0854e198a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c87cb0-98f1-4652-bbee-6417be87cdda",
        "cursor": {
          "ref": "1180e17c-cd62-48ab-85ef-e0a712644472",
          "length": 244,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c4a5e1ed-76d0-443b-9b9a-260886163cd8"
        },
        "item": {
          "id": "a5c87cb0-98f1-4652-bbee-6417be87cdda",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "2acb405d-693a-45fd-9203-f81b7592c5a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d7e514-51e0-4f78-90c9-d8b5abf36a3f",
        "cursor": {
          "ref": "b97f04bd-4198-4793-9b9b-4cfb3bcc2d97",
          "length": 244,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "d69c82ee-42e6-4de7-95a2-b7093a1223b6"
        },
        "item": {
          "id": "b8d7e514-51e0-4f78-90c9-d8b5abf36a3f",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "28314bec-f724-47b1-a275-fb3f19a115a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0495165-9a23-44b7-9829-2e15700c225e",
        "cursor": {
          "ref": "504e786d-4948-4d97-8ffd-15c83ef57569",
          "length": 244,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4d4fc3d6-66a1-47af-8075-420cc2f653a6"
        },
        "item": {
          "id": "e0495165-9a23-44b7-9829-2e15700c225e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "6966a674-eb87-41a1-aa95-b34856ff6ab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecca71ef-18a2-4ce1-8f6f-727e4b4b91bb",
        "cursor": {
          "ref": "ae95cd42-6c47-4d45-a4ac-68aaaf8df3fd",
          "length": 244,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7b8032e3-feea-4d4d-a049-db84f95506a6"
        },
        "item": {
          "id": "ecca71ef-18a2-4ce1-8f6f-727e4b4b91bb",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "31275e17-8009-470e-a438-33109eb8d6bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f054a7ba-547e-4067-bba0-a2fdbf598011",
        "cursor": {
          "ref": "8c89d91d-d679-4734-ad67-b387c5770ae3",
          "length": 244,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "4e319640-f79a-4a42-9635-9ed9b89c94e6"
        },
        "item": {
          "id": "f054a7ba-547e-4067-bba0-a2fdbf598011",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "08a7a92e-7f71-48ec-9b7c-203585e9a9a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549f8ecc-3f2e-44e4-bfb5-d8fb82c59e46",
        "cursor": {
          "ref": "49ce25b6-a9dd-43df-bc0a-7d5ce4c056ed",
          "length": 244,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "fe063b88-b507-49e0-956b-06629ab42501"
        },
        "item": {
          "id": "549f8ecc-3f2e-44e4-bfb5-d8fb82c59e46",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9059cecf-5b03-4f85-bacc-c5fe2d731f9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb42b750-0fe2-4b39-b6bf-02f79b4c0635",
        "cursor": {
          "ref": "84e0290f-513f-4606-b2f4-c6b770262ca6",
          "length": 244,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "6be89ef0-1b9e-41f8-9cb7-bb453f9e3684"
        },
        "item": {
          "id": "bb42b750-0fe2-4b39-b6bf-02f79b4c0635",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c357862a-a191-4723-a190-dce0967e47af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e34204-9df7-4de8-afa2-59a850371e23",
        "cursor": {
          "ref": "fd67e6d5-82ba-4526-9f05-ddecfa081dbc",
          "length": 244,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "d801e826-11e4-4b8f-8ebd-65028c5da67a"
        },
        "item": {
          "id": "46e34204-9df7-4de8-afa2-59a850371e23",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "aedc70d3-a72a-4b12-bbec-df79fd29749c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7205bb00-7886-4bd3-b518-c2738bf3cf89",
        "cursor": {
          "ref": "6add87fd-d6f7-4736-96fb-42ce3532dcc6",
          "length": 244,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "42e68d25-05a6-48a3-ab37-3645bde6bc90"
        },
        "item": {
          "id": "7205bb00-7886-4bd3-b518-c2738bf3cf89",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7b40164d-51dc-4d3f-ad30-d3d967091062",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce3be869-09a9-4a17-89fb-987d2d6245cc",
        "cursor": {
          "ref": "b730b7fa-a730-4789-981f-4c98e82479dc",
          "length": 244,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a46956a0-b217-40a5-83c5-737dedbf650f"
        },
        "item": {
          "id": "ce3be869-09a9-4a17-89fb-987d2d6245cc",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "90c32859-e418-47e3-b701-c7d208aedd65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f255dbbd-29c7-4a0d-9703-e0c3f533d631",
        "cursor": {
          "ref": "0797da2c-00d8-43c6-9a9d-1f0ea5e40ab4",
          "length": 244,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "72808db2-4afa-4507-8a3e-777a06284531"
        },
        "item": {
          "id": "f255dbbd-29c7-4a0d-9703-e0c3f533d631",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f36b6db5-44b8-48c1-ad1b-22f4b27f69ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23dfca65-5bd4-4e41-9cfa-23b13edfebfd",
        "cursor": {
          "ref": "d7ba9b47-611e-425f-b0ae-1f24ddee5158",
          "length": 244,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d001a1b3-6040-4744-a62d-a26ec692ad07"
        },
        "item": {
          "id": "23dfca65-5bd4-4e41-9cfa-23b13edfebfd",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "d97e5aa3-d4d7-47d7-a9f7-d27ecf37d756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5051a816-09ce-44e5-a3dc-57471d92080f",
        "cursor": {
          "ref": "a422076f-d221-4c10-bb47-19830773f914",
          "length": 244,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1113ff48-fe37-457c-8747-2c27e13adfc3"
        },
        "item": {
          "id": "5051a816-09ce-44e5-a3dc-57471d92080f",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ea9cc36f-58e8-4bad-8ecd-0e29bf3107ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "652c9290-d962-4b62-9cb6-37f527d06385",
        "cursor": {
          "ref": "b8584751-0bca-4f56-8eb9-e88b7fcfaa9f",
          "length": 244,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "0f411b7f-76ef-4b85-b97a-b3a496c61631"
        },
        "item": {
          "id": "652c9290-d962-4b62-9cb6-37f527d06385",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "66e4d379-9c40-423a-ad3b-a28277a9ab74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ab42fa-6ce5-418f-8df1-a3c204816411",
        "cursor": {
          "ref": "c1053154-a4be-4c5b-85fa-b33893d0462f",
          "length": 244,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "49e30be7-54e9-4cef-9ea7-0c318a4fd648"
        },
        "item": {
          "id": "29ab42fa-6ce5-418f-8df1-a3c204816411",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2a840713-2e62-451a-ae70-533ca6671a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb6072c-a21c-4c34-af4a-52ef9d316d87",
        "cursor": {
          "ref": "15fa5985-3f4e-45c3-98c3-fc5230e09b77",
          "length": 244,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "c2a2b254-cc87-4fc8-9de4-a4f8d56742dc"
        },
        "item": {
          "id": "0eb6072c-a21c-4c34-af4a-52ef9d316d87",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e99efb70-a4bf-45e9-85d0-dc59ef9b60d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c51e89-31a1-406a-bd78-32456a9c020a",
        "cursor": {
          "ref": "f2fd8e3a-1969-46a7-81c1-5a1ffa7379cf",
          "length": 244,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d3249c87-3869-42ee-b2a1-341aa3e4c95f"
        },
        "item": {
          "id": "37c51e89-31a1-406a-bd78-32456a9c020a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "65db5d5e-8aeb-40fe-afa3-35bf4d7c491b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba1eaa38-4823-468b-b90c-3cf78ee4fd51",
        "cursor": {
          "ref": "9565f905-3e52-4c94-b606-4bfd1cb96786",
          "length": 244,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d171edef-a9f9-47df-b84a-2756188a8aee"
        },
        "item": {
          "id": "ba1eaa38-4823-468b-b90c-3cf78ee4fd51",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "5680441d-c971-4b41-8cff-8a9dca64d538",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "05d85ce8-0e9f-4769-ac14-5e10c490dc5e",
        "cursor": {
          "ref": "8cdfcb90-2dd0-412d-b98b-391a65e4769e",
          "length": 244,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "dcec362b-0fb8-461b-8d06-ed4795ed73d4"
        },
        "item": {
          "id": "05d85ce8-0e9f-4769-ac14-5e10c490dc5e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c2141239-56ae-4b29-a19c-6b02095e465e",
          "status": "OK",
          "code": 200,
          "responseTime": 175,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cdc9d82-94b6-47d3-86b4-7aaf16048433",
        "cursor": {
          "ref": "e48e1f75-ed34-452c-b6dc-579cfb5832e2",
          "length": 244,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ecf8281a-0156-4ff8-b49f-6e4bfc23d253"
        },
        "item": {
          "id": "3cdc9d82-94b6-47d3-86b4-7aaf16048433",
          "name": "credentials_verify"
        },
        "response": {
          "id": "13e1b9fd-37ae-4525-80ec-a830cc1c982b",
          "status": "OK",
          "code": 200,
          "responseTime": 1963,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "efe33a25-767d-4551-a5d3-c5525bc2c94e",
        "cursor": {
          "ref": "720ed0c2-8558-4e43-8c21-edce8f28a54d",
          "length": 244,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "e3980049-6e69-4d58-bf15-26ea3e0afe7d"
        },
        "item": {
          "id": "efe33a25-767d-4551-a5d3-c5525bc2c94e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "287694e9-0b9e-4cba-838f-1fd477dd080d",
          "status": "OK",
          "code": 200,
          "responseTime": 2507,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa93f6d2-b755-492d-9079-9cf3f12b59bb",
        "cursor": {
          "ref": "8b42edd4-21d2-4af2-84fd-39f1b245cfd5",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e1674bef-db64-4d4a-a673-f05dbc4e6715"
        },
        "item": {
          "id": "fa93f6d2-b755-492d-9079-9cf3f12b59bb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dee11ec8-3733-4a75-9f45-d9a0aa06857f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "fa93f6d2-b755-492d-9079-9cf3f12b59bb",
        "cursor": {
          "ref": "8b42edd4-21d2-4af2-84fd-39f1b245cfd5",
          "length": 244,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e1674bef-db64-4d4a-a673-f05dbc4e6715"
        },
        "item": {
          "id": "fa93f6d2-b755-492d-9079-9cf3f12b59bb",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "dee11ec8-3733-4a75-9f45-d9a0aa06857f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "82670641-5fa0-4f8d-89c7-be96f8cb0c18",
        "cursor": {
          "ref": "ab51daa8-be05-4093-9933-9fb9c69f76a2",
          "length": 244,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b3aefb79-e229-45a7-8cae-c47e5372fb1d"
        },
        "item": {
          "id": "82670641-5fa0-4f8d-89c7-be96f8cb0c18",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "519e1561-5dc0-42d1-bfa2-af0e8ee6aa75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "28d1ab8c-1376-4341-8946-ac62fb2de18a",
        "cursor": {
          "ref": "286b2a4f-9a8e-4879-8acd-42e95d4c1bd9",
          "length": 244,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "46e167e6-e484-43fa-96c7-2df2c0c80e81"
        },
        "item": {
          "id": "28d1ab8c-1376-4341-8946-ac62fb2de18a",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "95fe2b7a-e0c7-46fb-b887-ab9353d0e073",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      }
    ]
  }
}