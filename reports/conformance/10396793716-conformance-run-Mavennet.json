{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3609493c-755e-46db-9738-fafd6c2331a4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "746749ba-deaf-48c4-aa81-fcbc8dde5bae",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "481fad4c-d5ac-471b-ac74-4580c362c381",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ff476d1d-c18a-4e75-b5e1-69a98a8f1c2c"
                }
              }
            ]
          },
          {
            "id": "c7e71eb7-5d18-4e86-b93e-2d741b877ccf",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "14a69581-625a-48ee-8635-a7eb5b07ca46",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4f0b37f5-9f1a-4d0d-9473-a5045aa9cc21"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c66c226d-4ec5-42ca-abf5-8599f5e647dc",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "dff7fb89-3677-4c5e-ae62-d4e4a4992041",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cde0cfcc-3f41-4d61-b451-8a885ffc9322",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1751f091-34b7-4da2-901f-dc2c3fe3e0f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3e267af2-a256-4be6-aa1b-dc2d531da82c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d5bfea9b-34de-49b5-90eb-e1ca56b25228",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0b6771ce-00cf-4fa9-8b07-df932ea41e03"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2e65c3f8-7572-48e2-86a3-b2ba0b28373c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a8bfd863-9d1a-4d45-941a-f0d282f11d2a"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0e861b99-1351-4ea7-ad55-e4766ab1bb01",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3a4bc2d3-6933-4013-8938-567249938f3b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f74e1e55-b64b-4193-ad55-85adcc62c516",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e4306b42-2894-4bb2-a76c-b3cf7b0f3171"
            }
          }
        ]
      },
      {
        "id": "1d5ed687-de3a-4b95-b2a4-ea256b44f8f8",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "90cd937f-4baa-4396-992e-db14e0dcaff8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "617718ef-61bf-40dd-bc1e-a3a5e515e1c4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1b83d80e-5041-4d95-a1d3-b2c583736517",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eabbcc2e-67c0-4430-a4f3-460f14048e75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d1803e2-0ea6-4745-868c-2488803f178f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5730272c-a755-4c95-89db-4f549c823ea6",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f08f6eb-aa8d-432d-98fa-1ab552ac9bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "746c311f-b0c9-47e9-83b7-79f229c30b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d54f54b-ba17-4584-a370-a5592fe7e309",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4680a65-d23a-4967-b500-f5c12655f26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5829c34-c87a-413b-867d-0cfd8313369c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "acc98ac0-2587-4f6b-83cb-43c1ea0472c1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0a6943f8-98df-4648-8399-36556500c628",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9aee3a2-5cad-4723-9c1a-bee623aa642a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "33925f9b-514a-44af-9ac9-a3f708e0ff90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0babde6-2d9a-4dd9-a840-6f8a806ffadc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c85ed3a5-1dff-4398-a535-ad3a7bc9c5b6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "57905c66-ee54-4ee8-ba54-2ae78fff67b8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4088d9ac-6adc-45a1-991f-db12052adafe",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db8f3d80-2a15-44ec-868f-5577b727cb16",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "b5984898-b50c-483f-bca7-c27db5990d37"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4472a830-6f02-4151-8a9e-1b477f8bb34b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "048b7bd5-ba26-4626-b161-9ea00b5237c7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69dbe284-cc49-4ff1-9d6b-96d437ab287c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f2e099ea-915a-43be-a46c-a6542d35ca94"
            }
          }
        ]
      },
      {
        "id": "baedae04-e10e-4a56-a34e-5921e01079b0",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8bb0e606-ba46-492c-b75a-48c2ae36c170",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7e650235-d0b5-4d38-ab42-ac88ec1d69fb",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0e952ade-9689-4178-8209-4cbe8f7e8a10",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2097449-b7d8-4e48-ba13-31c8ef6a4bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a19113e-1728-41b1-8199-5bdc30a99662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96f6613-30d9-41e5-9233-6f6df5cd9f8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "36749362-cf6c-45fc-bfa8-072ccecc7f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261c7bf8-8114-4ec4-a4da-ef35eed82355",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88594abf-5ea0-400f-b60b-6a1416055c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13f106f5-878f-4c1a-b354-7b60ae7f071f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "966a67ed-ce73-4a5b-bcf2-c5316d0a005b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b2e3039d-e624-4547-9b19-dead4b2c3601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5172fb1e-01c8-47e8-8bd6-b50741dd1ece",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86e1b52-1930-451e-893c-4d3e3bb6ec61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a14c92-638c-4b4c-813a-0021bc365e67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2849c58b-3fbd-4000-857b-ff1a92ba6f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86da045c-df16-494c-a9c4-b5378ae8e5a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb703990-9516-4f4b-b264-f91e074531e8",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3604c1bc-838c-469f-a876-f8bf901a6e5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb2aa546-e1df-418e-a4c8-719621c57e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe50c97-0d92-4d96-adc0-84b86d70594b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "928e143e-5806-4d10-a4a2-165baa0b1b5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e7cc4b-4913-4dd6-90f3-8f93272dd7ac",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1244bc08-3150-465c-95c1-741f7998c884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec8a50ae-704c-4082-ab8d-e7f3503437eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b493355-017e-4d1a-b31a-e4e6d6ce1aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a0b6d25-3968-4d38-940b-b9654a3ed296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b8f99ef-12d6-4110-b5b8-7b5a4e9251d9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7bac9b-9fb7-4ef8-a925-cb1a23b9c13c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "310e763e-9641-4b16-938b-07c105dda384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa6623d-2583-4e55-9dbe-d9f7dc17a00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17c57e25-3772-4112-80ac-5cda23cb507b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a0944e-e5b3-4c17-a9e8-a34068b23388",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2508608-240a-462a-9819-69b33d379662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d0b018-275b-40c6-b108-ca1ac0439506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da72c210-aa56-4237-9d39-dc87b5adcf62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f3a5d9c4-5a3e-42af-be38-ba10651988d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc20be5-148c-465e-b875-fd9146ae78d3",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6390849a-077f-4112-82f7-e9a5a3a376f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76710b2f-0bd2-4d3c-a596-bb583054f3db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "800d2f99-d90c-45a6-8f02-01e4d8ed43e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "af3031e0-5c31-4f30-aa04-fa893c0abf77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbfc1de-6683-4605-8d65-3f62a3af55c4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "744c5cca-0293-4226-9af0-81e1bc143259",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc31ec33-fc6e-4307-9376-d7065ccd62e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38747b89-727b-43b8-893e-5407172f264a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5b75aee2-b7c4-4d6e-882c-f5fd22b9d14d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7e3c61-15d2-4c8f-a413-6adccc2ce96e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0fa3dde-11e5-4bd9-9ece-09bbe6203199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11dd52a4-4204-41fa-90a6-9538014cded7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df3b8c89-9c61-4fa0-83a7-890b44b3a50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2c34ee7-6942-4b09-ac16-deb90447c878"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dad2976-f156-4791-a058-7798cde9ee5c",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c7282e-4ce6-48d8-a8c0-55040c8c5f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea10207-9d17-48e6-89b8-ce65ff7c4de4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16dcd1d-4257-4766-9a9e-9fa2dcebf5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d26a025-80e1-442d-b27e-ca0501b6db16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c08bf5b6-6c22-4338-a165-38996e382083",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17a63b62-e6af-4a94-963c-1724ad1dd4e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64eee10b-269b-4370-8e7a-aa479613ba83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96d03530-22a3-4f82-956e-e6127bd0cd98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "79d5276e-9994-41f5-82fa-a9e49c85bbb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac3449b-ac96-4703-8cf6-9f6166beba48",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fec9257-389a-45e7-9e42-f402e7f32d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa396847-8f82-4029-bc8e-8d6019663a14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83c2962-b1c9-4bd0-bf57-0aea3b558966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f7dd367e-fec1-43e2-a14f-93e1d3d1b9fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d7ebc1-2166-43ed-9a5c-fa3eca92c439",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d062b361-b4d8-405b-b3af-0157e736a214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf41920-b1a1-4d5b-a650-33b28ba1fedd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec8199f-011c-4eb7-a1c5-bf3c4856835e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "657ce933-0de6-4c24-97e1-d377df2e3504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d69c0d57-76bf-49ef-824d-e98ba1cb40d6",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3173fcfe-adc7-4935-94bb-b4d8aeaa747b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f1f52ce-b82b-4f84-96a6-4abfe2bd1f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0797faa8-80d9-4a8a-bf40-a20c84e9d363",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d8d9484-8e41-49c0-a8d8-c62fab85ca1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af720fc8-2bdf-4d67-8688-754714bdd434",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffacf673-995e-4a84-90f8-27a4a16299c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b9cd2ad-78b1-4dc8-8491-6f515692b087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f25aba63-cedd-4e15-9d70-153b7c88df00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9874a127-05b9-412c-9df2-8662af956189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5cb01d6-21ac-4be1-978d-6977160ac211",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61804838-1608-48e0-a09d-72de53e786cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ae3561c-3c77-4cf5-a34c-b2ba9c4427fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08aeac5e-0308-48b5-8d0b-dcf3f25642f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e86d8aa4-6c57-4b41-8ff7-df39985a54cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ae9fd73-3d93-4730-b01b-c9b73b62cf83",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8cedd7-8991-4878-bdb5-bc9198a4e472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9495cfae-4a36-4e82-bbfc-b4585866be29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f324610b-278c-46b2-bc18-1b9545cae9b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "630b89e6-92d5-4d3f-9b0b-949c782ca760"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b166fc3-b6ff-47b4-ad20-70c1faf614ab",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c64f6dc-fa63-4c8e-9f69-10e322bea91e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e83909d2-3384-49d6-9bd7-69b146b81479"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee8a8cd-00ff-4a3d-b392-c1be0e106d46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f126e06d-f3a7-4144-b832-432251336732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc3147d-21b2-426e-a7ce-03fbdbe5b9b4",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812a3bdd-790b-45a0-aef4-54dd08643d70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78cdb95b-401e-43e4-8eba-3bb38b8ab23b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f96df5e-9f4d-41f1-88ac-10bb20f85d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0008251c-b861-4f9e-89f1-578443e7c0d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a489c1a-5152-4bc7-a35e-73ec8c99c558",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95fc760-65a2-4fa8-9dcf-2c7fc0901189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26e665e2-7da2-4253-8e5c-a821c8fdddb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19595dc1-447f-41da-8d1e-cdee21a2e56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "04d5d871-0db2-401a-bf96-6358567e530c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826ce1a5-12ac-4ddb-b2ce-161bb878223e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1c4cdc-b257-40ba-b5f9-64929bf4d6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cafedcb-3ca3-4d2b-8956-d3d5af442c42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064dd942-efd5-4689-ad34-ab2b77ada220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef149e57-3e0e-49f2-86a2-08917d9b1b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27934602-aa46-4a11-809a-a1a7bfe060f0",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d4087a-e10a-4778-81b0-7ffb0c393c91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "727da5f7-3828-46b6-a007-bf86906d18c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9175440-3828-4870-b89e-f4d934a10064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0be96c-1e0d-4465-ba88-4287a471c26e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbbb392f-45cc-498c-8cf7-fa3227fe3563",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "853ed6e7-21b8-4b1d-9d4f-12c92dfb9ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07f03679-630d-4d66-8543-ca8a26b47498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d0e836-70cd-4bef-ba7a-598b1572b4eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1e7741-1528-49f3-8c0c-49e08e0889c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11419f49-84e5-4935-947e-d0c187c919c5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3b39635-65d7-48ac-ba11-7b78e48a62f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fdb3c5a-ff5d-408e-8b07-436e9174d11d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "058c6323-ed91-4980-85da-ff6459d483e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c30a82d1-cc6f-45de-b1e1-2a62135e1c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2813951f-f242-481e-ba45-883ade43b1c2",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d773b07-1a7e-4e3d-9b24-69d5297d1fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af92513e-0436-4e74-8432-b1f81e0d0452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1728269-047d-4088-a2a0-7b4272ab04c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "75a1913f-3929-44b3-ad02-3f68677d6e8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "addf8686-5820-44d3-a512-7566dedef4c8",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3531756e-ead3-4879-938c-d3a9df7b6971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8ccc8f7-99b7-4791-9532-76dea9937d34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7c4722-e795-41ec-8969-fe5274549a06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a27685d-e928-4c07-b823-e428e8b4d632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c757ee-e3c2-42a2-99ab-4dccb2168f2d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b78bc33-083d-4ce4-b2c9-e3930aceec45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98f2db03-c94f-40e5-a670-09d501c19a35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15484881-a74b-48a3-80c5-3240edf7549e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "99b5370c-9915-4229-8319-c9a4ac1b928f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "755d556b-328e-41ff-8119-f6ac9cf3e8cf",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c40da8-7c6f-4edf-ac9e-3b1fa6be4748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e364afba-dc8b-4f7f-8b2f-0082420a4e9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f61a047f-52a0-4a49-ae8e-488c2b1f24d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "469538ad-4a6f-49de-9ddf-f4e47c0f305d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8498307-f2df-45b2-bd52-83e9333ad921",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aadc8054-95b3-45c1-b08f-166ffc112cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "818e883a-6aed-4b0e-9850-2ddfbba8421b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f1490b7-7e1b-441b-9af5-a73ff27ead13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "692de637-c1b8-4398-bda2-f069cf583668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281c5890-a8f5-4416-843e-6a49c534903e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ddeeaf-0f5b-4e57-a569-f81a44a9a007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88e27ce6-e18a-4316-86ba-c313bc7f4bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a3c1e5-ee34-4d44-b7fd-b79ccb34a408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "21ec0aa9-7135-4cfb-92e0-14e2d0f7ad1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a487f01-c6e9-4adf-8a64-60a6dac65182",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "985021d7-2f2c-4287-a70d-fcd6f7b8af2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b91a7e75-ea7c-46cf-b591-6d9f6de66d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91af0d45-babf-47f7-a24f-b2a806f7783b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "129d1ba9-6d58-46ce-aa82-3ecc04faea4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00d36b6f-cc83-4db8-ac4b-b8ee324ee645",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac2ecec9-41df-47dd-b567-c5264ab41bf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1abca14d-adee-4eda-9e97-535db9397435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32a40031-4062-4238-bc16-f45af869110e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c746355f-3b00-4a17-86f9-ac1ffcbd3c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85da3743-7ca2-4ab5-8109-c282b4586515",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03e0564-7a7c-4a5a-be19-e6c015b15356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f32b02af-caf7-4789-b4c8-b6d9b6cf76f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1ffd24-bcf2-4f25-b091-49e870c88913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "756fed5c-033f-4c60-8f20-2e5e6e95db56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d50cd31a-c661-4372-8b7e-33ee7ff3c470",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e85ca10-0433-448c-9c58-554fbe94c920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d0ceee9-b0d0-4a27-9189-b10977d4bd87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b95f3f-aef6-4939-8842-db5231c5a4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "1b3bf80a-3918-4b10-88fc-633ec36f92b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c277b8f-fa7f-42e3-9c07-abf70e3d64f9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc463ef9-f41f-49ea-bbf6-98753810fa14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a5d00c2-50c3-4e7c-a537-3519be75974a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6aa2e32c-6b29-4daa-a85a-d3e39870afce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6d095eb5-571b-4225-bd45-2960002dccde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5a078a-81aa-47ae-8647-7ffa4bc5e4cb",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9f03d9a-f704-4346-813c-8023b8c6bbd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7491f3e-a8ab-4f99-b345-8a008c29b682"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309e4c33-da6b-47c0-b745-815b67ad89d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1b4f5db-b8c6-476a-8371-805fb105af40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5369c1ec-e0f5-42bf-849c-7321401c6fcf",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2aab3d3-4e3e-4917-810a-db6faf5ddb80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80cef1d5-05af-4340-95fe-54825ed7c5a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e8acbf-d5f2-411e-8f77-34fe055c6c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "118f77a9-b935-4352-8fe3-131e1f63d4bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b434fd-c879-4553-ba8d-fccd1873d185",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48d8dff-f195-4fd5-997d-b77829310a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8919ac8e-b383-430e-8222-c7aaf31df7e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d0d650a-e2ef-4321-a1b4-48ca24c498d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d7ae1e9-ad7d-463c-a2f8-93708784aa96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d2edee7-8589-4fe3-8115-aa46807414f5",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4ac4543-1055-4445-816c-bf4526d73028",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2deb2df-712b-4aa8-920f-c8096816fd44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec25621-10c5-4525-81d0-52afbac7e680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "860d0611-29b5-4d12-9485-c8bc8cf62673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1333ca62-6531-42f8-9938-0e8e23f3e5ad",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b151320-7c1c-4163-a837-9be6afb9e1df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6298c3d3-ec61-47cb-9fc3-38e562d87f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cd53aad-1e1f-4494-aaf1-b8a92433b0b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5514660-6ac0-4f38-bb5e-a781684d1c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed80308-114c-46cd-8931-eee5a2f3403b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35134cf1-9f05-447d-ba9d-d734aa3b360e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bec0eee0-cba4-48fa-a18c-372f3317a4fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297b0f52-fd08-49a8-bda0-9f8f84698c1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "2d903962-88b8-42a1-a6a4-67cfe4eb8c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb255723-2e0c-4f90-91d1-2bff93810850",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b9d815-db02-4224-b062-1adfb78d5fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c5c529-1116-4720-b7a7-5879e4414a55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea95fa4b-91ac-48b7-90d3-7d8dc7c9b0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "bea0ba88-2292-45c5-ad23-87bb4f1bbdd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36dadad8-d1f6-438c-9411-de36eade5de1",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf21e05b-c07e-46a1-b585-0e9ec43ea3b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec624567-df9e-4d47-9589-4aa8c8640b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ad5724-5bf7-4cff-9ed5-7e0451686e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3c44953-c43c-47d4-8591-91f2d0b99e98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1f5fb0-bdfd-4c28-a5c4-bf8c193afede",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd2636ce-75a5-49d1-ac05-d03811143348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98d63d2b-17c8-47c4-8e92-cf010f2638f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "149ebe98-61ae-48ce-b8ae-68fa60103246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8dfbf76-7d50-45c5-994d-495d28b21eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f330b650-9194-485a-9c1f-ca33621274ce",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438ebf84-02df-41ae-9cb0-38a580b73051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3618ecbd-31be-4de9-a0db-3dcea3e3c34a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71025fc0-28a6-4bb1-8f6f-029e8fe1ac95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f61a0f2-322d-4d6d-a2e4-8a4a22e3933e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe26c546-23f8-4875-a5a7-519edc3b9c0f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1332971-1c3a-4eb6-8980-870cffd24373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09eaf0a3-b2ed-4fd1-85b9-fb2b2f7f969e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3f3227-fabd-4e5a-9303-0aa9e84c464f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0f55f19-52d6-4937-aa95-f830d5709800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0837e95d-61bf-403d-9546-b43febdce0fc",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5c1c08-0a54-4edc-a542-64748cd9c9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc635d19-696f-471d-a926-344c67ec0819"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dfdcc69-dc99-4f5d-ad84-942a964cee7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "379c61d4-00b0-4ca4-8de2-01a249655239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d73f3fd-1d26-48dd-82bd-6c6a7a7391ff",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f603aefc-4403-4d1c-8878-9c24a355cb3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7e52a55-cecf-48cf-8893-b79a2eee82d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47c0623c-d8f4-4d76-a3cb-49f0d3f072c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "12e22b29-a1e3-4924-b075-214fb2dc1f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ae23c4-ffd1-40d6-b24b-b53ac832f4c3",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2329fc99-1d7b-40a4-b3cc-5319537baa6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b554be-19ef-4004-95f2-3ab97bbde5cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f4615a6-e487-4624-adba-fa185564d6af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "82ebef6d-19ef-4b07-bf28-990a36d11ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b070a9a-1d3a-4963-883b-cc7dd48842e3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ec46bd-ddfb-46f9-89b5-beb704fee43a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b381a371-c45f-474a-b545-2f1aae918a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8dd975d-4051-4da6-a205-03d68f98539e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "78d878e1-7298-4062-8be6-315ed096e8ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0cc944-5a15-46c8-8bc4-9fcf587dac46",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae7eff1-dc1c-45db-9940-95881e7b41f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d83efd6-cb8a-4a4f-b84d-5be37c9f6c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ea1c49b-e39a-4206-ad1f-22f45a7ecd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "01fed164-c1da-4473-ab8a-0e4adcde6c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212b6e04-14da-4503-aedd-d02c80b26660",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1c2a11-550d-4707-a1f6-3af11eb98a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e8e6024-529f-4cc9-9214-a2fa839fca2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32381ba-5dd1-48de-a628-a20b042b9dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4257c226-8766-44b7-8399-a71734a4951b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e1c96d-9889-4316-bd1d-173f3986ecd0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3649cb49-3e54-4007-8c48-1fef6b64cb1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b4e829-386d-4c94-9e50-4c0e54d9e0b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbd33d6-716f-435e-91a7-7c3e850e255e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5c872be-2840-4c25-a5c3-a34057f8ba74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2932ba84-da73-497f-841c-74b5a7379863",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "230eddd4-42e7-405d-9682-60ddb0e7cfb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9f11e21-ce59-4b53-aa8d-a653b2a63d58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d215fda1-8f4d-4819-93f6-b6ff148dfea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c174d42-354c-4b3c-9957-f76887f604d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3aa0e32-14e1-480a-99de-cdfc46961bf6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a1471b-d107-44e8-8227-a98bb998b745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee9dcf0f-c46e-4469-a0c4-ed422e798528"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351cca44-31b3-4deb-9eb6-193d16a355a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "fd297a1a-3e83-4b44-ad20-51d7503a7d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99e66bf2-e085-4b18-a640-c8d8836a72cf",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fa5fad-5b11-4775-9c2f-56c0af8df8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a74f93a4-9fc9-4636-b733-e80d5a634142"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b471b60-2f84-4a3c-a48c-3f32031c479a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1107bba-2f2a-4d30-b106-b61552afb3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58169d95-a687-4290-ad40-5a259954cedd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e8fb19-7945-4372-9369-4a5af27e1357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb1ea5e6-0bce-4981-889a-30cc4ac7a0a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14974c08-205b-4a96-ab57-9fce53687a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "95a6fcad-e5f5-4227-baec-f9ea7dd39081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24da648b-3bb3-4280-9b14-fd14befef10c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2665971-bc82-4aee-bef6-c5bf7cec1ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "311a8e99-b2c4-43ba-839b-9e31b4f35d95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b0bc39-335c-474f-9eca-b65b5b335d15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "072263cb-9136-4f78-bcb0-18c1c9743987"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd41a487-513e-4309-89b5-64f4690171d6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53abb802-f5cc-4356-900e-67cfe0422ee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "055b41df-d786-40cb-bb54-1272bf3ec1c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002c667b-46df-4ec4-83f7-488df42d1b4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac206f5e-6924-429f-abe5-30fc0b530acb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f05cdb45-77d3-4d95-adb3-0f469a0a695b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c291734e-2212-4f37-8065-e508382ca4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5182d40-0228-40d0-a6b4-4ab34a154b91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89d2d0c-85cd-4cd4-8bbf-0921700bbce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8f5ef6-0259-4f7c-90da-7d66592232d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b73f1ea3-0c6b-488d-a204-8acf690788cc",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "485294ae-56ee-4cc5-a0ab-7d0d8cb9e247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3971c0-2906-4bc8-b040-3dbeb03e5ef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868b23bb-8113-41e1-9b67-c566fb6a94b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "52b3973e-8c83-4fcb-b4b4-5a14fd6a33ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f80387f7-accb-485e-b864-53dd3b96bca2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "413e77a1-dda6-4cf2-aa8d-d2ba5d2e3c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea1cfdc8-a1b9-482c-9c5a-83b14b42b43f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f607730-1ab7-4e88-b688-3b0375a1b93e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "33497e06-2ea4-4948-b537-f2dfff1c608d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96001c75-2bb6-42c3-b807-4a9e1cdfa7d0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "368664bd-58cf-4392-a596-9f9accd10a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af674087-73c7-437c-9a8e-20766f9dbb25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a0e662-310f-433f-8e71-f23bd6ab30ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "68abf5f1-aa1a-4361-b64f-dfd55696f655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d1c38a1-ae0b-4966-b11e-8946ec6e32cb",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5040aaf6-74c2-4d97-9287-69ea90adf57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f66c68-d1fb-4dbb-9a5d-be191510882e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6325eaad-280f-49d8-aaf3-1a10754cd1eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53d91173-9f90-4e48-96ee-95c020f6a90b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fb5d34c-677d-4d4d-bca4-21bd53139498",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd39f6c0-69b5-492d-95eb-2cf003c51f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb7efc2d-55e2-4e61-81f4-dcefc224a2ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6164b9c9-078b-4c5d-9cfc-8632f597b758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "144b0463-d4cf-4884-a4ac-d89ade9515b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ff3b093-af5d-46de-9302-701db8c2e802",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90c05a96-22b5-413c-85be-7381b417fa85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2706b35f-9831-4b0f-8dc6-0f9e1baf05f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e503a81f-9089-4c84-8c06-0899d3574a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ffa70919-7987-42dc-b82b-9212dc7149a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64be72c3-2609-4525-983f-d695aa1a70d1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30910b6-c414-47a4-ba5b-1014b058a002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be7d392-92b9-4ef5-8392-267710913695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c56892-c3a1-44f9-b0f9-8fdd387d9b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "04c1c317-28dc-4852-8847-3a691b760dff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90548d73-2a66-4c93-825c-f847969d30cc",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11008ffd-be4c-402b-aae1-42b0194aa309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7558fabb-769a-461e-8b3c-fbcbc5c0ca7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75605dd-7f92-4ece-800b-f04704713745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9146b99a-e2fb-4d64-b9ff-593a6ee6e8d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20a14994-ae94-4ff0-ab55-95ff411e2089",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4973604b-e7b3-4110-8f18-44be9df06c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e118f551-7cf3-4c51-8534-6330e6cb65ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7daff9fd-c4c7-4844-881c-5d1f6fa8b227",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8f9780d-c52c-45d8-b7e4-3953d664c545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7994699b-0297-4416-a087-66c71a776dce",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "733de3a7-4d9b-4644-aea3-139e7697fefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2181450-4232-4c1f-a1c7-034ab54a27ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2b78a07-f781-4378-bcc5-a6f3f7e20449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "895113a6-bf5f-461c-8055-0baae75832ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19afd33e-0156-4cc2-a3b8-c352186a2474",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ca5367-d349-4ce5-9288-01629f27bc09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a344024-f176-4c47-9a55-8a3cef4aa480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79b83b69-631f-43e2-9aa9-2f5c89744809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33801411-ad19-4618-bbba-5fd5204ec653"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56374614-15a0-4055-ba43-7cfc64249672",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8704e2ed-744d-45b1-8bb8-6fbd44d81e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1f354da-0cb5-49f2-ab51-956d92cf6dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "241242c3-a047-4316-97e2-aa0b47af2110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "91737617-841e-48de-8e79-617ad8499efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8504c1b4-f9d4-4106-924a-014be674cc05",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db15dc5-623b-4cd1-8ce0-71dae77ffbf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e859249b-f529-4bdf-8653-c4d939ff5de0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ac90365-bc0a-49b7-9f45-948fad128fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c0c7e8-6971-432e-84e5-cb2549e927eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0eed73b-8130-4005-8073-03878f8b2d31",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ace72fe-d215-4f48-9daf-626130abb6a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa16cee5-8b77-4a56-9922-d2ad36f85cfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd3d9f7-101b-4351-b3d6-3c0eb67e1447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "280406c3-f82b-4da4-bbad-e23682a01118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec1c18e-7f7f-43e9-879f-15acd8a1fb58",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d402ef71-86b7-4d2c-8c3a-5107885eb052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2b4faf3-8657-493b-ad3f-8bb18df758be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f98f3e79-3020-48ee-93b5-bc7f26068a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44602a32-8782-488a-91a7-a0e6c75297d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf48892-03f7-4601-9ba2-342df61f4549",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819324fe-b93d-41f3-97fe-8ef881772a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d058e62-92fb-465c-bc70-63b90548ec21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d33e309-85b4-4181-96ca-687b3b76b5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab713ebb-6821-4f05-a98e-8c409170a18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb418a2-0835-46f2-86c4-7e2d5bdb7a15",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "565b9400-a9de-4a94-b6b9-8de0b653bd60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91cdb367-ae07-41d0-bc07-bba0c3aa86e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e617cbef-bb0b-4488-bf45-da118c0ef19a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bc986ce-a1c3-4ffa-90b3-e5306decdf25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dcfb0eb-b841-4125-84fc-311736ed3538",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db70bbb7-50c7-4c42-99cc-8f5a1f9fab31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edf46b14-5fed-4404-ba36-1cd9a840d676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc60f498-8406-4fe6-8bd6-e96979602ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a31c87a-46d6-44b7-9117-4d9391e30af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c483908-b0c8-43c8-bac6-fc72e8dc3e96",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5720d395-4441-4cd8-9349-7d012a98042c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b01dcb1-827e-46b4-889d-34d0ef139861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a48013f-6a7d-4358-a1cd-38e08ed6da0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "517a5352-cba8-4d76-9a45-9397bfe49003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9ba1aa-de4e-4094-a107-7d67b55edbd9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0099994-a3cf-4716-9388-72fd5b98ad53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4e307ef-da04-4bb3-a332-1d4d8831ee5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097b9fb1-8a7f-4358-8283-fd71c47ae046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4c1eec50-71d3-41f8-98e9-fb2391d7c75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d02e69-822e-4b03-9c4d-402bf1b7ff0f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8eca85d-d04a-44f6-b057-32998115c7b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcc4072c-f929-4e49-927b-ff1164e48aef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7331461c-e484-44a5-99f3-d38c2578c3a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fb21c48-bb6d-4f3d-8244-0b1d6eff1e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e34d0a-42f8-43cb-bab8-e22cd8dbfee2",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e939e6-6714-4247-908a-57fb4775fedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18538960-8faf-4ac7-9fda-66147b31d649"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06c023cb-43d9-483e-88c8-e78ecfc1564c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1fae20c-9b7d-4824-a826-cebec817a5c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e74a2f-b178-4111-ad1b-cae11c778c0c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98cf5375-961a-4179-b949-434d456e3bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6e97c3-88cd-4e55-8f91-baaa5609e4bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a7e4a3-9c0d-48e3-b0b8-e1a17800b806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b28afabd-1264-4595-9a5a-ddb4645a43a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "679d8c26-3161-4ad1-b583-4e51bbe9bde8",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "882c23a2-8193-46ff-9ed0-cdf46170af98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47ebe63c-c7cb-4bea-a493-d41e0e53df06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac0dc2f6-e72b-4748-a53e-ad6566ea154e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a9c221b3-682c-4220-9e91-526b4144594c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52175299-0e97-40f2-afaf-518f748ae686",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ccbadc-4606-4e4c-83c8-b1edfa43e4ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff938d91-bd96-465f-bb85-ff0ccb8c73b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4ed5c6-fdeb-44a7-82b3-0751d3f3fd97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c65ab178-6fd0-48a9-ac8a-b7e1660faedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7337bbeb-d9d9-44e5-af08-e72af58903ba",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ddd532-121c-40f9-92e8-5a86c3180454",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a29db17-6111-4a2d-9c87-928721f869fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f0998a-66c2-4730-817a-6e533fee0896",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "07c0080b-0981-4e63-ad7d-c3cf9c368e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3a20916-2954-43ee-84bc-a13190e45333",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918fc532-3647-4320-9fee-4868eb525575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc33004-30cb-41ee-b802-51fdefc3b41b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e23e7e3c-dbae-4dcb-8166-39a2f57a5063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dcab562c-b8d8-4be6-88c6-6fc1e89791a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db0a4284-cd99-48ec-a10d-178ef9e0f436",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0194875-4f68-49f1-b0ff-6e863d26b9ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63a8d20-08da-4e0c-b510-f9d9bd3e3eb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a4483ec-18ef-4792-a914-45e19af86bb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "151fb3ca-d56b-4890-8232-33be03bcedf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9856902-568c-4d15-86f3-a432ad439879",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eccbc82-ab4c-4f3b-ac89-e6ed5501221b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53388dc9-9abb-42b1-b9b2-b06e16f49939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1814a64-7e4f-4d93-8b8b-bb6882dd094f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c37ae5d-5d65-4f8c-a152-93e1c2c13c34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "361fe126-f632-49db-a176-b020d963f270",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa3c6ba-9d2e-4722-986e-de028697c26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5f19467-4555-485c-b8ed-d985c49460c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a71cd5-78d8-4a46-ba69-60987325d2bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d8a88dc-1570-480d-951c-fd86636bf6ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378aff9b-489c-448c-a362-8f3fd1dca4d7",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "818691e1-e310-45c6-b2fd-0fb610910508",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c13b747d-ee12-4171-aab2-28e53f641d10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531569d5-2fd5-432d-94b7-2df92aa87eb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "aba361ca-edae-48ea-9f6b-6188e319a7be"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6654a2cc-1e61-4405-9567-67292e9c97c3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f77d2ebf-cfb0-483c-b927-58fa72c49c74",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d319047-3185-4602-88bb-563b6b00c630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "47c481a1-0e4e-4fdd-a951-7a84ca474662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9a0a5fe-6ec6-46cd-90d9-009da3329510",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2e24070-b788-452b-bd5a-c20aec126dae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ce7921aa-d424-4604-93c0-7e1c8e2ec73b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a871962-df1c-41d1-b7f4-c9bf27aaf65e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "97d52951-90be-4223-a67c-f3fdb7b055c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f3927602-2fde-4047-bb16-b5a5483e8e5c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "81d14585-adf8-4b62-9a99-647bf3e07d93",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "13dcbc62-f920-4348-9a5a-7643b6cf8719"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8a8f1802-436f-4afd-8631-9d76b10f68bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7a48a98a-0c2b-41d1-b3d8-f5005288c6a7"
                }
              }
            ]
          },
          {
            "id": "b8e93e82-63ad-4e24-8574-c5e2aa40ab45",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c378e162-c7fd-476f-9f63-90e1ecd04876",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "70804574-6613-4718-8193-008e3e49ee08",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac793655-2f48-4fc5-acc4-9a4f14d4d1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "a017c47f-f256-4193-bda4-8b1117c628d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49eacf09-75b6-44b8-852d-ebfc092d4446",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "096decbf-d470-4343-a967-f62a5741014e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "87b20541-edf2-43df-aec5-8559b29a657d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6f43ec9-0263-4c8a-a5a5-a1db475e7c66",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cf92bf28-b1a8-4141-9ead-403045c4c4be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5f8c3c82-6293-4185-ac2e-4c5b5ab7f7a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "36f4bad7-83d4-4681-b599-079973d50159"
                    }
                  }
                ]
              },
              {
                "id": "36a0e514-d060-41eb-a553-98961b81abd3",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f128a93-cf8a-4505-8d04-b68a92c1a26a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "953634e1-1c6e-4f65-acca-ab04429a5d63"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "441478bd-a04a-4052-be59-2878a0233f31",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "40251709-79e7-457d-bd77-4edd3079249e"
                    }
                  }
                ]
              },
              {
                "id": "197ac79d-3537-48b1-99ac-535efccdd53f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08da6327-afbe-4a05-b4b2-b51f4ad4c0e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "369fcf93-080b-4884-add9-4799dc46491a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e4c696e4-3310-41f5-a4d2-efbed0ee8a34",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bd89a1af-b075-4ad4-a7a9-228714ff1737"
                    }
                  }
                ]
              },
              {
                "id": "86c3d0a4-a1b8-40d4-b319-78880a071097",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31f6d277-529b-4656-a2bd-456212be686e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "52fa44b5-65c8-4f5b-8100-7360bc4407ba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2fb8a903-b467-4f5a-be8c-8327acb10270",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "af1ea780-f00f-4a26-9ea5-fcd66a8f41c3"
                    }
                  }
                ]
              },
              {
                "id": "5c1659f7-77f5-43ef-83f9-f8d009f9d356",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a5aa9917-dee3-4d7e-9564-3b327b7f358b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c32e75c5-694b-48aa-bfce-4c4e8fdcee34"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a746a7bc-3f48-41dd-ade8-696415857673",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7ecd7e02-6ca4-4662-8881-bcb690126262"
                    }
                  }
                ]
              },
              {
                "id": "1b073391-2344-4b81-afdf-d1e88f2214ef",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c6db4b0-ee40-4dde-adb0-43560544e2d7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "801d2dff-2656-4396-a92b-5eb666ff5a05"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85d5d70d-20c8-41e4-ad2d-e1ad83120846",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5ed1a9fe-033f-40b1-8215-0724fbd85ea3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "080cf7e0-074a-49a1-a21e-6eadc89dd047",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f06ba25c-6f55-49fc-827a-bacea9847449"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d184f9e4-cd97-4087-b47d-9587083c0fef",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c5e77339-9ea6-4125-a7e8-b58f2372fbde"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe6bb4bc-0327-4f76-967a-bf72aae302dd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0cc0f6db-99e4-4711-adae-81efdafda5dd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2afb1864-69b0-4d8c-b32d-3278514c860e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0ce4acb7-8fec-4d1a-91b7-73c715ba24b0"
            }
          }
        ]
      },
      {
        "id": "7dcd89af-e37b-4eae-add7-8324f5a42845",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "84b2b967-b4e7-4591-ac4f-aed47e57365d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9fee243a-36c8-4e53-b4cf-3f828e0b8d27",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5352fb3d-766d-4a39-a5a2-ba7fa124f272",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73ff6fc-a0b1-484e-96e9-d3abe122c29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdb5db89-3e74-4043-8c96-46c9af448438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b5392e-9325-4b54-9122-1f75aee7154b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "51bacc13-45c9-4896-8e8d-df118e732f46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cce093e-04e7-4e91-af17-fb413bfa965f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "898082aa-b0be-4efa-899f-e73c29e1abc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7336d8d1-808c-4a9b-b82e-3e33e2139b7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d09e6f5-9d54-40a2-9dd8-fc2cd56f4b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "54333497-3727-43c5-b964-3e3562791142"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5f99eb-6aa9-432e-9eaa-16b51c344fba",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa86ed64-2ff5-4e29-9840-7932cbae35d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c52db56d-8355-4b0a-9c40-4e02c0de135e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c431cb1c-bedd-471e-86d7-4bb4c5d20833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6fc2b90-dc67-4b61-930f-4057fa70a61a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525d864a-37dc-43ed-95ae-d61c2242176b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "478b58db-6469-4596-b290-078d13dec906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2c898b4-4722-4a4e-8383-045fdc7c47f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a71d6b8b-9336-41f6-9a2f-1035b99d1f7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bbe56e72-36b0-4dba-9926-bda103c1a7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c0a7932-d8d7-4f8e-b717-1b2898afe481",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a76166-369a-4f20-b450-86d39487181d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e2743d5-d0c0-4034-a3a3-8cec0e3a8a05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e578c5-4a2a-4bb9-a716-e3d0471db87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4cf990e-c36c-420d-b550-dd05ade3b51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946b6804-530f-4cbd-acd8-4182f570f44b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b45cc02-61ad-484b-9f43-3c4016e43223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac705ffc-401e-43e5-ae35-34e57aa1b870"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89ee06db-f44f-4b3c-978c-c11c76f28328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "87854b13-fd83-4916-bbc6-3df5368ba5eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1934c725-5ae7-4fed-866f-4fe3f14f840a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4be7cd71-c17f-4b9a-91ee-ef85c8e69d1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e71d77b4-bb05-457b-a77c-353eb5500291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bf4d7c0-6d21-49a2-9d2a-8e802c5c2a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "70ad9761-31bb-44c9-96bc-6e3fdf37bf8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d269c911-21e0-4f00-a82d-02cd4450b272",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6789a246-68ac-4fb2-9ec7-fe63ed096e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ee7375-6535-460b-99b2-df4308ba899c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c967169-8713-45a4-aa59-c3ffccd286ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44c0e006-12df-4d9d-a32c-47a1efe6d192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a76857-047c-481d-905f-6871cfde8b38",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f62056-9b1b-4e35-a303-0ce4c5ac6419",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5431d4ff-54b7-437b-9c97-c861c9f187b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4ae4a6-2e9c-483c-afae-04ca790cc52c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9029bb60-d910-42f9-971b-d08d98fcdb92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1c3c138-7430-452b-851a-ecf8b13fd7fe",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8620178c-a810-432d-9935-a214a9a7b70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70d8ef78-b618-4821-9a5e-8efd53848a06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea9926f-7bf9-4c42-a28c-e85c237181c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "29ec671a-36de-442a-b3a8-65347ac7f976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c69e25-2483-4c52-b595-85e2843b7937",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9f24f45-31bd-41dd-bc6a-4b6b7d991c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f6b645-ec2a-49f9-998e-af2a9d0623ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628c94ad-8a97-4e1a-86da-5a23c2e99bfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5dde3830-2d2d-4278-9986-c105ceab4d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9cea30-1370-4a58-b4a4-f6aefe9d8f72",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec97208-10f5-482d-8d1f-fab3e2d64bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bae0f7a-dcbf-4df9-a1f5-2207c2912e9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da4ea10-7137-4c13-800d-4301d5a6c086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4fcd7e7c-b08b-42ab-93df-fc6bb2729026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad3cfbf2-2755-407c-8e0a-b0f749b4a369",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95014025-3e36-4ad6-8e2a-069cc8d36a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc0dbd6-4e65-42aa-a796-e16b0d831e7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94a396c-6c6c-4024-b9b4-965e9c383daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a4444e-6e7b-4a34-a951-586b8c7049bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df24d413-7c37-4c68-bc8c-f52983f8e0d6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c60921fa-5296-4c9e-a9ca-8dcbd31086ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65d6745c-cacd-40a2-a6c3-b98c77766f50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24824d3-69e6-497c-b319-2a5176ca3cea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d66aa6f-001d-4070-8740-ac423cb66d0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e403058e-a5ef-447c-bea4-983505b7fe0c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b748a679-0a7b-4618-b00b-395b25031e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39026b86-d403-4426-8546-b235adc8f57c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886cfceb-46e0-4ded-ad48-35d94181733a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "73e45d58-d349-40ff-8668-28c03e19498c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033d6d0d-8300-4077-a4c6-cfaf36f5010c",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5afaa9a-c945-4746-b060-325d8b7886e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdd8157b-f33f-4faa-b13c-f8bc87ead6ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba08eb31-21fd-4e1f-89b1-82be66d9b9c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "12f0f5e1-b54f-44a9-86dc-9ab496309396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dddb079-0f2c-4d62-bc8e-422b92045672",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0c459dc-8c79-4479-bbb7-c814f3dd430c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c650d02-08f1-4480-92f5-e68b879c18f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa6b4e8-d1f1-4416-bdb9-e479a019a4cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8a8e956-5e23-469b-ab0f-376d4b4ac84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28e69600-4cb5-4ab1-8cdd-5d4c25d6a760",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90b879a-0fc7-433f-bf7b-01d660416a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ebf903b-5d73-4d49-ae21-66d35d3d1b71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c60dc0-565d-490f-81c4-a4e29356675e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a08bf3b-d57b-44c9-8a36-b75a4871b6b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceb10793-e91c-4bcd-a9f8-9c0eb68ac0a4",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55653656-2cd3-4a63-a7c0-55c6508d4138",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "587cc441-fc32-4a4a-8961-27a548916569"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d17cb42-6fdb-4796-8dd2-38bb26a9862d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b27a2b59-1daf-4707-8e4f-d58d5ed84566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a5cd1a-1402-410a-b49b-5641449ecc6d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3866505a-3aaa-43e7-b0c9-3c3526026e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a3f5fb-aea8-48be-9de2-1c81f66b6a82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa1aeb3f-c7b5-4a32-8ae8-023a74df7eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "faf073a8-3a18-48f6-a158-7a266730acb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18621262-a617-43ea-b766-b17f4c3736a5",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2533025f-8e49-4aa0-82a4-84318e559784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e850b369-e5d7-442c-8fcd-32184039589a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f9d93b-8b34-408e-a7b6-8a4380bfd5b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e62d130-a91b-4d25-bfd4-076874b44857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0847a92d-3aad-4171-a081-0535825b2a37",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db27aa1-a36b-4312-9377-cf5f728dc5db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c997e367-b561-432a-883c-31d71896732e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d208ce27-95ba-4ee1-b892-b0fc47952463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f687dd79-a80b-4809-9315-f05b97614624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6e80b0-e095-4cec-8941-d7d23ace649c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e52e5fef-9506-48c1-8ef9-17ee3a7c0c9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d14c68ba-ee9f-453d-acf9-a2f3464873ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d6518a5-1d33-47d0-9271-a0b0bd4663b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c776e22a-e09c-4c9c-a626-2b6c6bc40944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee48e64-80c7-4833-a72b-00e1fa2014ec",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c3a130-b60e-4833-9529-144a1e31637d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9b6f07f-1459-49d3-a4d8-6cb6e4a7dc84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b039fda-2116-4afb-8697-d46a44294a31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "88b75f35-c63c-48a7-8786-8d1639993eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b48f50f5-81fa-4df2-bf10-92cc0fdb4b5a",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62fe8917-c9ec-4bd3-8a0d-287c7ba90d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6d49b72-a067-49d9-88c3-9fcb65b442b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3779ffe4-a7f3-44da-9c36-1d22cd88f543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "df6cdabe-0696-40e6-a3cc-2062a9f61643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c560c82-9abb-45be-b6c2-65ff934edd33",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66df7f9f-a3a9-4d85-8f01-d6951ca0e36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b59103cb-c804-4f48-ab7e-5dd59167d3e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed7a82dd-9a76-4797-8b8a-064d2151b993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c713c42-57cf-4a63-bbab-710d215bc6ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d2f19e-c8a9-42e3-8484-3a5a9faa6d43",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ae65ac-2977-4a3f-aa11-3231640d7ebf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e60abe4a-60e7-4dce-b7c9-ce56383ff0ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91c8ce30-4ee3-4f3d-892b-8fa9125e776f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56ef9f2c-b490-408d-9e91-a00705414ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95e8cf23-c9a4-4423-9c35-8cdf141deed3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3ac62ba-6af2-4142-a774-707f0b44f844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa497232-7431-4a3a-9bad-adce04a58f57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171b6b70-c50c-4d0c-926b-2fd2f8a97544",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f875a0e-f2bf-4eda-b83d-ea1a50c1c89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6741c05b-f613-4f36-824a-a461aed81048",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d10fbe-f4a3-46a5-ac49-7155f6026c60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a042dc8-ab08-4680-b110-e87589cb2e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e7ef0d9-4574-4900-ab9e-5467616408fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "605be298-382c-4e1a-b9ca-848e8a0e1d46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e70e7f5-16ee-48dd-b1c0-a3bd1c0ef64e",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a645e6d-e7f8-4387-88c6-a7a8758faea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30562490-f613-4137-b3aa-f7be66de8c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0f9e46-b92c-4ca4-9c2c-6ee59cea991d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc265cec-a43b-46fe-b008-c8892e43ad88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92488135-7a5e-4e01-950b-e018ec5a65b6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3101b437-9224-4ebb-ac76-42fc3c2f80d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7116b63c-80ed-4794-a062-efe86c8cc676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02aede0d-8bc1-4646-a648-c1e7c7edaaf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "319c56e3-f8a4-41b1-8f09-36b46e1d7862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ab86fc1-147c-41df-a67d-e501e1fbb21e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74c241e5-df26-4759-9ee4-fc3b71320e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27db562d-e67e-4c4e-b463-9953bb40d1d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c67d1eb5-3f24-484b-82fb-0e6cbf8a4aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0be1559c-7abb-4975-b5c9-8d3ce2fd4063"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743dca15-8076-446c-96e8-ed76f60c7b99",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc4ff78-9980-4a20-afcd-acaf79b80830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e129a643-bd2a-4344-9983-e5bc27e77da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1bbd15c-230c-4478-979f-57aa2c12d2c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fea7700-33d0-401a-80c1-d5c26dae8d71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b6237e-d1fb-4c3d-89e9-08684ae0abb3",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2589679a-c94d-4fda-abd3-584122502763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89bf87fa-a376-4301-bbd1-42b7d4e0ace0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52d81350-6fa3-4763-bc27-32d0227b287b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba42b5d4-9935-4295-a1e0-781eae2d8771"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24e1cbf5-3905-4301-a2d1-9cdb2fd42a7f",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a711ae2a-897b-47e1-af58-8123b0ad21d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4eef41-6e20-41d6-96b9-11ae2ee7d5dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90463d66-8b33-4d94-b52f-fe4f278e0400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40d5b7a0-f88c-4a46-b480-f2e8506b518c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "840d5254-278f-4f86-b9cf-56924bdfd622",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec609605-75da-422a-964b-23013af53451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f124c79c-1f1f-4070-8287-913bd33262aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86458be6-b8a8-47aa-98ba-0f8777bcb3d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9871c19a-cd3a-4330-a462-4734210afd75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f44ea97-ea0f-4dc6-963f-1a0ae3cbed89",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2415d9d2-7298-46d6-bd50-e486e98a942d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b9253b9-3b09-4002-80e5-909df060ddda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23184bb0-212e-4d19-8018-42a9d4ca3efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6734a7d0-e7e8-4540-8365-0fd49a2f3a61"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "959ef880-1f7c-4678-9701-7be376e9f092",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f13f9c5c-5efd-4f92-969f-3a51764200be",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6854e0d0-26b6-4098-8146-9252b8f8e7e7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "34625df3-dd6b-4153-833d-cb7b1df412ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12621783-717e-4243-b977-99b60f39f56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "88feb2bc-a566-4288-bcfa-e22129f46245"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00cbe653-102f-4d8e-b216-1e1be96d93c9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa679a81-8a8f-4dea-a3b0-e402135ec16f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0096fe4b-be82-41ca-9815-69ada5c821cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "22b43c36-36ff-4818-8535-ac41b8dcb830"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4df7bdef-8ca4-4b87-b155-75a3a10c388d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d33f7b86-c19c-4334-a538-660392d30724"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c10e3c57-2d15-455f-959b-255221071d86",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "132cb762-c557-4512-bbc7-340befc2984b"
            }
          }
        ]
      },
      {
        "id": "674e2b9e-e1f6-430b-8f18-74cd4d023531",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5f667ccf-2219-40cd-a10c-ca95b7a3308f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e213a0a9-112e-4cdc-8a0d-f1cc35c4eb53",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c59d8c32-0f91-4e53-a303-bcb544c2c01c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31e2ff7e-1447-4bed-afec-79e7a98f5410",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fcb3f5d-c4a8-4e9e-884a-941d70264279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "742cb718-6d42-4c4a-b994-3478c9b11e2c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf489d4-e8be-42a3-8fc0-27efd199dc22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8539ca6-8058-426e-abd8-3553f4ba7efc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb2530d-a9c0-450d-918f-77961e6e3dcd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14ce7e6c-f08e-4a0e-a9b7-1793dd6e7b0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cca56842-1266-42bf-8f6d-5603ba5d1d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "631bee90-71ad-4f1c-a46e-67ab7e901236",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4358c770-781d-4e4b-9aa0-589a1ba986c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "432388fc-fe25-4b53-984d-889eb03f72c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c91344c-c7db-4997-90b1-a76eec4dd37e",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a1b812-0d1c-4ea7-85f8-4a790b9b49d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d852c664-6477-49e1-b3e5-ee3b7c71146f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e6078c1-6a02-4a0f-aa3a-98136a30d463",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cebb6ccb-7100-42a5-8867-f166d1eb0fea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd5599f-f433-47d6-8609-29530af10c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25855e78-aa35-4082-9698-3f1b69178948",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a18086-1663-4e95-ac10-0da09596912a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b10a7d16-c8cd-4d1e-b4a4-97007aa72237"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12b5d831-5fa5-4020-88e7-062e2c68584a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16c0be75-2916-4469-8f1f-337e56df5e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad1eb10-c3c0-4b78-8a42-9d05c5eb2fe8",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d111c9ca-0f45-4cd0-a013-010a275eb2c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a1025fb-00f7-439e-b188-4ce998ec10b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe53d13c-e610-4fe8-b540-b941440cf2f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e4f9442-701d-456b-a72e-64b8682fe275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28bd313f-9f32-4ab5-843b-cdded3762804",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d000d798-577e-4dea-a8e5-3844e6274a8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "053ba487-8f71-4abb-8e76-272ad03b0086"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcc30ff-8083-4180-8562-410a3142473a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "869af147-48b7-48c8-9c95-f3abbb3f47fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11f363e3-08ab-4fcc-b596-202338be87d0",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9bddc7-30e6-477a-a3f7-b993bfcefc9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0aed0e60-e55f-439d-998c-10447f2f6204"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21712566-c036-4b5a-9ba7-cdcb72c90141",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6accd87c-3a89-427b-8c44-65ecae3ebb23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59f9f0dc-cc82-4da2-9f62-e919c62951e6",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52bb593f-a324-4975-bbd2-5b9805c54789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f8e72be-5e97-4bb4-8bc9-4cc7c873189e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5846e87-b69c-4c19-b971-7aa710b07594",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d28ae4b-24ab-411c-9c45-866d89ceb52d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca41b86-8ce1-4f3e-8835-db47a570f61e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b99bbe-5aa9-42cc-abff-8a3bd9d4589d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29301c49-8fee-4247-bbb3-50dc9eba33b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74718415-5a5e-47ef-aa4c-f693bff8a04d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bacf947f-c0fc-476a-a4ce-7a6445192c78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd24061-62c1-43b1-bcdb-be3c76e424b1",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f033cc3-116c-4596-958a-fa58a5ddf854",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a465e6e-8d67-4434-a2df-7784b512065b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f3f754-3fbd-4d2c-b23f-2d4132cbf4b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8239edf7-272f-446e-8805-fc69dc29c6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e57197ca-a754-4fd7-9fe7-e48a2f4c3ce2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcbd83c9-0e8f-47cf-9fee-de9cfc887c12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "425fc8aa-207d-4c69-b422-2a497c97735c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a4017e-938e-491a-85a0-1ed4bf9966d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68870175-e0e9-4047-9fcb-8f1fbebe36fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ecc07e-8826-478c-8b78-007418de78f3",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e7cb199-6289-4d2b-9060-50f0520f957d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfdbeb67-5f77-4a89-9025-6ba13d8c4f50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d64ceb-1a4f-48b0-a222-1a390b50ba1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8f7c07-a286-4e76-a097-88c532355dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f1f4a35-7d49-41c8-aa07-f28efae3f107",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a04210d-07ce-490d-9deb-ab0cb6d3d6b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c76fab8-4911-4850-b00f-40c34b482545"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd949047-aca2-402c-ae32-5d91f0f5284c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf952377-061b-4792-a4fb-e877b82b2f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea88a14-04bf-4d72-887a-3566509d966c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2595416-edf7-47de-8fbd-9af0a7c2a39d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e258fc-bfa1-4b5f-bdc7-0d54c45de846"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b19a04e8-22d5-4cea-ad38-661ceeec8d12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8c564b-96e6-415a-a306-fba96cd709d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52e7cf14-69bf-4186-984e-8a73e6e19da9",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf012bb-bafa-4d58-a5ee-a2c1cad26ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b11c845a-1bbf-443f-9bab-11d40561052b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8cbf596-bebe-49ae-abd6-c84325225c3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "135f2f9d-4f61-4ef8-a046-b988780d2c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2a45ddc-ea2d-42f7-86b8-3ca31b8cc29e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d1b851-3690-42af-b028-9aa3286f6eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff1b5a6e-f889-4604-9f50-cb132fe24544"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6908d672-f3b5-4701-8a6a-a33a752f6685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc230cfe-fa2a-4c2c-82fb-4cdbf6acc619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d7db5a-f07e-4d44-80e6-9f0001c7a6cc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1747000-de42-4be9-a5ef-f8a3b88bc282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb9acec-c44c-48a4-aa51-36d251c5e8e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cacfa6-d62b-43cf-823b-1e3342be38c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1919940f-1cd3-4649-8aaf-24b480fe6b78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a2f1dc1-4ac9-4636-b280-c938d884e9b0",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce283fb3-d4b4-42b3-b39f-ea7a7bfafa10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3d2949b-0046-40d7-b832-e4e2a26ae229"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17e0531-019f-4746-a405-4986f8c42a7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1109739-ac3b-474c-964a-588c6331d485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfb6d25-afde-4618-b5c5-99f990ed1b4b",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f82ccb-4960-445a-b058-529281e3d202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40437492-d304-44cb-b727-26b72429a852"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4676d129-80a3-49b1-8477-633982b021a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13d8f1b8-7895-4d31-b440-036c0d002461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0cdb0da-d388-4921-b9c8-17364ab2ed10",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a38d276-9246-4d84-a05d-df4efc066894",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba0ae577-8672-4c8e-b9d4-4c01db91fb62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a8664b-55e7-434e-83f4-a54cdb8bb97b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae4698b8-48e1-4138-9af7-04b4ede12a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02652ce1-a14c-4f52-ad71-a8dc74faeb9e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b959ec72-ccd6-4382-a2f0-911c01f862a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73e7fa98-7b6d-4a93-a9fe-58b6b883e46d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57494b36-8257-45e4-a095-071d3fd25cf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a46015fe-a65a-4cdc-8e7c-cfa9a310ba8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0bea71-5bac-40a1-94eb-4bef9585172a",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f033ab1-69dc-43ee-992e-30c1f88b6c0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10877379-9d92-4257-89ee-eafd33bd2dd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b51aed-3503-4518-aefd-382ef0145bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26bfc2b5-ea4e-4740-8609-6a5ba9026330"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01fd6ac-a54b-4025-af15-83e75f684b94",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ea1910d-e76c-4be1-8256-a9f35e1d3023",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e87a65ab-c35b-4e63-abc5-3dd823ccd0d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d4b78b-a33c-40de-827f-8633dd216c94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd181209-ab8b-474f-818a-93e7a6a6397b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7fe02e-741c-4f7f-b674-efe4494291a5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac51b055-be7a-4bc8-b950-74cf11e75ce8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81279232-6564-43aa-9cc8-8fc52acfaf14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01045a77-c3f3-4e33-8cc1-d0cecbcbcb4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b07ed0db-0ad8-4b1a-8d49-97e8105555cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc20f413-6785-41b0-9fd9-b58915b77891",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "010b30fc-20f9-47df-8ff2-fa64578c1cb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6a66cd9-c7bb-47b0-acfa-3126ad065cd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b8fc1d7-e5a6-4bb1-9d8b-c60405d086ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f524f59-2f55-4b2d-8a2e-054d6024b76c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e369de38-5268-4a81-9cc1-a6ca0f5e6336",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b0ebe7-4845-48c2-abaf-50b48a2a4506",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "244a65ae-1f93-444e-a79f-79b2b4c917a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09a6bc57-1ecd-4c44-a458-5072e4b6ea11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168f71ff-f25b-4aea-bfcb-71fd5705c882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b19f9a5-a16d-4081-9eb4-4ce843ea594f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231058b6-d7ce-4712-aa5e-89cc18cb1eab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3749bf5-812e-4331-a822-d4cac73f8562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b63a5a-431d-434a-9830-1b65678b7d2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "941d38b6-804c-4944-8f89-22cbecf7de8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0ae3b4-ee93-44ff-bd90-f9d77bbab20c",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9cdfa5-223e-4616-a854-133f835ea457",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b63d1f01-2ada-45c4-ab74-fc3d88cfa93f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ec93b5-8dc0-4d3c-b463-6e7b80f86cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266681a3-97e5-4674-a8f6-921b2fb036a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbaa866-1306-42f1-8e4d-464f49b20267",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d000ee2b-2004-4816-a31c-0de0c240c94d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "821a506e-ca73-4dd7-a55b-18ae3ad05ce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ded55e-7583-4b1b-8783-8f4e695e2a53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8199a21f-66e4-4a28-af74-d47aa9cf89cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287b21a1-d055-444d-9021-c631abcb91a4",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023e7285-2c3c-4637-a807-e288f06bafed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c381bb3-5565-424a-befb-7a0baace0541"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a01f0047-20c7-40b4-b7d2-fd055418378c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d8b1ab-ef23-4982-aec7-bba2fb65e9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7292cf-dcd3-4439-bed0-c28bc0930b8c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11395c3-b5e4-45fa-ac1f-df4a105e80d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf52bc33-bdc0-4af6-b56d-9a86a19da7e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be66b78b-e45b-4d44-95de-e4aec3df8bd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d76c53f6-7224-4aec-aa88-f41cd4cf4c87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a7677c-b38e-48bc-a305-41769c79e462",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0407b4fd-8460-46d4-931c-6162240fa3da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02cd6722-beb9-4219-8b26-9101b652c366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed5388b7-64c8-42e3-90cc-885b11371c5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4c36b4e-6026-48e9-a078-14c2db231f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5606522f-873d-4a30-8921-17dbc52deb42",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7da2a2fe-1607-48dc-a9aa-1480d2807c55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f7f6f8-9c21-4115-b534-c52b67892077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cb41ed-2bb4-4a80-b8b1-d617b165ddd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e7f7b42-9603-44b1-a97e-f7f2dac57e71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f75dab-0a22-4211-a005-e1f42cd35c03",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c16381a2-38bc-4be0-8bd8-45fed5e3aae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9005845c-5d25-4681-b8e8-33e09b7cb13a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38d4138-b1ce-4174-954a-9bf44dcf2c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d45f68-cbb5-4258-a335-871165e0acb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9043b94-ad8e-47b3-bc99-c4f8b3178062",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1737fdf4-3b41-4ef9-b218-22689bb7b51a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01c7fdb8-6c67-4537-abdc-1607bf0d0b4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de814413-3101-4ac1-81ba-8a9d6e660d74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd6646f3-027b-45ad-ae03-3c74313cb09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c82e974d-e6de-43ca-8ef1-e1f6516db2b4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847dcd05-e25e-41fa-a866-fb42b4af8863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8c647a-6257-406b-bd18-fb69e60e4b39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c97ab21-53f2-4769-b9dc-b84f5ccb613e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91902361-b4c1-4ae4-9d3d-a433042aaa2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dddb665-7f3c-4d41-a27e-24c14f731f8c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a60e31d8-bd03-4528-ae48-f0794b144371",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89aff25a-6bde-47ed-a659-f3ab1dc92065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35855fc5-0989-41b2-8106-674c39ba2e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c95e8cf-cadb-4cb2-bbf3-f29b34c52d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5a0055-53e2-4490-a094-edc481aa6987",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "021a9b6a-9b7e-4dc5-940b-6f7bd7d55a63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29719d0b-52dc-4790-af87-dae2ec1a8589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da244a0-54f6-445c-8551-c405f8ceaa88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7034b0e-f867-4b5b-86f1-e5c57999cf2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae23b791-e1b8-432d-967b-d12e0ebb14ac",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae89455-951d-44e3-b71c-c192e53e7aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebccc7c-ab29-4fd0-815f-501a47c2bb15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "701ac7d0-2b47-4324-9a96-c5d321f014b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49cddacf-6a0d-47c1-b277-3384cd640518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2164897d-445e-4bda-b162-62fa4eb884f4",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509b4aba-f88a-4071-94e5-0ff26a096df5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1aa2fc6e-b133-4ab8-a261-619acb5e7dc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da348e5b-cfb4-4d97-8af4-b73bb72c299d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b079b2e5-2264-4341-a781-94d3252c93ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8036fea-4e29-4b3d-b8fc-80e4f6cc9cfd",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebc99fee-9e46-4b11-84bd-1102d0d25d34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1aecfc2-6a4c-4dff-821c-39e41ff38a99"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7051b6ff-3468-4561-8714-5dd075342bef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25f353fd-792c-42b8-99d3-fd15ec1008b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18e8696d-2d09-4280-9f84-97a0683afda5",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd82734-2b71-42ef-9b81-ecb58b8bae6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2bfb0f4-7f7c-4e12-9f10-4a80a6bdfd47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8fa43f3-258b-4fb8-a07c-5d7e4d8356fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837af9db-4035-424f-8ff9-e60d822d9073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a481ce1b-0128-44ce-80a0-08dd553a56f0",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01d9ecc-4dc5-44cf-9033-912859ca7344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a23ee4-64e4-4fec-967c-7736a4815e94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd309d8c-9d2b-4770-b59d-95119dc2f0fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b9c8261-b9cf-42cd-a837-2d0b60d699a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ea58825-8999-4fcc-960d-dbf694fdc4fd",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e825333-dc69-4430-8116-b6d227cba28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "427fe108-9dc6-459b-ac8f-c0f580b45364"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ce2637-b247-47b8-b343-29cc0b615aa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae7cb00f-014c-4166-acb7-76d3e86f9b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e62e50-83a3-441b-afdd-f3eb060e8af0",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5824a6eb-279d-488d-9dfb-f8365f7f5450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89592ef4-d967-4249-8942-803a83edaa97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ef7d62-94bc-4e9d-a651-5069d785e7f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc543960-39cc-459d-afaa-46259ec9dcd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645d0b3d-ff3f-4a35-ad6d-61419d580ca4",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8f165c-2fff-4666-8d6e-b2358c0dd270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca72f301-8559-4852-aeff-f7e88504c760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08acf33f-a5bb-4355-a033-228438c73e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea7091dc-ce5e-4a6a-87e4-33d69310f9d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef544a98-6a39-46bd-a648-b977a1917044",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5611d9-7c9b-4544-b123-8af607a47b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40257dde-a6f5-414a-bb36-d0b153d3465b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e81d15-ab23-4200-81f3-d88b356e21f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45079c14-bee5-4d84-9a42-6a66368d9f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a17c64f5-1659-4460-a5e2-13ea3c4a7c5c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2994e4c-7bff-4795-b7a1-a4d618f679aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e391347-2aa1-4aa6-8302-6613b032247f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9b0fd0b-0c06-4ff0-886d-ca06195f2a59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4733acb9-2ca8-41ee-aed9-ed000d0b9cc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2197ca7-57f3-4f19-9d9a-f64123a8a0e9",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea3d3f7e-f36c-4f70-bc9d-bed74a8a60af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebafa318-b630-4a9e-9dd4-8ade35008b72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4fb3a98-09b2-469b-94ba-56cf73ffa548",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952e1a92-ce9f-4c49-b05c-3900bac933bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74320738-d3ae-413d-bef2-843808d43ec1",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48ef635-00ff-44ab-b8c0-09d84cf283bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d2636a5-f240-4400-8218-550eccb59b14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7f20e2-797e-49d4-a8f6-6315a1fd2ae3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06589c78-9df2-4c7d-9dde-9b9152749d7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57e900ab-9775-42e8-8e22-44d3dd167905",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d6b53a-b2ae-4502-8da6-7826efbc65b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54fcef97-e8a1-456e-b688-faee42d97f54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d87a7ff-36b9-45fd-877a-4a34fc18c790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5320c49c-de0f-436f-a558-6c2a7f1e02bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd9b4235-ccd3-4f55-9e32-53bd8975866c",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b66bee5-8a46-40de-8b40-a8dd12e3e2b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd1f46e-1939-458b-bc7a-bde6263f6f02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad93203-eefd-41e5-afe3-0dede63f2a51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7157ef76-a230-4f7d-b636-3c40e1fa2165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8f09027-9bd0-407d-937c-1434b89aaa96",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d8d0fb3-6401-49e3-8a81-e1ce9b758967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b5fb8c-862b-4096-ac76-9f7f56037c8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2ff0846-714f-46de-b711-fc5e7e28e9da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e041f136-3674-4853-88e5-304954edf254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33a4cf2-c436-412f-9a23-738b8444fa4d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3123592-b70e-4ee6-b5cb-82e9da0fa95e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ef0a71-5388-4478-9de1-35efe7096efb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f138442-9941-4bc4-b9f9-4cb040a78b89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac960934-c429-4533-a373-ef76f96c4ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f980e9b1-ba40-4a80-ac72-aed7f9e3cae0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16309921-a1c1-4208-9889-903b60b172e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41aa8d31-dfa1-4c6f-9cd7-bd47e7bf5578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc718d8-d961-4bcd-9eeb-de987860dee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1250035-d29a-4854-b502-347a48c8418c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dbf0a9c-01eb-4646-902b-c8d653d2f7e8",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4e3abf-79d2-4b4b-8b57-74e5f47d5d56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4917fcc0-8875-471f-8a89-020de0bb83b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a35b584-3352-46b8-b113-ea0c7e7d02b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3dc54c2-d468-4f14-aa81-4ae7578d8dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a75956b5-4e99-4021-b34a-1988483441d1",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf0ed764-9fd3-4d74-9dd4-4ec64d5d944e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ff276b9-eb27-4074-9add-129cb8311c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82c6c3d-61ae-4d0c-b69d-79bf3054e379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47ea95d1-d7bf-45ea-b763-b90c68208412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb89862c-8eee-4f88-9f7d-bfb7a51af165",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1703977-ac70-49d4-8b19-dddb5059727b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "340ca094-36a9-4557-950a-0bba2a103552"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d93c2d-e22f-489b-b500-1d4badde7cff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7902bc66-9450-4b1c-bae3-f76a278c703b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07654fd5-3d59-4bf3-8ff2-40fd34cc63fd",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be085724-55e8-4951-8d12-98845f08c369",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70c51a37-f80c-47ff-a26a-3c4804357bb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1371bb41-af79-458e-9ecb-f1d12f4ea1a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d95594-2b75-486e-aa9c-b7ed31455a42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e2de0fe-4cd1-422e-99af-2d2ad2d3a8e3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c71c30-3ebb-4f66-8a05-e365379c466e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ff298db-6c20-4db0-b962-487d1025e2fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "494661b1-6df8-4173-9eaf-6f8cf07013a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81a80af9-f57d-47ef-80a3-53b98bd62bfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae85993-7431-47a7-a8c2-37466d3cb9f9",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e54c20c-0f44-4552-8b41-9b134e1cc256",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b515dac9-0a99-4b4c-ad44-f2d0dd0edc37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1df867ed-705e-4dd5-bd65-e6783562fee8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c15a1bd-403d-4381-9288-96c6ee02eb6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb7f758-9573-4154-b5bb-47bea7028cac",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f5d27d-6bf8-4250-ab4d-47ba7ee17d12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9aa30f96-5d42-4015-b691-703fabed111a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be4a0e90-f95b-44ba-aa6e-f7ea403d1d78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d8253f-225b-4e08-846b-b4ccfc011e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f39d2a1-4913-419c-a51f-f1158ed4ecab",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c820e61e-1f1f-40d6-bdcc-86e25b6ac891",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58c1f47e-9f19-4723-afdb-4069718c9171"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1942980a-5f8b-47d2-900a-2d4fcca662ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373ca3b7-65b7-4d3e-80e4-c140578a5006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f68dc38-a4db-49b7-9a55-72498e3afa3c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9de72d-97c7-49e9-bc1b-e9e4be113f9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6f82ff8-dde6-4bec-a8a3-1b064626952a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c70790d-921c-4ad0-8e33-0349dcb0ed27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ae8d8a-dbf2-4fc5-89ec-82bbd33dfe40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c95618-055c-452d-95d6-eecc16ad2f76",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e75c6ef-b32e-4e6f-be7b-35e6f52136e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d30e923d-6a42-49ac-a954-1fbf769cf5e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b986a521-fb29-4911-a640-6d00e4aadf18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b5225e1-6bcf-4f44-a577-4b32dc6769a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d861e062-a405-44e2-b51a-8f9a77c6ad34",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b908b55-a068-40ef-8128-22fb7ffdfb6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "561bac85-e85f-4684-914f-cfcf8a35f5b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fff4f32-4afa-46c8-a32d-693dd271ac41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad3efcf-b884-47e0-8a46-ca68ff7cd222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afdbbe51-acfe-4b88-9341-66ad38577857",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608949ed-354c-4318-8617-611b12037096",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54ace8a1-19ac-4087-8b98-ed49acc72ccc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5e64fa-7ec4-4247-86aa-4ed04d206343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "151e92ec-f107-4a29-825f-02f2e930208c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "847ed57b-6d63-4c94-b0bf-50b4ea920bb0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e0c068-3be6-4a6a-827f-52b729fe947e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21708502-b511-42ce-95bf-f1adc2b5291e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81075d00-2e73-4a14-9dd4-9d46089ac6ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e9bc7a-b37f-40d7-9ed7-885fb4dac2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dac28ce3-2ec9-4c3c-a4f9-286d643d4a2e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef687fa2-5fb7-4521-af7c-33d7724285f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c87e826c-3bc8-4e81-9263-eb4aedd38bf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9677c7eb-092d-465b-badf-c4ce2be3e43a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c127bd1-e5a5-42bf-abf5-3a5e4e0e14bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9d1fa6-7b85-4d64-b858-097ed3d94247",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75293b8-0d10-495f-b2aa-8e78e4fdb67b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2846acef-643f-44a0-84e8-2c8707767555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e99847c-c394-475c-bc34-f5b9a65f58ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e111323f-2ec9-45c1-92f2-2d51d00ff3e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e5b424-8937-408f-b3d1-8947a3ecad5f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c71405cb-80d7-403f-989a-fec4179a793e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07186737-3153-4757-9c3e-b666ea0f8611"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5b0d71-bd7b-4c07-bd6b-20c071b31e0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62a59867-0086-4ddf-a2af-4eeb0ff92e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "960c6fc8-cd19-44d3-bffd-5b85497556e7",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ba62c6-be2d-4e22-9e4e-4622ae402aab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "399452c6-d5a8-4e17-a94f-f2cad9fc4125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84813ea6-1a8f-4db0-ac60-517c62715fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a1ae941-48e5-4a7b-8ed1-f0f10329ba38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c53812-d278-4340-9827-926b300902b1",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3d9046b-3133-431f-b757-bcdae1db6da0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c557aafa-7f74-4fd2-86da-3c3b88c6bbbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d27b57e-be64-4483-a635-a48537430565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be1b613c-b17d-48e7-8ec8-8132ca474f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a51abd6-0ce3-4f90-84ad-7254c3c6e1b0",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d9022f-3b07-4367-a494-ae1c37dc26cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05f00d42-06ef-4cc0-9dc4-653710b196bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fcf89d4-84a2-43ad-9597-450c15cf1041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b3173f-0d88-42a7-ba28-7ca80ef3658d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eeecc3a-075d-477d-a73a-c8563a42f1e7",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae79bb45-3891-44bd-a862-c0cc11e086e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38a97897-1b5a-44a1-b1f0-0c8b55002288"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8be3e80-f781-4094-a31c-f1126c29c491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2779309a-d51e-4520-9dcf-b81c6899ec8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d7a9bc5-c0b9-491c-9eac-defe5625fcf8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64b48405-0a45-4936-ab61-9909845666ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7d03a0a9-559a-4f4f-abec-1ae9c20c4238"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e5dd1c-d3d1-49c9-8ca4-caa594a6761e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0806a154-9621-4681-a520-c755487f0146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23864039-0005-43ea-bcdc-5d2212dc3c67",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6cbd73-16c7-4f3f-a926-cd2680c54304",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0b5cef2-9e21-46d1-bc95-441b47c55fea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05ab3cb1-ad90-4808-9edc-cf19f24ab784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e1b3e0b-d15f-453f-830a-652e31beacf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1596c87e-58cb-404c-b7d9-6a0e95215002",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98e0c983-54f6-42bf-b3a4-8b843fe8eabf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5056680f-36e7-4d72-9b4a-f6187e18e2e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "367b4e51-03b1-4516-ac89-b8868ac9cf59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62e43823-11f7-48b8-a83a-049177b71cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78cac0c4-8429-4241-9326-929fd3d57be1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06baea5a-50eb-4d8c-9174-211f91e2350d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "906220e6-3676-45dc-8e42-41308966425b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d97640-e4f3-4407-a752-d13604739c38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13c3bbd9-7c97-4dd2-8d31-bae4f3625819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "582b98f7-f5dd-4a99-8135-97c85aac9d9d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e167faf0-d781-49f2-b973-0a855bb4fc3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf18c6ee-04ff-4f5f-a0dc-affdf638f77a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc800099-7d8c-495c-bd22-65c98ed7cc26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5dc4a0b-3ab9-4bcc-9e0d-43815cb9f148"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22cef583-d13d-4cd5-9048-2a1453e2b909",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04add3e-954e-413f-bff8-1e55c73dba12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faef1176-f607-4944-bab5-278c6a00e7b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bcd4c94-2f7f-4890-81f5-be3ab516b62d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f1011a-5b07-4086-9d18-0e4e1bdfb006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b274603d-9499-41f2-87e1-5a4abca676ef",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0093ca98-775b-4abc-bdec-cf89abee30e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2194f69-49ed-481f-8045-24dac9235804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72e58e25-5de9-4aa2-97fb-63d46a66b305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffb55c61-40e0-4f14-bc73-cfe686ce9cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd0714f4-7bcd-4c7e-bd33-74efe9939197",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ea67eb-e9fa-4888-95e8-79fe5f772b1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c37c064-0b58-4da2-8a5c-db382d478d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "148bcbf0-0d4e-4f14-bf27-b26a50ed3ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52c9a4db-a65f-4b2b-a971-04f0078d9fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f019e563-bcea-4aff-97b4-21a8aeae8f6d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e9561f-9f79-42ac-ab0b-bab3880d7823",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6ab0a29-34cf-4b6a-957d-7f6ad397a90b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1ae5d07-f003-4f10-9403-90b07afd6c37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0529abf-ab2e-4c7f-8a95-2051a291294a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f2eec1-b37c-4ab4-850b-e96474f582b1",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77fd866a-7db5-405f-b2b6-55429a2c43be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24783c85-18d4-4aaf-8210-f972f9bf5281"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44157420-b984-4c57-86e2-2be8ca07abbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3b3ffcd-7133-4f8c-9ce9-2e5ca5be6e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce91561a-bd9a-40dc-8bbe-cc6c75075749",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ac71b8-3ce7-424f-8365-3224f2496eae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "290a4e49-0716-4f42-a472-d87fdf3fe5a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d75bbf-3319-4e35-9147-d641327c69b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c31f00a2-131d-4606-ab1c-576f72683b98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cf50b4f-4345-4bbf-b859-464ab46c2b6b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032893af-6797-49e2-a0a7-04dcd37783d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2c811b4-4567-4912-8635-98ca3e0c09be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46d44d7-b9ca-4346-8ee0-199850aac70a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ba7d44a-c7d8-420e-b809-0d9a06a32cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0efb9eb5-e3cf-4a78-b517-ac73f03f9e6d",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f3639a-49c1-4570-9393-b14beb94ba33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "019ca725-255f-4f9e-b5dc-5ae5406d1f70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b13c236-044f-42cf-af72-207c0047d166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2c360c-6215-4645-96c9-82915bacf10a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f35669-5307-4a26-a28d-22304dca0f4c",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ca8ec80-0c38-43c3-b641-5354c60b3017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5805ae2c-ad7f-470e-a871-d2d2dbb42865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eafa3c5-3f89-4f5f-aa55-51e211334b42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b79772a2-7612-433b-824f-adb1bdc800b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918c51fe-ae06-47c9-b702-fa7c3666f70d",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e192e1e8-c409-4db9-bdf5-48cb7199884e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "334f6308-543a-4220-918f-5fa3c1e42720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "133b53ed-01a1-46f5-88ea-20b690769264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb0915b3-b2f2-47fb-b65a-281fe5be660e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0a3e7b-04d1-4426-96f9-61e83b3bf4cb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77edc65f-1828-4c8d-a053-847f67f459e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ead4e5c-b925-49f6-b06f-fa0230aba19a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d15f147-ceb4-41b6-a11d-424374baa319",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "299db292-7bb8-485b-a4bb-fe215ac36ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b840f50-94be-4cc9-8fa8-3f60fe832286",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4e2287-eceb-4944-a3a7-03aab5061b56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba2e77cc-e32f-4197-b36e-393b270b298c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06341344-2744-44ba-925e-3685f11add22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6432f13-02ee-404f-8ba9-2d344f6690a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11dac148-9a74-4066-b545-b06c10148dff",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d120a1-30b2-42d9-a4dc-a6c8c8ab1201",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48e3e0b6-ac0a-4b94-accb-1e5eee79bfd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0478f0b0-eecb-4a48-8036-e6a1848cfb0c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb42e72b-8771-42b0-98a6-896b112d74bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c319dfd-b3dc-46c2-b90c-2ba99529e39a",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddeeae45-84ba-406a-9bb6-54e75d87b677",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b7a79ab-eea8-4e99-9fe0-462aaaae8b4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe03678-8e3e-4747-a43a-024fae632c9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30325d85-3470-470f-add4-1d830678bf38"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "133c3419-3cd4-4d2f-97ee-31e6a3998b3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a58cca1f-9c1e-4b1c-b4f7-7ba998bc7829"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e03bdaee-033a-4c43-9903-54bbf0d7ffe9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "44629678-3d49-4165-b697-0a694317822d"
                    }
                  }
                ]
              },
              {
                "id": "51900f7b-4a70-40b9-9e0a-0ed3765b2f9e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b9467171-8bd3-4a4b-825a-467e2f34ec8b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b791e313-3c04-49ef-8745-c592f7ac1dc5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8e6898c7-cd25-4d30-b464-4a005f3c012b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e67ee8-4170-43a5-831f-ac30592a57ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a5f66755-970e-4ecc-a6c4-8d9608f7e555"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29b4b965-1ab0-4028-8999-e35dfde05573",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b77a12d9-4c9b-4efe-8b28-49b6a806c833"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "13455f53-b49a-4599-81af-1353c01f8482",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89c645dd-a7b8-47e7-9200-bbd5d5ace94a"
                    }
                  }
                ]
              },
              {
                "id": "6e253e6a-79be-4543-9ca9-734e3f49801e",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a9f7e041-5a60-47b1-8fac-acdcece342ff",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "707ce2f7-1613-4166-bbda-9079edb2b883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b3bc7ecf-1424-4deb-b406-cdca5325ffbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "133d5cc1-ea57-4661-a043-b3e209b13f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "719b9954-418d-455d-bffa-5c8010c6134b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "84519564-c890-4f7b-beb2-5e6608707420",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4752379a-564f-4ff4-8c26-5d183b3fbd3b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8db048a3-0229-406d-b076-2362dedfc920",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "39c18c98-6294-4c7b-949f-ea68b7e3f1b5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c73d9cd6-1665-48ec-aae7-645fc59133d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8319bc7a-cd00-4bc4-85b7-4a98262bd94e"
                    }
                  }
                ]
              },
              {
                "id": "111b027d-9801-47a2-b708-794eb2d22ae7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c72c5f5d-4d72-4fe2-979d-d9d0ab60e046",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9691cbff-8e43-49b6-90d7-9464b8e7ac76"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b23cb2c5-ee4d-4ebd-be73-9649ae65ebc1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6c7fa58a-aebc-4aa1-a383-55d7443ad904"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f2589dae-035d-4cec-a64d-31d366daf949",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3c8d3d56-e313-44ff-8d80-13dc18b8112b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b02d1eef-8760-4e2d-9006-c376ad3b5ff0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "feee2a24-ef9f-49e7-8fc1-f06340c288c2"
            }
          }
        ]
      },
      {
        "id": "788fa148-0862-4889-8e39-e5f5e02cea12",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "342c31d9-c798-415b-86e7-9e950bed5333",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f3febfec-bc7c-4185-8a38-d2459cfa88e5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2900b7ec-521f-4818-aea6-686ae2af04ff",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e54e68-dcf6-43fe-bb2c-2db80d4ed835",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9788992a-38d0-43ac-958c-01d67620f820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5c84a3-f783-40f1-a235-a6650a4842d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6186adc0-7259-4c8a-a63c-cb684d13a82d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5920ed7-afd0-4c58-8e92-b81306da2177",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8bbfc66-de22-4e89-a751-5d2ee457ea86"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2b106d4-773f-452d-9819-dc68788e898b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bbfe300-fea1-4628-b401-5d4e8769b4d9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "820ade5e-ae9e-4bf5-82af-053169bf61ca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "bfa3c94e-d93c-4ccf-861f-78d6b68693e7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5853db59-8acb-49b5-825b-69eef031bc17",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7d1e3a54-9dd1-4138-baab-ec691c83b463"
            }
          }
        ]
      },
      {
        "id": "a6338041-6f3c-4262-bc48-91d36a4f93fc",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2c8cb7c7-f1e4-4436-a862-ad0b7aa14c31",
            "name": "Negative Testing",
            "item": [
              {
                "id": "78041128-94ad-4fd3-86aa-673b46f33a99",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0422834b-8050-4691-92f1-766b035a4c34",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be411e43-4b04-41f4-85f2-afb347d3051b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "357a544f-eab6-47b2-bd4c-f65570c74295"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af679f8-9f7e-4f7f-a30b-70b122aca340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8bf087a6-e549-4695-8d82-d2a83dfa8169"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd40f3c6-7752-4e5b-9844-a2a5f2bcc0b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fa4f96e-e8d6-45b3-9111-a44f119bef35"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b4db4c6-f1e5-4584-bfaa-0101394ee2eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5b848f11-b77a-4b24-b616-d919332e4db7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cabcc931-7223-42f5-b027-ebd0a572ad88",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2301cf84-a5e6-4b80-b39e-d96ed9f40008"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "38f687f4-a763-408a-8747-a4677e2c9eef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1e44211d-4686-497a-8a84-5837fe3598f2"
            }
          }
        ]
      },
      {
        "id": "7b6eb28b-7810-4349-a455-3c5c46db72bb",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9f3bab78-5f03-4dfd-a27d-7b8521184559",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6d11609b-69e6-4b55-b766-982cdeea924a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "74fe95ea-089a-424a-804a-4c77e8914745",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef33f1dd-d939-41f3-bd70-f75a2d13d0f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31bbc280-388b-4aba-9705-4350385e0dfd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4f7467-04f7-4f0f-99ad-552c2d9d6811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66d457e6-e796-4409-a380-183815aa907a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "439ea10a-37f0-4f07-aacf-18514668d4ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bc2e840-42f1-4cc3-bf08-ed333c56149e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2d61420-ee90-406f-bfbc-83e1115a8aef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f8b4a195-73b8-4b8d-a077-324f9bfd4c63"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1faacc5d-91d8-4640-876e-cc747b13b339",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "9f6a2bf5-110f-4b9d-95ce-432d4cd127f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84f9d612-d5e8-4297-8f20-ac7cc2c74815",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4f7d764f-af6b-4004-9d8d-8b027083e9b2"
            }
          }
        ]
      },
      {
        "id": "1659acb3-bff7-4d28-9f52-20c37200e2ab",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "693c6fa8-e2d2-47e2-a935-61e86da467da",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "00f90a95-f633-4bf6-b33b-d36fafb3a573",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "faa7c7ad-cf02-49c8-a4ce-bfbb35e72012",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9eaba2ce-e466-4b12-b52a-f50c4db223c4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dbcd71cd-7a02-45c7-abbe-0efa5a0298f2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 78.10317460317461,
      "responseMin": 10,
      "responseMax": 721,
      "responseSd": 84.47882512608595,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1723682340856,
      "completed": 1723682368961
    },
    "executions": [
      {
        "id": "746749ba-deaf-48c4-aa81-fcbc8dde5bae",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a1217f02-c42d-46ef-bc27-aa9ed3ae5a7d",
          "httpRequestId": "61a7f7df-d29d-466c-a7f5-a3adfc991c36"
        },
        "item": {
          "id": "746749ba-deaf-48c4-aa81-fcbc8dde5bae",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0f686b5d-5d37-4f33-9844-52090d876d97",
          "status": "OK",
          "code": 200,
          "responseTime": 65,
          "responseSize": 0
        }
      },
      {
        "id": "c7e71eb7-5d18-4e86-b93e-2d741b877ccf",
        "cursor": {
          "ref": "876c8e5e-32d3-465d-9b03-486a0fe7e6fc",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "95cc89ce-1f49-4b75-95ed-5da9645491d1"
        },
        "item": {
          "id": "c7e71eb7-5d18-4e86-b93e-2d741b877ccf",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "975666ac-1356-43af-8ded-017cd45d094a",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "cde0cfcc-3f41-4d61-b451-8a885ffc9322",
        "cursor": {
          "ref": "85d7b170-679c-40a5-8088-f14f755b731e",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fc0b1b5b-f705-440f-a729-4403fa196300"
        },
        "item": {
          "id": "cde0cfcc-3f41-4d61-b451-8a885ffc9322",
          "name": "did_json"
        },
        "response": {
          "id": "fa3abd14-143e-4475-b509-3f0975cff436",
          "status": "OK",
          "code": 200,
          "responseTime": 233,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b83d80e-5041-4d95-a1d3-b2c583736517",
        "cursor": {
          "ref": "15d4b281-d6a4-430d-b456-abbf52362e9b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "14bcc33f-83e8-493d-94ca-23cf5e1e7576"
        },
        "item": {
          "id": "1b83d80e-5041-4d95-a1d3-b2c583736517",
          "name": "did:invalid"
        },
        "response": {
          "id": "e9ec0cff-923c-4483-90c1-559d4ec79743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b83d80e-5041-4d95-a1d3-b2c583736517",
        "cursor": {
          "ref": "15d4b281-d6a4-430d-b456-abbf52362e9b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "14bcc33f-83e8-493d-94ca-23cf5e1e7576"
        },
        "item": {
          "id": "1b83d80e-5041-4d95-a1d3-b2c583736517",
          "name": "did:invalid"
        },
        "response": {
          "id": "e9ec0cff-923c-4483-90c1-559d4ec79743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5730272c-a755-4c95-89db-4f549c823ea6",
        "cursor": {
          "ref": "05fee494-602e-47b7-8489-a4c16b2aa27f",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c5fac97c-7941-45ba-ac7f-8b8445cef559"
        },
        "item": {
          "id": "5730272c-a755-4c95-89db-4f549c823ea6",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5d8de82a-67bd-4ecd-b6ed-4434b1fb627d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 166,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d54f54b-ba17-4584-a370-a5592fe7e309",
        "cursor": {
          "ref": "22e5863d-32ec-4f4d-93d2-e41146b97fb0",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "00fa3a7a-efe9-465c-b6ae-ba43353b78c9"
        },
        "item": {
          "id": "8d54f54b-ba17-4584-a370-a5592fe7e309",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "0e3821de-b901-4244-9f32-bdfbd8b78887",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6943f8-98df-4648-8399-36556500c628",
        "cursor": {
          "ref": "c61d2425-c4b3-40dc-b4c3-09d9268fffab",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2348b277-8add-4c98-8566-b14190cce381"
        },
        "item": {
          "id": "0a6943f8-98df-4648-8399-36556500c628",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "2e1157f2-102e-415f-b8d8-672403ad4c7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4088d9ac-6adc-45a1-991f-db12052adafe",
        "cursor": {
          "ref": "8edbfab2-c29b-468a-8dce-a35dba853e2c",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "106d3e72-f7b5-44b9-92fa-49c645a5165d"
        },
        "item": {
          "id": "4088d9ac-6adc-45a1-991f-db12052adafe",
          "name": "identifiers"
        },
        "response": {
          "id": "32cb26df-da33-444e-b08f-df6191620d35",
          "status": "OK",
          "code": 200,
          "responseTime": 172,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e952ade-9689-4178-8209-4cbe8f7e8a10",
        "cursor": {
          "ref": "173fb400-4021-43bb-af1e-2f8b1efbd51d",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9a1d199e-0d96-451b-b068-ac96929c5204"
        },
        "item": {
          "id": "0e952ade-9689-4178-8209-4cbe8f7e8a10",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5876d6c6-b1aa-456c-8292-af9568e1fe3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "261c7bf8-8114-4ec4-a4da-ef35eed82355",
        "cursor": {
          "ref": "d5cfe5c3-3936-4e3d-8f9a-d8312cfda3fa",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7a788123-2edd-4cd7-9aee-b59f70b2c2d7"
        },
        "item": {
          "id": "261c7bf8-8114-4ec4-a4da-ef35eed82355",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "860a8403-cd17-4c58-a539-546cc392dca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "5172fb1e-01c8-47e8-8bd6-b50741dd1ece",
        "cursor": {
          "ref": "005c8df7-18d0-49f0-96cd-e403f10eca39",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "41674ec2-2e47-4ba6-8931-31e3428ba313"
        },
        "item": {
          "id": "5172fb1e-01c8-47e8-8bd6-b50741dd1ece",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d0b70c60-6efd-4a73-bfc1-4ecee8221be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "cb703990-9516-4f4b-b264-f91e074531e8",
        "cursor": {
          "ref": "e5e97e37-1b72-4df3-95f5-54ca5e5e8866",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "77336e2d-8656-4cc0-98f2-1241fd447848"
        },
        "item": {
          "id": "cb703990-9516-4f4b-b264-f91e074531e8",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "fd255aa8-caa4-4c8f-bdf7-cbcda2d5b4e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "d2e7cc4b-4913-4dd6-90f3-8f93272dd7ac",
        "cursor": {
          "ref": "6c68d349-3175-40fe-a1b5-a0b7449813e0",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "757b4332-e6df-412b-8597-fc5959094455"
        },
        "item": {
          "id": "d2e7cc4b-4913-4dd6-90f3-8f93272dd7ac",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "bb180df7-e29a-467f-b702-b01e838465fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "3b8f99ef-12d6-4110-b5b8-7b5a4e9251d9",
        "cursor": {
          "ref": "1c6899a2-9143-4059-bc1d-06b5bceeb286",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "2587f939-0399-49ad-ac03-a59fe524c1f9"
        },
        "item": {
          "id": "3b8f99ef-12d6-4110-b5b8-7b5a4e9251d9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "1eec8316-6372-40d9-9a17-879d6d3dd95b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "f8a0944e-e5b3-4c17-a9e8-a34068b23388",
        "cursor": {
          "ref": "b3fabe5d-cd64-4ed3-bac5-b7f68f8f25de",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f4f4ea0b-c202-4cc8-a819-e3a7b516ff59"
        },
        "item": {
          "id": "f8a0944e-e5b3-4c17-a9e8-a34068b23388",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f35bfa45-ea5a-46ff-8031-6d914af3cdcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "bdc20be5-148c-465e-b875-fd9146ae78d3",
        "cursor": {
          "ref": "5b7bb7bf-9d44-4ba2-847a-f784a4c57bbb",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "bef7e265-b66e-4fb4-9599-abb949cc21d8"
        },
        "item": {
          "id": "bdc20be5-148c-465e-b875-fd9146ae78d3",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "305e5a3d-e7da-43dd-91db-5dafeca81a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "1bbfc1de-6683-4605-8d65-3f62a3af55c4",
        "cursor": {
          "ref": "0e106d43-723f-42a0-8abe-00d6cbedcec1",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "99a08253-f3df-458a-b094-5b21b3d1bbbd"
        },
        "item": {
          "id": "1bbfc1de-6683-4605-8d65-3f62a3af55c4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3a389403-f60f-4cf2-b2c7-40cca3eccc5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "ed7e3c61-15d2-4c8f-a413-6adccc2ce96e",
        "cursor": {
          "ref": "279f8558-c0c4-4622-9cb3-c71d3496e375",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4a4ad7aa-ca99-4805-a96a-ecadf1108f6d"
        },
        "item": {
          "id": "ed7e3c61-15d2-4c8f-a413-6adccc2ce96e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "d5c57b2a-be18-415a-9ccf-33a8546f1161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "0dad2976-f156-4791-a058-7798cde9ee5c",
        "cursor": {
          "ref": "ff45d5c9-fbb4-416e-ad92-665b918c7cf6",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "965bf779-69e5-4567-9663-f3e538fde2f0"
        },
        "item": {
          "id": "0dad2976-f156-4791-a058-7798cde9ee5c",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "67e535a1-88df-46f6-a3eb-f8317264c3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "c08bf5b6-6c22-4338-a165-38996e382083",
        "cursor": {
          "ref": "a8775bb7-3d1a-42bd-9931-11dddca6ce7d",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "f4dda930-b92d-412b-83f4-0ce5b1c0be2b"
        },
        "item": {
          "id": "c08bf5b6-6c22-4338-a165-38996e382083",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "94288619-5b9e-464f-8edc-829e05f87692",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "bac3449b-ac96-4703-8cf6-9f6166beba48",
        "cursor": {
          "ref": "b65921f8-1440-4cbd-a8ab-14fbf215e4c4",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f50b0f14-c835-478f-aae6-1daf5908d271"
        },
        "item": {
          "id": "bac3449b-ac96-4703-8cf6-9f6166beba48",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "587c2ed9-792c-4373-950b-c44645dcf1bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "03d7ebc1-2166-43ed-9a5c-fa3eca92c439",
        "cursor": {
          "ref": "e2b952d3-6b0c-49ec-9604-42e1a6af4792",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5ecf0b11-df05-466f-bb28-ba3889a894c0"
        },
        "item": {
          "id": "03d7ebc1-2166-43ed-9a5c-fa3eca92c439",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "91683701-9b92-4c09-aa1d-959360ed8db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "d69c0d57-76bf-49ef-824d-e98ba1cb40d6",
        "cursor": {
          "ref": "426a5b8d-db9d-4596-8e15-c0c564959aaf",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "e90c83e1-e497-44d6-b0b1-58bb2ffbac3c"
        },
        "item": {
          "id": "d69c0d57-76bf-49ef-824d-e98ba1cb40d6",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c9d158d0-a9a3-4479-aab8-68e1f40fa4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "af720fc8-2bdf-4d67-8688-754714bdd434",
        "cursor": {
          "ref": "cc87fbf4-5bc8-41b4-a4da-06ac0db0a5e3",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "0e8cb19b-40c3-4730-adc5-e36b2af4f104"
        },
        "item": {
          "id": "af720fc8-2bdf-4d67-8688-754714bdd434",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f894288b-6d6f-4ce0-b396-b69ff27552d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "c5cb01d6-21ac-4be1-978d-6977160ac211",
        "cursor": {
          "ref": "0f15d0e4-ae5c-4104-8346-a36287700d66",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "85558b66-d1dc-4a73-bf42-a0d3d1a7c412"
        },
        "item": {
          "id": "c5cb01d6-21ac-4be1-978d-6977160ac211",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6dd1f758-5f5d-46e8-82ae-18754a86431b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "4ae9fd73-3d93-4730-b01b-c9b73b62cf83",
        "cursor": {
          "ref": "e7298fb3-cb72-4c9a-be3c-cdff06bbcd67",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "974b14d9-81e2-426e-9312-5afab47b0bc2"
        },
        "item": {
          "id": "4ae9fd73-3d93-4730-b01b-c9b73b62cf83",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "08aa1f68-d471-4e47-8e25-101fd8d554ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "6b166fc3-b6ff-47b4-ad20-70c1faf614ab",
        "cursor": {
          "ref": "99c9d9da-5de2-40d2-9b8e-44a83807eb9a",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2772db6e-cf46-4f1a-aa7c-86cec9c2473b"
        },
        "item": {
          "id": "6b166fc3-b6ff-47b4-ad20-70c1faf614ab",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "dc669f14-122a-470f-8053-d5a6cd9e6cac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "8fc3147d-21b2-426e-a7ce-03fbdbe5b9b4",
        "cursor": {
          "ref": "31432184-2646-482f-8918-0adaef66f3b7",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "6cda8419-4ba7-4e07-9a46-ce409bf62a54"
        },
        "item": {
          "id": "8fc3147d-21b2-426e-a7ce-03fbdbe5b9b4",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "d0d5ceee-4a80-40b5-aabd-ab2e0a193fe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "0a489c1a-5152-4bc7-a35e-73ec8c99c558",
        "cursor": {
          "ref": "e233d5bc-ab6e-4bad-93cd-352bb53943db",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a2f0eac8-5b14-43ed-9245-34a02aa86558"
        },
        "item": {
          "id": "0a489c1a-5152-4bc7-a35e-73ec8c99c558",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2459b74a-a2bb-4be0-9c12-0fe1a0e32997",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "826ce1a5-12ac-4ddb-b2ce-161bb878223e",
        "cursor": {
          "ref": "d8082f9b-66c0-4dc7-aa21-d8117b98cee1",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "5cc256c6-4f77-4c71-9fff-c054ebb5975b"
        },
        "item": {
          "id": "826ce1a5-12ac-4ddb-b2ce-161bb878223e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0e5aaca6-c818-4504-a732-ba463175a9e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "27934602-aa46-4a11-809a-a1a7bfe060f0",
        "cursor": {
          "ref": "a4ab664f-b3c2-4b62-ad59-921dfc9644ae",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c79721ca-5ab6-47ee-871b-3a9016568a86"
        },
        "item": {
          "id": "27934602-aa46-4a11-809a-a1a7bfe060f0",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "12615dcc-0c7b-4cbc-9849-735339e96d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "cbbb392f-45cc-498c-8cf7-fa3227fe3563",
        "cursor": {
          "ref": "992bc9f5-9f7a-42e9-97b7-306af1a09a08",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f3a85fb8-a763-4c1c-9679-67e473f3f431"
        },
        "item": {
          "id": "cbbb392f-45cc-498c-8cf7-fa3227fe3563",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0ca51b98-f5ee-4d01-ad8b-b7492fcedf0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "11419f49-84e5-4935-947e-d0c187c919c5",
        "cursor": {
          "ref": "8d485bdc-4973-4204-9834-45a81c993752",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "8f8af220-0d0a-4b2d-9276-ff37f6391165"
        },
        "item": {
          "id": "11419f49-84e5-4935-947e-d0c187c919c5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bcbc5949-c1f6-4a2c-ba54-c3713afc48a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "2813951f-f242-481e-ba45-883ade43b1c2",
        "cursor": {
          "ref": "deb7ed94-c44b-462b-b160-b3ccc72c27bc",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f54c10be-de4b-4cbf-abdc-43f4a40ace8c"
        },
        "item": {
          "id": "2813951f-f242-481e-ba45-883ade43b1c2",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8de9d2c2-a847-40ac-b6e5-4610a46179dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "addf8686-5820-44d3-a512-7566dedef4c8",
        "cursor": {
          "ref": "a8f994bc-9c6b-4e8e-8eb1-85146d51afd8",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "c6634fdd-20d8-473b-b1c0-17d9bf003723"
        },
        "item": {
          "id": "addf8686-5820-44d3-a512-7566dedef4c8",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "efe70a33-dff1-4d9f-86ae-7c341a7a8f88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "e2c757ee-e3c2-42a2-99ab-4dccb2168f2d",
        "cursor": {
          "ref": "570f6bf2-51e6-4792-93c1-6de31a74c348",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "62602497-e374-4a0f-8ff6-295124331f5f"
        },
        "item": {
          "id": "e2c757ee-e3c2-42a2-99ab-4dccb2168f2d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4a27b41b-ec8f-4d4e-8ad1-6df2c26ea8d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "755d556b-328e-41ff-8119-f6ac9cf3e8cf",
        "cursor": {
          "ref": "ebe8d1b6-4d97-475b-b9f7-74c8fc0e46b5",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "085c263a-473b-441d-9ecd-9cc5debde6e9"
        },
        "item": {
          "id": "755d556b-328e-41ff-8119-f6ac9cf3e8cf",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3c2f2931-f161-401a-b9af-cff695f007bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "a8498307-f2df-45b2-bd52-83e9333ad921",
        "cursor": {
          "ref": "809583f3-8d24-4a84-81d0-eb3e7198121f",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9063f0dd-f458-4744-ac69-6050965e5611"
        },
        "item": {
          "id": "a8498307-f2df-45b2-bd52-83e9333ad921",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ac21244a-48b0-4523-a80e-4191678c779f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "281c5890-a8f5-4416-843e-6a49c534903e",
        "cursor": {
          "ref": "de570332-4550-40cf-9822-dd32fa85f299",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "84f54b64-9e14-4ded-9d85-a824f03c82a1"
        },
        "item": {
          "id": "281c5890-a8f5-4416-843e-6a49c534903e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "244216e9-0cc0-427d-922d-99a7c83f2da3",
          "status": "Created",
          "code": 201,
          "responseTime": 721,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "3a487f01-c6e9-4adf-8a64-60a6dac65182",
        "cursor": {
          "ref": "7de4d0ca-6eb9-4e69-b01a-d5bfc6c452c6",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6ebd4a1d-5e81-4c46-9127-84c9b06ee316"
        },
        "item": {
          "id": "3a487f01-c6e9-4adf-8a64-60a6dac65182",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b6962a58-8c6b-4fd2-b5f8-6fe070a5e0c7",
          "status": "Created",
          "code": 201,
          "responseTime": 374,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "00d36b6f-cc83-4db8-ac4b-b8ee324ee645",
        "cursor": {
          "ref": "9905b808-6929-4758-89e1-be74b7fd377b",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "53c936b8-935f-4058-85a0-3ad102b493a9"
        },
        "item": {
          "id": "00d36b6f-cc83-4db8-ac4b-b8ee324ee645",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2e203240-7d30-4492-956b-310fc789e113",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "85da3743-7ca2-4ab5-8109-c282b4586515",
        "cursor": {
          "ref": "7c1a86e6-063c-433f-ad50-adab88e8cc92",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "a035b2f5-dcef-4c04-a713-fb37ec907ae0"
        },
        "item": {
          "id": "85da3743-7ca2-4ab5-8109-c282b4586515",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "07f4de8a-6cfc-4936-9b53-fc5670ad2633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "d50cd31a-c661-4372-8b7e-33ee7ff3c470",
        "cursor": {
          "ref": "7ccb5d93-0cb1-47e3-a2a1-8e6337d23289",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f6c7e6ef-8400-439b-a677-d862e69fd4e7"
        },
        "item": {
          "id": "d50cd31a-c661-4372-8b7e-33ee7ff3c470",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f0766063-1262-4bbd-ba4f-e9d31cb83c3b",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "2c277b8f-fa7f-42e3-9c07-abf70e3d64f9",
        "cursor": {
          "ref": "e1fb5a08-262e-45d4-91b6-1b0ea2aca9bb",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bad185b7-6719-4f5e-8641-ea69214bb076"
        },
        "item": {
          "id": "2c277b8f-fa7f-42e3-9c07-abf70e3d64f9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b60360f0-7997-4f9f-a570-0bf5329d686b",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "ce5a078a-81aa-47ae-8647-7ffa4bc5e4cb",
        "cursor": {
          "ref": "528b0933-2948-4a00-bbf2-6a7fe9b5efe9",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "a278129f-2f39-4666-b17e-eef1ff7d5217"
        },
        "item": {
          "id": "ce5a078a-81aa-47ae-8647-7ffa4bc5e4cb",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6d1efb15-347c-4158-a24d-e909a9319c22",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5369c1ec-e0f5-42bf-849c-7321401c6fcf",
        "cursor": {
          "ref": "4a88fd13-910b-4923-83df-0e1dc111c04c",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f359384e-a727-484d-bad8-c7799984c5cb"
        },
        "item": {
          "id": "5369c1ec-e0f5-42bf-849c-7321401c6fcf",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3eba4e63-b85f-4392-b4d8-5eae5f0f7aff",
          "status": "Created",
          "code": 201,
          "responseTime": 268,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "17b434fd-c879-4553-ba8d-fccd1873d185",
        "cursor": {
          "ref": "f929ad59-da4b-4f25-9244-fe938a465561",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e90b3047-c002-468d-a1ae-48cc0372f398"
        },
        "item": {
          "id": "17b434fd-c879-4553-ba8d-fccd1873d185",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "dea4953e-78e2-4da5-ae16-9ead509f9208",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "2d2edee7-8589-4fe3-8115-aa46807414f5",
        "cursor": {
          "ref": "dda44c14-b495-47a8-9512-ff72c3b4ffe5",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "48963c68-452d-439c-9f92-77da8fd30a4f"
        },
        "item": {
          "id": "2d2edee7-8589-4fe3-8115-aa46807414f5",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "852ce7ae-9177-4773-8b78-5fdeeea61f49",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "1333ca62-6531-42f8-9938-0e8e23f3e5ad",
        "cursor": {
          "ref": "d4f1d0a3-b115-446b-972d-9c4ef0684c46",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "f94abb52-940b-422a-91af-f14435419879"
        },
        "item": {
          "id": "1333ca62-6531-42f8-9938-0e8e23f3e5ad",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ef1b8415-0b55-4e7e-a911-ebb2807de34b",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1ed80308-114c-46cd-8931-eee5a2f3403b",
        "cursor": {
          "ref": "a5ef05fc-d2ff-4f0e-bfc9-1fa8ddac5de1",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3341d00d-79c8-44c9-9aba-e73b2944eb33"
        },
        "item": {
          "id": "1ed80308-114c-46cd-8931-eee5a2f3403b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "befe6f35-1ff3-4cfe-9388-4edfafd71d84",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "fb255723-2e0c-4f90-91d1-2bff93810850",
        "cursor": {
          "ref": "11ebfb8a-c8b3-4be6-972d-a427830a2b78",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0d4c5f99-10af-4b9e-84ba-470bb8b51d56"
        },
        "item": {
          "id": "fb255723-2e0c-4f90-91d1-2bff93810850",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "39ff1607-ce7c-42d2-9e5c-c3e749b6e06a",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "36dadad8-d1f6-438c-9411-de36eade5de1",
        "cursor": {
          "ref": "7409783f-bb7a-48d7-be84-b8f725427835",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3a0a989d-1949-4728-b3a5-982b384ffad4"
        },
        "item": {
          "id": "36dadad8-d1f6-438c-9411-de36eade5de1",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "bf1499e2-0c71-45f9-a99e-24e7e3b7dfd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "0f1f5fb0-bdfd-4c28-a5c4-bf8c193afede",
        "cursor": {
          "ref": "39d75d5a-fcf4-49ee-b825-c6f4d583c4a0",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1638b89e-2fe1-4d8d-a0d7-f9a234963037"
        },
        "item": {
          "id": "0f1f5fb0-bdfd-4c28-a5c4-bf8c193afede",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "0df3c96b-6de9-4b58-b8fe-052a8425fa57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "f330b650-9194-485a-9c1f-ca33621274ce",
        "cursor": {
          "ref": "bd6b1342-0dc0-46e2-883c-2d8b855875df",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ad5e9d76-1fe4-4df5-9026-3526c9f3abe7"
        },
        "item": {
          "id": "f330b650-9194-485a-9c1f-ca33621274ce",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "c4476906-39ee-4d80-a68f-6ceaaddbfa22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "fe26c546-23f8-4875-a5a7-519edc3b9c0f",
        "cursor": {
          "ref": "cfa080d6-3f45-41c9-8478-c8a53c05b68d",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "db30c9ac-aa38-434c-bff4-fa2abe58a4f2"
        },
        "item": {
          "id": "fe26c546-23f8-4875-a5a7-519edc3b9c0f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "3eb53b48-8bb6-421c-bcc3-c6db90b0d5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "0837e95d-61bf-403d-9546-b43febdce0fc",
        "cursor": {
          "ref": "969be2b5-8d14-4c82-9e97-ba6f761810ea",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "412affa6-ff71-419f-b7d7-471a2d4882ce"
        },
        "item": {
          "id": "0837e95d-61bf-403d-9546-b43febdce0fc",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "deb960d2-c573-40db-ac2c-72b0bbb10916",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "4d73f3fd-1d26-48dd-82bd-6c6a7a7391ff",
        "cursor": {
          "ref": "4a17e57f-aba6-45ad-8d42-3dadd9e7780d",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "c5b3201a-5a33-4810-a9e1-e2ab453ff0ae"
        },
        "item": {
          "id": "4d73f3fd-1d26-48dd-82bd-6c6a7a7391ff",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "3f9b0c3b-6843-4346-b884-a3b0f59e7295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "a6ae23c4-ffd1-40d6-b24b-b53ac832f4c3",
        "cursor": {
          "ref": "f23ec63a-8c8d-43c3-8176-c71eb7b68bcc",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fa38b1c4-6eaf-4864-946a-28dff5ed4176"
        },
        "item": {
          "id": "a6ae23c4-ffd1-40d6-b24b-b53ac832f4c3",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d029e916-a13f-4878-802a-613ef2df9192",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "8b070a9a-1d3a-4963-883b-cc7dd48842e3",
        "cursor": {
          "ref": "2462dca1-8603-4c2b-8ba3-9d2904af055e",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2ff62707-6bd7-41e2-b062-b9f9d726f521"
        },
        "item": {
          "id": "8b070a9a-1d3a-4963-883b-cc7dd48842e3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "b19f4349-5e7f-4b15-abf0-892f77474be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "7e0cc944-5a15-46c8-8bc4-9fcf587dac46",
        "cursor": {
          "ref": "51c31ef6-1bbb-4ae2-88af-a19bc5378076",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f0cfd7b8-754c-43ff-8d6e-31bd20d47588"
        },
        "item": {
          "id": "7e0cc944-5a15-46c8-8bc4-9fcf587dac46",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7120c67c-5c4c-462d-a470-806633df78d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "212b6e04-14da-4503-aedd-d02c80b26660",
        "cursor": {
          "ref": "328fa080-0e4a-4590-8ad2-02a3a48f78e6",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "77425461-963e-4cfb-a2ce-d931497a8fd2"
        },
        "item": {
          "id": "212b6e04-14da-4503-aedd-d02c80b26660",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "5500cc43-6242-451c-a9f0-0f3e6cd93530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "d2e1c96d-9889-4316-bd1d-173f3986ecd0",
        "cursor": {
          "ref": "be09aaa7-eac4-419c-bbd8-92d0ec3683f2",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b295be90-7195-4226-8ce5-796144f8b798"
        },
        "item": {
          "id": "d2e1c96d-9889-4316-bd1d-173f3986ecd0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d618b65a-b2cd-4872-9afc-d0c2794aecbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "2932ba84-da73-497f-841c-74b5a7379863",
        "cursor": {
          "ref": "b9f937a7-3530-49da-9049-673afbbc3ff3",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b9171e96-b442-460e-95ce-d3300a88ea09"
        },
        "item": {
          "id": "2932ba84-da73-497f-841c-74b5a7379863",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "dceb5c90-2bc0-4e98-afe6-bfd61fbf8098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "f3aa0e32-14e1-480a-99de-cdfc46961bf6",
        "cursor": {
          "ref": "7ed25668-7b6b-468f-8e1d-270753b6492f",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "abb62830-f0cc-4668-944c-8e3531f47e03"
        },
        "item": {
          "id": "f3aa0e32-14e1-480a-99de-cdfc46961bf6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d6d5dea3-ad83-4933-be72-08ca1ce6e160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "99e66bf2-e085-4b18-a640-c8d8836a72cf",
        "cursor": {
          "ref": "c4484dc7-3ad5-4dce-a3d3-71dc2e8c022e",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8a89e3e9-e848-4553-aa24-eae7163c4c08"
        },
        "item": {
          "id": "99e66bf2-e085-4b18-a640-c8d8836a72cf",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "9d04fe81-3220-4174-925b-694ebd884c15",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "58169d95-a687-4290-ad40-5a259954cedd",
        "cursor": {
          "ref": "7e242647-ec03-4a67-92fe-b6572b866638",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "65c4717d-beac-47d8-b704-99b779aa5e5a"
        },
        "item": {
          "id": "58169d95-a687-4290-ad40-5a259954cedd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "97b90db5-ce90-4641-9984-43dd47558336",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "24da648b-3bb3-4280-9b14-fd14befef10c",
        "cursor": {
          "ref": "51fabf84-4be5-4901-8196-62069f471574",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "615bb5af-e2d9-4126-bb1b-590bc532beb0"
        },
        "item": {
          "id": "24da648b-3bb3-4280-9b14-fd14befef10c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3cd6232d-f93a-4eb8-b33b-90a2553fdd6d",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "fd41a487-513e-4309-89b5-64f4690171d6",
        "cursor": {
          "ref": "114ce483-b083-4699-a09a-4415463355b7",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7eae8435-ed11-4ad5-b630-496474098a45"
        },
        "item": {
          "id": "fd41a487-513e-4309-89b5-64f4690171d6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "d6ed2259-0170-4ede-af92-7ef647d79dcb",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "f05cdb45-77d3-4d95-adb3-0f469a0a695b",
        "cursor": {
          "ref": "26778107-8128-4535-a3e1-8c572f7b45a5",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "cdfa1d34-218f-46f9-82c6-e68a78e856a9"
        },
        "item": {
          "id": "f05cdb45-77d3-4d95-adb3-0f469a0a695b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9e2d16aa-adfc-4ded-ad5c-813a1695a9ec",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "b73f1ea3-0c6b-488d-a204-8acf690788cc",
        "cursor": {
          "ref": "47831278-d0b4-4a2f-835b-b1d9ac13d5e3",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "95ad38c3-141c-465f-af0e-265f11868a68"
        },
        "item": {
          "id": "b73f1ea3-0c6b-488d-a204-8acf690788cc",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "44e71b71-012f-40f7-986c-d6f57369a747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "f80387f7-accb-485e-b864-53dd3b96bca2",
        "cursor": {
          "ref": "0bdbc72e-0652-4b83-a90c-a0886fa1107a",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "05a01bf4-1a01-42c2-a6eb-6559da809842"
        },
        "item": {
          "id": "f80387f7-accb-485e-b864-53dd3b96bca2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0287efa2-28e5-42b7-9f75-b8035c281b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "96001c75-2bb6-42c3-b807-4a9e1cdfa7d0",
        "cursor": {
          "ref": "e98c0e8f-9879-4133-93ae-6b37bb25873c",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "cc90a857-f41e-4b22-a221-6c292f0d2a2b"
        },
        "item": {
          "id": "96001c75-2bb6-42c3-b807-4a9e1cdfa7d0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "75e47233-3652-49eb-94b6-c6cc14c45317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "5d1c38a1-ae0b-4966-b11e-8946ec6e32cb",
        "cursor": {
          "ref": "d649a097-2ea3-42e0-b6fe-40c81106493d",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ea9b9249-d6d5-4eec-b958-251a83c26c8e"
        },
        "item": {
          "id": "5d1c38a1-ae0b-4966-b11e-8946ec6e32cb",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a4355a28-1783-49b3-90b9-7c83571331d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "1fb5d34c-677d-4d4d-bca4-21bd53139498",
        "cursor": {
          "ref": "b9ecacf2-314b-4ee1-af1e-e6b43a0948be",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d0b76939-388b-4f7a-b838-3f96505766a8"
        },
        "item": {
          "id": "1fb5d34c-677d-4d4d-bca4-21bd53139498",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "890b4519-bd33-41dc-b3de-5f53ad69a082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "5ff3b093-af5d-46de-9302-701db8c2e802",
        "cursor": {
          "ref": "822d91c1-0ce6-43d8-8790-6bd088f2b718",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "ffc816ab-1c4e-4799-8bb3-e7a166e9ecf8"
        },
        "item": {
          "id": "5ff3b093-af5d-46de-9302-701db8c2e802",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "54a7a236-e959-4742-8efe-0a5bced62811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "64be72c3-2609-4525-983f-d695aa1a70d1",
        "cursor": {
          "ref": "4083c792-54a8-4064-9305-1f8075328b2e",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e455c0b0-f5ee-4609-b9c4-8e4410756318"
        },
        "item": {
          "id": "64be72c3-2609-4525-983f-d695aa1a70d1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "4fc11e7c-4e45-42aa-a39c-2c517949a246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "90548d73-2a66-4c93-825c-f847969d30cc",
        "cursor": {
          "ref": "16fceaf2-96dc-4e5e-bb57-34c27370c302",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "99a49e87-a348-445c-b135-cf69197fd26d"
        },
        "item": {
          "id": "90548d73-2a66-4c93-825c-f847969d30cc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "a88a3b35-98ce-4ecc-88bd-d6096abf92bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "20a14994-ae94-4ff0-ab55-95ff411e2089",
        "cursor": {
          "ref": "2eed9c51-9f8e-4359-a5b2-40511d93bd43",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "2e9d071e-4ecf-4373-ae6f-804477e783ef"
        },
        "item": {
          "id": "20a14994-ae94-4ff0-ab55-95ff411e2089",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f9199373-0e21-41f3-bccc-de740fcc3be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "7994699b-0297-4416-a087-66c71a776dce",
        "cursor": {
          "ref": "c1184989-487e-478d-8c5e-e9c65c6932c9",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "78583c32-d580-47c7-b0b0-1fe01c908dea"
        },
        "item": {
          "id": "7994699b-0297-4416-a087-66c71a776dce",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "acc37ffc-84fc-4662-8810-4d75f58ace0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "19afd33e-0156-4cc2-a3b8-c352186a2474",
        "cursor": {
          "ref": "4dbbd88f-4e06-4b9f-b944-6ea356595f8f",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d0ebfc78-e30c-44f1-8447-8fc00be270dd"
        },
        "item": {
          "id": "19afd33e-0156-4cc2-a3b8-c352186a2474",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4ac12f05-35b3-4eb4-981f-3401df5ee41c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "56374614-15a0-4055-ba43-7cfc64249672",
        "cursor": {
          "ref": "2d33a338-892c-4f17-9ed6-544d6648c136",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "fd237470-eb5e-40b1-af4d-8f3d067282c5"
        },
        "item": {
          "id": "56374614-15a0-4055-ba43-7cfc64249672",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6f2e31dd-6bc5-4cb2-8edf-37a2aa9a72ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "8504c1b4-f9d4-4106-924a-014be674cc05",
        "cursor": {
          "ref": "7aa0c712-f802-4bdc-99fa-8101bd4cf198",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "4e74c2c4-b1d4-451f-a31a-79c42d4be5fe"
        },
        "item": {
          "id": "8504c1b4-f9d4-4106-924a-014be674cc05",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "b5747e8c-19c0-4588-b4d8-01dd3b8f0f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "e0eed73b-8130-4005-8073-03878f8b2d31",
        "cursor": {
          "ref": "b8fbe5f9-9113-4cbe-96d1-62fca3387c72",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "393a4a35-f7d5-410f-93d8-e6b27c6c739c"
        },
        "item": {
          "id": "e0eed73b-8130-4005-8073-03878f8b2d31",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "acf6e846-c04b-43cc-8e3d-ceaaebdbe9ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "6ec1c18e-7f7f-43e9-879f-15acd8a1fb58",
        "cursor": {
          "ref": "bfef7168-e250-4810-a4e4-076fdbe91bc9",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "da9c3600-ae40-4662-8a6e-4dcaa93179de"
        },
        "item": {
          "id": "6ec1c18e-7f7f-43e9-879f-15acd8a1fb58",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bb859771-abf8-4ea8-b3e5-c42e392e4b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "2cf48892-03f7-4601-9ba2-342df61f4549",
        "cursor": {
          "ref": "43d6d4e4-ac94-4b0d-a87f-113328b61527",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "f56a18fb-3db3-4268-9759-9359e1c6ecdd"
        },
        "item": {
          "id": "2cf48892-03f7-4601-9ba2-342df61f4549",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "1e9a5787-b9b9-4345-845b-0c41241c0a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "3cb418a2-0835-46f2-86c4-7e2d5bdb7a15",
        "cursor": {
          "ref": "c3379664-a208-4f4b-9d81-44c8f24c5060",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "d205d52f-115e-4d51-8768-1a081521f6f0"
        },
        "item": {
          "id": "3cb418a2-0835-46f2-86c4-7e2d5bdb7a15",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9b5a329a-a501-4e40-8c65-3afd467da6e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "5dcfb0eb-b841-4125-84fc-311736ed3538",
        "cursor": {
          "ref": "d70626e0-129e-4d57-8a5e-c6e06c8a89f4",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "73ba8275-b630-45f9-bead-cc8ef6f94476"
        },
        "item": {
          "id": "5dcfb0eb-b841-4125-84fc-311736ed3538",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "56844706-5ce6-48f1-a361-dfdf19059d5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "2c483908-b0c8-43c8-bac6-fc72e8dc3e96",
        "cursor": {
          "ref": "14192bfc-9370-4ec2-8620-fce2ddfc7b0f",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "65481d13-7f18-426b-ab60-8a3995212f65"
        },
        "item": {
          "id": "2c483908-b0c8-43c8-bac6-fc72e8dc3e96",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "bf52a9b1-2fff-42b2-9bf8-ac8fadbc64d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "ad9ba1aa-de4e-4094-a107-7d67b55edbd9",
        "cursor": {
          "ref": "229d261a-1c00-4e0b-a6c1-0b2b3a634716",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "02b5c22a-9787-47c1-8d3d-0ca88821a020"
        },
        "item": {
          "id": "ad9ba1aa-de4e-4094-a107-7d67b55edbd9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "bfec31c8-cd64-4e42-8512-8e90a28ab82d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "70d02e69-822e-4b03-9c4d-402bf1b7ff0f",
        "cursor": {
          "ref": "d2d224e8-9cb5-43c9-9216-a799922c8d35",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "e9d4d2d9-52b3-41df-b5ee-15b66c6684a6"
        },
        "item": {
          "id": "70d02e69-822e-4b03-9c4d-402bf1b7ff0f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "cbf07679-b1b9-46c0-b4a2-9fa24f942abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "79e34d0a-42f8-43cb-bab8-e22cd8dbfee2",
        "cursor": {
          "ref": "37a7e762-5224-44b8-a92f-742223a639b4",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "57f5a308-f91f-4d85-a89d-8c48717aff6c"
        },
        "item": {
          "id": "79e34d0a-42f8-43cb-bab8-e22cd8dbfee2",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "dfa640ce-dbf8-475a-97ac-d3e32cc07a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "09e74a2f-b178-4111-ad1b-cae11c778c0c",
        "cursor": {
          "ref": "26d5dbf3-93d4-4cbb-9655-3aa5de1553ae",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "8e7a5892-88d2-4dc2-8250-a920a2a8e745"
        },
        "item": {
          "id": "09e74a2f-b178-4111-ad1b-cae11c778c0c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e9820701-8c28-4fcf-8000-d70e6c376270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "679d8c26-3161-4ad1-b583-4e51bbe9bde8",
        "cursor": {
          "ref": "baa31e90-be38-4df5-bda0-0e8f452a70b9",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "33518bc2-32ff-4eb0-990b-67cbbb2c3b54"
        },
        "item": {
          "id": "679d8c26-3161-4ad1-b583-4e51bbe9bde8",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "1b15a2c1-c01e-4556-b9dc-dee64e7e1ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "52175299-0e97-40f2-afaf-518f748ae686",
        "cursor": {
          "ref": "7063bc1e-03a6-4e01-95e2-3082e37b8d7d",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "3fc72752-641e-4e5b-9f03-fae2f6db808e"
        },
        "item": {
          "id": "52175299-0e97-40f2-afaf-518f748ae686",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8f40d6f6-9afd-4952-8a4a-12f1586abb53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "7337bbeb-d9d9-44e5-af08-e72af58903ba",
        "cursor": {
          "ref": "3df9f6d5-1388-4a0b-a532-89118729b4c8",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "6f8c40c7-52de-44de-9b49-011e58b68e32"
        },
        "item": {
          "id": "7337bbeb-d9d9-44e5-af08-e72af58903ba",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ca86fcd7-2809-433e-8482-bf1336aeeb9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "e3a20916-2954-43ee-84bc-a13190e45333",
        "cursor": {
          "ref": "4c97b784-1581-4e2a-ad45-56e4b4a7367a",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "2f94e950-4318-4e3f-a5b0-a7ca7c5e0e0a"
        },
        "item": {
          "id": "e3a20916-2954-43ee-84bc-a13190e45333",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "c41c8d28-e635-4eb2-b121-32b08f40cb7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "db0a4284-cd99-48ec-a10d-178ef9e0f436",
        "cursor": {
          "ref": "32ef0db7-32b2-4e77-aab2-a5689b51cedb",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "d350ad3e-cc1c-404f-b33f-095b5ad6c623"
        },
        "item": {
          "id": "db0a4284-cd99-48ec-a10d-178ef9e0f436",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "e305d8fd-9b8a-4a3a-bdcf-c76604ce7be0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "f9856902-568c-4d15-86f3-a432ad439879",
        "cursor": {
          "ref": "0dac3e02-4f7c-465d-8499-f90eb7938645",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "e85537b3-2116-4a93-a951-bcc4ede3187d"
        },
        "item": {
          "id": "f9856902-568c-4d15-86f3-a432ad439879",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "190e40a8-5b89-4d92-a2e6-7b18f4fecfbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "361fe126-f632-49db-a176-b020d963f270",
        "cursor": {
          "ref": "2a804b00-cdba-459b-b769-346b22d6b56e",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1f2155cc-df81-4c1e-a292-cba04e749508"
        },
        "item": {
          "id": "361fe126-f632-49db-a176-b020d963f270",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "076eb47b-e4e8-4910-a5d5-3189dce70848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "378aff9b-489c-448c-a362-8f3fd1dca4d7",
        "cursor": {
          "ref": "09edca78-612c-4e24-a43d-da372178fcdc",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7343970a-d520-449e-9e79-0e3c4f277c6e"
        },
        "item": {
          "id": "378aff9b-489c-448c-a362-8f3fd1dca4d7",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3da1c142-1822-490d-825b-48a3bfb21e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "f77d2ebf-cfb0-483c-b927-58fa72c49c74",
        "cursor": {
          "ref": "735b3ecf-0db3-41f9-98f6-46c2ce986b9a",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "982debde-9d26-4ad7-893b-ae80e6975c78"
        },
        "item": {
          "id": "f77d2ebf-cfb0-483c-b927-58fa72c49c74",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "52583c53-10ac-4c49-b6a2-eef85eecc7b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70804574-6613-4718-8193-008e3e49ee08",
        "cursor": {
          "ref": "c282d4f3-d91e-4fcb-83b7-99a2b483b57e",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "888a7341-434c-4d0a-b587-0f6a806be019"
        },
        "item": {
          "id": "70804574-6613-4718-8193-008e3e49ee08",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "99c9e58b-c0e2-439e-87c1-fd6d1d602370",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "87b20541-edf2-43df-aec5-8559b29a657d",
        "cursor": {
          "ref": "e9f72c00-aac3-429c-b36c-9a105c6dd368",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "82960aa2-2cd2-4a16-ad75-866919ea5a84"
        },
        "item": {
          "id": "87b20541-edf2-43df-aec5-8559b29a657d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8bbdd5c7-0650-4111-8fa4-a1a6dc2813ee",
          "status": "Created",
          "code": 201,
          "responseTime": 316,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "36a0e514-d060-41eb-a553-98961b81abd3",
        "cursor": {
          "ref": "a3598bbc-a750-4e3b-a0d7-ce6703e513d9",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "33477269-6be4-44db-aa03-6f623f18bd52"
        },
        "item": {
          "id": "36a0e514-d060-41eb-a553-98961b81abd3",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "13be1dde-3574-4e1a-b74d-06503e68a3f6",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "197ac79d-3537-48b1-99ac-535efccdd53f",
        "cursor": {
          "ref": "f6c6b8e9-7955-4879-a93a-844a9cb8724e",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "a38b60a9-393d-45a3-a77e-bc1f7da3b84e"
        },
        "item": {
          "id": "197ac79d-3537-48b1-99ac-535efccdd53f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2382c174-c73f-4eb6-b90b-85f0c29aff08",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c3d0a4-a1b8-40d4-b319-78880a071097",
        "cursor": {
          "ref": "02ab9d61-e0da-441e-a9b9-a28594f2e1c3",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "48e42b74-11f4-4ae1-a252-79d5c9244c05"
        },
        "item": {
          "id": "86c3d0a4-a1b8-40d4-b319-78880a071097",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e90983fa-4658-47af-a025-04edae3a4bdb",
          "status": "Created",
          "code": 201,
          "responseTime": 298,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c1659f7-77f5-43ef-83f9-f8d009f9d356",
        "cursor": {
          "ref": "5bab2693-6dbd-4487-980d-6973dda1f8f5",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "71e34eee-77f1-479e-b769-a48323c53e03"
        },
        "item": {
          "id": "5c1659f7-77f5-43ef-83f9-f8d009f9d356",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "6ec4bff7-80bd-44f9-ad46-fe7b2409d7e5",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-08-15T00:39:16.194Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-08-15T00:39:16.194Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "1b073391-2344-4b81-afdf-d1e88f2214ef",
        "cursor": {
          "ref": "62527328-881e-48d2-8a60-621fd80161c9",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "221eaaf8-871d-4b8e-a2f0-5fe9f72299dc"
        },
        "item": {
          "id": "1b073391-2344-4b81-afdf-d1e88f2214ef",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "7fc34978-38b9-47fe-88f8-e83e98055168",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5352fb3d-766d-4a39-a5a2-ba7fa124f272",
        "cursor": {
          "ref": "9c452123-eb0c-4b81-a4ba-ab9090fa46c7",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d6c1f8de-566f-42f1-87f7-7f8c8edcec28"
        },
        "item": {
          "id": "5352fb3d-766d-4a39-a5a2-ba7fa124f272",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9131b9d7-6743-46f7-b98c-5ac3cdde97b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "3cce093e-04e7-4e91-af17-fb413bfa965f",
        "cursor": {
          "ref": "212d4f02-a127-48eb-a868-a71e0cbdf008",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "5ceb0a65-3784-409d-b840-fa63d0a1b18d"
        },
        "item": {
          "id": "3cce093e-04e7-4e91-af17-fb413bfa965f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "acf94bdf-8df7-414d-bf12-fc0a8dae8e17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "7f5f99eb-6aa9-432e-9eaa-16b51c344fba",
        "cursor": {
          "ref": "53aaf64f-bb70-4353-aadc-d600c610aee6",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "3fb289b9-c897-447c-bae6-4477679b4c94"
        },
        "item": {
          "id": "7f5f99eb-6aa9-432e-9eaa-16b51c344fba",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c526e3c1-c734-42b4-8f84-27db6c949327",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "525d864a-37dc-43ed-95ae-d61c2242176b",
        "cursor": {
          "ref": "3bbfe41c-cdb0-4ea2-89cf-f6972bf2ac27",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "efd4f71c-4c2f-4448-a559-33447d3135c4"
        },
        "item": {
          "id": "525d864a-37dc-43ed-95ae-d61c2242176b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "608c6201-2147-473b-aa19-121d96ae938a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "7c0a7932-d8d7-4f8e-b717-1b2898afe481",
        "cursor": {
          "ref": "c219bb13-5a14-4724-83eb-77b616deef1b",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "133a9efd-23bf-48f1-a7a4-ae2be4b8d48e"
        },
        "item": {
          "id": "7c0a7932-d8d7-4f8e-b717-1b2898afe481",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a000c197-ae03-4eb5-be3a-be59a8c83908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "946b6804-530f-4cbd-acd8-4182f570f44b",
        "cursor": {
          "ref": "27531549-cdf9-4b12-832e-f0efeb3390f9",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1c39910b-99df-4cde-9624-8e92dc82e951"
        },
        "item": {
          "id": "946b6804-530f-4cbd-acd8-4182f570f44b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "03c36162-9f1b-40cf-b76d-63b822387f9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "1934c725-5ae7-4fed-866f-4fe3f14f840a",
        "cursor": {
          "ref": "3179324d-d328-400e-8e5e-803d44543240",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "077555c0-8bd0-4df1-a42f-ef03b1511c82"
        },
        "item": {
          "id": "1934c725-5ae7-4fed-866f-4fe3f14f840a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "35258a48-2bb2-4125-b449-5e0d113304df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "d269c911-21e0-4f00-a82d-02cd4450b272",
        "cursor": {
          "ref": "2573615c-5709-447a-aa00-917582c858d8",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "44b9fa03-8bc9-4b72-9f55-70d7f3745348"
        },
        "item": {
          "id": "d269c911-21e0-4f00-a82d-02cd4450b272",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "10b5a067-51ff-4f84-86ad-15b4274b60f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "c1a76857-047c-481d-905f-6871cfde8b38",
        "cursor": {
          "ref": "7786ba5f-6804-444a-89c4-731475429279",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2f19706e-37c2-48fa-a93d-850353d21add"
        },
        "item": {
          "id": "c1a76857-047c-481d-905f-6871cfde8b38",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1b011617-5e62-4988-bb25-55aaa3e38c93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "e1c3c138-7430-452b-851a-ecf8b13fd7fe",
        "cursor": {
          "ref": "dd2107df-6d51-4e81-afff-9a0466bdad82",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3e057c3e-2581-4363-a65e-51164fddc3fa"
        },
        "item": {
          "id": "e1c3c138-7430-452b-851a-ecf8b13fd7fe",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7960045c-7ae8-4308-a4ff-9da8dea115f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "56c69e25-2483-4c52-b595-85e2843b7937",
        "cursor": {
          "ref": "084d01d2-7929-4de5-8aec-79fcfa5b044b",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e74fd000-a138-468b-b62d-b9fa2b898367"
        },
        "item": {
          "id": "56c69e25-2483-4c52-b595-85e2843b7937",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1b76e72e-b739-41e7-b19d-70daf1fb8f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "6a9cea30-1370-4a58-b4a4-f6aefe9d8f72",
        "cursor": {
          "ref": "98e89a54-278a-4bf4-a4d2-6dd519f6d827",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8634e5e3-0e82-4ef2-92f4-d41058dcb645"
        },
        "item": {
          "id": "6a9cea30-1370-4a58-b4a4-f6aefe9d8f72",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "5223ec50-bf67-4d5a-8d3a-13d7632a2407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "ad3cfbf2-2755-407c-8e0a-b0f749b4a369",
        "cursor": {
          "ref": "bb401e21-cf9e-4dbc-8719-6009f76bd811",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "58571f9a-9120-485a-8de0-7fd27d106d05"
        },
        "item": {
          "id": "ad3cfbf2-2755-407c-8e0a-b0f749b4a369",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "95047ccd-eb8b-4a1f-ab4e-4a4d373ce1a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "df24d413-7c37-4c68-bc8c-f52983f8e0d6",
        "cursor": {
          "ref": "2859ccdf-4e7b-47fd-9291-775bd70dfead",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c5abd50e-4d9e-4356-a520-438dbfc85bae"
        },
        "item": {
          "id": "df24d413-7c37-4c68-bc8c-f52983f8e0d6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "abe7600c-b846-4716-8059-31ae01a29732",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 95,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "e403058e-a5ef-447c-bea4-983505b7fe0c",
        "cursor": {
          "ref": "5b12a45d-a232-46cf-a412-ca2e60d3ab58",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d4062591-b9bb-4fb6-90ff-4cdb150ce2ba"
        },
        "item": {
          "id": "e403058e-a5ef-447c-bea4-983505b7fe0c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a33ea574-26ab-46a9-897c-9026d1cd9091",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "033d6d0d-8300-4077-a4c6-cfaf36f5010c",
        "cursor": {
          "ref": "3eb6f714-ee8c-4b96-8fff-94c1e3ac710b",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d7ca0216-e6b5-4c49-bacb-0fce7d2827ab"
        },
        "item": {
          "id": "033d6d0d-8300-4077-a4c6-cfaf36f5010c",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b0848b5a-79bf-4f6b-a0b7-451b97d86b1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "3dddb079-0f2c-4d62-bc8e-422b92045672",
        "cursor": {
          "ref": "90de88ba-5c06-42e4-bbd9-00a90c5f227b",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7a82e68c-9967-48b9-9abf-e44a99422b2e"
        },
        "item": {
          "id": "3dddb079-0f2c-4d62-bc8e-422b92045672",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c05cd298-057a-419d-96e0-f4c83810e871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "28e69600-4cb5-4ab1-8cdd-5d4c25d6a760",
        "cursor": {
          "ref": "bd371bbe-d40b-4f26-a261-e21a69c91f46",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "27e1fa0c-46ea-4ac9-a816-32c75b79c0c0"
        },
        "item": {
          "id": "28e69600-4cb5-4ab1-8cdd-5d4c25d6a760",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "f6aeecfb-8c65-48dd-90e2-c4e12f7707eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "ceb10793-e91c-4bcd-a9f8-9c0eb68ac0a4",
        "cursor": {
          "ref": "529ed421-c8db-47e6-8599-095b9ed2a3d9",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "b3ed5be3-c491-4cae-9506-c0b16da770af"
        },
        "item": {
          "id": "ceb10793-e91c-4bcd-a9f8-9c0eb68ac0a4",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "bb6fe54c-b985-4b7f-ac88-8d9797518b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "14a5cd1a-1402-410a-b49b-5641449ecc6d",
        "cursor": {
          "ref": "8434bc40-6705-4f9b-ab7b-4a559a33828a",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2fdfad49-ea75-4261-b47d-9c64ffdc0f0f"
        },
        "item": {
          "id": "14a5cd1a-1402-410a-b49b-5641449ecc6d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1a2ddf67-6757-4a7d-8179-2598e8521e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "18621262-a617-43ea-b766-b17f4c3736a5",
        "cursor": {
          "ref": "d64ff711-ef4c-462d-ba52-670e88bf3cd2",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "9a65e0a4-7aed-4022-b819-237e82a250f9"
        },
        "item": {
          "id": "18621262-a617-43ea-b766-b17f4c3736a5",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d7b25bec-6e58-4f97-a6f7-b1716dc9efe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "0847a92d-3aad-4171-a081-0535825b2a37",
        "cursor": {
          "ref": "a2117365-edad-4f70-847d-7565039fd773",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6acdf13c-e4c5-4b78-98e7-d324f1a15e12"
        },
        "item": {
          "id": "0847a92d-3aad-4171-a081-0535825b2a37",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0c1e103a-4dc3-4bd3-a90c-7fe6c728945b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "8a6e80b0-e095-4cec-8941-d7d23ace649c",
        "cursor": {
          "ref": "7549f643-f741-4f14-a9e1-ed19041cd11a",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "888316df-2403-44e9-8958-219fa684ef5f"
        },
        "item": {
          "id": "8a6e80b0-e095-4cec-8941-d7d23ace649c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f45c9235-8b17-4dd6-876a-b771e58f72eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "fee48e64-80c7-4833-a72b-00e1fa2014ec",
        "cursor": {
          "ref": "30bf74ff-95be-43fa-b2a5-4b9cd040ab5f",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3b64a8f0-7c4f-434b-a0a6-5874c71868f5"
        },
        "item": {
          "id": "fee48e64-80c7-4833-a72b-00e1fa2014ec",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "2025a293-72e0-4caa-bb19-e6cc279505e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "b48f50f5-81fa-4df2-bf10-92cc0fdb4b5a",
        "cursor": {
          "ref": "3edd228b-a0d5-4c56-8643-8cc9f04da414",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "dc24769e-ec04-42e5-8322-eba8b91eab95"
        },
        "item": {
          "id": "b48f50f5-81fa-4df2-bf10-92cc0fdb4b5a",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cb2ef508-b414-41b0-9f3b-b5ef78e4dcd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "7c560c82-9abb-45be-b6c2-65ff934edd33",
        "cursor": {
          "ref": "c83c3024-869b-4d4d-a23e-86fb629a5b45",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e382c3f5-ec54-493d-971b-00d88473eabf"
        },
        "item": {
          "id": "7c560c82-9abb-45be-b6c2-65ff934edd33",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a697075e-1c4a-4b79-909a-885ddeecbd59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "98d2f19e-c8a9-42e3-8484-3a5a9faa6d43",
        "cursor": {
          "ref": "06d44205-d365-4d66-b870-e878f0bc152e",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "71167cff-638c-4907-b32e-7ca1df2b8d83"
        },
        "item": {
          "id": "98d2f19e-c8a9-42e3-8484-3a5a9faa6d43",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "55d18a8f-ba43-4027-8ad9-72fd9f741050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "95e8cf23-c9a4-4423-9c35-8cdf141deed3",
        "cursor": {
          "ref": "fb248ee3-af0f-4429-b638-4c256e9ffec2",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "5a5a490e-1607-4526-b9d8-46923bf0bc11"
        },
        "item": {
          "id": "95e8cf23-c9a4-4423-9c35-8cdf141deed3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d3117487-e1bf-4c83-86db-79b4b2ecfa16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "6741c05b-f613-4f36-824a-a461aed81048",
        "cursor": {
          "ref": "7b1737f9-5b7a-41b7-ac97-e7827079fd11",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "53afb69a-9e63-4b78-8b75-7540bfec23ca"
        },
        "item": {
          "id": "6741c05b-f613-4f36-824a-a461aed81048",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "6038cc38-29ab-4f35-adbf-e0647c59cfdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "4e70e7f5-16ee-48dd-b1c0-a3bd1c0ef64e",
        "cursor": {
          "ref": "3afa9a56-e170-4bfd-86ce-784fa8a9b2cb",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "65edd851-dea4-42d1-aa8b-2d816e024212"
        },
        "item": {
          "id": "4e70e7f5-16ee-48dd-b1c0-a3bd1c0ef64e",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1b848927-b0c2-4008-88af-a13554ecf321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "92488135-7a5e-4e01-950b-e018ec5a65b6",
        "cursor": {
          "ref": "08f59b11-8ce8-40c7-86a8-1794fd800504",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4792afaf-c2b9-49fb-bb2f-2306aa730b5d"
        },
        "item": {
          "id": "92488135-7a5e-4e01-950b-e018ec5a65b6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "d63786b8-99e2-4102-8fd6-cdaa35599fa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "0ab86fc1-147c-41df-a67d-e501e1fbb21e",
        "cursor": {
          "ref": "511dfd71-82e0-4054-a867-86981828dce3",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "bace8ea6-3068-41db-8047-523974cb3c69"
        },
        "item": {
          "id": "0ab86fc1-147c-41df-a67d-e501e1fbb21e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "43aa6f6f-8b2e-42cb-9443-bbe738a56661",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "743dca15-8076-446c-96e8-ed76f60c7b99",
        "cursor": {
          "ref": "87295c2c-b874-434d-a437-e5662f9cab6d",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d4eef876-30e5-4e7e-af14-769c215fe6a4"
        },
        "item": {
          "id": "743dca15-8076-446c-96e8-ed76f60c7b99",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "2202df2d-b40f-4459-9469-22daea5afee4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "d9b6237e-d1fb-4c3d-89e9-08684ae0abb3",
        "cursor": {
          "ref": "48235d55-d452-482a-a7ac-3853619f108b",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "51c75fc3-1c6a-4fc5-97ca-3e30d2a139d2"
        },
        "item": {
          "id": "d9b6237e-d1fb-4c3d-89e9-08684ae0abb3",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "bb1afa2b-ea06-4cfc-9af8-da2f7b8b831d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "24e1cbf5-3905-4301-a2d1-9cdb2fd42a7f",
        "cursor": {
          "ref": "d9b5a806-8db8-4f64-a166-f8fc3b7440b3",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "1b502a66-028d-45fd-b8cf-0ef845bf2eb8"
        },
        "item": {
          "id": "24e1cbf5-3905-4301-a2d1-9cdb2fd42a7f",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "3c6830f0-26bf-4170-b3cb-118f6994d990",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "840d5254-278f-4f86-b9cf-56924bdfd622",
        "cursor": {
          "ref": "a6dc5324-54a3-4180-b1d2-95329450d02b",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9225e80d-abdf-4259-be7f-fb143e7fcc68"
        },
        "item": {
          "id": "840d5254-278f-4f86-b9cf-56924bdfd622",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "33cc29db-d539-4b6c-ad25-dac29e3f3b99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "4f44ea97-ea0f-4dc6-963f-1a0ae3cbed89",
        "cursor": {
          "ref": "239016b4-7810-4a56-91a5-24ffd6e86052",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "87626064-beea-4444-bf1c-aade1456c3a4"
        },
        "item": {
          "id": "4f44ea97-ea0f-4dc6-963f-1a0ae3cbed89",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "ddf942ef-8139-461c-8a00-5bf6be3ae145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "f13f9c5c-5efd-4f92-969f-3a51764200be",
        "cursor": {
          "ref": "67b899e6-9e2b-48a4-bc43-e53db8ad484f",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "9233fe45-d592-4315-8db7-23cf3ce26e12"
        },
        "item": {
          "id": "f13f9c5c-5efd-4f92-969f-3a51764200be",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e2be9d80-40b1-4bab-a92d-4e3d7830038e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59d8c32-0f91-4e53-a303-bcb544c2c01c",
        "cursor": {
          "ref": "8d0b607c-1c7d-4e46-b9a7-e0fa87acfa63",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a35d936b-8074-48d0-b7ea-b14cf68d01c1"
        },
        "item": {
          "id": "c59d8c32-0f91-4e53-a303-bcb544c2c01c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ebbd27b2-a51e-4123-b1cc-c01731ec45d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "742cb718-6d42-4c4a-b994-3478c9b11e2c",
        "cursor": {
          "ref": "d9a74a62-3d34-46dd-a74c-cc6e869cb259",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d76e72c0-63ab-410f-9548-cb4e1127583b"
        },
        "item": {
          "id": "742cb718-6d42-4c4a-b994-3478c9b11e2c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "599cfa01-3c5c-437b-ae3b-8f2309cedba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "aeb2530d-a9c0-450d-918f-77961e6e3dcd",
        "cursor": {
          "ref": "cfcba7a8-d32f-43c0-9742-c49143558e7f",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "36f0297b-7363-451f-b1ec-b75d1c0c743d"
        },
        "item": {
          "id": "aeb2530d-a9c0-450d-918f-77961e6e3dcd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9e30df74-5999-4030-bf9e-cd58acd845d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "631bee90-71ad-4f1c-a46e-67ab7e901236",
        "cursor": {
          "ref": "62a7847e-7ce5-4f89-908a-23c1c67939d4",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "31e7205e-6f74-4ee6-9827-e89b4d47f647"
        },
        "item": {
          "id": "631bee90-71ad-4f1c-a46e-67ab7e901236",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ec1d64a3-ea03-41d6-ab6d-88277f1ee58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "8c91344c-c7db-4997-90b1-a76eec4dd37e",
        "cursor": {
          "ref": "50ead9bb-35fe-4d73-9f93-caffa0265c73",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "10c03e86-5dc9-438d-952f-b695a4715dd0"
        },
        "item": {
          "id": "8c91344c-c7db-4997-90b1-a76eec4dd37e",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "53611dfd-0bd0-4991-84ba-4dbb77228bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "2e6078c1-6a02-4a0f-aa3a-98136a30d463",
        "cursor": {
          "ref": "0b872b63-2033-4a5f-b11c-2461e1c86cb6",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "58f764e1-3436-4adb-86e5-ec6da4b6c2a8"
        },
        "item": {
          "id": "2e6078c1-6a02-4a0f-aa3a-98136a30d463",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "60553085-e7ba-42ac-a508-b3d6e7783d58",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "25855e78-aa35-4082-9698-3f1b69178948",
        "cursor": {
          "ref": "c5db3324-74e7-4e5e-aca1-14f6d4ff69cf",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "b454bb84-9ec7-4bc1-9aaa-0532441ffcef"
        },
        "item": {
          "id": "25855e78-aa35-4082-9698-3f1b69178948",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "17a8d1f9-4be8-4a15-bc81-4cef1350b5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "5ad1eb10-c3c0-4b78-8a42-9d05c5eb2fe8",
        "cursor": {
          "ref": "189c0461-dd53-428e-bd57-1e629dbc944a",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "b2ef90e5-378a-4c67-9e3d-27da04e7bca9"
        },
        "item": {
          "id": "5ad1eb10-c3c0-4b78-8a42-9d05c5eb2fe8",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "08adffd1-2422-4995-9dbf-1fa996e47791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "28bd313f-9f32-4ab5-843b-cdded3762804",
        "cursor": {
          "ref": "49bf4d32-dec9-4886-bfad-9ac98dd14b92",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "3b947658-6554-4981-a8ca-e59241d601be"
        },
        "item": {
          "id": "28bd313f-9f32-4ab5-843b-cdded3762804",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e6e71452-f187-4473-8d8b-87ca10ff4ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "11f363e3-08ab-4fcc-b596-202338be87d0",
        "cursor": {
          "ref": "ecba92c2-d3d5-40e4-9b92-862d5c4b368c",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "26e651d4-0a29-4c42-8648-e21614baa28b"
        },
        "item": {
          "id": "11f363e3-08ab-4fcc-b596-202338be87d0",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d3f7342d-4d4f-4089-abec-7f9b5b98ba57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "59f9f0dc-cc82-4da2-9f62-e919c62951e6",
        "cursor": {
          "ref": "f4ed064e-1d55-4cee-8a82-96bcf99795a9",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1742bb40-caea-4432-b2f9-feaa1496164d"
        },
        "item": {
          "id": "59f9f0dc-cc82-4da2-9f62-e919c62951e6",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8c35683c-1e81-4e38-b879-0fd391d48b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "fca41b86-8ce1-4f3e-8835-db47a570f61e",
        "cursor": {
          "ref": "6f0278a4-47a9-4b3d-b07f-319ec64b9ba9",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "e481fcb2-8035-4d26-8cab-a30fd49e28c8"
        },
        "item": {
          "id": "fca41b86-8ce1-4f3e-8835-db47a570f61e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "792a62e7-f87c-4397-b4bd-dad7495cd4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "4cd24061-62c1-43b1-bcdb-be3c76e424b1",
        "cursor": {
          "ref": "6e086903-4855-416a-a2c2-84d63132b0cc",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "e44ec312-6e65-4f74-8cc2-1155c3b8555c"
        },
        "item": {
          "id": "4cd24061-62c1-43b1-bcdb-be3c76e424b1",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "8127e3d7-5f5e-47ba-a726-468fd5d6e5de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "e57197ca-a754-4fd7-9fe7-e48a2f4c3ce2",
        "cursor": {
          "ref": "29718ab1-0258-4d14-82f3-ee1bb743ffe6",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c8b63adc-0827-4ba4-b2d3-cc97304ecdb5"
        },
        "item": {
          "id": "e57197ca-a754-4fd7-9fe7-e48a2f4c3ce2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "58ae08ea-e29d-4700-98a0-941b2887cb08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "d1ecc07e-8826-478c-8b78-007418de78f3",
        "cursor": {
          "ref": "b3b0fa32-4590-4365-8ac8-d6cf7ae704e9",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7fe0f6cd-5891-4fe6-bc4c-dc7494cef082"
        },
        "item": {
          "id": "d1ecc07e-8826-478c-8b78-007418de78f3",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "feb080a3-8c13-48ef-b7b8-a82ef320f1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "9f1f4a35-7d49-41c8-aa07-f28efae3f107",
        "cursor": {
          "ref": "5304d5f3-7784-4053-94f3-4f25b8e97dfd",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "79eca9a8-7156-45eb-8d26-ac9a1a04a2f2"
        },
        "item": {
          "id": "9f1f4a35-7d49-41c8-aa07-f28efae3f107",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ce9bc6d8-bbee-4c44-8dea-0042ae2e016b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "3ea88a14-04bf-4d72-887a-3566509d966c",
        "cursor": {
          "ref": "43320b3e-212b-4b66-8438-1cca791a3118",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "85b557b4-3b1f-49fa-aaf8-71abc3c65973"
        },
        "item": {
          "id": "3ea88a14-04bf-4d72-887a-3566509d966c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8e39f0fa-af89-4411-865d-2a091a532dc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "52e7cf14-69bf-4186-984e-8a73e6e19da9",
        "cursor": {
          "ref": "c5062e08-c736-40bf-a52e-9965619d4fc3",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "334571be-2485-4c8e-9738-e4dad453248b"
        },
        "item": {
          "id": "52e7cf14-69bf-4186-984e-8a73e6e19da9",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ce8e4fc1-5378-40fd-a78b-86029c99137e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "e2a45ddc-ea2d-42f7-86b8-3ca31b8cc29e",
        "cursor": {
          "ref": "74633786-6ba6-48e7-a4fb-2f06ded9b99c",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "74230db1-f8a3-43b3-8851-a0a3909b62f5"
        },
        "item": {
          "id": "e2a45ddc-ea2d-42f7-86b8-3ca31b8cc29e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ec9c5b20-ad12-4f46-8622-78909449036c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "05d7db5a-f07e-4d44-80e6-9f0001c7a6cc",
        "cursor": {
          "ref": "76e2af28-c3de-4837-9cbf-173f0fbf4dfe",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c23b18c4-c3b0-4a77-a581-0a8214ce9bec"
        },
        "item": {
          "id": "05d7db5a-f07e-4d44-80e6-9f0001c7a6cc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "207a3191-e094-4288-872b-c0951aa19a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "7a2f1dc1-4ac9-4636-b280-c938d884e9b0",
        "cursor": {
          "ref": "df9de8aa-478b-4bf3-8f28-6f76bbab8ec7",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6e900ff4-77b9-41f3-85c2-28d872d2baf6"
        },
        "item": {
          "id": "7a2f1dc1-4ac9-4636-b280-c938d884e9b0",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "31d9f6fb-5d93-4d12-b435-a2a08331d393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "5cfb6d25-afde-4618-b5c5-99f990ed1b4b",
        "cursor": {
          "ref": "802c2ea6-e425-41be-a04d-f514657a4491",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "3e1443bd-8094-46bf-867d-6864411793ed"
        },
        "item": {
          "id": "5cfb6d25-afde-4618-b5c5-99f990ed1b4b",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9a507c91-44a6-48c6-ad10-17a50aaa32f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "a0cdb0da-d388-4921-b9c8-17364ab2ed10",
        "cursor": {
          "ref": "ee7e1dce-45a3-427f-a540-22b08a78c53f",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "a62239be-9f36-47a8-b932-a35d683c1719"
        },
        "item": {
          "id": "a0cdb0da-d388-4921-b9c8-17364ab2ed10",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "08faf5ac-c9fc-43de-85ae-ef1428973fe1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "02652ce1-a14c-4f52-ad71-a8dc74faeb9e",
        "cursor": {
          "ref": "d70ab1f6-9c4d-45b8-940d-b6c4d18c96c0",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ced4b139-e98c-45ee-b6d1-58f2016b82ba"
        },
        "item": {
          "id": "02652ce1-a14c-4f52-ad71-a8dc74faeb9e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "aa9ed53f-44e9-48f5-be09-362116554a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "fa0bea71-5bac-40a1-94eb-4bef9585172a",
        "cursor": {
          "ref": "558e775b-0f72-4b5f-b316-fcc8697a5916",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e744c14f-39d3-450a-afba-6c756f6c388a"
        },
        "item": {
          "id": "fa0bea71-5bac-40a1-94eb-4bef9585172a",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "17965709-3b6b-498e-a6f6-cf40426706a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "a01fd6ac-a54b-4025-af15-83e75f684b94",
        "cursor": {
          "ref": "48106f4b-99b0-4a67-842e-4afb397a309a",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5926f4da-5f81-4df3-a90a-3ba59b40149c"
        },
        "item": {
          "id": "a01fd6ac-a54b-4025-af15-83e75f684b94",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ccaa0c15-3ae3-48bf-aa0c-6e62f783ab01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "5c7fe02e-741c-4f7f-b674-efe4494291a5",
        "cursor": {
          "ref": "e39c61b3-a57e-46f5-8c54-b8b435fe28e3",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "9917abea-5ace-49a2-b7c1-495ffc7a5756"
        },
        "item": {
          "id": "5c7fe02e-741c-4f7f-b674-efe4494291a5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "0057b0a1-aae2-4d29-8aed-2ba38ff7bcfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "cc20f413-6785-41b0-9fd9-b58915b77891",
        "cursor": {
          "ref": "6f34247a-6811-4217-b32d-b103eecd2cfb",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c6e3aa7b-1f7d-47d9-9e2f-2669627fb5e2"
        },
        "item": {
          "id": "cc20f413-6785-41b0-9fd9-b58915b77891",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "691dd67d-d880-4540-a957-aaf25469332a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "e369de38-5268-4a81-9cc1-a6ca0f5e6336",
        "cursor": {
          "ref": "2e779e97-2e8e-477c-a127-2a45cf8c0368",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "1b1cbcef-ebe1-4936-9896-8cad6c81ecc4"
        },
        "item": {
          "id": "e369de38-5268-4a81-9cc1-a6ca0f5e6336",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7b824368-3240-4d37-b869-00cf0243af91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "8b19f9a5-a16d-4081-9eb4-4ce843ea594f",
        "cursor": {
          "ref": "72038849-6068-42ef-87bd-a2cc52fbeeb5",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "19c5908c-3247-4fdd-a2e3-b409653c7be5"
        },
        "item": {
          "id": "8b19f9a5-a16d-4081-9eb4-4ce843ea594f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c8dafa36-03fa-49da-a068-6dc11f2583ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "bf0ae3b4-ee93-44ff-bd90-f9d77bbab20c",
        "cursor": {
          "ref": "61eb60d2-33aa-4267-b54a-553631049efe",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "e01bf66a-0d4f-40da-890d-d3a942dc0edd"
        },
        "item": {
          "id": "bf0ae3b4-ee93-44ff-bd90-f9d77bbab20c",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "994d9efa-6b1a-4fd5-87f5-5756c06cd850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "1bbaa866-1306-42f1-8e4d-464f49b20267",
        "cursor": {
          "ref": "3b2fcebe-8c0d-4a9b-9653-007856ae2ada",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "f3ab724a-bea7-4657-8406-4d5deade92f4"
        },
        "item": {
          "id": "1bbaa866-1306-42f1-8e4d-464f49b20267",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "f1f23f3d-238b-4b08-b4f5-82260774ccfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "287b21a1-d055-444d-9021-c631abcb91a4",
        "cursor": {
          "ref": "ea1bc026-25b4-4846-a369-08f325733c11",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7b4f0852-bbf7-494b-b855-1a8d57228760"
        },
        "item": {
          "id": "287b21a1-d055-444d-9021-c631abcb91a4",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a82df821-e566-4b52-90b5-bbc8be5affbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "5b7292cf-dcd3-4439-bed0-c28bc0930b8c",
        "cursor": {
          "ref": "63cce19f-3357-40d3-a859-a31b354ba7a5",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8a7526e6-3a5c-4646-a6b3-1ce4c1227834"
        },
        "item": {
          "id": "5b7292cf-dcd3-4439-bed0-c28bc0930b8c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b59ebafa-9c87-4acb-9200-9aab73a6ef60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "e6a7677c-b38e-48bc-a305-41769c79e462",
        "cursor": {
          "ref": "b0119a7c-1dd7-4d77-8bff-7d17b372b765",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "68c25fff-f8bf-4da1-8e0d-b74565e0557b"
        },
        "item": {
          "id": "e6a7677c-b38e-48bc-a305-41769c79e462",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "5d105493-e3cd-4da8-8349-2bbb9cf58bf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "5606522f-873d-4a30-8921-17dbc52deb42",
        "cursor": {
          "ref": "3d0697aa-a1e1-4ed2-82e1-a8efb1bcac3e",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "99c52379-cfeb-48a1-96ad-bafb6bdeffe0"
        },
        "item": {
          "id": "5606522f-873d-4a30-8921-17dbc52deb42",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "abe3ded6-3670-489d-8e88-e65a9258781c",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "f8f75dab-0a22-4211-a005-e1f42cd35c03",
        "cursor": {
          "ref": "ebf1954a-84e0-4584-b873-2fc1796a3ddd",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "8f4af085-2997-4210-bdef-e4a96f02d124"
        },
        "item": {
          "id": "f8f75dab-0a22-4211-a005-e1f42cd35c03",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "03b8c04c-0e95-43da-b641-f672a69e74ad",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "a9043b94-ad8e-47b3-bc99-c4f8b3178062",
        "cursor": {
          "ref": "06f633cc-e817-469e-9da4-12d4162f32c7",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "eb096edf-0cbd-496a-9ded-cced1ecc7e7e"
        },
        "item": {
          "id": "a9043b94-ad8e-47b3-bc99-c4f8b3178062",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "999e96dd-a28a-4aba-ba33-23850fee1ec4",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "c82e974d-e6de-43ca-8ef1-e1f6516db2b4",
        "cursor": {
          "ref": "3a78e669-7e1d-4cdb-bfae-2607a2c84945",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "9dafa994-8064-432a-b4c2-cd3f6a8ba9dc"
        },
        "item": {
          "id": "c82e974d-e6de-43ca-8ef1-e1f6516db2b4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "0658fded-7f7d-4841-92ca-68500a4a4344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "4dddb665-7f3c-4d41-a27e-24c14f731f8c",
        "cursor": {
          "ref": "a5ada771-d421-4263-be46-f53e884e2c1c",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d8ba14a1-0098-48d9-ac78-a19583a11582"
        },
        "item": {
          "id": "4dddb665-7f3c-4d41-a27e-24c14f731f8c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "4cbc7983-fb00-459e-85a1-4d6c9b86ea51",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "ac5a0055-53e2-4490-a094-edc481aa6987",
        "cursor": {
          "ref": "218f66c9-87e6-4ffc-854d-4280ffeb9994",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "a4c2be16-dabf-4eae-95e8-49a276d3bca5"
        },
        "item": {
          "id": "ac5a0055-53e2-4490-a094-edc481aa6987",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "076c7f4f-3e50-4432-bc44-764819c901f5",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "ae23b791-e1b8-432d-967b-d12e0ebb14ac",
        "cursor": {
          "ref": "5002264f-e482-49e6-ae56-5c1399a45c98",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "5247becf-b664-4672-9e40-e41e33b581c2"
        },
        "item": {
          "id": "ae23b791-e1b8-432d-967b-d12e0ebb14ac",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "644b4e89-984d-4fc2-b028-dc8ac39022e1",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "2164897d-445e-4bda-b162-62fa4eb884f4",
        "cursor": {
          "ref": "8c71e4fd-d5de-42a5-888f-032775840964",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "74566301-ed54-4856-b441-054510a208eb"
        },
        "item": {
          "id": "2164897d-445e-4bda-b162-62fa4eb884f4",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5f17df5f-1595-4bab-b57c-3e1e48a634ce",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "c8036fea-4e29-4b3d-b8fc-80e4f6cc9cfd",
        "cursor": {
          "ref": "370ed498-a705-4d83-a689-6f84b4c516ad",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "cd10b12a-8559-4854-bf38-40592134aa17"
        },
        "item": {
          "id": "c8036fea-4e29-4b3d-b8fc-80e4f6cc9cfd",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "327d42b6-57b5-4c5c-afc5-ffd7f31cca09",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "18e8696d-2d09-4280-9f84-97a0683afda5",
        "cursor": {
          "ref": "68235344-eb1b-4663-971d-c438db78ed99",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8418e9fc-2bb9-4f27-a418-f440467d8326"
        },
        "item": {
          "id": "18e8696d-2d09-4280-9f84-97a0683afda5",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "af712e28-1793-40a7-a17a-913a0ddb1799",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "a481ce1b-0128-44ce-80a0-08dd553a56f0",
        "cursor": {
          "ref": "eff40424-9fd8-4fda-87da-d4dabb20dec6",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "a653e59b-7a28-4dcd-b0b7-401030ae6bb2"
        },
        "item": {
          "id": "a481ce1b-0128-44ce-80a0-08dd553a56f0",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "b420b905-5b19-4cb2-92b9-4a9558118dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "3ea58825-8999-4fcc-960d-dbf694fdc4fd",
        "cursor": {
          "ref": "edaa8bd6-c8e0-4b37-9a78-4a7dd031510b",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "261187be-4499-4118-b3bc-57e4f527438e"
        },
        "item": {
          "id": "3ea58825-8999-4fcc-960d-dbf694fdc4fd",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f31256c3-0287-46ac-b12a-3c9b0fbaf9e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "e7e62e50-83a3-441b-afdd-f3eb060e8af0",
        "cursor": {
          "ref": "e6cd4488-1d36-48d6-95d2-93c9715fbce4",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bfe3e595-d341-4e3e-9c32-e2e9d002a83c"
        },
        "item": {
          "id": "e7e62e50-83a3-441b-afdd-f3eb060e8af0",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "51e2e2e5-2795-4aa7-91b4-306c0dccca5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "645d0b3d-ff3f-4a35-ad6d-61419d580ca4",
        "cursor": {
          "ref": "62228b87-6232-4bee-a2a5-f8e8f855206c",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f7e696ed-35c0-4bb6-a495-aff593f87067"
        },
        "item": {
          "id": "645d0b3d-ff3f-4a35-ad6d-61419d580ca4",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e20cf7a1-0a50-4651-965f-4ab41357aac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "ef544a98-6a39-46bd-a648-b977a1917044",
        "cursor": {
          "ref": "a15dc4a2-fe00-4954-a988-3ed1443e758d",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "b7ed4f5f-6294-4591-a4ef-df42bf8bc35e"
        },
        "item": {
          "id": "ef544a98-6a39-46bd-a648-b977a1917044",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "878c4cda-1ea9-4732-8aaa-a2a62be16732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "a17c64f5-1659-4460-a5e2-13ea3c4a7c5c",
        "cursor": {
          "ref": "e8c86645-0ec4-4c14-a9a5-7af6f52cd353",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b3c0df38-6113-48fa-acfc-e6a7174472f3"
        },
        "item": {
          "id": "a17c64f5-1659-4460-a5e2-13ea3c4a7c5c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a69c4222-8506-468c-8ee9-2307c8f75514",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "f2197ca7-57f3-4f19-9d9a-f64123a8a0e9",
        "cursor": {
          "ref": "ef316883-dc77-482e-953b-db82f9527540",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "629306a2-a199-4ec6-aca9-b8597bbb36ac"
        },
        "item": {
          "id": "f2197ca7-57f3-4f19-9d9a-f64123a8a0e9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "8a085b1a-6e04-4211-8b39-f7e2d0e2dbb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "74320738-d3ae-413d-bef2-843808d43ec1",
        "cursor": {
          "ref": "133a3b7f-75c4-47ee-8680-b030e650de77",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "41b9bb2a-2edd-4a4f-a672-94e72268cd39"
        },
        "item": {
          "id": "74320738-d3ae-413d-bef2-843808d43ec1",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "be8e0b87-d6d1-45d0-92ad-eeaf2d4aa6ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "57e900ab-9775-42e8-8e22-44d3dd167905",
        "cursor": {
          "ref": "c908e5cd-2cf7-4f7b-ac79-e0b61c3f08e1",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "d12c4623-e977-44e5-a677-55fb85612e99"
        },
        "item": {
          "id": "57e900ab-9775-42e8-8e22-44d3dd167905",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4139abe4-883e-4e41-b733-a04c5e88ccad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "bd9b4235-ccd3-4f55-9e32-53bd8975866c",
        "cursor": {
          "ref": "05515091-1c88-4e05-8967-f49cac91d04d",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d626f539-247a-4ecb-9944-09a590c09c50"
        },
        "item": {
          "id": "bd9b4235-ccd3-4f55-9e32-53bd8975866c",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "2f163eb9-a3dd-4695-b636-545575cde753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "d8f09027-9bd0-407d-937c-1434b89aaa96",
        "cursor": {
          "ref": "3a94cd24-1538-40bc-95d0-b5b374c1cb4c",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "2ec649cd-7a02-4bae-abf5-a0af12523b67"
        },
        "item": {
          "id": "d8f09027-9bd0-407d-937c-1434b89aaa96",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e4a5d590-bf63-4bfc-9956-dab245a732cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "a33a4cf2-c436-412f-9a23-738b8444fa4d",
        "cursor": {
          "ref": "4e7a6102-a7dc-4f04-9a48-54ed6fe78496",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "18bf4bf1-75c8-4db1-8e6a-69d8c20cd39a"
        },
        "item": {
          "id": "a33a4cf2-c436-412f-9a23-738b8444fa4d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "15c9bfe6-0e07-4309-ab5c-1061c3e57c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "f980e9b1-ba40-4a80-ac72-aed7f9e3cae0",
        "cursor": {
          "ref": "4d276a6d-df39-4141-9ba0-30be9cd7163d",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1ee25951-2f54-4f6d-a646-57927ba7b14b"
        },
        "item": {
          "id": "f980e9b1-ba40-4a80-ac72-aed7f9e3cae0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "df552aa5-d705-4250-9992-a44d01ffc6be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "6dbf0a9c-01eb-4646-902b-c8d653d2f7e8",
        "cursor": {
          "ref": "36e84359-832d-43a7-a0f4-d8624c252f27",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4112d784-d663-4767-9e02-3849dfd5d3b5"
        },
        "item": {
          "id": "6dbf0a9c-01eb-4646-902b-c8d653d2f7e8",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "bb76d8dd-6518-4314-a288-386109cfcaa1",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "a75956b5-4e99-4021-b34a-1988483441d1",
        "cursor": {
          "ref": "ab140e97-d29b-4db2-b212-e1255e53896c",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "39f2ac31-429c-4aed-b796-9b4704db99b4"
        },
        "item": {
          "id": "a75956b5-4e99-4021-b34a-1988483441d1",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "85ba8f5b-9570-42b6-b1d1-fac181394883",
          "status": "OK",
          "code": 200,
          "responseTime": 181,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "cb89862c-8eee-4f88-9f7d-bfb7a51af165",
        "cursor": {
          "ref": "32d8d71e-316e-4069-8426-bf701a8c540a",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "eb48ba18-e364-474e-81ed-1e501afa68c1"
        },
        "item": {
          "id": "cb89862c-8eee-4f88-9f7d-bfb7a51af165",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "69b81b3a-e276-4e18-961a-c50c21c13e26",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "07654fd5-3d59-4bf3-8ff2-40fd34cc63fd",
        "cursor": {
          "ref": "7f4d2cbf-5357-4201-8f79-3985e9612d1c",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c4902ea9-6394-4ab4-9529-fae2f423f76f"
        },
        "item": {
          "id": "07654fd5-3d59-4bf3-8ff2-40fd34cc63fd",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d9b0a229-8a42-4f9f-83d7-58ab7b97b1c2",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "5e2de0fe-4cd1-422e-99af-2d2ad2d3a8e3",
        "cursor": {
          "ref": "6dbffb6a-b1b6-42c4-bee4-a708323de9e3",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "f99529cc-1c75-4110-86e3-c339d1a88e57"
        },
        "item": {
          "id": "5e2de0fe-4cd1-422e-99af-2d2ad2d3a8e3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "7a7d6059-c790-4d4d-845e-9243c1d9abc3",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "5ae85993-7431-47a7-a8c2-37466d3cb9f9",
        "cursor": {
          "ref": "c87010e6-217e-4f31-9696-d1c135c6ef30",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c2500516-7cfb-4660-b32e-67dbcbbc5067"
        },
        "item": {
          "id": "5ae85993-7431-47a7-a8c2-37466d3cb9f9",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f7492f80-817d-4491-ad62-88a5aca31eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "8cb7f758-9573-4154-b5bb-47bea7028cac",
        "cursor": {
          "ref": "21948163-1bc9-4fd6-a501-2ba6f4b1f1f0",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6c14b2c0-13b3-4499-afe3-4ddc3e170dad"
        },
        "item": {
          "id": "8cb7f758-9573-4154-b5bb-47bea7028cac",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "43509290-6a54-432c-acd3-dbd4c9a0036e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "1f39d2a1-4913-419c-a51f-f1158ed4ecab",
        "cursor": {
          "ref": "40c9f162-d25c-4e15-968f-1d8b53bb890f",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d040b51c-746a-4842-b00c-0d4a30b28c45"
        },
        "item": {
          "id": "1f39d2a1-4913-419c-a51f-f1158ed4ecab",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d5baeb34-2a31-44b4-8f32-7f7cfce5fd61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "0f68dc38-a4db-49b7-9a55-72498e3afa3c",
        "cursor": {
          "ref": "dab4671c-034c-46ae-9bd9-ca144a4b1269",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f4912480-b992-42cd-a80d-38c2d04446cb"
        },
        "item": {
          "id": "0f68dc38-a4db-49b7-9a55-72498e3afa3c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "09b0d77a-075c-4bf2-8b11-6f799f51d4c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "19c95618-055c-452d-95d6-eecc16ad2f76",
        "cursor": {
          "ref": "50610cff-5a30-4201-b844-b785ce60d461",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0e700725-58c7-4e6c-a3ec-31bf2dbe96fc"
        },
        "item": {
          "id": "19c95618-055c-452d-95d6-eecc16ad2f76",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ddef0e92-6de9-4703-95c0-9609c654423a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "d861e062-a405-44e2-b51a-8f9a77c6ad34",
        "cursor": {
          "ref": "d7542458-d0a6-479e-a3be-f8541f85c8a0",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "41a51290-4254-4f56-aa23-9050e509ae67"
        },
        "item": {
          "id": "d861e062-a405-44e2-b51a-8f9a77c6ad34",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "0a3a464d-033d-460a-8f2e-2fd0322e5693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "afdbbe51-acfe-4b88-9341-66ad38577857",
        "cursor": {
          "ref": "b4e9cdaf-1651-4185-a89c-2f7b48a7b9f6",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "542ee65a-84ab-4ad7-8141-0b1e8281f75d"
        },
        "item": {
          "id": "afdbbe51-acfe-4b88-9341-66ad38577857",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "82e455a8-b10d-4b5a-978a-df7c3852cd13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "847ed57b-6d63-4c94-b0bf-50b4ea920bb0",
        "cursor": {
          "ref": "f2dfac2a-ba0a-42ae-925b-fd67861cf1b4",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "1ae50a6f-1f2a-47c0-be54-9e9e293c6eb6"
        },
        "item": {
          "id": "847ed57b-6d63-4c94-b0bf-50b4ea920bb0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b63d4962-80d0-43c0-8b1b-4620930857ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "dac28ce3-2ec9-4c3c-a4f9-286d643d4a2e",
        "cursor": {
          "ref": "159f75df-24a5-463a-b568-8abcc66f976c",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "f8e6d297-61f8-4a5d-9e3b-684b4f42d153"
        },
        "item": {
          "id": "dac28ce3-2ec9-4c3c-a4f9-286d643d4a2e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a8afae9a-0f94-4cd9-bb79-c417ea4c3143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "dc9d1fa6-7b85-4d64-b858-097ed3d94247",
        "cursor": {
          "ref": "e0ccda53-b060-42dc-8336-dbe83fdfe1d3",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1547ed62-3516-4365-a1a5-dfeb5432bb2c"
        },
        "item": {
          "id": "dc9d1fa6-7b85-4d64-b858-097ed3d94247",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "ba68af7c-61de-42a6-b21c-fd2882e4f1f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "23e5b424-8937-408f-b3d1-8947a3ecad5f",
        "cursor": {
          "ref": "dfd661de-e438-49de-a0dc-8fb63eb25745",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "fd0b084f-56f7-4139-af9f-d9e4684fe6ac"
        },
        "item": {
          "id": "23e5b424-8937-408f-b3d1-8947a3ecad5f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "5c4335e4-9641-47d5-950e-c7479080677f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "960c6fc8-cd19-44d3-bffd-5b85497556e7",
        "cursor": {
          "ref": "245fee09-d43a-4c35-b7c3-69e7162a2e7d",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "811d80f9-4045-4946-a086-e351643eac7b"
        },
        "item": {
          "id": "960c6fc8-cd19-44d3-bffd-5b85497556e7",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e72f942f-1c43-4bbe-97cd-8bd08146852a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "c1c53812-d278-4340-9827-926b300902b1",
        "cursor": {
          "ref": "fff0a93a-4acb-4015-b35c-0a12f2713eb2",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "897411f0-4aa2-456a-8296-b4098394a879"
        },
        "item": {
          "id": "c1c53812-d278-4340-9827-926b300902b1",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c6b8685d-c7da-48de-9dbf-ceb2a1ebc705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "3a51abd6-0ce3-4f90-84ad-7254c3c6e1b0",
        "cursor": {
          "ref": "f691df83-f9d7-4b4c-be83-db7f83b5bb36",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "e8d32e12-1466-4833-88bf-9b5a8e635a04"
        },
        "item": {
          "id": "3a51abd6-0ce3-4f90-84ad-7254c3c6e1b0",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "09eeadc9-5d99-4d66-a8d1-778b39e9652e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "5eeecc3a-075d-477d-a73a-c8563a42f1e7",
        "cursor": {
          "ref": "e1a56025-04e6-458a-92d7-071e059a1be1",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "c6ca0b3c-b92d-421f-90d8-d86dfef6e5e7"
        },
        "item": {
          "id": "5eeecc3a-075d-477d-a73a-c8563a42f1e7",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7694ae48-90e1-4de4-b9de-da760f0e4ba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "2d7a9bc5-c0b9-491c-9eac-defe5625fcf8",
        "cursor": {
          "ref": "a820863e-917a-40ef-9f54-c93dc710ecff",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a4d1fa6d-fa11-4994-a997-dab77fd92a8c"
        },
        "item": {
          "id": "2d7a9bc5-c0b9-491c-9eac-defe5625fcf8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5457bbc2-d177-47d1-aa47-a6a3c47af343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "23864039-0005-43ea-bcdc-5d2212dc3c67",
        "cursor": {
          "ref": "ebbd7acd-45b1-4fb3-a64d-7690e38dd3fe",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "45c8654b-e143-4762-b53b-d52338615a86"
        },
        "item": {
          "id": "23864039-0005-43ea-bcdc-5d2212dc3c67",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "2aa754fe-0ecf-466f-b398-c95863d1e34a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "1596c87e-58cb-404c-b7d9-6a0e95215002",
        "cursor": {
          "ref": "689c1989-0ae9-41de-ab7c-662f97cdf10c",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "2d5c8b28-d94a-41f1-bb2a-b3a16b275e1d"
        },
        "item": {
          "id": "1596c87e-58cb-404c-b7d9-6a0e95215002",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "441ee8d6-66ea-4a2e-b430-ad3bf74dc218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "78cac0c4-8429-4241-9326-929fd3d57be1",
        "cursor": {
          "ref": "277bfb3a-9cd5-47c5-90a0-d5def135102b",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "ec7078b8-a51e-4fae-bba6-d7e74050257e"
        },
        "item": {
          "id": "78cac0c4-8429-4241-9326-929fd3d57be1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "eb53c0d4-e19f-40c7-8392-730232c96699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "582b98f7-f5dd-4a99-8135-97c85aac9d9d",
        "cursor": {
          "ref": "6bf68ac1-cc1a-41ce-986c-1be5a96202cc",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c2d5d127-91a2-4794-a5d5-a85410321ab9"
        },
        "item": {
          "id": "582b98f7-f5dd-4a99-8135-97c85aac9d9d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "4b00470c-60b1-4234-ad2b-0a62134c1acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "22cef583-d13d-4cd5-9048-2a1453e2b909",
        "cursor": {
          "ref": "e42814b6-1d0f-4b07-bab3-4bdc04270353",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7222041f-171f-4698-a315-7da22428411a"
        },
        "item": {
          "id": "22cef583-d13d-4cd5-9048-2a1453e2b909",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c5685b08-e060-4258-8552-28376113e717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "b274603d-9499-41f2-87e1-5a4abca676ef",
        "cursor": {
          "ref": "984dad3b-ccee-46d6-84d8-d039c42647bd",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "8c78b7a0-5099-4060-a113-10e860aaef42"
        },
        "item": {
          "id": "b274603d-9499-41f2-87e1-5a4abca676ef",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "cb897eb6-1b21-4b6b-b11e-1762c013b2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "cd0714f4-7bcd-4c7e-bd33-74efe9939197",
        "cursor": {
          "ref": "6fc4acb3-e3cb-471a-a9dc-f9851801d624",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "dc959304-2a2a-44be-b576-fe0c82237780"
        },
        "item": {
          "id": "cd0714f4-7bcd-4c7e-bd33-74efe9939197",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "589f64cb-a6e4-4a62-8a19-59879dcb6938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "f019e563-bcea-4aff-97b4-21a8aeae8f6d",
        "cursor": {
          "ref": "7107b1bb-ec31-43ce-ac6f-e6dbb706398d",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6d459a8e-cdf4-4fab-b19f-e6240e92ea3c"
        },
        "item": {
          "id": "f019e563-bcea-4aff-97b4-21a8aeae8f6d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "68c29f71-1130-4182-b99f-eff9ff1381ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "d4f2eec1-b37c-4ab4-850b-e96474f582b1",
        "cursor": {
          "ref": "1f443f4c-224e-41c5-a668-0ba9629719e9",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1d3093e7-5060-42d2-8c36-016e68d00e89"
        },
        "item": {
          "id": "d4f2eec1-b37c-4ab4-850b-e96474f582b1",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "77104c70-aeb4-4dd9-8f2b-1160c2129898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "ce91561a-bd9a-40dc-8bbe-cc6c75075749",
        "cursor": {
          "ref": "911df872-fcd3-49b4-ae83-d341c8e9a05f",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3aa1ec6b-4c5d-4bf3-855c-2be941c1cfdb"
        },
        "item": {
          "id": "ce91561a-bd9a-40dc-8bbe-cc6c75075749",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f4ed9929-f54c-40a1-a8dc-b60c630f5e4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "6cf50b4f-4345-4bbf-b859-464ab46c2b6b",
        "cursor": {
          "ref": "38bded71-3a53-45c9-bd17-e5c2398c0dcd",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "2c1681a8-1979-43aa-bb50-612a4524bc27"
        },
        "item": {
          "id": "6cf50b4f-4345-4bbf-b859-464ab46c2b6b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2fedf278-618e-4e64-81d6-81f7828e5f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "0efb9eb5-e3cf-4a78-b517-ac73f03f9e6d",
        "cursor": {
          "ref": "7ea1bcfc-c5d2-4ea4-a82f-a10dbca367b1",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "84a45e48-1beb-48ab-a1df-26f7c1df13d4"
        },
        "item": {
          "id": "0efb9eb5-e3cf-4a78-b517-ac73f03f9e6d",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "3b297f8b-fa09-421d-bb3c-400b62411187",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "f3f35669-5307-4a26-a28d-22304dca0f4c",
        "cursor": {
          "ref": "d4520c3e-4c36-4ba5-b94f-3675bc5b7f59",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "498418b5-c988-4129-a94b-f54b0fe459ea"
        },
        "item": {
          "id": "f3f35669-5307-4a26-a28d-22304dca0f4c",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4ecae347-5b94-4552-9f39-a44f66f0d8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "918c51fe-ae06-47c9-b702-fa7c3666f70d",
        "cursor": {
          "ref": "e3010b3e-46d3-4064-9fb7-aa5b651f258f",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "de7fdcaa-1ab4-4daf-8554-ad8fcaf7bf8d"
        },
        "item": {
          "id": "918c51fe-ae06-47c9-b702-fa7c3666f70d",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "67dc29ea-db8b-491c-bed0-39988963cb28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "1e0a3e7b-04d1-4426-96f9-61e83b3bf4cb",
        "cursor": {
          "ref": "9d21e757-52bf-46e1-a613-21201938d29e",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c0ca7422-7478-438c-be46-b4dfc57c317f"
        },
        "item": {
          "id": "1e0a3e7b-04d1-4426-96f9-61e83b3bf4cb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "be569794-5a33-462d-a79d-2e546aef5468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "0b840f50-94be-4cc9-8fa8-3f60fe832286",
        "cursor": {
          "ref": "8cf45a5f-342a-48eb-af74-07c44c13823b",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "1219b572-422c-4975-b5e3-53de7bda0ea8"
        },
        "item": {
          "id": "0b840f50-94be-4cc9-8fa8-3f60fe832286",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "c5380e52-ca4b-463e-8019-5921d13e1790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "11dac148-9a74-4066-b545-b06c10148dff",
        "cursor": {
          "ref": "522cbb4a-4a7e-4e81-aaef-7a51f5fb88ea",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7ea82744-3c0a-43d4-adc8-8611043c0f7f"
        },
        "item": {
          "id": "11dac148-9a74-4066-b545-b06c10148dff",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "73084fa5-7a23-4266-b4db-1321e9fb4518",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "1c319dfd-b3dc-46c2-b90c-2ba99529e39a",
        "cursor": {
          "ref": "dfcd5f7e-efa0-4604-949f-be36f4f0008f",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "77c934fc-9e5f-42ca-8b17-6004707e2fda"
        },
        "item": {
          "id": "1c319dfd-b3dc-46c2-b90c-2ba99529e39a",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4c9c953d-ef0c-4b1a-bd5c-031acf714ebb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "b9467171-8bd3-4a4b-825a-467e2f34ec8b",
        "cursor": {
          "ref": "52f955ed-c2db-4bb8-9da1-b7866bfd3cee",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "34430209-220b-4ee2-8dd3-771afea01f6b"
        },
        "item": {
          "id": "b9467171-8bd3-4a4b-825a-467e2f34ec8b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "07285366-dccb-4f29-aa59-3ed594221354",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9f7e041-5a60-47b1-8fac-acdcece342ff",
        "cursor": {
          "ref": "fcce01fc-ed1d-40f8-89ee-974bd248ca04",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "abb06914-2638-452d-ab4e-521a8d7f1954"
        },
        "item": {
          "id": "a9f7e041-5a60-47b1-8fac-acdcece342ff",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "bc6344c4-fbc6-48b2-8c57-c98072a4368e",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "4752379a-564f-4ff4-8c26-5d183b3fbd3b",
        "cursor": {
          "ref": "53368bca-9db7-4dfb-b9e3-e3cb09eff433",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "b0adb404-f28b-4f16-bb09-07be928982cb"
        },
        "item": {
          "id": "4752379a-564f-4ff4-8c26-5d183b3fbd3b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7ee9fbf1-9733-44ee-a4fe-f1fbdffb6c67",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "111b027d-9801-47a2-b708-794eb2d22ae7",
        "cursor": {
          "ref": "d27c323c-68e1-4302-9404-4f7bb01d30d3",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "c0348694-1476-4606-b392-62edcbbe89f1"
        },
        "item": {
          "id": "111b027d-9801-47a2-b708-794eb2d22ae7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e2b0803b-cdac-4c3a-a2e3-4202f41348fc",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "2900b7ec-521f-4818-aea6-686ae2af04ff",
        "cursor": {
          "ref": "39e1f8aa-0a6b-4413-8dc3-8eb5de1ef1c4",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "20af3ef0-230c-4657-b56c-b5958477951f"
        },
        "item": {
          "id": "2900b7ec-521f-4818-aea6-686ae2af04ff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8a055092-0f04-44a9-a3ef-5149f49f7046",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2900b7ec-521f-4818-aea6-686ae2af04ff",
        "cursor": {
          "ref": "39e1f8aa-0a6b-4413-8dc3-8eb5de1ef1c4",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "20af3ef0-230c-4657-b56c-b5958477951f"
        },
        "item": {
          "id": "2900b7ec-521f-4818-aea6-686ae2af04ff",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8a055092-0f04-44a9-a3ef-5149f49f7046",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0422834b-8050-4691-92f1-766b035a4c34",
        "cursor": {
          "ref": "42b21920-ce72-4ecd-b6b7-3208796f4efc",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6b0894f5-17bc-4719-9e5f-98b2e2ec2b85"
        },
        "item": {
          "id": "0422834b-8050-4691-92f1-766b035a4c34",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d3c2c9df-04bd-4d58-9652-baa2a80942f7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74fe95ea-089a-424a-804a-4c77e8914745",
        "cursor": {
          "ref": "e06c96e9-ac15-4514-90df-d936c730f390",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2c1b0267-4f32-4b1b-8f8b-f20b15e38658"
        },
        "item": {
          "id": "74fe95ea-089a-424a-804a-4c77e8914745",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "975bf716-d80c-42e3-beb7-bf552c89e797",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}