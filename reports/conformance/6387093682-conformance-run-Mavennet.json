{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "fa74bcb6-8d0f-46ec-98e2-e94fa73f535c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "e66a8336-6abd-44b9-a42b-3afdaac756e5",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "20f229ca-cab4-44c0-b1ea-afac1ace4929",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "8ac8d376-34f8-470c-8c77-c43a0480eadd"
                }
              }
            ]
          },
          {
            "id": "5840ae5b-37f3-4264-88f2-d9a47ff83262",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d0eee31f-757d-442f-aa90-fa5234172c5d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "622277b6-1842-4129-a452-4c130c9229d6"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8a376a8c-84d0-4c2e-bbb1-3c440b5cf20c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "31782cb9-3ca3-45b8-a520-8d09db5c5410",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1647df95-be42-4a17-81e3-8e5541837170",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aa6af0b3-eb70-46e6-8602-132651a8ad9c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5333a48-2596-4c3c-b95f-de79df568df5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8830cb16-360c-433b-b521-159b1622d4e7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "414339cb-85c6-4b65-acd8-2fc34636462b"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5bb1d6b2-3916-4f92-8e25-3f22494e6392",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "11c240bf-da7e-4745-a64c-d260eaf023f0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15fd5f13-3a09-41cb-8499-a1ea210f517b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "fe1e10ce-68b1-4731-b082-5c2659e9c458"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "86dbab14-864d-42da-a12e-855aff47a27e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "00eeba9e-9bb1-4010-b4b5-5324480f7543"
            }
          }
        ]
      },
      {
        "id": "1e52822d-cbe8-4317-9d9f-fea67a194c1f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "ee856dc0-7da3-40dd-8b34-a5d3af1c0f8d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3f4740c8-32ad-4d05-baf2-8d8c7867de0c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "346f9048-d03f-48f9-9351-5cc845098b17",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a221f61e-ea8f-466a-bb58-071376903c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1652df43-8479-4617-9e60-101c5f571060"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6451d1-51ad-4793-ac5d-c576997bc590",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e5124f-0eea-44ce-8932-0b4436c74d8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "70089385-2cb9-4c3e-b007-ea7717150cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfdd64e1-a630-47e2-b560-fb0ffeb3690e",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f339d850-c4c9-48b5-a5d9-0962b9cc3107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3137d87a-4460-47db-a004-2fcd2889eb5a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b52ff908-bb56-4cb8-a83a-ab41162ae5c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1754dd73-d8b2-4088-a3a5-05b01a18cb5b",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6243907-541b-4a9c-9170-14e51db182d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "15beaa36-914b-48e0-bf74-e081c33631bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b843e23-e8a3-4ad0-9985-7b23f11b9e24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "052262d1-9db8-401e-92df-59a49ab26a63"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "65c1e011-9e00-4ea5-9765-44a58ed616fd",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f7ad97d-4264-4611-99b1-ca8a1234c5d2",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e98f02c0-d4a8-4d39-8723-67da47c82474",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "cbcefe51-c2fc-41a8-83d9-dc2321c78ded"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d7f7084-7798-4972-a62f-10160eab08a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "599e089a-ad3d-4a81-bf4e-7cb1668d734c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc12a73e-63c5-46d3-8bfe-27a69e5e56f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5359033d-09c2-42ae-b57b-13a5cc5b746b"
            }
          }
        ]
      },
      {
        "id": "e515ade0-028a-45db-93eb-2483121996e2",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6a03d328-7188-4e88-87a6-8af542f317e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "89f0cfee-ee17-4d8b-a791-d80096f6d4cb",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "19503bc7-67e3-44fb-8bf3-d40280a1fe29",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ee96a1-492e-41ee-a315-ecace22b100e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a266bf9-24c5-4537-9b13-f79a7d40ac2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e4f246-7ec7-466f-add8-6311b132fbb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3c7b12d-7ae6-4465-b2bc-25bb04bb0efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5efcb2e-bb83-4ebe-9643-9f685da1f7b3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d92edb08-b89d-4990-982c-348b0de4bf24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd10124b-3fee-4b25-af30-1da0bee4d5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0392b8e9-601a-4658-be9d-1de926abe35c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cedcf51e-6414-4e38-aa9c-75e7a7dd801a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb4dfeb6-2696-4f9a-91a8-ca499bf8721b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99f8e03-c75c-4074-a3ea-227e011a940c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25fccbb1-af19-4e08-9ceb-4ff368076cf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53572bad-6700-440c-af0a-2ce5a2787689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21731bd3-aaf5-4ea0-9f0c-b6bc0c087014"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc54053b-3a17-4542-89dd-8db564406420",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f50c553f-5251-46ce-aeb3-2c381c0f385f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7ea286-08f1-4082-b283-64ef08d2d898"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63c386bb-9c6d-436d-9dc3-d52506a5344d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3ed3d4c-486d-4abd-8b1c-9bf27bbd1772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe57c73-b522-4dd5-ba1a-3e858f50fba0",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9903640a-1306-4958-beaa-6ed0a85991f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ed8e25-9d16-40ad-b9e2-67a5fa3fde38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be36cff-9732-4690-b83c-10d1e81b927a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a2eae661-e148-47cb-81fe-e7a1d2792003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5ca041-6dcd-4ac6-b74b-5c441b4ba7ce",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd741618-2121-41cc-9b21-c502a923d4a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5da03bf-3979-4d4b-be6a-82c441f94ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a90fe4-e16a-43d9-ac1c-2a8a740155b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afff63fd-66a5-4d33-ac11-af6d39860704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "005aa47d-f357-4a83-aead-3888c24654bb",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbc95cf-eddf-4be8-ac5b-9b61be8cb8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "deffb1bd-dc70-431d-8d16-bec3cc1b41e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ada59244-ad4c-48ed-b8e3-58b4363bb3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f77df979-23d9-4aa9-b4f6-8323550f3800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b02388-deb0-446d-b2aa-814d71ab4670",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ec2525-988a-48c4-a517-2437b2a0faab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d5b4a1f-5a6a-4113-9508-b73c4587e046"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90540e50-d63a-44b1-8bd3-e5262cae96c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "24fe2377-4955-4936-be7d-289c7879a0af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7e809b9-0f8a-46e9-86a9-15c42fe37e70",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "679b9cfd-0a6d-44cb-956c-90c6b35535bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e5282c-04a7-4b21-8def-cf85916cac2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3ac60d4-a073-4b94-8930-3d3c987bb7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8dfd614a-37aa-471e-b44f-c9302b17ec2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dafce22-7e4d-421f-a97e-bef7fff68cef",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feab14da-b2d3-41dd-87f6-9f5adf070659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68bdd365-3cff-457a-b01a-3c804834c584"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b2e2899-3bc3-436d-b37b-b29aaf73fcba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a067d8a-d7d5-4dfb-9381-fc4cd85d0723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b5ad0d-098d-4b7d-ac40-709c7813f0c5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa303fc-92b6-4421-ba7e-8c9b7c4a7190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e9c8db-8e2f-4c76-97da-af94d99ba20c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8394156c-f0de-47ba-af8d-9bd43286b76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7eaffc61-484b-45f1-a95a-2da99cdd713c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34fdd53f-0eb3-4171-a1fe-f86ede32ed27",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5149dd8b-660b-46c1-8150-ba969c48cfc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "679b8c09-7ff5-443e-9124-48b94778ec4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d81b999a-b820-4876-9456-046a006acdde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d9e02cf-4577-456b-9155-6563e2e26a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a0054c-0091-444e-9452-9f134b5c8253",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14dac31-4ffb-463e-9585-a39c629e15a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72a1bbe1-73a5-4fc2-8082-68e43a8afb3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c67601-f41d-43b6-8d3c-fec91288373a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "092bd601-7903-4edc-a137-586cac319a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80710534-f2d2-4781-aab5-961ad37acab6",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c363e3d-3fc4-4281-a84e-5fdcdd7aee06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78a09a56-a88d-48d5-a86f-a0f481f38806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f784d102-28ba-4a0a-a866-44c680805a99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23c2847b-23c2-41ab-adb7-dd8429bb43dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec9b93a-8105-4998-a7ce-893e696735b8",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2628332-6980-4ec6-ac33-a4d8a424f316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd630a48-2d28-4859-b182-5fdffadf8511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09902224-db0a-4402-aeda-03b13caea87e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fefd0fbf-2045-4770-a66d-9b784caa1e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080da328-2ada-402f-8852-bf302ab81870",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239a12dc-2a01-4615-8f2f-b9f181cef8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5a6f44-c759-41fb-9bae-d3d0750a3e1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6dcf81a-1b6e-42f6-91d6-420f40557ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "010f8811-11d4-43d2-9cf7-118c8f2d8b64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9628d86b-b662-4c5b-9e69-fff4108f6be4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8fcedbb-57fa-46e4-8a5f-ce8241d0b575",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaf1acb3-7554-410c-accd-b58a8d7368e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d819e3f6-afc3-4231-81b4-a72ccef56f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1a4d5498-39a0-402f-8a22-5f472ddd8588"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d9bbf99-6443-4be7-b936-e1aa4ebcc754",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f7dbd4-8543-48ad-84d3-ddc3679cb043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2aecd9f-ba13-4aa8-a8bc-24a6112cfe46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf66226a-bcfb-422e-904c-bac03705c624",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2979a3fd-d655-418e-ba95-981ff25d98ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f0dd23-9d99-4b03-a722-310ae5e5b86a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdaf892d-d009-41bb-a253-2608efad4f90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f5c168-18a7-400a-aff1-33fbfe1eb3d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e5422c2-452e-4940-a13d-2320b3f2c2c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2f8dd5b-8fea-4ce2-8393-5e55f9df3df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4801aab4-3f45-4ca8-b1c3-9970b2696986",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7790e315-2162-4ea5-b128-6c48d2e32f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e8435a-c80f-48b2-b8ee-7421f8c20541"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f469e59-49d5-48dc-a7ca-734e6306dbae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0cf0fe6-a70b-4e10-8732-6eef7bb706ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b6a3c8-b6c3-4800-b1c2-2014bf0ecefc",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a74d79b-1859-407d-8960-795353e7cff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50e55bc1-1897-4d8f-8618-b381bb4fbdab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091d0f59-5d47-4da2-8430-162413751b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1989c8e-e47a-4683-9096-b08bd77e4967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bab3f5b-f8ea-4706-b1d5-6cd50f68b039",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25ff3867-488a-4ad5-a02b-a6e4900db840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a7c800-98f4-4012-b0a2-c1681189577a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13d2a8f-972c-44ec-8460-ec6bab1b0fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "12634848-6116-496e-973a-7b027c614beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846e2a71-5a70-4a64-9211-b53db88c1f44",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d720709-9ad7-475e-a8eb-ad9932a6ab0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aade048c-456c-4229-9596-7d8f1a9ce4a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4737e9dc-af78-4519-8c1d-d289ac898f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "19e7ce60-e590-4ad0-b211-f1215a7daaef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a633ea5-8935-425e-a65e-ba8d7e0a0079",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0c59f9-f859-4ff8-88a1-00c90bade18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9632ed96-83b4-475b-8778-2b715a5208e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964ecea2-b195-4dfa-bbdb-d71b5f4fadd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "279f3ff8-fce9-41fd-a69e-03358d053828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de2e192d-0520-4ce1-bbfc-183e9022754b",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a1cebf0-389b-44c1-8592-d557aa883f58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81833899-6faf-4904-8f03-9469b348419f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd44eb8-f37c-4387-b16a-fea9e4a07887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "30a0a0b4-99e3-4302-b913-8e0b5035139a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3979244-5815-43a9-a695-b93807dffd35",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee428392-561f-486e-8bb0-1c7da77c6b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6974035f-f1ff-4ba4-8d59-63e93a8ea840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01dc2479-738b-496f-be97-cdf63d8b82a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d38efc43-1892-42eb-8806-4485e6e68ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c36625-0277-402b-bcce-efcb89efbaff",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0535b34-5463-404b-a794-1b16cad853bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "279f48b0-11f8-46a9-9be6-72d8b57071b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84747550-9714-42fb-ba2e-088ecd7fbb46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f89f06e6-9dfb-477c-aedb-608709fd60ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd544c80-22ed-4fac-801d-7152d373b42a",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "212098fc-3404-4bec-b80a-2a1bcf0771e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2780df06-baf4-46f4-80c3-bb978b7d581c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f11e586-338c-4402-a9c5-ae4fd7a1d018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e29d89db-22b8-4d88-b8e4-7afd8ca22f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f7f7cb5-d21e-4235-9d65-67c9594ba0b2",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d640e68-02e6-44d5-8dd3-334b2af3da5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8f9b2d3-b106-4c2d-89e4-dc0a1538ceb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534ef601-7b6c-415f-9e31-4ea8f4f2bfba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "83dbcd94-74ff-4f5c-92af-559740665bd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe40df99-6376-47be-bb5f-6f1d62c08da0",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97d3352b-694c-4ed0-9719-92953f498c4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5995d198-eedd-40b7-8b9c-d792f4807c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8865ae6c-f01e-4d8e-a5b9-dca033eaef07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a741558c-5f79-4643-af99-7dfe706bf81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e752ba0-4476-4ab2-8d3b-284a98c2ccc5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80820cb5-917c-4753-aa66-9156d1c5e402",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a5cfebe-90f3-409d-bb87-c3748f880fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed44129-37d2-4183-b815-ab291187f1f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1cda655-9814-4659-aed4-357b6cbcf29f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408831e8-b4f3-4049-bbb6-8fc0bc573a87",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c4402ef-f5f0-42ce-902e-ee195d373cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2dc8052-150e-45d6-981e-49b5524efc8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7aa4fdc-4fb2-4eae-8763-569cad536d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15e0928e-26c7-4371-8ba1-c19b032fe29d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07640035-fe91-4016-9044-04695e862d80",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73122cf7-aad5-4cc6-9573-fe83cca467ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aadbc5b-3513-4404-ba29-616cf8291042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352e68bb-37b2-4694-8714-5ee1ad7bc5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "572e9a88-147b-455a-a18b-bdeb642c4b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8a194a-4417-43ec-a744-ffe614bcb26f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8093ccd1-7c18-4475-a804-fb51d465660f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1304cc63-64ab-49f2-b04d-76f9d243d752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea47282-f893-496a-ae3c-1c42a0e20d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bddac2aa-014b-49e3-94d6-1941d5e5b332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e377609e-93a3-467f-9880-2db5689cf373",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a78d9d8b-6d08-46f3-895c-4b089c060ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e80681c-c42b-4632-85a1-24b7666de486"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de92b77-8adb-4d2c-aca9-b9ffec2d2bec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "5271edff-bb3b-4de0-aaa1-5c25ff46809a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933cdf6e-ef2b-439b-a7e5-53d4ecabcbf0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42262bc3-8372-46e6-81e1-d50ebe8363dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fc7541d-2b9a-4aa0-bbaf-814ea2420b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e851f449-9983-41dc-b35c-53eb8255a820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "83385b2e-ea1f-4aaf-b6b7-fdd57b7fff9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7ce80aa-0b39-494c-97ca-b43e4dd3afb1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b34044-29e1-4a7b-a7e5-e575a1f77777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "924b9433-1bf1-43be-b82b-8fcc1e5866cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5115ffe9-4de9-431f-b0a6-e327dce6a158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "361b3876-60ef-4ac7-9b60-af05e38a879d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0373ec22-b36d-476c-84ec-e21ccc86d954",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fac8a3-a1b4-4a01-9f08-84825fcf5ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02ffbd80-7b43-40f7-b036-2945f7a9a26b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d038eadd-688f-44e3-87de-cf9528b3c2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "90880415-fadd-427a-a540-d49d389c27f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1181814-bc17-4ed8-9257-b717e1e60cdd",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c377b6-6cb3-4563-8b9b-11a337292515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b95c6e36-5943-4eac-8764-aa8cfa5ce64f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20a46db8-6c1e-486e-8d78-6d3bad428b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "429cc09c-0e77-4deb-b6f3-9a4f80019b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443f519a-698f-4f50-b6a4-3af9c84a5ba2",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "443d87b1-77d7-4b96-8b5b-8b442a2512b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "076db1ca-2f51-4df3-b63c-fdee6f450934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11fe95e6-aca2-4190-a0c3-aec4daae820c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "27e3cdfa-6ff8-435a-89a1-6bc35b8cca79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6dd31bc-4240-4ad8-a90a-1f43a7ab05cb",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c2829f-bef9-4d87-a141-547e2e6b6adc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4d289dc-d1fe-4ff9-bb2a-2fc204fe928b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce9d791c-47eb-419a-b9b7-a5838ba7bcd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "518dabfa-37ec-42db-aede-eb6e3af9c519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a06c6ac3-cdc4-4a65-a03c-52a57fdfdf45",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9adb61f7-bb23-4990-ac05-b92b65211089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2434d7da-683d-4a5d-ab10-4ebf6b2c3992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "529dabef-af10-4256-850a-1a7645ada3fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b175b5b5-dba7-4f39-9c8d-32a8a3b1dd9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84117fec-5983-40a2-90e8-5380ba54e95b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0187a9e-50cf-41f3-965a-4ccf1343e981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b39669b6-af01-42a5-a589-68a195446fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ebddcb6-90fd-4775-b135-aaa91fcffd7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bca5561-be39-45b4-9f44-a72a7ae2ef6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bbc643a-e6f6-4735-b7f3-2d30f32ee29e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efd13d0-c04d-45e2-9bee-e9fce6474583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca74d135-b2d9-4075-af31-cdcdc2e23429"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c71682f-4e82-4c81-8237-80c460b2c6a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e92c203-3554-40c2-93d3-82200e028092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad602c42-9af4-4ef1-9d48-7c6eded48141",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ead1c1d3-00b9-4c3b-a08b-0cd0b304420d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d8f8f24-5bce-4b22-8cb0-36120676a1f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc72a87-676f-4c49-8bef-50572a5ec9ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "96a209e5-2b91-42db-9d30-e3b9910c7ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa936ff-39c8-4535-9a74-516c67be5583",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e6b0eef-d7f3-4c44-b642-c582386500d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "038632a2-4298-4045-a214-478fa3ff537f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d69ab3a-d2b6-4a88-9cb2-959b95dc1853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a27b6a06-679b-42d2-994d-25933aabdbbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05b6e0f2-1e98-47b7-b8ce-7df039e8a5c2",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02a7043b-4caa-437e-a46b-585f8d3a8165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a52b0d5-fb85-4f15-849c-662b20c3a48b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73fbcb01-607e-4692-897b-08065f885f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e211f2a-e7f5-4c64-871d-35ba004328b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e778a2a-8185-4915-b6f7-5fe540ac7b26",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd401c9-52b3-4871-a853-a06adfa5837f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d63e5ea4-ecf9-4f02-b45c-b5ecd3151396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e6fcdee-c599-4ada-9ac9-3573b98f710e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "16f8f82f-5a56-49a6-ae20-b76cc91a1ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33eafd10-dd00-4f6d-b9a8-6f45c8b9d777",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa601760-197c-4a2d-b6c6-9609caee5af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e71a1c0-fd65-4a14-90fb-e7dbd38c0531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5efba2-a7b9-42a9-af06-40fc4578c5a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "30d12e47-a544-4641-ac4a-543f2ff966b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be076d9-ef53-49e7-a77b-d99f0d175484",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "791cbc7e-cb1a-4381-bfc3-84bc80f3c81d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4071d775-558e-4fa4-b932-82f724ae3ff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977559f9-3725-4479-89db-62d87655321b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d868c70c-7aa2-4a98-ba0c-92618e8e80e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "974e8fdc-1560-4b12-ac3c-fc598a88c4fd",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed009164-3fbd-4a49-8bf8-4484dae34682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d0e8315-2ae9-476a-9a58-f39cbc839f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4d2228-73d6-4c07-9a1d-cf60a574af28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee326dbd-060f-42b6-bc9d-78c487460b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a5a69f-aafe-455a-965f-d09c1d40a46a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "169ee8c8-5c56-4cc7-b74b-e48c690af21c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caf3fa56-abc5-4708-be86-11612c079aed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a3c7e1-3867-4f94-980f-ee80f10df605",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fa9f0e9-e18e-413f-916d-79a4ecad7530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdaeb29a-9fc0-4be1-9d2e-c01fe55f01a6",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bcdeb08-4a74-48ea-a3ea-9c1e9fa095cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab0c127d-882e-43d9-938c-6f9685ac04aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d7c1d2a-e1b1-457a-9186-ce6f032ecc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "21e09801-0678-4d92-bd33-aabba3202bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ceb45d-4e89-44d5-a66a-4ac99f8fb488",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d92eae-0add-4bdb-8012-6b284d9c63b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cff1a60-7b25-4e2b-8808-53f45ea9b219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a830f4b8-d141-4dc0-9960-5c8d53fdec2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "69cd97ce-a9ed-4e53-a072-763c0d4f901a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8cedb3-7e00-4a0a-b430-1f9bf7bbac21",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "605f9aac-1277-49a8-8b43-22126a30329e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51a3ccd1-fea5-45c0-9fdd-88c314a3f7be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c6d32d-01f3-44d6-b6c7-76b876bad1bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9552cdda-b279-464d-948f-50b333f6718c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "931713cc-4ae8-4da7-8f5d-98698164d55f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcde9b97-da77-4579-8c6e-90878cc4441f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c66e56d7-e043-4f27-91dc-cac4796e24c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b71d78fe-3732-4fdf-ae2f-213d4bde4ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ebc9eb10-e008-4628-a476-44febd11d568"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c0afff-7fa6-4519-823e-8b4cea4e1dc8",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77cdb82-4179-4704-bbdf-8b3a2f939d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bc5a947-d613-442f-a9a6-fd74407c0656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72ce3353-18fc-4b37-af56-573e3a373267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7a21467-9daa-4e80-9dad-a28977eb5476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad2852f-b34d-4f74-b66b-a097c9ffc970",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a687d5-376b-43ec-bd55-72fa7c9332f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f6f144a-4656-4dac-867e-7b98328d742e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b8de56-9a27-409e-95c3-be4067e0accc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a6f082a-6e92-45d5-99c3-a49ba93826c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8d9724b-f9da-4207-b5aa-432c8ca6717c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ae57bee-eae9-4d59-abbc-04039ec511c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "348bde8b-63ad-46ab-b6cc-16d4a1e878ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c59ba5b0-199a-4266-afdf-69c2b21281a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f11d2d5a-6399-47ef-b522-04cbb91d6f4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a58ea20-55ce-4461-9006-c7605338d6f2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "859e7473-f732-4dab-99c0-0f93178da269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3342a41d-b64b-4b13-a2c3-0db00e3f8e75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0d69090-2ea2-4022-88ee-5d9573a65d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a800fc0-907d-4543-83a6-3e38223fabf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2eb235-e237-44db-8cfa-9e3fdd45bd00",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aac24dcf-b9f8-469a-8dc3-cafff6d0da58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a91526-03aa-4cb1-a205-7a62026f9ffd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e15fe94-4bef-4f25-8d3e-86fece44d2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "81661124-4130-4e89-aec3-ccee265ead18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc399914-f2f5-47ca-9f58-54a0efa33c8f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a5b707-87d0-4107-a6e8-dd4ffdd59171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b52136-5178-4afe-bac9-bf07eac9fe4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d28c9cc-5a16-4c24-ad6f-6e99e74fff00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "bab24c93-266e-4c43-a3c4-0e9b9be4dc21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a702bdf8-a0ae-484e-a0c3-e59abb13518a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cee2b81-4c72-4649-a6ad-8f69a08c5236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13f4d580-2bde-4426-b2e7-b3ab372e4dae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f957b0-ff99-4826-abd4-36dba2f9b788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca109d0d-4ea2-44fe-8ddb-b0f9ad75133b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4a1a8d-f4b9-4c5e-9b89-96dea368e190",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "127cd633-66c1-4e5e-bfc0-054185df15d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178ed475-b7c2-40d3-bcd6-4c825c27ec23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a54f285-8508-44e9-ba65-58c60eaa5fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "89d09521-a8be-4b9a-b28e-cf79981fdcbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd3375dd-65e4-47f5-8fd8-591cc8c0e619",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85db9dde-31e3-45ba-aff7-fa5c6b4478b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d2d7e48-7b83-4414-a4d5-27914b621bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc4be83-e5fd-471f-a154-2585ecafc3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "89b49ca3-31e6-4b9f-aca7-b36086893aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "826959f0-91bb-47b6-b0a6-331a46d32fe0",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33e26717-17cb-44f5-8506-333910ab687b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a170f54-3879-4a7e-94c0-964dba6524b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a371cd-71a6-433f-b756-746cab10fa37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74c58b3b-2195-4855-8d0d-027362fb31c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c58f165-19c3-49f7-acd7-809764e3ca64",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e43661-aeb9-462b-a072-cb94cc9bc7d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c539ea-65bc-4995-b2d2-7a7bb2a9cead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1660b638-fa5a-4ddc-9895-b02d53e63ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "46cc0fd0-e86d-41dd-b53a-4f736e05911e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689158cc-9c91-418f-819f-80b8743760bd",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea45ebe-7c7b-4b0b-90aa-6a5086c43bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a617a5-5134-4a5f-8242-1df4271673b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9df7ec-a709-41f8-b476-c7cc2238951b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "87861385-b7e2-4ce9-b803-785cb809f9c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f624265f-eba5-4f2e-b7d9-56fd1874e71c",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0e8277a-5d2e-4f6a-8390-078e5914b49d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00f246d4-a81c-4014-acbf-1a01f1a567cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fb8f74-da22-4ef4-b60a-1fb76b29c9da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "74657dc3-82b3-460e-aac0-3961d171e47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbbd2f8-2324-4485-b337-fbbedf562962",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0055fa49-0312-4152-8505-76edae69667a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a53c235-b7d1-45bb-b0dd-29f08e2b1370"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b45322-fa93-49ba-8c7c-926163baead4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c8e88b1-8c57-4979-95c6-626b16914e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad590c62-3c19-40f1-950f-08b80c3c143f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d25748-5ab1-4178-ba1c-61e943b85919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed98c6f-3d09-4391-8a06-904104ceae93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a182f068-eed4-425b-977e-92c5ba5c2fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8643fea-bd1e-401b-bc85-b1e4dd98754e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e0b94e-5996-4756-968a-ce2ad5214af4",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf0ea0a5-650a-49e8-9f63-3ee968b4fb87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20865a6d-a135-4449-8fc8-01f7b62d70f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ded07c8-c36f-4d71-9518-98ffb1abb4b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc5d10c-d017-445b-94d5-1ebac0f57e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79d325af-0483-473a-b1e2-93f3d5036700",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a05413-b7a7-4100-b987-978e23f91e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e808c5a1-dd4f-4846-857f-24e34ce49c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "754a1aa6-5d2d-481e-a645-fdc6c013a66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecb6eac6-22aa-43a3-86a7-2fd739c773a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ec62ed-c63e-40fc-9cf1-d66bfe3bc97a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70cce122-b8f7-4ab3-8580-e663d45f228b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb91a5ff-5eab-4e72-8edd-ce98eee518b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95c2a7af-75ec-4a07-9385-b81a96f35ebc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e713d2a4-58d0-4626-8523-a8f82339a69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0110c722-87c1-456c-8edb-99946fe16291",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28195f8c-3961-4d0b-bd6b-756eaa2b7893",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1928f4f7-6257-4490-9982-ee4161921b69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0296137-dd9e-46ba-868c-71a0bb1a6022",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "859e6caa-6e73-42c3-a2b7-6e26dff4ca1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d2c486-1080-4408-a39f-04e27f1c8d29",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "707a1e83-83c4-4388-a3e2-e449666a9d51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ed4ccf9-339a-425f-8585-08277181f737"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806e1978-8f31-4506-a52d-edf3adf95960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bd16763a-1eb0-4cfe-850a-85edc9ec5447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c185bb-bfbb-47e4-b0c1-70c135b5ece5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52634dd-1c86-47c8-86a4-e5e18bef27d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5b9eab3-a615-47f8-b310-d4079beb8049"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332b06d0-cffd-4a0e-9807-fd1d1a5d5bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5121221-3ab2-4e53-bb01-ce0a1fbe6e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d67eb6-3969-4727-bab5-8f87ac62384f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4e8992-1763-4d01-b70b-fac49b2dfbd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5da5e5a4-0892-4200-98f7-76ca51049b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a7ffa40-8bc6-49fe-8342-1528a7237a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "276277a5-c4a0-43c2-9e2a-f4fc50c0df97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c07fb4-ea7e-44ff-8a98-ad5e706bee79",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9220f86-73d0-42f7-bd33-c609d4a4ec33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833550fd-d5af-4df6-ad3c-fb5c07cd7734"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8648a9f-ef2d-4c46-b288-a9231d27cf02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97d37c4a-920c-4856-8a00-8fbddf581ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5372bb-7b10-41de-b14e-6c5caddaccc6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af924926-cd44-4b44-89c0-d28c7836719f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7769d7dc-df9c-4a9a-ab7c-0402eb5e2131"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a6a29bf-ce61-48be-a095-b07c659c730e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "318e17f6-0eff-4736-8aeb-3f899b99191d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17dc675-3394-4d57-aa2a-22cc4cf6a101",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff0ffdaa-b127-481d-b47e-fade14ed5fd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10ed90d5-e61f-4a1c-a6eb-e81ecb684f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f33ee06-43ec-4921-bae9-f538ba3bedd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "938c79aa-d63e-4e08-a493-6b4fa9050c21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c958967-ad00-42fb-a7cf-db941797aa6f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84ddf5c-7185-451a-b444-a3da2aa33c00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5984953-5deb-4faa-a5ef-50486982ec11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80479a41-24d3-404d-aa5a-564433790b3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5fbd7ee-b32e-4a45-ad8f-cea9877c5126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7f3391f-cc90-4304-8e0f-aa81a02edba5",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "136bef8f-6c50-40f5-b796-3de3d460f83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb97f4f-e24d-4a4c-baac-f90bb93b8be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04772631-56ae-4d01-b861-1743312d190e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d015c1d7-9a7b-485e-b393-ca740e284e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e0a9d9-8aa2-4c1a-a6dc-ae72f4c4c6e7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8943828-8690-4ee4-b462-6b7e258f1f86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7863b636-9d5d-4aa8-bec6-6e5b5a84b019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c47f1f79-eeb0-41a9-9f3d-86bc098c52fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8268871c-4dde-42bb-8edc-4b6a2bca899b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf905837-7a49-458c-a0d3-3679322c296d",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a740716-33cb-4bab-a520-9fdcfc7b84c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b8100b-4e29-48dc-8e64-f028c726a9d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ffcc472-a022-4728-8fb6-f82f5be85418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f39aba3-7c42-4f21-9847-9022c14ba40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2125c174-913d-442c-a8f4-14132726c74a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e53870-0562-42eb-8fc5-d82fcc496355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce8405f-ad01-4490-a5bb-1b4d3fedf063"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c58c27fe-339e-4025-acbe-6373b55ec555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a07636-cfa7-4249-bc37-3cdb71663e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d897aec0-36e8-46cd-8176-152474c267e4",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5fd477-4f6e-45db-a690-b80eb56b6a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "007cbd79-f0ff-4798-8eb0-de2a82bb700b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "625d54f8-2d5b-47eb-81ca-423d2f482a4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ed0c31e-af74-405c-ba70-de300aa6c4cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45b14f40-b055-4aa2-b445-e89ad1c65b15",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9f3e9f-2d60-48d8-871e-d4663949959b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2196ad95-b2a2-475d-b8ae-9389a8d0a9c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54adff99-9f75-4319-8559-6b65be2db016",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f9f3cc47-5364-4df5-92dd-1e0704b8ac87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d5eecb0-ed9b-4376-901f-0ceba362d142",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "814927a7-cb41-4863-9a35-e7136b9328d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea3d25a9-ceab-4875-807f-c65ec7c5b112"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e98d0f4-e9c1-42a3-bc7c-2d5d966caf90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "42fc0c67-38f1-4ee1-a030-45f9e5fcdc61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71d9e7b0-5d89-4605-a521-807354fb6eb9",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "828a5030-3f72-4606-9a94-32b547c5cf4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72c917c2-4e10-452f-846e-e1db7a9f5d71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "748b1cfe-ecb1-4264-b224-cb168a730fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "021b1c89-5742-4f3d-b8ea-1ad2bb0c8372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fe863f-d89b-415a-a9d6-fed8740c2d66",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e876ecf-760a-4870-9e4d-58e16c8be9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fea4efa3-04fd-44d0-8ffe-a129d37d446c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddb6cd11-02e4-47df-bb18-1a78af09d740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "11b8b149-3492-4331-9af9-ec2476923d56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e15c513-293c-4d93-9431-14454fd56f06",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb3e5d2-8f03-41fd-b161-0e9afe6bdf1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8a27240f-1cfd-45d9-8998-b616e63e4ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901c5e58-2cee-422c-a196-894c9240054c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "66d857d7-565e-484c-8b31-1661e16e2df2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "89354119-4fbc-4bc4-8cf3-8af3f1a2100b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "42c90a4d-2bcf-4c2d-bb4d-6dac68f61c67",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d61d22c3-6640-4799-be07-80b143c0b262",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4dd5ccf-ec6d-4ca3-bc7e-ad9c27ae80a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96a427dd-dc05-479b-997e-4052497b957b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3bbcf8f8-9176-4b63-bafb-8b909c948dcf"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "57d50a25-ece9-45eb-bc4f-5f5c768a8651",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6bd03322-74e9-4692-9c0f-771ba89ba010"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3213d4d5-dad9-47ea-ab82-e91008460deb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5be97ff-e57b-495c-b62b-8e642881ade2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c225da8f-81cc-481b-882c-7b5f644d0ea7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ed2edda2-9b9f-4b8b-b1f6-059a905a4f7f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "797f55b1-6cb9-40dd-9c80-ea597b74ae90",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "fb14baf5-aa46-4571-9f03-368f3b39718a"
                }
              }
            ]
          },
          {
            "id": "3a296058-6e96-46d9-b378-1f3380882dfe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5eeeb755-a007-4dbd-b2e2-d27124d4c840",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4f8dcce8-b526-4f05-849d-24ad0d4ebc46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89c3e307-4ea4-4a3f-ac98-90c63d173e3c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "60e6323e-679b-47cb-9e8e-5aad3b91749c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f9fddb0d-2b80-4c5b-b687-310df82f710e"
                    }
                  }
                ]
              },
              {
                "id": "f8ac424a-8889-4a4f-b643-e02b5082700c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff2c9572-99b3-489e-9164-968ece7cc1bd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c30fea98-7643-433d-99b7-0f9348ea334b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1db851b6-dbec-42dd-bd3f-5bf595dc0689",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "cf24f4ee-984e-42df-bad8-c98b736f7915"
                    }
                  }
                ]
              },
              {
                "id": "94c169ea-cf2c-48fc-872e-42ec5dc6561e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33e88a7e-7dba-4984-8766-00ee48b8b5ef",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f4976fbf-4c61-4117-96c2-5453d717d128"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22cbd9bd-df2b-4ba8-aee6-f4828f6e94bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8d6e243d-58dd-472c-ac6d-fbb6f2e330f2"
                    }
                  }
                ]
              },
              {
                "id": "02bed63f-64fb-4aa1-99a4-b63b7ba9a0b0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd70fdea-7e81-4000-b8e1-50915793e097",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4dcb63ee-1159-4c9c-8f2c-02f0d65b9edb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7f97acf-f1d0-4a9c-8e85-efcf7b5f3811",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b643a4af-4d09-4cae-b9be-4d53985283d7"
                    }
                  }
                ]
              },
              {
                "id": "a37c1c46-9ba2-43c7-97e3-6e46b31c0f5d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61889fbb-2308-4791-9778-793afbcca013",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da2ff6db-16ef-40c8-b91c-4ccfa40b0d83"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6af759c3-270a-4dae-9e4b-19c286327b91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "88e0c1d0-4951-498b-8d62-5452b57088c6"
                    }
                  }
                ]
              },
              {
                "id": "cd85220d-8d40-490e-8a14-b21e06ca71a3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44bd29c2-cc08-496b-8f58-44d07963d98b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e3eba0d0-cfa6-4882-b8e6-9570de35c59d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6d47b34b-9984-4a74-bac6-aba8ae7dba93",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b06e1349-d04c-4a95-a53c-7da43e422b62"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e5be9e9e-a80c-41e8-aa23-93572ea93d89",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "43747aa6-c7cc-4e01-935b-9cd9bda85727"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a51e4a1c-1e18-4ea8-b5a7-f226ad3fbc86",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "53460386-95c6-4c09-a126-013921d48906"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5750a9e-8ea5-446d-9cf5-f70acfa4e5ac",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "9219c4de-5631-4173-b75c-2eb133eaa5b6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e629af7-cc79-49ff-bf4d-845e5936a37f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f248e033-eeb7-4a8e-b8d1-c79727cd2e9c"
            }
          }
        ]
      },
      {
        "id": "c99f2e68-bd79-46b4-b098-df414c08fb2a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "c8bc9410-7994-440d-98a6-5933ef887443",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d84b90ab-3a4d-46db-982d-f53e66670cc4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6f1d9dfb-14e6-4640-b45a-886b83eb3898",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a972ed72-18aa-4d90-b355-ebe233b72c06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1f8d7a-3cb7-454c-b226-b46d058e5013"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e89c81-3c61-4fe4-a8bc-4591daa0eb35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "79056882-0091-4862-ba73-58846e4ef2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0988bd-714f-4ab8-85d7-a1e428d70085",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "621c263f-0c2a-4fa3-a490-8c3197a87f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b16d3a0-a374-4823-a20d-7e305822100d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b22a39-9b73-478b-93a9-74c5f8556415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e9676bfa-2f3f-44fc-9e72-6d7394806283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed07420d-0ab1-4555-b806-5d08dd0eaf70",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71016d8-5f57-4f24-8c8c-e0f062aeb44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40991758-f13f-4f61-a084-5debe36f7a72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff8f8a6-c20e-4cf3-8ed8-60e20b94699a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ef367b3-3cba-459f-bc6b-01745870ca0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1ee2746-efa3-45cf-bc46-ba0eb6281c8b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08bf6391-0dd9-4711-8d7f-cf1c4a669d31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06aabcc9-1dce-4da8-aec8-505c475afa75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aecc83ac-3b01-4c96-9326-5a495f17add7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9ce268f-4133-47dc-9c34-d7361726fce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69aa1473-7ff3-46be-af95-7abe2383c7e4",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ed838be-9ec9-48fd-be3d-dbafc8d45ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d61093-9733-4fdf-a694-c77ef1cb2014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e89f3d-8f09-41de-bcb3-41b4350d2932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8a0003-5402-4774-91cf-839076eda195"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0d6b16-a035-4abd-8c18-46825abf1040",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2046a3c5-36d3-40a1-997d-29e787f5417a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2b55860-9199-490b-bb29-5ef5a75b81fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "457856f5-4bb2-46ec-8eb4-7ec2bed631f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c407f2dd-a285-4b93-bc92-75bc73b6ea64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94041b1-ab2c-404f-9175-7a75cdf4a30e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c16d5d4-dc0d-4333-9e3d-7590e4b28514",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dc0e855-3883-4701-9de9-c98ce45e17de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6a499c-43d5-4f03-b68b-76875544f673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9836b8fe-514a-4bef-adde-11735b73e01a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04cab323-c91e-4741-91fe-12472fb873df",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87856463-cde6-498d-ab6a-c31a9b48fca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3034c095-2f27-4a95-8406-5aac43ce1281"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44f7b0d8-f1fb-4272-a58d-2054ef6bd623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9755305a-9fbc-4222-a065-a6e4a74e21fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dcc0734-2233-42bd-b40d-bf16b10eda1d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f50179-3cc2-42de-b7d6-a797ed51a87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83ac3999-b940-418b-8eb3-72ae79909cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31324d6-7bf2-4736-9d6e-61fdf063430a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d9f1c41-896a-4680-9fce-e3906fbfd2b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77e3e3e-97ca-41eb-b78f-f929cfbc5b3a",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27d6cf4c-75c8-4084-a454-4df3d7da3d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9edb2579-73c1-4eda-8335-6199c9da5ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fffd0aa-88d5-4923-a9a9-0c60e9489789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbe20024-7d69-46c0-be8b-62e6d02391ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038b3cba-4b61-457b-adc0-8841ac1c031f",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f21bbc95-77ea-4f99-a7f6-97cd49826bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c28d35c4-a01c-4e8e-955d-7652eac552f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ffd9888-08cf-485b-b50b-03db9e0fd01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4b7b62e3-1b08-4883-a671-7e5daad42fcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024c81a4-0126-463e-9b4c-94ca9f863656",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b227a8-08f8-4bff-969f-9ec5387caedb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92bbc411-8042-4922-98e8-25b3d90edf70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f8d27b-9ff2-4774-b9d1-d7065b3df34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74fcab04-cee8-402d-bca0-6703eaf32f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd5bcf41-8a71-4bfd-b919-a245a946a4b9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3338b7fc-ba16-452f-ab3a-9dc2a0aa5d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6534d06-4f93-42ff-89b8-27c6250686ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1084ab1-821e-4c45-a559-5c0f310c4c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aafddae8-a621-454d-8e21-db851fcf96b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c26f34b-6c64-40b8-8038-da2cab11d530",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a03c774-2aca-474d-bc45-f1e7d05cb2d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efb1205e-cc28-40c7-be49-4951465b38dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "739f0b46-0e70-43f6-b22d-826a699cd962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec5e2464-d738-4341-ab36-6fbc44dd61a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1483d62f-ab37-451d-8bb4-7c53bd946e1e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "452eb94a-a781-48cc-afcd-e5ffe1f56cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0e12a77-1b9e-41f1-9ee6-2d90f771486d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a6b41d-a447-4594-bcaf-a6b0172f68f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "36024c30-39f5-49bf-8f37-ac6a165e3d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df692344-6e4f-4d70-9937-bb8fb73585d5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3099a50b-b618-47bd-84a4-0eb07603ee48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab0fa969-c6cc-45ec-ba92-b1cd47c2169f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a7d080b-fa4b-420c-ad2c-4bc0b3d61bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "998b4e67-096c-40d1-81e8-9d26e4fca159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bc2c95-b66b-4c6e-aee6-faceb5b5daf8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da7e10a-6029-4d26-8aa8-84fde5c3e281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "306ee963-7ddd-4fe0-ac37-cb34a25d2cea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1293477-6ed8-4ae6-b28e-48948313c7ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "57c184e8-21fc-438f-9fe9-3ead684813fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c954306-ec32-4d9e-b8e5-35dc4f66c947",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e14b909-8d72-4bfc-9174-5a82f48a7dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cfdc85a-b06c-48f4-a5e4-0d7d522a5cbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a012e2b9-811e-46b1-aa4e-754c24d63322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e22f9bf-f57f-4042-8ce5-ed1c015e6790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e511f8-ef30-4d00-8172-d6e6cb1fa4c8",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da3edcaa-c36a-4015-aef9-1979d4dcdfe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "484cae1e-b7b1-4761-ab67-2717083bd5dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "606e3819-12fe-4424-a5a3-87074c5cfc43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3289fda-1b33-4e9a-948b-4ae2e950e026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcc9d8dc-eb09-4582-b177-175be475a269",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "978a3329-6d64-4c38-a82b-5a3734bf9a05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ec3e792-b9a7-4ded-b8cf-25240059e2c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e603444d-02b9-45f8-adb8-ee1fa982822f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aeb32198-620d-471c-8f47-3bd8735d8b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95dfea33-734e-4cab-89e3-33e1fcc09bbd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "242484dc-3a8e-4c81-af5e-13e9d1f3e8f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c502feda-48f9-4257-baba-d45c83b9071f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6652f4dc-eeca-40bb-a24e-8601cf87c5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a091cf8-1969-4e38-812a-b57eab394381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1828c13e-7e0a-4729-9f96-21a212918454",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13c17e9c-3ccf-4670-86e2-a84f9b8176e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d973b41b-a349-442c-a5b7-8880eb2480b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bee6080-80bb-47ee-a90f-b8e5d337d4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8aa1972c-043f-4446-903b-d57e5d45e57b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abf1669d-2089-4894-87e8-443fd059d760",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5510faf6-b433-4c89-9b86-696bfa46229f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9684927a-1b44-441d-aaf7-83da2e4c5184"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "635439aa-ca2d-452c-b407-68bb9cf654d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de7d0c49-fa65-4559-9f2e-005a331f2cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d9d120-bda0-4427-8d97-11336a062560",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f688cf4-5291-4b41-98a5-02ac0ead453d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62f86cc0-da49-4081-aa74-f78d0e66961d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6bd056a-611c-4cb9-b089-8a6442604b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f046f7c-50cb-4c67-8c42-acf43582913c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01912da-7690-4af7-9cd4-1dae5f246475",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "590c125e-6e18-42da-b006-98376f52f8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b143db99-b3a3-4b77-b26e-2915766a1cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0570b2a-a041-4c6c-8f79-a9e62b408c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e33dca12-60cb-4824-94ba-37cd436506b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e764d36-9fd4-4bf5-a379-58dd2ee93eb6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0acb9a6-07f4-42a9-bb9d-3942b8a801f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ecda717-db2a-4ea1-b721-24ddd4b3ff8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444836c0-633c-4c1c-a050-837e6b6e7bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c576516b-9ca2-4a5e-9340-a500f78b4a2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9951d177-ab03-4772-a5ed-e5ca1b2b8122",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9780049a-2cdc-45e3-81d7-d61d59ae2a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3683a349-9ea1-4836-b64d-83d2c32b822d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0402ae3e-f241-4310-84f7-172df1729e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3c8fbc5-15c6-4ff7-9d34-78f6a1190d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "611a412a-79ef-4f18-81c2-7dc8e1d98220",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dada8bee-d103-4602-82b0-4282c3dedb79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "309aa7dd-f2f2-4993-9f39-00885b16c2e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e14232-d645-4461-970e-3bc563b38813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "01c311cc-3e84-44a0-aa9b-b4d6ac09d460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa49f9b-531f-45e1-9f02-944508630bf2",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23863664-227a-48db-8068-43ec9bf660cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16d34dec-550e-4215-b640-d013d5621c10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8555b2c-6c17-43cc-84a2-e9010581dbc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "196fb818-254a-4f86-aa9e-367a5a543c93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd90b67c-1945-4d1c-bb2c-7e783e383f01",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2825ca93-e521-4a1a-94a4-62f3f4a39799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c4b53f2-0751-42fa-aa2a-cb4f5555bfea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff38d1c3-4a0b-4f4d-8c07-a795509038e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13599da1-1132-4f56-b02c-1ba2defed519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374e3b2a-e831-4af7-8ef0-3ec0711d2e09",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c137d01c-a4fa-4bca-a781-b42e12100ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb973e8-d58a-4410-aac5-b0f47c5547ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6d4ec6-31f8-41e2-8508-7ab7563b0b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cfcc475-feb4-44ed-a5a8-17c9d196f039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7cbda12-bded-4509-b8e9-4e79463305b8",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215de3d7-282e-4d90-ac99-1825c64e53cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c3a1181-5cd7-40d9-92d7-cd7560613270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bea648-214c-42be-ab19-c8383f22bfe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "faa06447-7181-4ae8-8e1c-180c5622138c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b3eb431f-3db0-4df5-9763-35a78d580795",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "97219d77-4359-472d-84ad-20d8ef07119e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc21756-f88c-44d7-9cee-8ef1b6617abb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2b14a17a-654c-4dae-81b2-91f4f11f7b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d7851d-ea4e-43ab-94c6-1bd6da0a92de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec16ec77-d3ba-41b5-ab70-c5924393b77e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "05950c2d-74c4-4367-980d-5a3671dbbdb4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "40a4c43b-8bb2-4547-83ce-b64a0b83ca46"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c33625d-3dd1-4411-b67e-8bf4cd18b037",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb32f145-5377-4a6d-98bb-3d077c41efc9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ad573324-7aaa-4306-95c2-d24db191ca87",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "054c6b97-e486-4eb6-88f9-7a5679afd194"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "daa5b49b-e598-498e-a28d-b232ded07f4a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3ba833b1-7867-4b6d-a3c6-96e6fb72293a"
            }
          }
        ]
      },
      {
        "id": "fe08275d-17ee-4993-bbec-12d7054f77ef",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "908713e7-e399-4263-ad36-536fb08cf040",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5fc6d2c3-c516-47a8-a5eb-3770b9c2b7bf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ad0a90ea-6fde-452f-9ee1-9b17def310bf",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a510d387-16b9-411c-b39e-f7046bae3ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5be24d89-d331-4612-adcd-6d6d40d81f49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf149d8a-9e19-4aa0-aad2-cf4e1df02307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d20a8ac7-80b8-43e0-b362-f4db9c09c095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d2a3f6-d4f2-479e-89e6-113d7c876b18",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3db964b-552f-404c-9ae6-8871fc2e0f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbdae473-68e8-42cf-a43d-97c2ea97a3e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541bbe3a-6752-45c1-b8ad-62d50d605e07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "00496a8e-ac9e-49df-8995-232c46cb91db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05fb655-926a-4224-ae86-2ca60b940c7f",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c586ec16-742e-430d-9041-86a1d39491b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da9e7f93-125e-4910-9581-de169b641a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d69b386-5d25-45b3-8964-88e1577f63d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb95343a-9f87-49a6-9542-2c80ebb32a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86cbe28f-c476-4363-9f34-e15dfe77153d",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c096ec2-ef68-4963-bf2f-c8b7821ad1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103de0a0-96f4-4fd2-bcfc-6c4b4cb464d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbe6772-044b-4f22-b9bc-c8f0a9bb90cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "72f7cb84-b3a9-42aa-9b0d-4a898c465d55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca1f7293-b803-4935-891e-c89ebc86e0d0",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e803d2af-18eb-42c1-9db4-22eaa9c2b31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa784587-c5f9-458e-a3fb-2ab0e412dd83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "183b3b22-af5f-4aee-8562-eb4e68df9ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d41973c3-0387-4700-89cf-23e6eaad3d03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344c2872-802c-465e-aa67-49776676cf1e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10f1787-647a-4787-a9c6-468b7118389b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88bd16b7-68a6-4b3c-aa83-7b0df0b1caf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01b94d80-fb26-42c6-ac23-4230fdef96a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab91f0eb-6aa1-45ef-928e-abf9c3def776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3edda1bf-a6bf-4092-aa83-547f9b2c4281",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de14de1d-c90a-4b72-8719-9c536f220fe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d00a34-3014-4c27-905f-07f45091ebd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f72b095f-8b47-4c46-91c9-e6dc6123411e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeab41ca-bc5c-4025-8129-ffebad9b891c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc57f321-2be3-4a8c-b5e6-8461410ebe38",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4acca974-40c9-43bf-a793-3dbeb327b288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b4dfd4-149f-4708-975c-74f99c9a9e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f931b637-bfd5-4132-9e5c-61aa485a18b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1716952-1a4e-48fc-b79d-dbe4bcbf644e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73f6552-cbd2-4bf8-a8b8-8de479f50151",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecea554-e0e9-45cb-9262-eb4dbac0005e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "385e81ae-1d52-432d-a5df-55815009c51d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b9bb6f1-cb02-439b-8237-05ef67646c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2cf7b670-e96e-42ec-bde5-f64e27d2333d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4fbbc8b-217f-4156-802b-e0e533734c1b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46a901fe-4860-4bc7-8df1-84c6d24fb802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ed3704-704c-4958-ab9a-2ad31c818332"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4029c868-6124-48db-b74a-eda4883d0b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b539bca-068d-4880-bc23-4579dec66667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fc789d-0860-4598-a637-6d1905da8338",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca6d06f5-de8b-431b-9f4f-de3ae00c803a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b4492c2-14e5-4d1b-bcd2-d1c30b7ba8ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989d8985-56be-40b8-ad85-0dac414ced7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "72cab33b-9f29-4761-8bd3-09c194b69a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "625167ba-c9ba-4a1a-b90a-80dbf9ad8289",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6793bf73-7a0d-4d95-9a54-fac5adce824e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6203d957-29a4-4eff-895f-9ac2c6f452ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d08085b-e8a9-486f-937c-f5fde595aba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2e11c3b5-0f2e-4d57-88e9-725e458ce915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "683fc363-1fc5-4684-a83f-927d5d9864db",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a33235-0208-4c32-abb9-a6ca2cd337a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b40b6c-6897-4953-9ff9-26276933d2cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f2bd393-afcf-43a9-9ec2-195ffeaccefd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "89a54930-74b4-4e71-ab94-47296083602b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64e65835-8ced-433d-9645-9fe3e26de23a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54076cd7-c587-4211-a01c-af6e086503e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f870aca-bf3d-4dca-8e4c-2f9772b6648d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7db67aae-7b26-460b-8715-a98da22d7054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "da4ea97d-2771-471f-85c5-139eebb0d8f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "074a9387-95a1-4987-92cb-95af0002a323",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60848c2b-a9e5-40a7-8151-3ab23b097d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc9d85c-5626-453a-bf77-e37fecc6496d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8743a34-05fd-4b2f-a32c-85aa14fc24ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8f76aa4-e375-4648-be9c-21bfe6d884e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4fb682c-78cb-45f2-9ef8-f8a67705a867",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8716b3-e669-4f27-9901-067deefc4735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7826e409-5e0a-4a1a-ab72-68a20c043d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bc1bdc8-92c2-448d-b692-0af1e61087bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bab6804-3a97-4a15-bfc6-a10c716466c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6b84a9-3892-4adc-acef-6719cb0b22d9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1368a46-f4e8-44b0-b8b3-5f04a14cfc22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49136768-5be3-4cc6-8200-7aff3dc238ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b69f8b2-9293-4a27-a355-d57185dd867e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e399ae09-4cb1-4473-b85f-91e427c79fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73bb3a3c-af24-43c2-a603-81502d1405b1",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab605ea-b2ff-4a81-af73-c917fa9812bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7183829d-0248-4794-a352-c8a1241da127"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e92daa0-9f66-4ab9-a836-2fdf5de4cf35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1df8ea-ac20-4233-a478-8aa0791fc2d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86b71ab7-aac2-4b8e-8eac-7d0cbcbd688f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce674253-af5a-4fef-8c2a-ae65dfe4a12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cd25b23-35f5-48d5-a71d-ad13f129a3ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "029f629d-56d7-4ef3-8e2e-37baff8bba6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04a7917a-f71a-4454-bf6d-eb5d10bda161"
                        }
                      }
                    ]
                  },
                  {
                    "id": "889b2aa8-e0da-4a10-a1a9-37badff2379c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfee10b-66ef-4d9f-be6c-607e6a353d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "795e78d0-ea21-4bc2-8874-49a29c118f4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f964ac6e-a3cb-4b47-8833-baa4a851bbe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6ef84ed-f8c5-4869-8d23-b95a20a5b523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3975bc2d-4290-486a-8169-9066e8cfda55",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa433277-cd17-4e97-901b-18fcf46d4a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba97d750-b1a0-49a6-ba76-e3455822ac75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeda2f30-53ce-4fb9-925e-283d50e63e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b34cecd-2702-4c9a-bf59-20a0daad0b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "339c358b-923b-4d15-84ae-7eb91e3d29aa",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef872e0-b55a-4f7a-9340-cb414dd9d039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd22f95-9aa0-4791-90ed-158a0273df2d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eb55fb9-ddf1-44c6-a8c7-3e53498bb4a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "78681e9b-91b5-4fa7-825f-ecf3c248e6d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e18d0a-f421-40d1-8634-9fe2c2ce22e3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa2d0bb-3b6a-407a-8c6d-9add2bc71437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4011f85-30f8-499c-8987-7522b453e7fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ece8c2ba-aa76-48a1-960e-35c641c6b1a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c684ec1e-6ef3-4fcd-860f-1202d0f829a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b8e730-1a63-4840-81fb-bc383b6798a1",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1e84d7-4e30-4d62-9752-7495882d48d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b3c4928-c071-4ed9-8184-7b1bfb971ad5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f999dc38-5ecb-4baf-bcec-72984851b274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a90b43d-c57e-4e6e-8064-58cb1b4ffb50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c57cf543-b822-4876-8cb5-552e2e8b04c4",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "647a7240-6d05-400f-a3c8-5a776451fab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ea23fb-03a1-4df5-9e56-b191f6748b42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3cfbcf4-66e4-4142-b05f-2c0e0d7db480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac04ddab-3cf6-401b-a627-560499548f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6246384d-5572-449f-a7e7-71cdc11762f4",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc4c61c-2c53-47ac-a3b5-7755840e074f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0136551d-e930-4417-b8ab-29914d22f5d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3c4906-341a-498f-948f-a0471a4665c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "85ee5405-6ac7-49fe-91bd-867375302dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741d8fd4-ced2-421d-b084-29b714732a55",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8a3457-aecb-4c2b-a1fc-d6a8e16bbb81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "003d3ad0-72a0-4fd9-a5a5-c9b200f9621d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8972b0a3-ccb0-429c-9ae5-734f8b4040d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23a35ee1-0f68-4d91-aa36-4ce376873896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f68c4f9-91f4-420c-9fba-370c4755e21c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9050e943-4fdd-4703-ad04-e6b5c075418f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9e34a47-c283-44f8-9d2d-0c213a5e3ff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac6ccb2-7bff-4c08-8e73-a6157c585974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e8b5b6-7efc-41a4-a9e6-91ca4204df66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ec9e82-d965-4c64-827b-08d1972af485",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772e40b6-ea2e-45bc-b103-8af3087adf46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "139a48ad-7a07-4701-a649-7ef2bcfcaa69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12edbf21-8b9e-443e-8f58-de9fa2ab723c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "384986ba-a459-49b4-8676-52f99b428b66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e2c0ea-9475-4405-851a-ba95c20bf070",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948b1df2-1923-4604-bc3b-a8743546d245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff09c94d-075e-42e9-8d63-609f79b34200"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb704a88-e9f4-48c3-8274-465f1a078f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9893215c-7a75-4b1a-b11b-bb20757e264b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b702a9a-7d40-4317-81e7-fd063b967d15",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ddd057-101d-492d-9a33-9fbf6e831dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ba92a5-d53c-4d3a-9d0f-ac6624648381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6829c54-0d8d-4b13-b146-06ed1d0ec7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4917e66-b9bc-4921-bd37-c7f46b1baa6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c546a2c3-91b7-4097-be40-5e3fac9b4d3f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "911a8a65-6b69-4840-b027-d90670a19ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d3ff6f-1482-444e-a32d-ff24d9cfbb62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3995edb2-5b3c-47e0-bc42-7a9627483499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5c1f9a-42a0-4b0b-be3a-320f229d6eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bbd77da-3f05-4f19-b25f-c7e6bf81be9e",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd304451-bb66-448c-8e1d-ddcfddb55820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a9faf78-6c3e-4281-bba4-431cf889fce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9106d33-034a-4aa4-808d-85072f00106f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dde71fe8-397a-47d9-82c9-f27d1540b966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f51d52c8-baba-4ce2-ac43-d9fe3fa1446e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35577c04-a3c6-461c-82bb-fed7f071e48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4363a1cb-4628-4f1c-a169-87a1770e502b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9a4925-5a63-473f-8dfd-a3bcca6fb9df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b83dd9f2-e704-4706-a61a-f4ac4680b7a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307c973b-b7fb-42f6-9ad2-4d611ee0e3c0",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9ca1eb-6721-432c-a169-24305170abee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9afb4e3-32db-4299-8808-72a55bbda9a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e465e857-172f-47fa-b878-ffc6793575b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af5691ad-92ff-4c24-b664-b32555aed56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b37a6863-0c3d-43cb-87d1-1775c5d293fd",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5772221b-c8d6-4290-94ca-0f875054618a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44b78d53-cb0b-46ce-b920-9352f5d14e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5549dbda-c1b3-4ba3-8852-4e257c433a10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b624ebcb-9232-407f-a436-a2e5c14b4cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05d0e150-af19-46d9-b281-8de3f17392ff",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b54493b-4346-4fb5-9f28-16939d5234b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ccf0a89-5219-4105-835f-eaf956c4299b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b9716c7-6b20-4372-8035-f9aa71fee37f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9feca4af-8cf6-4bd5-a769-2368d8f93612"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4b8eb2be-5ea3-46c8-81e0-7421b095371f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "afb89ff9-4b2f-4c4e-919a-25cc7ddb0082",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798ff271-8f7f-459e-83cb-4e635a56fe81",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "4335b1d1-6c35-488c-b8e1-e4c781873e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade3c70b-2e83-45bc-8726-bedfaa16ea80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a4084840-d517-4aae-bda0-0c6f9ad61a1d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b1fcfe5a-12dd-47cc-9240-71a15dfd7057",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4c34a662-c17d-4c62-af59-cf65fa76643d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd7df300-e88a-4ea2-ae9d-21aa46f5119b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "89b62a54-9752-4086-b66b-10cef0ea1987"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da72cdb3-a948-46a0-bc8e-772b44eb33c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "824c9f8c-3625-41be-a24b-d87726f61bfc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e41f18a0-beaa-4907-8c06-7c21652dd189",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "477fbde1-bd3f-4b66-9fb6-96ef9fb0be2a"
            }
          }
        ]
      },
      {
        "id": "ca19a19f-9c74-45e2-a788-81d7261c6ff1",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "60bcc745-f5f9-4025-86f9-e76e9f204021",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cc9a4913-3742-4379-b6c1-fbf511c1c471",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cc39f67c-f105-4ac9-9fa5-ad11905b4a7f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22aef3a1-cb09-4f83-98c4-c673ed0f70d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35946715-a1d6-4c5e-a5f0-bc9705994b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b42462-eb08-4d1c-bbb1-e2f2d9263b49",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fd18ef-6581-4bdf-87cb-bf915074bdd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dd131ae-ce26-45c6-98e3-9b6b2683231c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79867efb-7cc1-4c5c-aae0-199357c1e21a",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be343fe3-256b-4235-a7f6-8543ce299ad7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e4b7a1d-01b6-4a3f-9a3b-2d63cb41764a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e06cf5-d7bc-4700-9960-2e893686aaee",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ab4e8ed-9927-49a3-b9fe-bc4bec00da1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e696fa0-246c-4b83-8bc4-fa046757eeff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd2400f-a437-4498-954d-27cff2cda133",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1804b811-c15b-4787-8724-4eba826ec851",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00f68694-d5d4-46ff-a2f6-bde3c9ff70eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf7d337-3efd-45d8-8eb4-a65938d63eae",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3711f8a2-1b7f-4507-a599-b851be57889f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d170b40-aec9-4ab7-9659-8a042fbcf996"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a542dd-2e36-4ab1-a478-3b9b53e6a167",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf458480-3cb4-444c-9b5e-2ab8d43333fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9f1f672-92c7-4da2-a533-f9ad9092fc52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a1c189-ce68-4ad5-b680-0ca56fd11bb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f7ee3dc-f3bc-4725-a684-ce8abc897f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86c5b615-e7ab-4a51-866e-6e4267933730",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e6fde4-9dcd-4432-9b91-3788bb3b92e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f0392f4-9637-4e90-9599-65acb6966bda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c133bcf4-1684-4cab-939d-39d39895fa8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a43728c2-c62e-4b9c-a746-50ebf6d77448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96192f7-60fa-401a-a73e-2fb4691b5502",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c664e810-6574-4a96-8b30-5dc015d42a90",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d485d8a-769f-4120-82f6-107f0a3c3120"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa0ea899-ca26-47db-8379-fd8f299bf09e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25137ef6-500c-4903-a7d7-34b4cfec6935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49025272-9303-4b57-b181-d7111616331b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd02eebf-4995-4dcb-a04e-de7107616bb1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43196747-a99e-4969-8645-da5a5f7f6c1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a65783a-3211-4e08-aa4a-2056bf8f3441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67f25556-ed13-442c-8a90-1d654d518faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "237e31aa-0aef-4512-aabe-42b9847fbec4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b58161da-047a-48e8-819c-4fba7ee2ed6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44c95287-d75c-4534-ad76-d9fe240a5c8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76de9499-b1dd-40ac-bc01-3dd79759faea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc538ad9-3c4d-4f5c-b449-fd53432f0938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b49ea3c-ead6-463f-85ab-60e962278e66",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b804d7f-936c-4285-985c-680419a57f85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7303287d-cb4e-4509-9fca-6ad9cb3771fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "440fdd6a-a238-413f-922c-ec718859c898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f496733-4336-44b2-a1ac-f8aee2ea22d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "417febe8-f2c3-4086-98cf-97d834386404",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f052931-0540-4372-9835-f66fabe040a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a104ba6-85a0-4dfe-822a-9723acae19f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc6698e5-9662-4f99-a05a-ee97de7256d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "859eeb47-99b6-466c-b4ed-c8a1675843c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a77e3c0-6769-47e5-9350-23f85e919354",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afaa4d91-4dfb-4b95-b797-aed1c3fc248e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f495559-d254-44a5-ae51-2bf4537a0536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6a35364-df04-4335-af6e-f7b69f1781ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c3b051a-f3bc-4c5c-9a6d-f069cdf7311d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cc6a98-be1b-4bd4-9b81-32ee2c42edf6",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c27c8d90-5e70-4ec9-b542-f13b8a1f399a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "14f3f4e6-8d5b-487d-b360-1112112dea15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf626fae-6f50-47c0-9cfe-54c02d7d3504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "818d1b17-caa6-47d7-91ed-e531bf57a7a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2112068b-7372-43ea-8f25-c0d37e40ba6e",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0d539d-dae0-4e2d-9443-7afdd8ceef2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58983e48-9cd6-43e7-8a87-c994bf400e3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "516b06db-abc6-45f6-b30c-b5b95cd57035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e74c56a5-51f7-4745-bdd5-3f0a64676312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6155a5f0-b3a9-4c51-b7bb-50d47ac976e4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7d1cc06-f775-44d0-a45f-ca7fd698e574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51608dc2-4549-445b-98ed-65cc67ad2bbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b32e15-3fd1-494e-96e8-8fd13915f83f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b951825-c8e2-469d-beca-e1394bbf629e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f856ee7d-7362-49bb-adb5-1c4757bc1572",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a0a201-3eda-498f-a929-aa9442d797ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eeff4de3-37a2-4f75-836d-4c3d3911ac0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11889343-1d67-4cf6-8b94-434f75b6e71c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5a2bb9a-e8a6-469c-8f63-7c13b33cd413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06eb60f0-9e5e-48b8-95d1-8ec28c2a9a10",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be8fe7e-9320-4436-b220-4a8c3f33b47b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d172ece-0688-48b1-9f5d-f4dc9a64aa09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87ab63cb-4f3d-457a-ba70-1ed5233146a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0322047f-2c07-40d4-9005-eff094c29e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b390c7-67f2-4f43-b089-678ccebef086",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d3eb07-8783-4a6b-a312-f93c3388ca87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fdcf86b-ff8c-465f-8038-97a38f81622f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3df2df4-7982-4362-9b49-8af420a022cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "822a19e6-289c-49ed-bcad-2a69ba41f1d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1fb144-c131-4e4a-97af-74c32acc8b37",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25437afb-a359-41aa-b638-f1c1b288b980",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13b4f557-3ab8-4620-aa1d-096aa6b7b4cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "462847d5-c061-47d0-b749-742e306f44ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e712ce4d-c613-4137-838f-9f8a46ebf5c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "387704de-4e21-48d0-9076-44982e808500",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3af3c95-4080-46e1-bd57-e4106563a290",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2112d655-d5ac-417b-8242-4024a168b1bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06942454-3c5b-4d10-addb-403fcfbb68c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71509697-7e95-4bac-8919-10bf29b4ff36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "389787c1-c87b-4a06-a5da-72a6c788c2f2",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a0c85c-69fa-4a40-b29e-acae65497777",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "540b5c4f-5b82-4c4e-92aa-9cc3e2565054"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a452c7e-045e-4c13-8ce9-ebefa3e026ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "072cd4e0-7f94-4ee5-aa2d-60855078e516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98be1b4-2b46-4ed4-b09b-309ea6912cdb",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b969866d-8bed-42ba-9ffc-13ea03f72675",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f2ad8eb-aff4-488a-8f08-f3303b131a86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "732e1787-5200-4d6f-9808-bdfc7223fb1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ddde63-a2db-4e66-919f-2eeef5806a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b903327-e249-4690-91f0-8c819b44e865",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "234e2a87-4076-4feb-af3d-b7513355346e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a32fd071-2fd9-4d63-a4b5-097d45c2a8c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a16b640-0b43-431d-8f71-829ccc986085",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "168e852e-dbe2-4044-80a6-263bbd2308ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d1bcbc-97a0-4d0b-857d-5cf3b338354a",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2d9d272-004a-48d0-ae5f-b63d7aac5e06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57169e62-0096-4137-bb66-331cf047a080"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aafdb2a0-fb78-4dc7-9a10-a30e87fdc5f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dd8610e-ae47-4dd6-a856-67027fdb4665"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af05d4bd-b80b-4e53-97e8-92c21d6a6a5f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c812d3-5ea8-4b95-afbd-e9d487649e92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c39a6c0-9309-4e70-87ca-5d67170397a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c33806e-4d90-40ab-a56a-f4b1e9939c00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ccf8e0-d416-4fb7-bfa8-97547bceaede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58aacd87-9e23-4490-a20e-c573e9da7367",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15dde9cf-fa5c-4535-a750-2d93fae2fbcd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31d86a1f-9d5f-4fd5-a47a-c6716985f647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa05286-ac98-409b-b6d0-bbc907f84f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f7995d2-e1fa-4ef2-a611-9410f1ba2c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e009f91-dc7e-4c41-b517-a621112f4fb3",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bdabd02-d162-49b6-b3ba-5cc39082613c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e438af4a-63b0-4213-b408-99cf68361b6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10597188-cb7a-418c-bb34-4dc53dde9e95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1306b11-bd1f-47da-a0c2-cfeaeef953c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ffe0de-599e-4df2-86d3-a55e628e9592",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172df0c5-bcd1-422a-ab37-0798e0db6d6e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a6d08bc-21f6-44c5-83ab-5538972cd641"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abb6049-cfdf-42fe-8aca-d457aaeeebc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0bb84a9-fdb6-4e60-99ba-8cf444d9009d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa06e11f-ce41-4dce-bea6-b6af092205ff",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e4ec9ea-d496-4a70-b47f-ddf42725113c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68e6abee-9210-4a54-a7bc-74d4a439d1ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a265f65c-efa1-481a-9909-f1cc6a6eb8ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25008fa2-cfa4-4853-8805-b9b986a8bb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ba4eefc-fff4-4963-b323-b06464526f22",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2fefa7c-8540-4881-b99b-7388ff5f1c19",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57651ab9-4bb6-4182-a054-5d5a6d7336e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa5c18e-73b7-42af-9d75-ed081c51c593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0763af2b-574a-470c-bb9e-4c82d82cbca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e108e7bd-13e2-4f84-89e9-96eb7f2717a3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c38c7a6-d1a9-4d62-a801-3f42d983eb1c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d5c2767-e611-4321-8ad3-eb85560f26f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f1dff5-f544-48dc-bf16-f6c84abe78a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae9ee3a6-6a65-4096-a313-25c81dc77532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e01213bf-0055-4b33-a5a6-504654f04600",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebac161f-0e0e-4f71-b7d4-4cd5fd71f442",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b88af7cd-aacc-4fdf-a67e-a6ef24029fa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df953a71-afbe-4bc3-b778-712244439610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b7636b-547f-4724-b8c3-49b3b787686a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d37f6727-9ceb-4d8a-8117-23deca30777d",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d1463e-9acd-472f-ae44-6d385d3db5fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5e68f5-3dd0-4d8c-b398-20a1170ed1dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9604ad-6a3e-4664-b438-280aa47ecd5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5bc95b4-1f93-4ea0-ad50-73d48bbe9f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "317cc0b1-2e64-4a17-9a2f-8131c697f114",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02f1c665-d969-43d5-90c3-f77e79a1602d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e83fe564-3d5d-4fca-aaa1-03aa6f8bd76a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "941d07d7-7c16-4c3a-90b3-0df7ea80b8f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a1a555-283e-4c8c-862a-2371647860c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "529a51bd-5c8a-4ef6-9989-ad4cf89608c6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcea735f-9ea7-4d36-b454-e096355d9aec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ea4fc0-72c3-49ed-9e2f-aa88409fa4cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d31cb62a-f1ef-426e-91a7-0aef26d7d0c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a4c4637-b5de-4a66-a333-73564de77c80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b368fa0d-e2e0-463c-a5e0-0d1540973b55",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c0b6c9-f507-4a7f-af3f-e1aa4dd4fc55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e2d697b-2fd5-462e-8cb4-ff9e3ea494e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73eb4396-181c-4057-b18c-c4d22e0d68a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a2cf8ef-a1ba-4b12-83f7-bbd96bc14a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d687aa4-acac-4c05-a123-aa93455bfdd6",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a99215-90c1-43cd-97d9-27b6f09f7244",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8800d14-52bf-4b86-bf09-dabdec51e5c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdcbd037-1f61-40fa-9e23-eb61d03af896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8020a75c-fd8a-4c76-bf3f-156421c25cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05aa7168-a9fb-423d-81ab-355984a0d2a2",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4455551f-41f3-45c4-bb2e-3cc9a2760bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "863950b2-8580-44fe-a051-c65e970f9bf6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa26d979-fb5f-4f2d-af09-d4f228aba409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2267651-0c68-4be4-95fc-c115676431a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a7a7ce-d80a-4378-8ce3-0acf2ccbcd62",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f47b42c4-abcb-47f6-9d2b-aa4715ec9a76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feddcb3b-1ce1-4e3d-a1e9-6851704578d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06da2ea9-f867-46e4-ad24-3edb7e4b3e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c376282d-1571-47f3-aa71-b88315fdb772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00db052d-6ab9-4352-9930-97158ac011dc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eb9096d-8201-4edd-a5ea-eb9c9e653e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daef636c-194a-4db9-bf9b-ed7998b688ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c204d7c-b307-4717-b3b6-eb812e01b40d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b329957-5828-430b-9f09-2c4acc6b7a05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca49d8e6-8e7e-43e8-a1ec-b5c70dc6f4b7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "039b60fd-4bb1-4f6c-92a3-6535d30f01f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78096916-4282-4b73-a941-c40424014178"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7da63bf-aaab-4958-9081-265bedce3ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e1636e7-d25c-4cb7-b66b-b8277f10c0c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3806ce67-4c30-44ca-a4aa-333a89199a0d",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f50de114-f0cf-4cf4-b3da-2faa99b41ba9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702c6df3-97a7-4141-8400-c0d13147d9ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc31a0f8-3ae8-4cd3-b728-552c642d3104",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4201654a-60a4-455b-921c-922c079eabbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702d72d7-073f-40fe-9e65-de4afa9e15b6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc1cbe3-ebd1-4870-8f96-a943ed6d98b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f299647e-e38a-4fcc-a2ca-cff8e8ed2ddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f48a59-e1c0-42c7-97f5-ed621375111e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd1f3435-e89e-4531-b3c1-2713d11a0897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6075eb6d-cfbf-48e1-ba35-e008a82a8f4b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a95630-1d52-46f5-83da-61193c7b1dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6750890d-7805-4aae-ab5b-137b7b1f5a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86bb86d-0fef-4c44-994a-df29e1f4c4e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf1d521c-d449-4710-afa4-4fdff7a06dbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef13c88-8589-444d-bc92-efe1975fca6c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da4c1ec-78d2-4aa5-a81c-7abd71cc2efa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a61eaab-96c0-47b6-95a3-f577e6759bd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1616ce29-1d67-4008-a819-0d3d5dd319c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29ba490f-9570-44d9-bd30-dea0846bdf51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adfd5476-0c0f-4b23-ac13-5e3d1546ba6e",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d007cf7-5277-466c-b070-bc0fa295d194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a83bdd90-00e5-43cc-8527-b09ccea8cb2b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b30bc0c-74ef-4fc4-8058-ab66bb0537d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ecf45a0-57e0-4c4f-ba95-7b36bc042284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bfb38c2-f5a9-4db8-92b4-778a29540c21",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf42596-3eed-4500-aba8-89d03f909708",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c99dd9e-8ab3-44d8-a2ec-24545e001f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db52fdad-0f20-43c8-93f3-96ae76b86854",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc1cb909-66bd-4223-aa5a-37fbde11e388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0a827b-0802-4826-9c3b-1ef292e1daf8",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f00140-db54-47fd-a187-6f63e318d5e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f49388f-b946-4f7f-aa6d-8ead7392912d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0f0816e-5a65-48d5-a519-54aaabf7de8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e255ea-f681-4a6a-a7ed-9185862a0b59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b26cf3-5b5d-4921-8f7e-0db025a3e351",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76191bf1-9565-40bb-9013-09a65f1ca321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec12bee7-2ee0-4e84-9a5a-8f1505077675"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9647a13c-ff78-44ee-8745-e1d8d4554071",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "676dbfb0-cb18-44e7-a44f-b5e74f40bfcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61653594-24a2-4607-b9d3-fdd0bb168a6e",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b02f33-a398-4d2c-a033-83d9ec8a42aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9942c1-87b0-4e81-9816-6a5b6fb45471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a908a8-7eb6-4b97-bcdb-d1213b6a78e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c9a2386-a066-4275-abdd-b5b9a7350821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20369299-c5f0-4bc8-afdb-568100fb1801",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd40e2b3-dfe6-497d-aa5d-d3c7fbd16b48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0251a0ba-3345-438b-8865-c8055212860d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ded9e65-0aa0-4947-a1af-369b93f70411",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc18afaf-f4a8-487f-bae4-9fae8465c073"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a7b326a-bce8-4b35-a99c-7a7c7c31c4c5",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc487015-e9d8-4787-9c5d-a606180efe2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75fb4a6a-f417-4065-a1f4-f961394d2501"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b22f86-be0a-457d-a742-97b042254b81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d965ae26-0953-4d77-b2d4-d574ac844514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9feca207-4833-405e-af31-25358af634b2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acdde2aa-40c3-477d-833b-c5ed4c0031b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "027fadea-1d01-482c-82ae-5f1aa48ac345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e034c508-b104-4c23-9c87-e8dddc77ddbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66c1332-87fa-4ce2-bdb1-05ffbbad65e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90959f6d-62e7-4aba-aff3-f325ae7a68d0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd336a0-f7a2-435f-94fe-2093ec394ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba931cf-dda8-4dcd-9420-4ec61356ef4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08a0d41a-3905-45d2-9215-942cbafd9ed4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f75945f0-ea12-427e-9a58-b118ba13715f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d30c3a1-b12e-4d97-81d2-b71e3aa82709",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ed9526-64e4-4308-9242-bc587b9867f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e56d924c-a237-471d-b580-1d79aa9d5730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e534f90-5914-4e19-b229-06fe0ca2cd90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba861820-d535-47bf-8cea-513c374eb91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c2714a-79e6-44f8-b0ab-17898c5a60b9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c990bcd-961a-440a-97c6-6cc68977e9fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2928d01-c4f7-4612-80ac-78613b52ce57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b510d543-6253-4949-99b5-fc22f72ae5dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "034c1d27-5c39-4b10-8dee-5f5f18b80465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "175bf67c-ce5f-4d80-82a9-ac4c1f45ee27",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c222442b-4981-481e-80f4-563a960904f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c254b35e-4fb8-4e7e-b5c1-104ba428b714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "534b8625-089b-4ee3-b383-e35c7f5dcc4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63f016c8-5ed9-48cb-b339-1e1e29ba9962"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb766fa0-8de4-4a55-9917-e84968cf91a9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3262303a-a714-4f12-acf3-77e920bfea51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31988fcb-48bd-4d9d-b3bc-461db2ac0575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d0d15c-8133-493a-9aa9-f0a1c0998fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e412d9c-8d52-4c5f-9e2a-9c3bc9e1b8f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7673681a-bf70-4be3-8636-c3d08b845bf4",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3775e78-3bda-4ccd-bfbd-b133fae57697",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26aaa8ff-db5f-4d99-adaf-30ffd9ad76f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fab6a93-6372-4a0d-804c-dbdd59e42fb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e5b621b-505e-4cd3-8069-3b0e10678654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5efd4114-a178-44b2-8a93-1c338d194167",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d621ef20-29fe-4fb4-9748-b762d918cbbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a93bda5-496f-4272-bc4f-691c796c3271"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de559557-9da5-442d-adaf-5e4c569a02bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3103f5b0-1264-4c9a-bb0e-da3a93668932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6265d26c-8b13-48a8-9189-c9d5170d3e51",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c365cc-337c-42a2-a605-fa97a4b796db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ebb0576-c861-4eb7-8e03-6d6763edd6ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36e29ad-1429-424b-9631-3790c7d1ba95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feac7349-ca2b-48e3-ad26-479b1577bf34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c6c599-b88a-4428-802d-c9619dbc50f0",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6e3c065-5bff-4532-b010-fe0c49742738",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89c70dd9-5393-4843-9fc2-fecdd24fc5e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5484d8-2906-44bc-9726-2cb73d33500b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34afe1d2-5d32-4b67-bdb6-d189e75bd5f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece825a4-df06-4b1a-aa42-55c918dce578",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afb68bc7-f853-49ac-8226-5f780d441e0d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f547d831-bfe2-44f2-a916-1d07c0b03296"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4155f501-c875-45c4-9568-77c7511788ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e192466b-3505-43d3-9c74-cc4a99df1c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e862c8-130f-4bf3-b080-35f893636341",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5192cb-6a44-4094-8544-61fa5e39c8f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93a60ab5-96f7-4d58-abf4-5d2f013c0022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7894257a-1d84-4032-bfab-97490372a8a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0abb45-a9ff-4625-b406-d7fb5e0376a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2761b038-627f-41ea-82d0-d5537ece9f5e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f1c78d6-6f99-460c-8231-d90d9d500727",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88170bc9-229c-4dfd-8d1d-da24d0a9d160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57213dbc-6f81-4219-93ce-661b8b1cdc09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f154316-c9cf-4892-a5cf-628efe3bb52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a00063f-5465-46e7-8759-e3a5145dd0fb",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bac71ff-27c8-4a21-b1a0-fead6d08c553",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "177f5171-419a-4627-9d42-c3f371010469"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fca20729-43e2-4f6b-aa25-9c2fc0cdbcf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b8ca6ba-3929-4815-be66-823276dca994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621ea993-e490-4f61-bb9b-5bfb3aa1d865",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d232b9-f8ed-4cea-9c10-db84927bd3cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eadb996d-a98b-47d0-95e1-a95376e719f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3089b891-0fb2-4456-b590-2c93970fe8d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13434de9-fef4-4ef5-9feb-08f79f047f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "369164ba-81f4-40c4-aeae-89c4a74d760e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef38248-c2f9-4d17-9d5a-b81faf92a0c1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96eedc46-eeed-4ac0-a70b-e7610ec162ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcbb1f6-9120-4d09-8ae4-6b1c20dbee5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84fdc885-561e-431e-8ff1-f3390e1566da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0217db31-44ae-456e-b8b4-b918faf0371d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3ab6b9-92f7-42b8-b6bc-b12892e2fbab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d375904e-6359-4af3-878b-2ca9ff8fffdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da81834-b58c-4790-baa6-768c52e4290d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86522a86-433e-4f4c-8d3f-02f7ef35cb5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d89d415-794c-4a46-8dc5-f096ef9471c7",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3da143-c308-4beb-b662-1b37c6ceee78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4be90ad9-7e53-4312-8e7c-f21da05ebb70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91b7fd97-e5b6-423a-a365-80c35448a288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2447bae8-c239-4153-8bac-6d0b221c7faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c06f328d-b455-48c0-8d4a-cfea62df2f2a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0f26105-7081-4f3c-8f08-880ec94222be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebb04d53-0451-4eed-ba8c-f9fb100e2597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54fbc76e-b939-447b-b460-52f88aec5c61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ab5d431-8b4a-404c-bb4d-ed8ffdeabf04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23cc3a2b-2904-44b6-a1aa-c251f723e805",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a566372-48a6-41c5-bb73-2566ef935928",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c4e8400-e345-4af4-8160-7c26cabe73e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7dcf11a-fa46-4cb8-bdf7-750fe72121da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04fa83bd-840c-483d-ae24-7d4a6c82075f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a9cc1f-6809-432a-89d6-158604326c5f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ae66558-84ca-41ec-b744-596e39a67bcb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3deea1b-5d54-45bd-b03c-42da93fb0145"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf897689-e4b8-46e3-a7ae-c2091b1797f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "296b47c7-c5c8-4920-908a-eca17d721569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84820b53-f3d4-4d32-8202-d0d4caea593b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c5d3bc-7cc5-4977-90ec-b5bc96875533",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fda0c95-0e1d-42ed-85c6-63392dded86d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df129627-839d-4212-9107-e29708bb9766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50ed3bad-e78f-4345-a28a-5c2b8cf357c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f722833-c3ce-47d9-a87d-369635f003a4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aea9acb-4502-43df-a060-b4224009af9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a74f9ce9-3fa9-4a69-b898-0b99aa0af420"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50401fc2-d062-4697-b1a1-7b17a0f3f75b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca468805-1a42-4986-86be-eb44bba55e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67de2c9-d353-4c36-9a9f-6e486ed6c9e4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31464f3-d48f-4c79-b26e-e7862bf97937",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66947aee-1d5d-4a6c-b008-482d0a4cea36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dd0906-0e85-41d3-bc19-8c47a5a6d0b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ab8399-d509-489c-b580-5e212e654ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a877139-a27c-4017-b61a-855d151b82cc",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d076ce2f-acc7-4118-95b1-812cc102af5c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91ce454a-f407-4f58-ae16-119bf3a9efd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b36fce-d58a-4a9a-841f-4c95029b0283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6e0e3e9-a239-4739-a66c-1383c2de5f40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca4d601-cd0e-4aef-a74b-9d7f95bb1e83",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "621ea1bc-dd8f-42fc-833f-53c9421541c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48b8ac24-51f6-4d09-a114-480d30a7fd65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e28c036f-cceb-4877-b259-6d2e57283b50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71857606-bd30-4a58-b0da-d6fdfb1aefe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2380efa-6b48-4b08-a264-34d71c5dd813",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b1e25ba-d810-4479-ace4-dcf98caad081",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "459c7415-4349-490f-b382-d96188cd2869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86ea6f75-2b13-461e-abae-b3785b6dcc68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "974c82cb-b99c-4a0c-b527-18a54382484a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08ef3122-9cfd-4ede-9778-462eea32dd5c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398489bc-fd56-4e0d-a9bc-43a7894e74b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b52bc02-45e3-4039-8aa9-4b9dea84c5a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3137fd68-8c4e-45a8-b1e3-58262609c455",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f814e7f5-56fe-46b2-ae6f-b5d54c3fc0fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d35d32e7-7a84-43c7-8fcf-f57dbda4a1e9",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14725f74-47ef-43c4-b74d-5729a88c5450",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f7b647b-7589-4e44-bf89-dcd3631ab00a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc13fda-5b1a-4537-a86c-39a4f79457b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55c967bd-64ec-4ce7-ab47-0b219bacbe52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "596c9830-68ae-4f22-9acd-fb4c01864e94",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "516a4ba9-0b63-4347-a565-52e5e8cda2dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c015b508-a07c-4f0f-a89b-30731c585065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77faabe8-8937-494d-b496-b02e10148f9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61109d80-a52e-46dd-8c3b-1dafe403b998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5a6defd-9f7e-4deb-a53d-1af5928f5f06",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0b245b-bb46-475f-8fab-71217b94a644",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ca5ff0e-d0c9-499a-90c0-b8d4a34d0ce5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece50ebf-cf4a-4e25-9f2d-c25c5743487a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b586633a-6a00-4782-a42b-1b9343a2bc4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "015c8968-14a3-4bfe-8f26-6323d6ad2464",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4c2a47-5011-42fa-9ec3-2c4d0333fa82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90c35a58-e389-49aa-86cd-9925e5085a83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a071d9-52dc-4d4d-9bbe-6486cf697a5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "430ea283-79e5-4e70-9237-cf8b09ce39d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a20a8fce-9186-4ea9-aa85-7df47e369a53",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306f58b8-f21c-4c1f-908b-0ba8299249be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e8b74a8-e480-44e0-9cb3-fdd4eaf10581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bec0fb16-4fb5-40aa-9b05-cb10bc3b7862",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03a49fd-037d-4d5a-aef4-d531d62892cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f292569-fbad-4763-a42e-eec728823196",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25707737-7f40-43f4-978f-2e972112e5aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22d41b72-f484-41bb-b9ea-074d7b0fc2fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1d7e98-bb61-474b-b5af-5427bf59340d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db098598-d1c3-4254-ad02-28bdecf458aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f7bbaa-50c4-4c2e-912e-dd7b35cbb2ae",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd9a347-c4f4-4e11-ae0a-511e069088f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59e0d2d7-5526-443c-ae03-1570617e4b60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8b6fa8-08e9-43ce-af24-bdd0acafe650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9c9c785-c1bc-4403-b0b5-f712b013bc56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b37d1b-ab66-4712-8831-e899fe1fb8c2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303206ae-c654-4d59-9f11-377426cbe355",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0ba5fcc-2d53-42c3-9232-2f761004570e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "799d4f63-0bc6-47b6-b522-7bb7a720a6f7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a2ce128-274a-495b-ab4b-8b9d45e495b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab82a521-5165-4ea8-b6f9-d63da5226271",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b56afef-4665-4b9f-830a-4e280c92bf50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc05888d-ed95-4ab0-8ea8-d42977eb39d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3821d20-3255-4667-a918-a952599d6f8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea8743d5-92c2-4334-8edc-66b77488dbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f97482c-2c6f-42a5-b46c-c07152584892",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c84c5e-e74a-42d0-8370-4228ed398c63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8e2c3e7-7595-499a-ba7c-2335a07dc4d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5b819c-7fc5-41b6-9d24-6a2e58047c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "597fcf2c-cf8f-4491-9083-8139e894d79d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85145a16-ba75-430d-b6bd-9e71344de0d3",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3773c0c-9879-4d51-9d0d-c9754e1688e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6126c07-1553-4d1e-9ff2-73f34fe1d42a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8af3686-032f-4068-8de2-8343f8671390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a78c3239-cca4-4a33-94ee-8445c971c19e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04cfdf20-655d-4466-9e4d-8238c2fd6cbb",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64e30f3-242c-4fed-8016-f5bee9d214f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fbdfa04-1253-4f6c-872d-2051b170cf2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db503fca-501f-41ef-89bc-62f1c1e72171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31180967-c881-46ed-9f22-7e3141d4ac63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630f07a1-b7b4-43b9-870d-5950e51f2263",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a0e9c1-89e0-4f6f-b90c-2515e6105d0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46c89e98-981e-4391-9647-db5bd6d91e67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff650ab-47b0-401a-aa72-ce42e87f4206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63569ba2-c4ad-4057-b021-61e7d3d14d3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477f01fb-8f1c-4353-96b5-82a33bc2341e",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b2a853-b36d-4b94-bbb5-6bf34c9baafe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71fa08a9-3708-4789-ba91-d909a9b7c2e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5c3f80-9322-48cc-a93a-a51bfd206059",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c64c98e-39ba-49fc-9d95-81eefecdff35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c856ffdf-34ff-4f8a-a2a8-6571614e3b21",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398ebc67-670c-4ce0-867e-2544a275d86b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d6c12f9-cfb6-4890-9b6b-1a6da9aa6968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3473d5-ad24-4ba5-b4ee-5ed70644168c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99fb0b1b-c6fe-4bd9-8344-8407affe68f9"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85ff5c23-d1f2-4e8d-91e8-96c5349bf1d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6fff45d8-269b-47ef-b1eb-92b13337ffed"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a098b576-c4fa-4abd-8ded-253489f2d632",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f22ecda1-21d7-4dd8-950a-c3786fbce329"
                    }
                  }
                ]
              },
              {
                "id": "d44e18f8-5c75-4916-af19-b383a9212fde",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b1433e7-525d-450b-9443-892c588aa4cf",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77919856-fddd-4e06-b0de-d558c6c63c84",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8ab3adba-046f-43d2-8a64-6c7937e3eee4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9093b057-dcf4-4d17-9b89-a9c5465d398c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c328577-6f48-4780-ac29-c4aee68ce4ee"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b6e946c-961f-4b76-befa-988bcbb46465",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8df2bb08-120e-47cb-bbf2-3b719bd3df65"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cffc6953-83bb-450d-a0b6-1ec1e76797dc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5490fb22-b161-47b2-accc-3da717ef8735"
                    }
                  }
                ]
              },
              {
                "id": "35d78489-20e0-4475-9696-1ae33ac5e0e9",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "987487f2-464c-40b6-a3b2-4175d640a7ef",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0ab3aa-6d64-422e-b680-ff058a88debf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b23b4dfd-0f22-4b27-943a-3f6431115db2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2e4461-7e85-4690-9d9b-c43d6502caf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aacf0f6-2ecb-4e41-ad51-1619639be413"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "46a10f4a-a386-4322-b0d8-2a34689e41e2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a6d194ee-1745-408c-8263-a74d088ef93f",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8be12f59-5506-4c4b-b5e6-369baee04bbb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9926b3af-7045-45a9-a7de-fde671549f54"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "276fbc9f-bcb0-42e3-a6d3-058621f3dd83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01b881bf-8d67-4667-9eb8-08de2fe990e1"
                    }
                  }
                ]
              },
              {
                "id": "33496d9f-6a5e-4fe1-aa59-209884f27ae9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0aba35e-582c-40bc-a63c-ff6b72b5aace",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d2e2f6e3-4550-4482-9d2a-9959bfda2524"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "897acc0e-e351-4873-974d-c8cfa1a09517",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b78d8427-6894-4a4c-84bf-b86bb93c2022"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5e34d91b-2567-43fd-abfb-7b142e67ac48",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2289aac1-6a97-45fa-b33f-7a4baf1bbae6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c32c6c5-024c-495f-94e4-77ae1885e1fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cd78e492-441c-4d52-980c-f267bace6bea"
            }
          }
        ]
      },
      {
        "id": "6ba86fec-5b75-4fda-a87e-35e476419742",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "71aab6ed-e0ff-4e6a-9828-33e25f706a80",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f1c35642-610c-48b4-9ab8-d5a6f9ce4798",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a0d5cfa8-9de5-4af9-a077-54a45a4c9deb",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a8faec-ae60-464e-968f-deabff13aaee",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8ae9e351-639b-4b9e-a0e5-214b55a168e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21eef0d-21d6-4d93-8883-c664061cd518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7dc8bf5c-dcb9-42fc-9e93-a019e0dd8f5b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c59102a-dcc7-4947-a20e-9ae0e1b3dfa1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8e1093bb-822a-4ea0-ab39-452eb5cba8d7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d546aacc-d136-42c4-a49d-e30f453aa11d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62c792ed-1ccd-4b4a-8c77-9fcf2124d78e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ad17fbb-c848-4955-a936-11bd5307288a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "73cef12f-d4cb-4cea-a20e-7ad36002164a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60701b46-bad3-4797-9b56-9834a8abdfd9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c177ebcd-fcea-4096-8409-ccd6e500be85"
            }
          }
        ]
      },
      {
        "id": "2b4fd9d7-64d5-4348-a18b-ff131fb689ab",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "bf6bd487-70b0-4c0f-9a4f-cf4179bd147a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3f14d1e9-b246-461a-a574-0e57f233f2e8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c0ab69b2-0ee6-4c34-90b0-d00e70e61526",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528fac1f-9f73-4c40-8bd6-15743ba71d89",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0837bcb6-cf3e-48a0-b578-ee5a4e17fb31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced0d90e-2553-4805-8a55-f5ff823625b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43a486e6-0202-400d-8fef-4458ca1d2e75"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f964fb7-0faf-4458-afda-a42d750d5cfa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6912c7a6-1719-4102-adf5-2c35a503cfd7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "68df47bb-7bcb-4135-8a20-a352192bbd53",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "de3b9a74-c15b-44b5-866b-baccc45a73e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6fe537c1-c0ec-425e-a386-23c8f7c878ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "df666f45-c3aa-4cd7-8c00-92dc1c9135f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84431369-7731-496f-a5aa-85c8dc6af6e8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1a6b4b4b-80a7-4f0b-bb1c-bf759548f893"
            }
          }
        ]
      },
      {
        "id": "42327c2d-6254-4ae0-974b-15344fa7b26d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "26fdda4b-a6d0-4310-8c14-331898d8f102",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d987f4a9-9543-436d-9c83-7c574213a3f9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b2ab2360-0d48-4dd2-a547-614f76378480",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8da14757-c557-4705-9e55-5a23612257dc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "667edb41-e627-4db1-802e-da6b86222840"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13643c8b-b5b0-425d-875f-ac344cb8ad82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c4258b2-e88b-4840-8739-f4e698f7eee7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5855493b-9a5d-4531-9ded-1792ea8975f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "053bb1b7-d316-4535-8fee-bde6393a00f0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "18b8d9c0-95ef-4fae-a18b-d1bb1ad01226",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c9f2b44b-ba96-4544-bb5c-db13214afc10"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae28f288-6c16-4411-a956-e3bc8ab5836c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "64c81e92-0dae-480b-a75e-ccde4e02ba00"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4be3fe55-9d07-4be6-9576-0a7746c8df2f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8480c90a-b489-4131-ad0d-bee42a6be234"
            }
          }
        ]
      },
      {
        "id": "8072906c-2d23-4712-b9f5-6e60a7ca12a1",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eae0d50b-ae23-4f45-83b8-47b9cb1da950",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f298770f-98e1-4f74-a6f3-dc2939a2605e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "1f2026c1-e56f-4a1c-a26d-0316ce700757",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5b2bbec2-415b-4e89-94f6-9d3fea3047fa",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "172bde88-5385-4f1f-a60b-530d58b5f185",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 3
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 570,
        "pending": 0,
        "failed": 79
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 3
      }
    },
    "timings": {
      "responseAverage": 72.92882562277586,
      "responseMin": 6,
      "responseMax": 2380,
      "responseSd": 227.47642775311536,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1696293227253,
      "completed": 1696293259641
    },
    "executions": [
      {
        "id": "e66a8336-6abd-44b9-a42b-3afdaac756e5",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "14717176-94e1-47a7-b5c6-46eefa8909cb",
          "httpRequestId": "05419edd-cad3-4638-869e-ba001508e7ef"
        },
        "item": {
          "id": "e66a8336-6abd-44b9-a42b-3afdaac756e5",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "86666653-030f-4aef-a04a-7f5f204a4394",
          "status": "OK",
          "code": 200,
          "responseTime": 52,
          "responseSize": 0
        }
      },
      {
        "id": "5840ae5b-37f3-4264-88f2-d9a47ff83262",
        "cursor": {
          "ref": "1955b816-9356-4d25-85fb-0476d48e91f2",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "b0819493-47df-40d2-b146-963a91720b47"
        },
        "item": {
          "id": "5840ae5b-37f3-4264-88f2-d9a47ff83262",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d51a65e8-1c2d-42ac-81bc-255525110333",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "1647df95-be42-4a17-81e3-8e5541837170",
        "cursor": {
          "ref": "3acb35f7-b985-4786-9e67-273b01d9ca2c",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "72c0c6d4-ac27-4091-b01d-c731baa7d3ca"
        },
        "item": {
          "id": "1647df95-be42-4a17-81e3-8e5541837170",
          "name": "did_json"
        },
        "response": {
          "id": "25cf41eb-72ae-4d05-b07e-0cca926ca458",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 274,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346f9048-d03f-48f9-9351-5cc845098b17",
        "cursor": {
          "ref": "a0ec84c3-d6a0-4084-b330-af71d440d756",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7bb0d59a-5878-42df-a609-7cc8f2e34720"
        },
        "item": {
          "id": "346f9048-d03f-48f9-9351-5cc845098b17",
          "name": "did:invalid"
        },
        "response": {
          "id": "cdd26c14-1585-47e3-81c2-f88c0000988d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346f9048-d03f-48f9-9351-5cc845098b17",
        "cursor": {
          "ref": "a0ec84c3-d6a0-4084-b330-af71d440d756",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7bb0d59a-5878-42df-a609-7cc8f2e34720"
        },
        "item": {
          "id": "346f9048-d03f-48f9-9351-5cc845098b17",
          "name": "did:invalid"
        },
        "response": {
          "id": "cdd26c14-1585-47e3-81c2-f88c0000988d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6451d1-51ad-4793-ac5d-c576997bc590",
        "cursor": {
          "ref": "d6eddce0-9991-41f4-88d1-adbcbc0b8700",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4c5ec975-f51d-477b-8cb9-cd1f24867fa3"
        },
        "item": {
          "id": "eb6451d1-51ad-4793-ac5d-c576997bc590",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f0bbd2b6-bcd3-4d73-9581-5a4661432e29",
          "status": "Not Found",
          "code": 404,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfdd64e1-a630-47e2-b560-fb0ffeb3690e",
        "cursor": {
          "ref": "7a9d5bae-c600-4b5a-88ff-01a45eba2b2a",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "65a18bda-53b4-4b5e-ad0e-f940e63c24ee"
        },
        "item": {
          "id": "bfdd64e1-a630-47e2-b560-fb0ffeb3690e",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "dd0048db-397d-4b89-87ea-1f0f0ee6c99b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 36,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1754dd73-d8b2-4088-a3a5-05b01a18cb5b",
        "cursor": {
          "ref": "57e28ff7-dbb5-433f-b1b5-b202a1eb3fe1",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7f53a0e5-0a36-4c18-9486-b7a2564cef60"
        },
        "item": {
          "id": "1754dd73-d8b2-4088-a3a5-05b01a18cb5b",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "263c9cdb-7bc4-4525-96c5-536c12f93243",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7ad97d-4264-4611-99b1-ca8a1234c5d2",
        "cursor": {
          "ref": "b5474c75-2444-455c-add8-8e9bae56b84d",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2025d77b-cb6a-4f30-97f5-afe183df1c22"
        },
        "item": {
          "id": "3f7ad97d-4264-4611-99b1-ca8a1234c5d2",
          "name": "identifiers"
        },
        "response": {
          "id": "c5a2207c-2d62-41c5-bdaa-2c0393e56c7d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 74,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 404",
              "stack": "AssertionError: expected response to have status code 200 but got 404\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "19503bc7-67e3-44fb-8bf3-d40280a1fe29",
        "cursor": {
          "ref": "82bfba86-10a8-4080-a153-2263d5a0899b",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "bf7f1460-2c82-4f88-bef1-8c382c24607f"
        },
        "item": {
          "id": "19503bc7-67e3-44fb-8bf3-d40280a1fe29",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "7b960ceb-dfc7-4c69-a31a-99000f9d5db0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5efcb2e-bb83-4ebe-9643-9f685da1f7b3",
        "cursor": {
          "ref": "1f2cd212-4e0f-4b4c-8941-15adacb01dd2",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "ace6aeb3-78aa-4fd2-b4e7-d39c361aa6a5"
        },
        "item": {
          "id": "c5efcb2e-bb83-4ebe-9643-9f685da1f7b3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c51b19b8-7db5-439f-804b-46464734094b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb4dfeb6-2696-4f9a-91a8-ca499bf8721b",
        "cursor": {
          "ref": "ed02fb55-20b0-496a-9d6c-183cb97ac7ec",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6b613a5f-ce04-4351-8a73-f00523186390"
        },
        "item": {
          "id": "eb4dfeb6-2696-4f9a-91a8-ca499bf8721b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "26e90ceb-3c87-49f0-a986-660e39ff9967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc54053b-3a17-4542-89dd-8db564406420",
        "cursor": {
          "ref": "533a4dbc-605a-42f6-93e3-5c5aa2950afd",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "322aa920-d2c4-4173-8204-62014d567722"
        },
        "item": {
          "id": "dc54053b-3a17-4542-89dd-8db564406420",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "4ecf2729-97e4-42ce-8ff7-2313cfd303a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fe57c73-b522-4dd5-ba1a-3e858f50fba0",
        "cursor": {
          "ref": "1db07549-3a8f-40ca-b18d-92a578e1cd1a",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "961c4a64-c205-4cc2-a615-28d41778fbe4"
        },
        "item": {
          "id": "8fe57c73-b522-4dd5-ba1a-3e858f50fba0",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b6c4a216-6c6e-402a-8f25-87d1fca0d396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5ca041-6dcd-4ac6-b74b-5c441b4ba7ce",
        "cursor": {
          "ref": "b5bf0b23-4407-4224-88b9-0f6ea4cdec64",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a9d8b2fa-ffcd-44bf-a365-f59a0a5f56a7"
        },
        "item": {
          "id": "1c5ca041-6dcd-4ac6-b74b-5c441b4ba7ce",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a5769423-4e88-41b8-97b6-51b237dc4038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "005aa47d-f357-4a83-aead-3888c24654bb",
        "cursor": {
          "ref": "79e1fb8f-d1db-40bf-b4a6-6352cf76fe16",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e38db55a-3dda-43e0-a128-666893ae7bf5"
        },
        "item": {
          "id": "005aa47d-f357-4a83-aead-3888c24654bb",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a42c4393-df72-4c94-94a5-a4570fcf1e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b02388-deb0-446d-b2aa-814d71ab4670",
        "cursor": {
          "ref": "9e95b2f7-2afa-4a75-b5cd-43257e8d3c0f",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "b083381d-3321-4bc6-8a13-eb2a8230db57"
        },
        "item": {
          "id": "63b02388-deb0-446d-b2aa-814d71ab4670",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "adf5297d-be0d-44a8-8879-fea911e59352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7e809b9-0f8a-46e9-86a9-15c42fe37e70",
        "cursor": {
          "ref": "14f6115a-b8ea-420d-94fa-6aca22ba1358",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "6cc6700c-51ef-4f72-8731-edfc00406626"
        },
        "item": {
          "id": "b7e809b9-0f8a-46e9-86a9-15c42fe37e70",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "474a70e3-680e-4da8-bd8d-366cd21caff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dafce22-7e4d-421f-a97e-bef7fff68cef",
        "cursor": {
          "ref": "f969ec04-2cce-4a98-aed4-6641ceea5cbf",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9eb00812-929a-42dd-8fbd-4242849009f9"
        },
        "item": {
          "id": "6dafce22-7e4d-421f-a97e-bef7fff68cef",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "eb583f8b-ff26-4d40-aa91-47736cd606f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b5ad0d-098d-4b7d-ac40-709c7813f0c5",
        "cursor": {
          "ref": "008ba72d-9313-4ae5-b6dc-d0b4a210c0e6",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9ac6e8a2-df06-403b-9994-4b97e6c7b871"
        },
        "item": {
          "id": "90b5ad0d-098d-4b7d-ac40-709c7813f0c5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ff38eb8e-105d-4117-9029-a9b8a8ca89ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34fdd53f-0eb3-4171-a1fe-f86ede32ed27",
        "cursor": {
          "ref": "65f714f1-4983-4ec4-aaee-967aee511b98",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "411147aa-7ea9-4c71-ad17-9930494e9342"
        },
        "item": {
          "id": "34fdd53f-0eb3-4171-a1fe-f86ede32ed27",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "aa8dd5cb-3779-4f74-be1f-b75ab7c2c337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a0054c-0091-444e-9452-9f134b5c8253",
        "cursor": {
          "ref": "f1896407-66b5-42d7-9f3a-47e4b99e5979",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "583bdbf3-798b-46e1-82bf-d290395a8926"
        },
        "item": {
          "id": "d6a0054c-0091-444e-9452-9f134b5c8253",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6ede53ac-e25a-4236-93b7-354c9619ddb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80710534-f2d2-4781-aab5-961ad37acab6",
        "cursor": {
          "ref": "ef0ba3a6-c304-48b4-9e67-213aa7ee80be",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "dfe8ecb6-a050-4909-bd1e-dd224f394b4a"
        },
        "item": {
          "id": "80710534-f2d2-4781-aab5-961ad37acab6",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "526ee81f-156d-4c4e-ac4b-98d63e886a72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec9b93a-8105-4998-a7ce-893e696735b8",
        "cursor": {
          "ref": "55b87f18-a55b-44b9-a033-998b32b2f97d",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f8879173-21a1-4200-b023-b200fb098fc6"
        },
        "item": {
          "id": "5ec9b93a-8105-4998-a7ce-893e696735b8",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ae951977-595b-4e81-a5bc-7fe552f6c7e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "080da328-2ada-402f-8852-bf302ab81870",
        "cursor": {
          "ref": "888de03d-94d3-4ed9-8a21-63320e3a8d05",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "19c5c5c8-1125-4fa5-a41a-e3eaaac73a42"
        },
        "item": {
          "id": "080da328-2ada-402f-8852-bf302ab81870",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "075bd566-1b3c-44d2-8943-4e534d9fabc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9628d86b-b662-4c5b-9e69-fff4108f6be4",
        "cursor": {
          "ref": "854b27f3-11c4-4b35-af87-2eedde2dce4c",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "110dded0-82dc-401f-800d-791f5bc7a6a0"
        },
        "item": {
          "id": "9628d86b-b662-4c5b-9e69-fff4108f6be4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "e7c709ea-d628-4cff-88bd-61e5f0379a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d9bbf99-6443-4be7-b936-e1aa4ebcc754",
        "cursor": {
          "ref": "55331aa2-4292-4fc9-9ace-8bbba4175163",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "6836e175-1bd7-4f2b-8590-3d8d79ea9e10"
        },
        "item": {
          "id": "4d9bbf99-6443-4be7-b936-e1aa4ebcc754",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "480347d9-4b83-4171-aee1-f0c67627b35f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f0dd23-9d99-4b03-a722-310ae5e5b86a",
        "cursor": {
          "ref": "7072b09a-2e68-4692-9355-3f4ce1fc83fc",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "887157f6-f659-4986-9dbe-104fe3221fdc"
        },
        "item": {
          "id": "83f0dd23-9d99-4b03-a722-310ae5e5b86a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "954fb6b6-de75-4b0b-b051-9e300790941b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4801aab4-3f45-4ca8-b1c3-9970b2696986",
        "cursor": {
          "ref": "6e426902-9038-4cdb-b92a-003c5d4dcd9f",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e17bd9c0-b0d2-47f7-a9ad-959282103079"
        },
        "item": {
          "id": "4801aab4-3f45-4ca8-b1c3-9970b2696986",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e700c947-d309-4096-921c-559572a95fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b6a3c8-b6c3-4800-b1c2-2014bf0ecefc",
        "cursor": {
          "ref": "e2e4d239-684c-4178-b981-c2c8b90db75e",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "1b078dd6-9dec-48b4-ae09-36731afd803d"
        },
        "item": {
          "id": "f2b6a3c8-b6c3-4800-b1c2-2014bf0ecefc",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "da477179-fef9-4759-8687-8d09ea248929",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bab3f5b-f8ea-4706-b1d5-6cd50f68b039",
        "cursor": {
          "ref": "bc488df8-535e-46e0-ba2c-0cef3ef291fc",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "0c4296d5-e16b-44d9-a033-4cadb4b9de66"
        },
        "item": {
          "id": "7bab3f5b-f8ea-4706-b1d5-6cd50f68b039",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "62b144a2-3cf4-4b83-b2ed-2be4af422abf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846e2a71-5a70-4a64-9211-b53db88c1f44",
        "cursor": {
          "ref": "cb3a9ef2-6c6b-4624-a434-df50bf9b8386",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "762c274e-d8a3-402b-a2c4-d65a25e4902f"
        },
        "item": {
          "id": "846e2a71-5a70-4a64-9211-b53db88c1f44",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b513f7f6-2c0b-423e-a786-ee67363ae969",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a633ea5-8935-425e-a65e-ba8d7e0a0079",
        "cursor": {
          "ref": "2ab3c424-0335-40e3-b261-b38788c7684c",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "8c10bb77-58bd-4247-aea5-4f4d58c16b85"
        },
        "item": {
          "id": "0a633ea5-8935-425e-a65e-ba8d7e0a0079",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "41edf593-a914-450e-9688-a4fbcf080a5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2e192d-0520-4ce1-bbfc-183e9022754b",
        "cursor": {
          "ref": "9e32ba0d-bf5e-4607-912d-51e503335672",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ff8a6163-cee7-44ad-86b1-4fa3efe663c4"
        },
        "item": {
          "id": "de2e192d-0520-4ce1-bbfc-183e9022754b",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0609414e-85ff-4a92-8ade-2fbb0b395e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3979244-5815-43a9-a695-b93807dffd35",
        "cursor": {
          "ref": "154cb0c9-6d5a-4073-8d77-359b63a79b9f",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "f4607511-465d-4a22-85e2-158230fd73ff"
        },
        "item": {
          "id": "e3979244-5815-43a9-a695-b93807dffd35",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "948e17bf-8ec6-487b-8685-759f0a5ac8bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0c36625-0277-402b-bcce-efcb89efbaff",
        "cursor": {
          "ref": "1c002844-bdda-440c-8a1a-a92453bf2b37",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "0dac746e-2c88-4ec7-87cb-91949c9ded8f"
        },
        "item": {
          "id": "e0c36625-0277-402b-bcce-efcb89efbaff",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "a31be88a-6732-43f9-b58e-b9671f976e79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd544c80-22ed-4fac-801d-7152d373b42a",
        "cursor": {
          "ref": "dd53a427-a3da-45a9-8e54-5827a2a240bd",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "af617407-67cc-4718-bd86-3eaadd2979d2"
        },
        "item": {
          "id": "cd544c80-22ed-4fac-801d-7152d373b42a",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "26b05d4e-9e50-4007-8d09-2b7126d9c108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f7f7cb5-d21e-4235-9d65-67c9594ba0b2",
        "cursor": {
          "ref": "3cf71cdf-eb9c-4817-8509-a446dcd2c6f7",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "9a9eb1fb-2dd1-434e-89e1-743f80664211"
        },
        "item": {
          "id": "9f7f7cb5-d21e-4235-9d65-67c9594ba0b2",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4eaea0e7-8b66-4f81-aa42-5a7b3d039528",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe40df99-6376-47be-bb5f-6f1d62c08da0",
        "cursor": {
          "ref": "8cc1e099-6af1-4899-b618-a62c34741195",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "9acf60b8-e66d-4635-b1a7-115c9626af7d"
        },
        "item": {
          "id": "fe40df99-6376-47be-bb5f-6f1d62c08da0",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b595536e-bfdd-424a-b689-b8f0261c8f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e752ba0-4476-4ab2-8d3b-284a98c2ccc5",
        "cursor": {
          "ref": "6582b902-84f3-4bc8-b368-ea4a5a5ad548",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "3e1233bf-f1f0-4a15-9979-abeb8b5485df"
        },
        "item": {
          "id": "1e752ba0-4476-4ab2-8d3b-284a98c2ccc5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b349f2e7-22e7-47b9-82bb-c19c546f63e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "408831e8-b4f3-4049-bbb6-8fc0bc573a87",
        "cursor": {
          "ref": "a9c09110-b91b-4fd2-8afe-7b0317e9f454",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "1a24e425-9c5e-42b7-98d5-bf452bf4b054"
        },
        "item": {
          "id": "408831e8-b4f3-4049-bbb6-8fc0bc573a87",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "3ca594ad-bd48-4b86-b534-ef7ca804fab1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "07640035-fe91-4016-9044-04695e862d80",
        "cursor": {
          "ref": "d9533f92-9009-4115-8cc3-5f988de52bc5",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "21cbfae5-abf1-45d9-9274-18607f63a583"
        },
        "item": {
          "id": "07640035-fe91-4016-9044-04695e862d80",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "2713bc82-7241-4fd8-8d6f-2a724d4789bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "bc8a194a-4417-43ec-a744-ffe614bcb26f",
        "cursor": {
          "ref": "e0906b57-7dd9-427c-9aee-ed95027ea587",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c52b0784-a03c-4c8c-b2db-1d8947b30878"
        },
        "item": {
          "id": "bc8a194a-4417-43ec-a744-ffe614bcb26f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "da75d63b-ded3-466a-830e-29e22f9b6b98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e377609e-93a3-467f-9880-2db5689cf373",
        "cursor": {
          "ref": "ae276441-6d36-47a3-8504-744614f4949d",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "54be8ff9-6a9c-43bf-9a78-dd060822b969"
        },
        "item": {
          "id": "e377609e-93a3-467f-9880-2db5689cf373",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bcf60629-7f1a-44c9-a847-a3aa906c57f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "933cdf6e-ef2b-439b-a7e5-53d4ecabcbf0",
        "cursor": {
          "ref": "0dac0e70-d92b-43e9-b626-4445a3b20af1",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "175c9d82-f259-4dcc-9e62-24803725cf86"
        },
        "item": {
          "id": "933cdf6e-ef2b-439b-a7e5-53d4ecabcbf0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f90856d3-9128-4d2c-918d-4617fe3d9ba1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c7ce80aa-0b39-494c-97ca-b43e4dd3afb1",
        "cursor": {
          "ref": "759b3378-0790-4dcc-a5bc-6343b57fef24",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "307bb259-fb57-41cb-9b6f-7ad43326fe64"
        },
        "item": {
          "id": "c7ce80aa-0b39-494c-97ca-b43e4dd3afb1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5cffc7b8-f217-4f73-9e92-bd24177c577e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 42,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0373ec22-b36d-476c-84ec-e21ccc86d954",
        "cursor": {
          "ref": "760484cc-99ed-43cc-9621-e0136b0ff5d6",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "bbc2ec05-0b93-48a7-8b97-cbf98f0e656a"
        },
        "item": {
          "id": "0373ec22-b36d-476c-84ec-e21ccc86d954",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "9dd69491-69cf-4d7b-97bc-2978f99f9c72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "b1181814-bc17-4ed8-9257-b717e1e60cdd",
        "cursor": {
          "ref": "f778e59e-7f5a-48a4-bbeb-cd604da529fb",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "37ceee2a-5546-4ba6-b007-e161f7373302"
        },
        "item": {
          "id": "b1181814-bc17-4ed8-9257-b717e1e60cdd",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "de3ed504-1895-4d84-b487-9e67e33c15d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "443f519a-698f-4f50-b6a4-3af9c84a5ba2",
        "cursor": {
          "ref": "a14072ee-283d-4167-b154-f97a54b3836f",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "ea3fa9d7-398a-438f-8f59-5417c761015e"
        },
        "item": {
          "id": "443f519a-698f-4f50-b6a4-3af9c84a5ba2",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "fd3aae9c-4efd-459b-8d92-cf644727ac6f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "c6dd31bc-4240-4ad8-a90a-1f43a7ab05cb",
        "cursor": {
          "ref": "b84f239c-e7ec-457d-b91e-e92212dbcc7f",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "cb874997-6b2e-4580-9aad-a1eade90dae3"
        },
        "item": {
          "id": "c6dd31bc-4240-4ad8-a90a-1f43a7ab05cb",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b334a4fa-29fe-4d1d-926f-b207866a8b10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "a06c6ac3-cdc4-4a65-a03c-52a57fdfdf45",
        "cursor": {
          "ref": "41e12017-7423-4ff7-899a-6f0005ffbb83",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "ebe6ad8d-1ace-4c58-aa27-01597f3d283b"
        },
        "item": {
          "id": "a06c6ac3-cdc4-4a65-a03c-52a57fdfdf45",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "3b5f74d2-6d76-4afd-af97-16f436bc233f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 34,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "84117fec-5983-40a2-90e8-5380ba54e95b",
        "cursor": {
          "ref": "b739c36c-93ea-486b-b2d8-e25e68413cac",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "cbb515c5-19b6-4174-8e36-38b497191a12"
        },
        "item": {
          "id": "84117fec-5983-40a2-90e8-5380ba54e95b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "774d4e3a-5440-4de1-b628-7f9a9eef8656",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 45,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0bbc643a-e6f6-4735-b7f3-2d30f32ee29e",
        "cursor": {
          "ref": "ee5f7062-ab87-494c-98b6-332a9baa3a3d",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f568c85b-ca2c-47ab-9e13-548be422a617"
        },
        "item": {
          "id": "0bbc643a-e6f6-4735-b7f3-2d30f32ee29e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9cc6f170-5ecc-48ef-86b7-d931795e1dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad602c42-9af4-4ef1-9d48-7c6eded48141",
        "cursor": {
          "ref": "77cea6ee-41c0-4c08-bc48-5c9b6e88e7c7",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a30b6019-bd6d-413f-ab7a-456b26deb78e"
        },
        "item": {
          "id": "ad602c42-9af4-4ef1-9d48-7c6eded48141",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4f50a0c9-0838-4449-8e10-0d9ab92d81f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa936ff-39c8-4535-9a74-516c67be5583",
        "cursor": {
          "ref": "eb3515e5-0b71-4a61-87fd-bb65a158cffc",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "295cd9b2-f829-4759-9b11-b7646d7d4d0e"
        },
        "item": {
          "id": "1fa936ff-39c8-4535-9a74-516c67be5583",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "2744b7f9-518a-493c-9ee2-b79a7f1dc1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05b6e0f2-1e98-47b7-b8ce-7df039e8a5c2",
        "cursor": {
          "ref": "d304b35a-f464-4701-b97f-c19f190950c2",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "bfcb01dd-9402-4fe1-88ce-9fb26b96e283"
        },
        "item": {
          "id": "05b6e0f2-1e98-47b7-b8ce-7df039e8a5c2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "25d4a5cd-fd04-467b-a7cc-8935d71333ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e778a2a-8185-4915-b6f7-5fe540ac7b26",
        "cursor": {
          "ref": "33a4effd-169a-43ef-8588-ec15be6eac06",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b1072ac2-12fa-40e3-8829-52038a4ad57d"
        },
        "item": {
          "id": "6e778a2a-8185-4915-b6f7-5fe540ac7b26",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "27b49acd-7524-456b-8e71-607f9447a351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33eafd10-dd00-4f6d-b9a8-6f45c8b9d777",
        "cursor": {
          "ref": "15ed362e-6574-4def-a008-19f312448e0a",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "934ce164-50ff-4c67-bb5c-c6e4ad4b2283"
        },
        "item": {
          "id": "33eafd10-dd00-4f6d-b9a8-6f45c8b9d777",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "557ddb6f-9f66-4a2e-9d5b-8f1ae52d949f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9be076d9-ef53-49e7-a77b-d99f0d175484",
        "cursor": {
          "ref": "7c7ae6c9-b9f7-40a4-84ba-958d60cb9967",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8ea0eaa7-3a5e-4632-8fd3-36127ebd6e06"
        },
        "item": {
          "id": "9be076d9-ef53-49e7-a77b-d99f0d175484",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "c97da605-3576-4075-aa41-16c23e88b255",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974e8fdc-1560-4b12-ac3c-fc598a88c4fd",
        "cursor": {
          "ref": "a0860a9e-e2a9-4a6a-b0f6-be801b4e9101",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b96a2077-87ff-4f9f-bfe4-b42e1c0e2a32"
        },
        "item": {
          "id": "974e8fdc-1560-4b12-ac3c-fc598a88c4fd",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a47dc150-e524-4419-adff-566db7e19504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a5a69f-aafe-455a-965f-d09c1d40a46a",
        "cursor": {
          "ref": "6cbac9da-4331-422d-9343-5c8625617c7a",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d6896201-7a08-4af4-8dc8-b753e6005754"
        },
        "item": {
          "id": "e9a5a69f-aafe-455a-965f-d09c1d40a46a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5de175a1-7944-459c-bcb5-59e0a2be006b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdaeb29a-9fc0-4be1-9d2e-c01fe55f01a6",
        "cursor": {
          "ref": "31c58415-1440-45c9-bb02-74e267065b09",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "b4890d5b-b195-4f5e-b5da-e0f9ef2f8e62"
        },
        "item": {
          "id": "cdaeb29a-9fc0-4be1-9d2e-c01fe55f01a6",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "6b43d71e-ef57-490c-911f-63886bf853e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ceb45d-4e89-44d5-a66a-4ac99f8fb488",
        "cursor": {
          "ref": "2d2ba20f-6d60-4c40-a921-41adc0f6e9d9",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c3a1b90c-4232-4661-b092-a2f0fc7ff1ca"
        },
        "item": {
          "id": "a6ceb45d-4e89-44d5-a66a-4ac99f8fb488",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "061b020b-bc66-4701-a3d6-e190a7818e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b8cedb3-7e00-4a0a-b430-1f9bf7bbac21",
        "cursor": {
          "ref": "747f7dbe-b178-433c-bb3b-e23ea4ef50a4",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8809fbe3-2556-4ff7-9ea8-c3cd264c0cc3"
        },
        "item": {
          "id": "0b8cedb3-7e00-4a0a-b430-1f9bf7bbac21",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e918d349-b277-4796-b128-5710f40d4c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "931713cc-4ae8-4da7-8f5d-98698164d55f",
        "cursor": {
          "ref": "4ebb2b40-3013-4a2c-95c3-061a9c584728",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "77c61277-f3c8-4455-ab37-d2bf6c3a8f9f"
        },
        "item": {
          "id": "931713cc-4ae8-4da7-8f5d-98698164d55f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "26c3b3f4-8abb-4f1b-bbab-14eb964a0b91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c0afff-7fa6-4519-823e-8b4cea4e1dc8",
        "cursor": {
          "ref": "c70b7b49-e041-440e-b428-05669571d0c3",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "dea808f8-f78f-4272-b43b-208d025de48e"
        },
        "item": {
          "id": "f0c0afff-7fa6-4519-823e-8b4cea4e1dc8",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "44c222c4-f885-479d-8ae1-5c12e9fb302e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "8ad2852f-b34d-4f74-b66b-a097c9ffc970",
        "cursor": {
          "ref": "0a482b7f-2cfc-48cf-9b71-2a7121247b83",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "611f7c44-48c9-411f-b0ff-993fe540926b"
        },
        "item": {
          "id": "8ad2852f-b34d-4f74-b66b-a097c9ffc970",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5cf14f3d-a49e-46ed-8fe2-bdbdb75e88c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "d8d9724b-f9da-4207-b5aa-432c8ca6717c",
        "cursor": {
          "ref": "b8a5f444-1f33-44cb-88c8-4672c655fdca",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f119f958-af84-46e5-81b2-1ba99e0fd2ef"
        },
        "item": {
          "id": "d8d9724b-f9da-4207-b5aa-432c8ca6717c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2a92f2aa-b903-45a9-b397-33cd589807f1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 29,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "6a58ea20-55ce-4461-9006-c7605338d6f2",
        "cursor": {
          "ref": "9595c9b7-a559-4363-abdd-ed4c28ded4a0",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6e6a11aa-5286-493b-b4a4-6be466ff786b"
        },
        "item": {
          "id": "6a58ea20-55ce-4461-9006-c7605338d6f2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3278629e-c113-4245-b8e5-ccb2c585e0b6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 32,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "eb2eb235-e237-44db-8cfa-9e3fdd45bd00",
        "cursor": {
          "ref": "07c78c87-c115-4299-b115-401d01b1cca0",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "c7510870-3161-47db-b0b6-326f59709c81"
        },
        "item": {
          "id": "eb2eb235-e237-44db-8cfa-9e3fdd45bd00",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2d750455-5c78-42be-816d-9f084df043fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "bc399914-f2f5-47ca-9f58-54a0efa33c8f",
        "cursor": {
          "ref": "2aefd311-e269-42af-90a2-79d36670764d",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "8179c145-483d-4930-8df2-983946adb2cd"
        },
        "item": {
          "id": "bc399914-f2f5-47ca-9f58-54a0efa33c8f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "021dee6c-dd4a-4379-9a66-eea40c174176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a702bdf8-a0ae-484e-a0c3-e59abb13518a",
        "cursor": {
          "ref": "7ce6d5fe-22f0-497f-ac50-3b6595bfe357",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "85adccf7-0f94-44b7-8e71-4e027bfb7010"
        },
        "item": {
          "id": "a702bdf8-a0ae-484e-a0c3-e59abb13518a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "28d3223c-c468-49e9-b164-05f9164b421b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4a1a8d-f4b9-4c5e-9b89-96dea368e190",
        "cursor": {
          "ref": "4e37c147-104d-4353-b58f-9dc7a8f77067",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9a5b9278-9763-44c7-9d67-d26921913176"
        },
        "item": {
          "id": "cb4a1a8d-f4b9-4c5e-9b89-96dea368e190",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "40d8f09f-3ba8-4b8c-82d1-1989b2677f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd3375dd-65e4-47f5-8fd8-591cc8c0e619",
        "cursor": {
          "ref": "a2782348-810c-43f3-ac10-864cee31bd37",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "68a807dd-892f-4a2c-8248-e3b2ae5b3c70"
        },
        "item": {
          "id": "cd3375dd-65e4-47f5-8fd8-591cc8c0e619",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "71eafb8e-7b5b-4d9d-a8c0-4e3815a21b65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "826959f0-91bb-47b6-b0a6-331a46d32fe0",
        "cursor": {
          "ref": "49b0d78c-3afc-4a06-9aa0-3e54d27289a4",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "6d9ea2f1-12c2-49ad-9eb9-23b9ab282471"
        },
        "item": {
          "id": "826959f0-91bb-47b6-b0a6-331a46d32fe0",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ebce8c63-2a2c-474a-85ca-9b9da6435e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c58f165-19c3-49f7-acd7-809764e3ca64",
        "cursor": {
          "ref": "8347af92-3eb7-4037-85ca-1d3a29cd86f2",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "b2cafc3c-ecd2-4beb-baf9-e21051edab1d"
        },
        "item": {
          "id": "5c58f165-19c3-49f7-acd7-809764e3ca64",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "7cf494a7-6ec3-4973-9b35-4d7d5f369aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689158cc-9c91-418f-819f-80b8743760bd",
        "cursor": {
          "ref": "1ea8151f-19a5-4e66-a64a-cf54ce6e30db",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "7c821110-ada0-43d2-9cc2-2487c491d9fb"
        },
        "item": {
          "id": "689158cc-9c91-418f-819f-80b8743760bd",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a97d0e1f-c32b-4748-8094-5f04e6422836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f624265f-eba5-4f2e-b7d9-56fd1874e71c",
        "cursor": {
          "ref": "8b4939b8-f0d1-4833-801c-114048fc16cf",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a7a951ae-8bb5-49ad-a0be-125c8e592ed4"
        },
        "item": {
          "id": "f624265f-eba5-4f2e-b7d9-56fd1874e71c",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "0ee1060c-cff2-4a09-bfa2-dfaaf13fe53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbbd2f8-2324-4485-b337-fbbedf562962",
        "cursor": {
          "ref": "e640910d-8a43-4fee-b46d-55e8559fdeec",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "719d8019-a55a-4a8a-a407-014c0db3146e"
        },
        "item": {
          "id": "8bbbd2f8-2324-4485-b337-fbbedf562962",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "bf0d8838-f5f8-4f66-a227-8e7973afd375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad590c62-3c19-40f1-950f-08b80c3c143f",
        "cursor": {
          "ref": "6c9641a5-0ea3-4b44-a184-e58f017a4656",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "542e6af1-f01a-44a3-aa40-76e4eed4a736"
        },
        "item": {
          "id": "ad590c62-3c19-40f1-950f-08b80c3c143f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a24d48d1-e687-40a2-a60c-01847021ee6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e0b94e-5996-4756-968a-ce2ad5214af4",
        "cursor": {
          "ref": "afb2756f-b7ec-4920-89ab-e6de6b5f1c0b",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "287ab3f1-ff45-4adb-b43f-bc464ab1b34a"
        },
        "item": {
          "id": "b2e0b94e-5996-4756-968a-ce2ad5214af4",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "aca137f5-5d52-440a-bd21-32a958f837aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79d325af-0483-473a-b1e2-93f3d5036700",
        "cursor": {
          "ref": "35b3238e-0265-4eac-b451-2332d40c7645",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "29bf7225-c098-4eae-8cd9-e8b919855a43"
        },
        "item": {
          "id": "79d325af-0483-473a-b1e2-93f3d5036700",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a902c6d3-ccf4-4a4e-8d62-9910bac51199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ec62ed-c63e-40fc-9cf1-d66bfe3bc97a",
        "cursor": {
          "ref": "9a14cd1e-b039-4043-94cc-67887260d79b",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "b7da19b5-f4fc-4aee-aec9-dc48bca28bba"
        },
        "item": {
          "id": "37ec62ed-c63e-40fc-9cf1-d66bfe3bc97a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "a123cf04-d1f4-46a6-b352-28e70ab770d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0110c722-87c1-456c-8edb-99946fe16291",
        "cursor": {
          "ref": "88502fa9-42f0-4d40-ac02-b03ec18b4de6",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2e68687f-8d15-402b-8686-79fb357f7cb4"
        },
        "item": {
          "id": "0110c722-87c1-456c-8edb-99946fe16291",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "60745f1d-1520-4015-8f8f-110fac57f499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 144,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d2c486-1080-4408-a39f-04e27f1c8d29",
        "cursor": {
          "ref": "c198d8b0-94b9-4e21-9e57-fa8ab71ff5a0",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "81c16ce1-f6a2-4bca-8f8c-3919ccc041bb"
        },
        "item": {
          "id": "81d2c486-1080-4408-a39f-04e27f1c8d29",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "022d0ca4-6600-4c6e-a8a9-81d68e8db9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c185bb-bfbb-47e4-b0c1-70c135b5ece5",
        "cursor": {
          "ref": "9ee56e65-60e9-408d-98ae-d05d1b611d01",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "225c52ec-67b6-441e-8859-366be19413b9"
        },
        "item": {
          "id": "82c185bb-bfbb-47e4-b0c1-70c135b5ece5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "39467acc-6008-4605-a048-4ff86d97f883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d67eb6-3969-4727-bab5-8f87ac62384f",
        "cursor": {
          "ref": "6977acdd-3074-4e6f-8435-c76879f3a3b6",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "ca905c1d-8fd9-46ed-8b11-a50d8d9e0299"
        },
        "item": {
          "id": "c8d67eb6-3969-4727-bab5-8f87ac62384f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "ce4a2048-8c9c-4078-8d67-44a4c01d9436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c07fb4-ea7e-44ff-8a98-ad5e706bee79",
        "cursor": {
          "ref": "a7daf57b-62f7-4a95-9ea9-069f759c26ab",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "6d10515e-49ad-4d11-b124-47b7d5d32f65"
        },
        "item": {
          "id": "23c07fb4-ea7e-44ff-8a98-ad5e706bee79",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "b3e9bf1b-64f8-45e9-a9db-4c9d025fadba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b5372bb-7b10-41de-b14e-6c5caddaccc6",
        "cursor": {
          "ref": "19d3843f-b65c-4996-bdb0-728a1befe373",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "423d218c-25ce-4531-af1f-b70965bce6f5"
        },
        "item": {
          "id": "9b5372bb-7b10-41de-b14e-6c5caddaccc6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "68384003-b81a-490b-bab2-a05ba206de34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17dc675-3394-4d57-aa2a-22cc4cf6a101",
        "cursor": {
          "ref": "5101ece2-4cc7-4c09-8b3e-3ad93fb923d6",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "9918d800-15d7-4a96-b455-f6f88175ae2d"
        },
        "item": {
          "id": "e17dc675-3394-4d57-aa2a-22cc4cf6a101",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "21da8d33-db69-412b-8258-ff15d2c920e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c958967-ad00-42fb-a7cf-db941797aa6f",
        "cursor": {
          "ref": "b9519e79-2bd6-4b58-87a0-beaf87f5bed5",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d7b42543-5568-43c8-8086-e6d73d40b363"
        },
        "item": {
          "id": "1c958967-ad00-42fb-a7cf-db941797aa6f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "28210dfa-c2f2-48a3-abe1-c5dcde0811b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7f3391f-cc90-4304-8e0f-aa81a02edba5",
        "cursor": {
          "ref": "1b26850e-781a-446d-b7fc-78a69d2c054b",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8ae8bcf5-01ef-4ef3-9ade-6213ee8e15c3"
        },
        "item": {
          "id": "d7f3391f-cc90-4304-8e0f-aa81a02edba5",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "efba9e97-826a-46fa-a885-fb70b898bb77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e0a9d9-8aa2-4c1a-a6dc-ae72f4c4c6e7",
        "cursor": {
          "ref": "bda87152-092e-47ef-b9e4-a07a90a27636",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "7ee9ec34-55ac-4fb6-9dd4-2f603532d434"
        },
        "item": {
          "id": "b3e0a9d9-8aa2-4c1a-a6dc-ae72f4c4c6e7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "aa52e790-3d23-46df-abe7-c7fcbb44f18b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf905837-7a49-458c-a0d3-3679322c296d",
        "cursor": {
          "ref": "c8e2549b-a468-49cc-968f-ec91865cbd62",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "04fb3b7c-9030-4b87-a59b-4d5ba65c53db"
        },
        "item": {
          "id": "cf905837-7a49-458c-a0d3-3679322c296d",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "051da6b4-4d7e-4e61-ab3f-3b0b8aa67f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2125c174-913d-442c-a8f4-14132726c74a",
        "cursor": {
          "ref": "d55461c9-81d2-41b3-924b-26836f6539a5",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8544fb65-08cf-4b84-842d-999c865dbdbe"
        },
        "item": {
          "id": "2125c174-913d-442c-a8f4-14132726c74a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fc73721d-391a-4046-ab42-2e038243675a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d897aec0-36e8-46cd-8176-152474c267e4",
        "cursor": {
          "ref": "713e0e5b-d393-4071-afb8-13774526ea1c",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7c91358f-c8c3-43c4-8d87-a6a14e542f85"
        },
        "item": {
          "id": "d897aec0-36e8-46cd-8176-152474c267e4",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "c2ee007f-5013-4152-99b6-a4340376f56a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45b14f40-b055-4aa2-b445-e89ad1c65b15",
        "cursor": {
          "ref": "b97388a0-9fed-4fe5-aca7-b877d40c0863",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "c0da5ab2-c18d-4af7-aaa9-7643722e9e2e"
        },
        "item": {
          "id": "45b14f40-b055-4aa2-b445-e89ad1c65b15",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "12fb0e4d-9cb5-4f2c-a82c-1b128e547fb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d5eecb0-ed9b-4376-901f-0ceba362d142",
        "cursor": {
          "ref": "e01192b0-1966-4dd0-bc0b-d8b172fbe4ed",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "954f24aa-8052-4665-be8c-95f8b86b2ff7"
        },
        "item": {
          "id": "6d5eecb0-ed9b-4376-901f-0ceba362d142",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "3de417fd-651f-440c-9430-c65f69ff04f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71d9e7b0-5d89-4605-a521-807354fb6eb9",
        "cursor": {
          "ref": "f72ef8a8-d38f-46f6-9e64-48cf47b6cf57",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7494d753-0967-413c-a0cb-afafa7902c8f"
        },
        "item": {
          "id": "71d9e7b0-5d89-4605-a521-807354fb6eb9",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "cca43313-16ad-4c23-8c32-7f3c33ff8698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fe863f-d89b-415a-a9d6-fed8740c2d66",
        "cursor": {
          "ref": "67f5ac4c-77d8-4104-ae29-ec4a97b41493",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "1c0ee320-c1a7-4eea-a399-82da13d1ff4b"
        },
        "item": {
          "id": "96fe863f-d89b-415a-a9d6-fed8740c2d66",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6381abcf-0f41-42c9-a73c-113b8776df85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e15c513-293c-4d93-9431-14454fd56f06",
        "cursor": {
          "ref": "eb7b4598-0d63-47cb-9d13-3cfd2a2c7a06",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "51f383e5-0963-4c55-bdd0-be2cc27c3a7f"
        },
        "item": {
          "id": "5e15c513-293c-4d93-9431-14454fd56f06",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f5a59c9e-e2be-4b3d-b765-84b3ad689655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c90a4d-2bcf-4c2d-bb4d-6dac68f61c67",
        "cursor": {
          "ref": "975eae18-4803-4fcd-9c4c-9d3c1b98f039",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a671bf81-96c8-4ef8-8898-37214183a9c2"
        },
        "item": {
          "id": "42c90a4d-2bcf-4c2d-bb4d-6dac68f61c67",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c60b8d64-52dd-434f-9e29-ecef8c7b27ca",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eeeb755-a007-4dbd-b2e2-d27124d4c840",
        "cursor": {
          "ref": "c57b5a88-3be2-4e9d-807c-a4ea4e9c3267",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "65f64aec-8e7c-468e-bbfb-85519ff7e534"
        },
        "item": {
          "id": "5eeeb755-a007-4dbd-b2e2-d27124d4c840",
          "name": "credentials_issue"
        },
        "response": {
          "id": "2f582d06-b5b0-43d2-b5f1-000e91b092fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:102)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:102)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:102)"
            }
          }
        ]
      },
      {
        "id": "f8ac424a-8889-4a4f-b643-e02b5082700c",
        "cursor": {
          "ref": "49d28853-fdc7-40df-aecb-02e9935928cb",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "0d1141a6-3f2a-4182-9c73-e4fc744c2f7b"
        },
        "item": {
          "id": "f8ac424a-8889-4a4f-b643-e02b5082700c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "7883f6c7-c93e-4643-a0f7-67b404965a00",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 35,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:103)"
            }
          }
        ]
      },
      {
        "id": "94c169ea-cf2c-48fc-872e-42ec5dc6561e",
        "cursor": {
          "ref": "141b3803-2771-434a-80ee-31a3644fde19",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "10121e74-4f49-452d-ae1b-c88fe1e5cdce"
        },
        "item": {
          "id": "94c169ea-cf2c-48fc-872e-42ec5dc6561e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "60351ca2-7253-4b63-8dce-8e7ffd47b48c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 30,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "02bed63f-64fb-4aa1-99a4-b63b7ba9a0b0",
        "cursor": {
          "ref": "9b809f5a-8a49-4f1a-a68c-b685793aa43c",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f3a8bcf3-3585-45ac-a6f1-bbe301ebdfaf"
        },
        "item": {
          "id": "02bed63f-64fb-4aa1-99a4-b63b7ba9a0b0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f9a90b41-039d-42d8-8dac-ec3dbede869a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "a37c1c46-9ba2-43c7-97e3-6e46b31c0f5d",
        "cursor": {
          "ref": "35c88136-9f08-4ee6-8599-44882045c212",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "155f9a70-b23f-44ea-9e03-8d539778c6a8"
        },
        "item": {
          "id": "a37c1c46-9ba2-43c7-97e3-6e46b31c0f5d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2f80edcc-7967-40db-af76-a9082f2a14a5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 36,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "cd85220d-8d40-490e-8a14-b21e06ca71a3",
        "cursor": {
          "ref": "8c1d8582-5e11-49a9-8561-7db63165a62b",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7159bcfd-ba56-4322-9438-a79e1431e50f"
        },
        "item": {
          "id": "cd85220d-8d40-490e-8a14-b21e06ca71a3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "956d4df9-f025-4ed0-bfa6-bb475998b2da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 31,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "6f1d9dfb-14e6-4640-b45a-886b83eb3898",
        "cursor": {
          "ref": "eedffb36-2efa-42a1-8248-32679d362046",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "5784a6be-e1c8-480f-a3c1-7913266a735d"
        },
        "item": {
          "id": "6f1d9dfb-14e6-4640-b45a-886b83eb3898",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "bbc1fb36-8cd2-4045-90fc-0cdf4c6b989c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d0988bd-714f-4ab8-85d7-a1e428d70085",
        "cursor": {
          "ref": "6154dbdb-38c7-42e5-8949-e377f273a370",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "1f736635-cf11-4a6f-a572-e1bce5b0c620"
        },
        "item": {
          "id": "3d0988bd-714f-4ab8-85d7-a1e428d70085",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ac95daf9-5d76-46bc-83a2-433671462e5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed07420d-0ab1-4555-b806-5d08dd0eaf70",
        "cursor": {
          "ref": "5841c7cb-cd96-4fd5-877b-6170c44a2495",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3a63cf78-2d00-4257-b58d-5f4e001750fb"
        },
        "item": {
          "id": "ed07420d-0ab1-4555-b806-5d08dd0eaf70",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "61657d55-587f-4a16-8dc0-3d4aa57817df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ee2746-efa3-45cf-bc46-ba0eb6281c8b",
        "cursor": {
          "ref": "738e3650-82c9-41c0-b2a8-3242db8d9669",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1a92c094-6219-440a-8ad2-515cb11c5bd1"
        },
        "item": {
          "id": "b1ee2746-efa3-45cf-bc46-ba0eb6281c8b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "19448001-477a-40f4-8787-385dc42face1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69aa1473-7ff3-46be-af95-7abe2383c7e4",
        "cursor": {
          "ref": "37776507-de3f-47aa-aa7b-113c718b2bab",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "29c9a7a1-9175-437c-ad6b-bf271dd4d0b0"
        },
        "item": {
          "id": "69aa1473-7ff3-46be-af95-7abe2383c7e4",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2d9e141e-9644-4efa-a082-a9b86b0fdf47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0d6b16-a035-4abd-8c18-46825abf1040",
        "cursor": {
          "ref": "ccbdd7a3-70d8-41fd-897e-aa6121f85dde",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "32e87778-ea92-4612-a093-67935e9a039d"
        },
        "item": {
          "id": "ee0d6b16-a035-4abd-8c18-46825abf1040",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e2371c97-cfa4-4228-b13b-b9fee209f561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94041b1-ab2c-404f-9175-7a75cdf4a30e",
        "cursor": {
          "ref": "833461b0-6e24-4546-b9ef-8de4649c1026",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "7a67ad1b-0767-4289-81cd-1f24409ffb2a"
        },
        "item": {
          "id": "f94041b1-ab2c-404f-9175-7a75cdf4a30e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "af16eafc-6b8d-497a-8fe7-5d35bd3ad628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04cab323-c91e-4741-91fe-12472fb873df",
        "cursor": {
          "ref": "9311b059-224c-4166-b594-2a2e5a7d43e9",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "fc9ce488-8907-48b5-91b6-588116236b9e"
        },
        "item": {
          "id": "04cab323-c91e-4741-91fe-12472fb873df",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d04903d3-e7b1-47d2-8265-1d045187fcb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dcc0734-2233-42bd-b40d-bf16b10eda1d",
        "cursor": {
          "ref": "7ffeb901-2796-4508-bc7e-8d39c8a57a11",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a490d5ca-c272-4f12-bce8-1f3e604ed765"
        },
        "item": {
          "id": "6dcc0734-2233-42bd-b40d-bf16b10eda1d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2019ad4a-4603-4a11-8212-fc063ed55693",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77e3e3e-97ca-41eb-b78f-f929cfbc5b3a",
        "cursor": {
          "ref": "d11f31d0-88a5-4a3a-8775-7446bd718cff",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "97f879ad-f8d5-4400-9399-6a42628df0eb"
        },
        "item": {
          "id": "f77e3e3e-97ca-41eb-b78f-f929cfbc5b3a",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "204bcdc6-64b5-4b13-bafb-6f60bcfd71c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "038b3cba-4b61-457b-adc0-8841ac1c031f",
        "cursor": {
          "ref": "94f9d928-c048-4887-9464-cb68190957ef",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "d5080f62-8525-4102-b851-b2628730fb81"
        },
        "item": {
          "id": "038b3cba-4b61-457b-adc0-8841ac1c031f",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "f277cedf-170c-4a68-b8e3-d42de2a901f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024c81a4-0126-463e-9b4c-94ca9f863656",
        "cursor": {
          "ref": "74aa6ddb-a810-41cc-b379-447d8c400d42",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a9313a02-992d-4ca3-b063-b54119395f7f"
        },
        "item": {
          "id": "024c81a4-0126-463e-9b4c-94ca9f863656",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "6c46c9f2-863f-4b03-b059-b2744710adb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd5bcf41-8a71-4bfd-b919-a245a946a4b9",
        "cursor": {
          "ref": "276f0c3c-3ebc-41a0-8ee0-69b43cf44354",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "bb87a7ea-832d-4314-9c50-bc3c1c485a0e"
        },
        "item": {
          "id": "dd5bcf41-8a71-4bfd-b919-a245a946a4b9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b80c129b-f113-4c6c-943a-fd6e3ee59195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c26f34b-6c64-40b8-8038-da2cab11d530",
        "cursor": {
          "ref": "795a6044-3fef-4d4a-a7a7-e9b4eb0d53ac",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "20d95c96-02a5-4ed4-924d-f0f51441c1f1"
        },
        "item": {
          "id": "5c26f34b-6c64-40b8-8038-da2cab11d530",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "f9f8d97e-99df-46ee-ad79-a66512cde681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1483d62f-ab37-451d-8bb4-7c53bd946e1e",
        "cursor": {
          "ref": "f078e9f1-5bcc-4609-b119-232e4c62a35f",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "02fee0fe-7e0a-476e-8bf2-955e9e2337a2"
        },
        "item": {
          "id": "1483d62f-ab37-451d-8bb4-7c53bd946e1e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e7e63192-1ca1-44b1-bc34-8ee284c5d7ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df692344-6e4f-4d70-9937-bb8fb73585d5",
        "cursor": {
          "ref": "488e8d93-73f6-42da-9174-c13189ef9a56",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6083ca78-f20e-4e15-a1dd-2689173e60de"
        },
        "item": {
          "id": "df692344-6e4f-4d70-9937-bb8fb73585d5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "01e80e42-cdbc-4228-b675-8097246dbd11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17bc2c95-b66b-4c6e-aee6-faceb5b5daf8",
        "cursor": {
          "ref": "3d636553-fc99-43d7-970c-dbd279430693",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "621e3efa-cb77-4c09-ae14-de5cdba46bab"
        },
        "item": {
          "id": "17bc2c95-b66b-4c6e-aee6-faceb5b5daf8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8e9a7556-ea5a-4cfa-bcdf-03e74186f9bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c954306-ec32-4d9e-b8e5-35dc4f66c947",
        "cursor": {
          "ref": "354d12a6-ff1b-40ee-8b6e-0680132a279a",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c3371797-f64a-42d5-8eda-3d8445c13875"
        },
        "item": {
          "id": "9c954306-ec32-4d9e-b8e5-35dc4f66c947",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "13c1ee40-1025-4fed-adde-254815cdce2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e511f8-ef30-4d00-8172-d6e6cb1fa4c8",
        "cursor": {
          "ref": "812aeced-0b64-463e-bdad-8b4bc35a891c",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "60951171-ef91-4321-bff7-157103d6510e"
        },
        "item": {
          "id": "63e511f8-ef30-4d00-8172-d6e6cb1fa4c8",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ebbe723f-181f-4f34-af28-f38094e409af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcc9d8dc-eb09-4582-b177-175be475a269",
        "cursor": {
          "ref": "7a86541d-68e2-401b-b855-9ed8e1479e3a",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6c135eb0-61d0-4b69-99a3-5ec145e362b0"
        },
        "item": {
          "id": "fcc9d8dc-eb09-4582-b177-175be475a269",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "9f340250-14d8-4f1c-b7c4-efd7c0eee9dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95dfea33-734e-4cab-89e3-33e1fcc09bbd",
        "cursor": {
          "ref": "444ccbc9-dfe0-4162-96ba-a03ff08f621e",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "fc53a240-001c-45b9-a5df-48eb6b86868c"
        },
        "item": {
          "id": "95dfea33-734e-4cab-89e3-33e1fcc09bbd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "27813729-4310-47ca-b862-0cc8b9d1e6dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1828c13e-7e0a-4729-9f96-21a212918454",
        "cursor": {
          "ref": "7caf700b-4e0e-42b7-9866-9572b7b69937",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0129a216-0d47-4645-be47-a5453a425bcd"
        },
        "item": {
          "id": "1828c13e-7e0a-4729-9f96-21a212918454",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "7dceef8c-b2b3-4023-8cb6-9c8161171b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abf1669d-2089-4894-87e8-443fd059d760",
        "cursor": {
          "ref": "5e67d38d-ba8c-4e7a-883c-75c713301e83",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "03acd868-0f15-43a2-a9f2-318b33762089"
        },
        "item": {
          "id": "abf1669d-2089-4894-87e8-443fd059d760",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "deb78904-2af3-47e7-98b3-6560e12070a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d9d120-bda0-4427-8d97-11336a062560",
        "cursor": {
          "ref": "0a487954-666f-4795-9a37-77f178d36abd",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "12fc7bdb-7e8b-42d2-8150-019938d1ca14"
        },
        "item": {
          "id": "58d9d120-bda0-4427-8d97-11336a062560",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f8fde6c8-da3f-4f62-8caa-06b3b5b97426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01912da-7690-4af7-9cd4-1dae5f246475",
        "cursor": {
          "ref": "81f0a17b-0c8e-468e-af2b-b1583793f31d",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "213740f6-faa2-4226-9eb0-2dddbbdc7155"
        },
        "item": {
          "id": "d01912da-7690-4af7-9cd4-1dae5f246475",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "bd1dfbc2-fbf1-44ff-a654-ac1ca1dcadf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e764d36-9fd4-4bf5-a379-58dd2ee93eb6",
        "cursor": {
          "ref": "409bbf28-e43c-40d3-a880-78107391fb04",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "caefa653-e8da-4962-994f-d59620907144"
        },
        "item": {
          "id": "3e764d36-9fd4-4bf5-a379-58dd2ee93eb6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "434aaf79-3fcc-4b75-bddf-0ef1cf41db75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9951d177-ab03-4772-a5ed-e5ca1b2b8122",
        "cursor": {
          "ref": "4496a59d-561d-4504-be4e-f33decc0f836",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "1c463d2d-7fca-416c-b2c6-e4106a24c3aa"
        },
        "item": {
          "id": "9951d177-ab03-4772-a5ed-e5ca1b2b8122",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5b443414-8276-43e8-9d25-56f38cbdced7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "611a412a-79ef-4f18-81c2-7dc8e1d98220",
        "cursor": {
          "ref": "08070b90-20d7-4974-ae20-77549239c8c2",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "4daf9da5-4cdb-4844-9579-f24b252d105b"
        },
        "item": {
          "id": "611a412a-79ef-4f18-81c2-7dc8e1d98220",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "3c0f82fa-72c1-4c16-8f52-1734be30d295",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa49f9b-531f-45e1-9f02-944508630bf2",
        "cursor": {
          "ref": "b368f5cf-2c7f-4d03-b9ca-17470d4b5a4a",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "0ed775ae-059d-4267-ba56-1d2db8551d78"
        },
        "item": {
          "id": "aaa49f9b-531f-45e1-9f02-944508630bf2",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "7be2c2e4-5004-46a7-ad93-e13cd778e397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd90b67c-1945-4d1c-bb2c-7e783e383f01",
        "cursor": {
          "ref": "c94f0cf4-ef1f-4e1f-85e9-ea9fd5763aea",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "285ac8dc-51fe-4b4e-9b13-03e212d185af"
        },
        "item": {
          "id": "bd90b67c-1945-4d1c-bb2c-7e783e383f01",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "628f91f5-8a29-488c-bd97-03b4ced37cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "374e3b2a-e831-4af7-8ef0-3ec0711d2e09",
        "cursor": {
          "ref": "750cba30-ea5e-43b0-ae6e-9c82e5931c51",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d2a1daa4-4a65-4d21-b5fa-e4dcb5ce1c60"
        },
        "item": {
          "id": "374e3b2a-e831-4af7-8ef0-3ec0711d2e09",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ed947ad7-3257-4a5a-8b87-94f2eeda0442",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7cbda12-bded-4509-b8e9-4e79463305b8",
        "cursor": {
          "ref": "c06078a1-24bd-49f6-b39c-277857f66c67",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "8e7acd59-61cd-4dfa-822d-1dbbd07fff92"
        },
        "item": {
          "id": "d7cbda12-bded-4509-b8e9-4e79463305b8",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "bd5125c1-d80e-4b18-a947-440e0a2c4434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97219d77-4359-472d-84ad-20d8ef07119e",
        "cursor": {
          "ref": "dd67df8d-4889-44be-94d9-1516834c576a",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "33cad4f5-d0a1-4cbc-9c9d-2952b9a8cf64"
        },
        "item": {
          "id": "97219d77-4359-472d-84ad-20d8ef07119e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "56ec6817-a759-45ef-aca2-170dd4654bd5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad0a90ea-6fde-452f-9ee1-9b17def310bf",
        "cursor": {
          "ref": "2b11f7be-3e29-4e8f-af16-c9706fbb4848",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a5f23a5e-2e13-4ac4-a511-092d3c33a42f"
        },
        "item": {
          "id": "ad0a90ea-6fde-452f-9ee1-9b17def310bf",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "2444068f-5213-45c4-98a6-d92b94c01998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d2a3f6-d4f2-479e-89e6-113d7c876b18",
        "cursor": {
          "ref": "4a419d8c-cec6-4b32-94b8-1a7ae8c49fab",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3f7c1ee0-8262-4894-bea3-b6d7a8e0f1a7"
        },
        "item": {
          "id": "e9d2a3f6-d4f2-479e-89e6-113d7c876b18",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3df2ffd8-7753-461b-b750-da4fd35b3a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05fb655-926a-4224-ae86-2ca60b940c7f",
        "cursor": {
          "ref": "1dcdc68f-8625-4570-ad4d-eef5a4213965",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "7fa76434-9931-4bd5-be58-ec0be717bb4e"
        },
        "item": {
          "id": "e05fb655-926a-4224-ae86-2ca60b940c7f",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "8bf7e97b-3536-4a2d-8ce8-6ebafc8e0aa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86cbe28f-c476-4363-9f34-e15dfe77153d",
        "cursor": {
          "ref": "4ee818e7-77ab-4c8b-ba82-5da905e6bec3",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "802c82cf-ccfe-4a13-b724-7cb5e0a2a614"
        },
        "item": {
          "id": "86cbe28f-c476-4363-9f34-e15dfe77153d",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "cd400fce-9538-4676-8ad3-c5462a1f9d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca1f7293-b803-4935-891e-c89ebc86e0d0",
        "cursor": {
          "ref": "60baa336-3f72-4980-99de-e09579948c9b",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "280d03c7-68cc-4881-b9f6-ad0ea1926781"
        },
        "item": {
          "id": "ca1f7293-b803-4935-891e-c89ebc86e0d0",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "61b038dc-3d37-4476-b714-1e249738d049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344c2872-802c-465e-aa67-49776676cf1e",
        "cursor": {
          "ref": "3fcd8954-c09c-4641-810f-b88afeff4726",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8f9d1db0-0ddb-4b99-8370-c8457e1f262e"
        },
        "item": {
          "id": "344c2872-802c-465e-aa67-49776676cf1e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "df4e27ca-bf6b-41a5-bd34-efc8ffeb108a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edda1bf-a6bf-4092-aa83-547f9b2c4281",
        "cursor": {
          "ref": "b7aaa35c-60a5-4987-bf85-7620e3248074",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "89f8ab50-4b82-49d7-bd4e-89bcde1f9db0"
        },
        "item": {
          "id": "3edda1bf-a6bf-4092-aa83-547f9b2c4281",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "4d371caa-f83f-4ee1-b558-25f9521b2b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc57f321-2be3-4a8c-b5e6-8461410ebe38",
        "cursor": {
          "ref": "a9d05199-0621-45b4-a1ec-d34a1a16db41",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "3f15a485-1ff6-4770-8093-cac2fcd2f4e7"
        },
        "item": {
          "id": "dc57f321-2be3-4a8c-b5e6-8461410ebe38",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a83eeddb-f484-4ac4-b926-6b3ceba3b8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73f6552-cbd2-4bf8-a8b8-8de479f50151",
        "cursor": {
          "ref": "48e1e747-8f2f-4bc4-be36-1fd5573a42b2",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "da6ce249-8d8f-43a1-bbac-830ced8d81a0"
        },
        "item": {
          "id": "a73f6552-cbd2-4bf8-a8b8-8de479f50151",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b3ccb9cd-2ae6-428c-b036-9651800f0ad4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4fbbc8b-217f-4156-802b-e0e533734c1b",
        "cursor": {
          "ref": "ff988b7d-38ea-4feb-a45d-a7f8d619248c",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "908d246a-cce0-49a3-bfd1-64bb36f95496"
        },
        "item": {
          "id": "a4fbbc8b-217f-4156-802b-e0e533734c1b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3e396ede-1b99-4dd5-b07d-91f313057ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83fc789d-0860-4598-a637-6d1905da8338",
        "cursor": {
          "ref": "d1e1d595-4a98-4088-b658-b27e52bc66ad",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "cc37c560-669d-4112-bddd-a55565bb9ff6"
        },
        "item": {
          "id": "83fc789d-0860-4598-a637-6d1905da8338",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "317805fc-00d1-4376-829a-d4576cdeecdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "625167ba-c9ba-4a1a-b90a-80dbf9ad8289",
        "cursor": {
          "ref": "23b496f5-d868-4055-a321-6db3d3c76e96",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "8cd35310-fa64-4e94-b214-86efd7f23dcd"
        },
        "item": {
          "id": "625167ba-c9ba-4a1a-b90a-80dbf9ad8289",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "25bf3130-f0f5-49c9-8b32-292972ae05b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "683fc363-1fc5-4684-a83f-927d5d9864db",
        "cursor": {
          "ref": "92c926e2-f909-4f17-a0db-14a8dc687ec5",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "09b96426-6c0c-43fc-84a8-ca384fa150ee"
        },
        "item": {
          "id": "683fc363-1fc5-4684-a83f-927d5d9864db",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "857600ee-46ad-4557-af3f-eaa064b2a1d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64e65835-8ced-433d-9645-9fe3e26de23a",
        "cursor": {
          "ref": "fae7ea29-d3c1-4dad-ab93-f98611f0faba",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f5a40c9c-554c-4936-9b57-2bc0d9070288"
        },
        "item": {
          "id": "64e65835-8ced-433d-9645-9fe3e26de23a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "522d4044-8c23-468f-ae16-115f077161e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074a9387-95a1-4987-92cb-95af0002a323",
        "cursor": {
          "ref": "5aa940ee-f09b-49c3-b5a7-039a5c9352b2",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f268ce90-5f00-4c4f-9e2f-5a4d2290ce24"
        },
        "item": {
          "id": "074a9387-95a1-4987-92cb-95af0002a323",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ea4d44d5-6165-4488-a182-b70917bd3adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4fb682c-78cb-45f2-9ef8-f8a67705a867",
        "cursor": {
          "ref": "1f6cf79c-bdb8-4e96-bed9-c9f1de0b0186",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8a20c7b8-6f55-44f0-a48e-46d021e62cb0"
        },
        "item": {
          "id": "b4fb682c-78cb-45f2-9ef8-f8a67705a867",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "435f515f-148c-4678-aca8-7d24c1714bfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d6b84a9-3892-4adc-acef-6719cb0b22d9",
        "cursor": {
          "ref": "04a02386-f7d6-4696-beec-46e7028d84b2",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "420aff6b-a4c2-49c8-b5d3-80600599052f"
        },
        "item": {
          "id": "5d6b84a9-3892-4adc-acef-6719cb0b22d9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "2924418c-fb3c-4294-936c-e15bd86c0bf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73bb3a3c-af24-43c2-a603-81502d1405b1",
        "cursor": {
          "ref": "a6b933af-64ce-4d74-ba54-71a1fa9c1b89",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "173d870b-162b-42be-9067-f69197232fa7"
        },
        "item": {
          "id": "73bb3a3c-af24-43c2-a603-81502d1405b1",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e8d65271-35db-46d4-b93a-5b0d82e1a1ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b71ab7-aac2-4b8e-8eac-7d0cbcbd688f",
        "cursor": {
          "ref": "57f61952-516d-4f1f-a02e-91b94e21f5ab",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "963ef0af-a187-4692-9c32-338bdd53f262"
        },
        "item": {
          "id": "86b71ab7-aac2-4b8e-8eac-7d0cbcbd688f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2e18eef7-ef06-4e27-95a8-ce235c8980bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "889b2aa8-e0da-4a10-a1a9-37badff2379c",
        "cursor": {
          "ref": "0f83e046-015e-464e-89f3-0c329d716902",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cc0ee5c8-bbac-45e3-a98e-c465f92e7513"
        },
        "item": {
          "id": "889b2aa8-e0da-4a10-a1a9-37badff2379c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "44fae572-a4a5-4d93-a054-09d0eff726a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3975bc2d-4290-486a-8169-9066e8cfda55",
        "cursor": {
          "ref": "d57e6a4a-36e9-419c-b317-8667e0ae14b5",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9761cdf8-dbbb-4306-a12d-48d7376d1305"
        },
        "item": {
          "id": "3975bc2d-4290-486a-8169-9066e8cfda55",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f9d1dd4e-5dbd-4622-a921-47846deac0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "339c358b-923b-4d15-84ae-7eb91e3d29aa",
        "cursor": {
          "ref": "a070963c-d8b0-44e2-98b5-ac22e1dff1d4",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5b103209-18e0-4be7-a12e-88a092dcd7b9"
        },
        "item": {
          "id": "339c358b-923b-4d15-84ae-7eb91e3d29aa",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ab30aa72-4625-4436-89b0-d5dfac40465a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e18d0a-f421-40d1-8634-9fe2c2ce22e3",
        "cursor": {
          "ref": "68bdd715-1afa-4879-8ab7-fa10c2b3125b",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "b29f143f-a7ae-4fae-9dba-93e930ecf50d"
        },
        "item": {
          "id": "d5e18d0a-f421-40d1-8634-9fe2c2ce22e3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1890a511-ddc4-418a-bd33-fa229533ada1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b8e730-1a63-4840-81fb-bc383b6798a1",
        "cursor": {
          "ref": "9dc7c88a-2f55-4fbc-a294-8bbb14b7b4d6",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "e628dcb8-6bb2-4eb1-af03-75276527bb73"
        },
        "item": {
          "id": "83b8e730-1a63-4840-81fb-bc383b6798a1",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "afa7b3d7-ea58-4f64-93db-e11672b321b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c57cf543-b822-4876-8cb5-552e2e8b04c4",
        "cursor": {
          "ref": "0fe93552-104c-4f03-8181-5cf215f0f6b8",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "4e3fa06b-11fe-455a-b548-06d15073cac0"
        },
        "item": {
          "id": "c57cf543-b822-4876-8cb5-552e2e8b04c4",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ce46850a-cacd-4d8f-9498-59e216fd4cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6246384d-5572-449f-a7e7-71cdc11762f4",
        "cursor": {
          "ref": "1c6a3293-7192-4f20-8d96-7e52845c7dba",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "7ccd3fff-8f20-48ec-9827-fdf99dfd52a8"
        },
        "item": {
          "id": "6246384d-5572-449f-a7e7-71cdc11762f4",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3363c284-c9aa-44f8-8b9b-9e191821476f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "741d8fd4-ced2-421d-b084-29b714732a55",
        "cursor": {
          "ref": "2cc69bf3-3e31-4511-aad7-897b5cf4185e",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3cc6e6fa-244e-41a5-8e9f-db1fce46bd4f"
        },
        "item": {
          "id": "741d8fd4-ced2-421d-b084-29b714732a55",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "90d67809-0d53-46a4-93db-ffd6a6d2271a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f68c4f9-91f4-420c-9fba-370c4755e21c",
        "cursor": {
          "ref": "0e96da6e-7ce5-4f63-a53f-0a8df4a92ede",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f7c48e3c-a84e-46d3-b460-2cf25bcb2414"
        },
        "item": {
          "id": "5f68c4f9-91f4-420c-9fba-370c4755e21c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8bd3b2fa-71a0-4380-b200-b8578167693a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ec9e82-d965-4c64-827b-08d1972af485",
        "cursor": {
          "ref": "cc5fbbb0-1c52-4267-a583-05e46b5a5a96",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "375e0f1f-cb3e-4342-ac6a-106f76986811"
        },
        "item": {
          "id": "a1ec9e82-d965-4c64-827b-08d1972af485",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bfaa789a-43a0-4e22-9382-9032917752ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e2c0ea-9475-4405-851a-ba95c20bf070",
        "cursor": {
          "ref": "e3e3d338-c224-44bf-86a7-8aeaed9e4c50",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3bd34960-dd17-41a2-a72c-1988518fe3a1"
        },
        "item": {
          "id": "b1e2c0ea-9475-4405-851a-ba95c20bf070",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "13585945-e64a-439c-ad40-6f8f10c12cb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b702a9a-7d40-4317-81e7-fd063b967d15",
        "cursor": {
          "ref": "5045b030-285a-408c-ba85-0594d2891b54",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9a463ac3-be6a-4867-ab99-a4b545dd1122"
        },
        "item": {
          "id": "4b702a9a-7d40-4317-81e7-fd063b967d15",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7a886636-2125-4f03-8bbe-330fef58807a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c546a2c3-91b7-4097-be40-5e3fac9b4d3f",
        "cursor": {
          "ref": "eba90a42-bac6-4ce1-ae44-6d95b53f1e84",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "b0a05961-ea80-4c23-a17f-a10965922994"
        },
        "item": {
          "id": "c546a2c3-91b7-4097-be40-5e3fac9b4d3f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "abafed02-18b6-4ff6-8608-b13fce988446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bbd77da-3f05-4f19-b25f-c7e6bf81be9e",
        "cursor": {
          "ref": "cb60ae14-72fd-44a4-a4d6-284c50a1c48a",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d924a061-feea-4529-a83e-7f9c5856e44c"
        },
        "item": {
          "id": "4bbd77da-3f05-4f19-b25f-c7e6bf81be9e",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "d71788bd-94e4-470e-bcbb-8936b69a5de0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f51d52c8-baba-4ce2-ac43-d9fe3fa1446e",
        "cursor": {
          "ref": "0c6be5d6-e9d3-447f-8969-849e5e3dc051",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "06bf203e-0508-4ad0-a1e0-905e24cbe062"
        },
        "item": {
          "id": "f51d52c8-baba-4ce2-ac43-d9fe3fa1446e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "6b327910-8811-4fe3-9aa5-9bffea9d7b04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "307c973b-b7fb-42f6-9ad2-4d611ee0e3c0",
        "cursor": {
          "ref": "91b18f69-e7fa-47ff-b387-8871cf6ea84a",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "4cb21f03-e283-4dea-b9ce-66a27add3275"
        },
        "item": {
          "id": "307c973b-b7fb-42f6-9ad2-4d611ee0e3c0",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "137510a6-7203-416a-a8b9-ef9f647e9942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b37a6863-0c3d-43cb-87d1-1775c5d293fd",
        "cursor": {
          "ref": "9b29ec98-9994-413c-a8eb-4c6762f92315",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c2405e61-49de-4b5d-a2a9-d7854473e904"
        },
        "item": {
          "id": "b37a6863-0c3d-43cb-87d1-1775c5d293fd",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "f16d1742-584e-4172-88b3-8214e58b9eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05d0e150-af19-46d9-b281-8de3f17392ff",
        "cursor": {
          "ref": "9beb16d8-a3d5-492c-9502-09948054caa1",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "34e20161-1247-4627-8e9c-ae4cf88bb6cf"
        },
        "item": {
          "id": "05d0e150-af19-46d9-b281-8de3f17392ff",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "c59e6f61-54c6-4112-a750-0a86df2bef90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afb89ff9-4b2f-4c4e-919a-25cc7ddb0082",
        "cursor": {
          "ref": "3f0e411b-a8a6-4627-99f9-c78a98f41beb",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2cb5a4b7-a8a0-439e-a953-dbba70da5bf2"
        },
        "item": {
          "id": "afb89ff9-4b2f-4c4e-919a-25cc7ddb0082",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9cad884a-12cf-4d66-bc80-93c485259c8b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc39f67c-f105-4ac9-9fa5-ad11905b4a7f",
        "cursor": {
          "ref": "756c96ad-67a0-4ab4-ada1-5c210459ef28",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "3042ba31-36c4-43ba-81f3-4e8d78ff1b0a"
        },
        "item": {
          "id": "cc39f67c-f105-4ac9-9fa5-ad11905b4a7f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "bca49073-f161-419e-aaaf-f8677ca6139d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2b42462-eb08-4d1c-bbb1-e2f2d9263b49",
        "cursor": {
          "ref": "f298892a-e2be-48e9-80e5-a600378b49a1",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9c6145cf-c4f3-46f9-af9b-550f76d573b0"
        },
        "item": {
          "id": "a2b42462-eb08-4d1c-bbb1-e2f2d9263b49",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "29e895ff-34c5-432f-95f0-d19d54368390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79867efb-7cc1-4c5c-aae0-199357c1e21a",
        "cursor": {
          "ref": "6b3d8cb4-725c-4acc-ae30-8bf3d00b34bd",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8b1208e5-24ec-461e-b31a-0e452072c1e4"
        },
        "item": {
          "id": "79867efb-7cc1-4c5c-aae0-199357c1e21a",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6ff59e06-6fdf-4f2e-a521-64dfe1d92829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e06cf5-d7bc-4700-9960-2e893686aaee",
        "cursor": {
          "ref": "664ab606-e1b0-48fa-9e27-8a3feee6d8e3",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "96b2c38f-b80a-48a3-9575-256dbe1a14db"
        },
        "item": {
          "id": "14e06cf5-d7bc-4700-9960-2e893686aaee",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "cb523f3a-c4cd-4920-b60f-ba2a24791fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd2400f-a437-4498-954d-27cff2cda133",
        "cursor": {
          "ref": "e660b3a1-cdc2-4246-9953-430752ee3c76",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "db812546-54e4-49fc-aa03-c4c9828f1dcb"
        },
        "item": {
          "id": "efd2400f-a437-4498-954d-27cff2cda133",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3deed2ff-fced-4a74-95f8-19a06391cfb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf7d337-3efd-45d8-8eb4-a65938d63eae",
        "cursor": {
          "ref": "8faaf1b0-dbe0-40aa-acc1-cd74b14af9a1",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "89590d53-e5e1-4b15-bed7-ed65b163661c"
        },
        "item": {
          "id": "5bf7d337-3efd-45d8-8eb4-a65938d63eae",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "8d6b68a1-2348-435d-8ea2-932c06d5c164",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 33,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "77a542dd-2e36-4ab1-a478-3b9b53e6a167",
        "cursor": {
          "ref": "459fa81f-2473-4bfb-bda8-4fa4de0ad2bd",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "836d881b-7b0b-49dd-85b9-3c6648a7b27a"
        },
        "item": {
          "id": "77a542dd-2e36-4ab1-a478-3b9b53e6a167",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f13551cb-da55-4783-8b6a-93331753ef50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86c5b615-e7ab-4a51-866e-6e4267933730",
        "cursor": {
          "ref": "df7bb5bf-11ba-4d9d-b78b-c97ad4415d3f",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7afd1dff-9527-429b-9d17-84cf878535de"
        },
        "item": {
          "id": "86c5b615-e7ab-4a51-866e-6e4267933730",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "bbbdac27-1033-46b3-ab02-00ab7303fbb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e96192f7-60fa-401a-a73e-2fb4691b5502",
        "cursor": {
          "ref": "313297e6-ec2d-48d5-b255-68c2591fa4c4",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "99fd0d0f-5929-4ae7-9e0a-35bea4e65dff"
        },
        "item": {
          "id": "e96192f7-60fa-401a-a73e-2fb4691b5502",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "5269941a-0217-4eb4-bb7d-5a18a524523e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49025272-9303-4b57-b181-d7111616331b",
        "cursor": {
          "ref": "61e4517a-28cf-4ae4-be6c-b6d85f1ac6a5",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6a45b10b-b573-434b-bf3a-6a2335a25ad1"
        },
        "item": {
          "id": "49025272-9303-4b57-b181-d7111616331b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "1d6ad5d8-9c52-405a-9da8-f24df4163753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "237e31aa-0aef-4512-aabe-42b9847fbec4",
        "cursor": {
          "ref": "9fa42105-acb3-4b0e-a26b-f2b545c5fc2e",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9aac3260-1268-49ae-98c6-ab9e29296924"
        },
        "item": {
          "id": "237e31aa-0aef-4512-aabe-42b9847fbec4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5384d9a8-fa1b-4c83-b9d7-6cd30bde2931",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b49ea3c-ead6-463f-85ab-60e962278e66",
        "cursor": {
          "ref": "b0a7f5e0-f9b8-40fe-b5fd-db24af7ff669",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "ce121d97-71cf-4e01-974d-070e4b135d71"
        },
        "item": {
          "id": "6b49ea3c-ead6-463f-85ab-60e962278e66",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8ab1b391-f370-4d49-80f1-ff2f1a5def36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "417febe8-f2c3-4086-98cf-97d834386404",
        "cursor": {
          "ref": "bf65595c-3210-42ba-8c8e-2a4c4b629603",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "2ae1795c-9146-47f4-aec4-4d753a72a8b1"
        },
        "item": {
          "id": "417febe8-f2c3-4086-98cf-97d834386404",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "54ab44d3-299c-44c9-a154-7e8c7ee1d6ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a77e3c0-6769-47e5-9350-23f85e919354",
        "cursor": {
          "ref": "f0a0eda9-0b95-4b8a-be63-6fdda5ec163b",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0a526fc0-99ff-4ee0-a778-12a2d978532c"
        },
        "item": {
          "id": "9a77e3c0-6769-47e5-9350-23f85e919354",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "e71ab22c-c8b0-45b7-a430-5b6a532441ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cc6a98-be1b-4bd4-9b81-32ee2c42edf6",
        "cursor": {
          "ref": "33c400a9-13c6-403f-a5d5-73ad617917b5",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "29a022a3-f131-4452-a68f-222255001430"
        },
        "item": {
          "id": "e7cc6a98-be1b-4bd4-9b81-32ee2c42edf6",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "58ff5fef-2dc8-443c-8f7f-a6356a37589c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2112068b-7372-43ea-8f25-c0d37e40ba6e",
        "cursor": {
          "ref": "82cf8596-20db-44b4-87c0-4b558d90d43d",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "85141972-b342-41e3-a41c-15f9c2498bcd"
        },
        "item": {
          "id": "2112068b-7372-43ea-8f25-c0d37e40ba6e",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "85ac4dbc-58a7-4910-b51b-638edfcbdc46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6155a5f0-b3a9-4c51-b7bb-50d47ac976e4",
        "cursor": {
          "ref": "f589ef0b-df5e-41a4-80a2-15f18016b35d",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f2e0b9af-ef0e-4760-801d-c5c496a75cc7"
        },
        "item": {
          "id": "6155a5f0-b3a9-4c51-b7bb-50d47ac976e4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "fccdaf07-5991-4acd-84d8-7eb0aca8d21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f856ee7d-7362-49bb-adb5-1c4757bc1572",
        "cursor": {
          "ref": "8e1237b3-898f-49e5-8e15-eec08631d189",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "62ab67bd-75ee-4535-b346-ab3c3b1505f2"
        },
        "item": {
          "id": "f856ee7d-7362-49bb-adb5-1c4757bc1572",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "59e4cf54-5101-40b7-aca0-2885b5401ae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06eb60f0-9e5e-48b8-95d1-8ec28c2a9a10",
        "cursor": {
          "ref": "b69a23de-afee-4d7a-883f-78dd361bc665",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "50cec1ac-084d-4881-a4ea-f42eaae68366"
        },
        "item": {
          "id": "06eb60f0-9e5e-48b8-95d1-8ec28c2a9a10",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d5b21696-fd3d-4ecd-98cd-0fd8fa5c6e96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b390c7-67f2-4f43-b089-678ccebef086",
        "cursor": {
          "ref": "5c798e72-6c9b-4507-8219-d97823c66ba1",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "5292e637-0e6a-4fe0-9a2f-ab37acfcf1ab"
        },
        "item": {
          "id": "b0b390c7-67f2-4f43-b089-678ccebef086",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "bb625931-8f3b-4e9f-ad6e-5e9824e67fa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c1fb144-c131-4e4a-97af-74c32acc8b37",
        "cursor": {
          "ref": "8b158564-1ef3-4e12-8f3f-b782d2776a39",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b81cfde8-2b98-4ab7-8875-19c7e49fd609"
        },
        "item": {
          "id": "7c1fb144-c131-4e4a-97af-74c32acc8b37",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "09ad6566-e0e5-42af-83af-2b9c9701fb81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "387704de-4e21-48d0-9076-44982e808500",
        "cursor": {
          "ref": "9246b875-2a6a-4648-adfd-3af4f422d103",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5db90577-480e-410a-ad66-456a1fafc550"
        },
        "item": {
          "id": "387704de-4e21-48d0-9076-44982e808500",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "62c3eb18-929b-46b4-bbab-da7a377014d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "389787c1-c87b-4a06-a5da-72a6c788c2f2",
        "cursor": {
          "ref": "59c06395-662d-41d3-9f2f-fc74fc48082c",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "d16a6545-7bb5-4c4e-b6e5-e02360892eb3"
        },
        "item": {
          "id": "389787c1-c87b-4a06-a5da-72a6c788c2f2",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "dbce5e14-6910-4506-ae57-f742dca6801c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a98be1b4-2b46-4ed4-b09b-309ea6912cdb",
        "cursor": {
          "ref": "abf6fd68-0fef-4237-9c2e-3d190ad0fb7d",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fd7f57cf-5c9d-4f6d-96d8-a0a222ce93d2"
        },
        "item": {
          "id": "a98be1b4-2b46-4ed4-b09b-309ea6912cdb",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1a2f9727-f312-4e79-b0d4-bcbd1234c628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b903327-e249-4690-91f0-8c819b44e865",
        "cursor": {
          "ref": "403f2550-bcc4-41f7-885f-9947ad71f878",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ffaeefc3-fa26-42dc-8b31-4d0b869087c1"
        },
        "item": {
          "id": "5b903327-e249-4690-91f0-8c819b44e865",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d366ff5b-54f0-4551-9d28-07aebfb1220a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d1bcbc-97a0-4d0b-857d-5cf3b338354a",
        "cursor": {
          "ref": "20aa0d54-9be8-4569-bc79-c2201d634890",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1e3c2a19-edaa-4f1d-8f5c-30c7628c1267"
        },
        "item": {
          "id": "10d1bcbc-97a0-4d0b-857d-5cf3b338354a",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "29d0bb3a-9b9b-44cf-81b2-2eee78291d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af05d4bd-b80b-4e53-97e8-92c21d6a6a5f",
        "cursor": {
          "ref": "76d2ccd0-cdb6-481e-abf9-6bfa848ee42d",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4fc152bd-0318-4ada-bc0a-57597f8e469c"
        },
        "item": {
          "id": "af05d4bd-b80b-4e53-97e8-92c21d6a6a5f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "83b4a049-733a-44f7-a51b-7fe95a287f42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58aacd87-9e23-4490-a20e-c573e9da7367",
        "cursor": {
          "ref": "1dd557df-7d14-412e-9514-9938a3181585",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7fb518b3-8e05-41bb-b23a-706d389fb4d3"
        },
        "item": {
          "id": "58aacd87-9e23-4490-a20e-c573e9da7367",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3524540a-ca73-4bba-861d-9b12baf4eed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e009f91-dc7e-4c41-b517-a621112f4fb3",
        "cursor": {
          "ref": "bd4849f7-1319-45dd-a674-a001703830a6",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d9f79fa3-7e62-40da-9dc6-38b0d0ded008"
        },
        "item": {
          "id": "2e009f91-dc7e-4c41-b517-a621112f4fb3",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c9dbdabd-2e7f-42ae-8242-8d0ac9228a80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ffe0de-599e-4df2-86d3-a55e628e9592",
        "cursor": {
          "ref": "032deb1a-efa6-4f7b-8e52-d260105b3e0b",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "94e54645-8211-4128-b487-0842c609ec2e"
        },
        "item": {
          "id": "24ffe0de-599e-4df2-86d3-a55e628e9592",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "cdc591c6-de8c-4851-b16a-8e500ac10381",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa06e11f-ce41-4dce-bea6-b6af092205ff",
        "cursor": {
          "ref": "652cb1f4-8f57-4a1f-9b95-fb5376fd337c",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0e7b2d18-9514-4bb6-8ad8-89b472de04e7"
        },
        "item": {
          "id": "fa06e11f-ce41-4dce-bea6-b6af092205ff",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "020b59d1-788d-40d0-bcb9-2d97144b40dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ba4eefc-fff4-4963-b323-b06464526f22",
        "cursor": {
          "ref": "9f8af69b-3637-454a-8903-87f7b86cb3b7",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "5896fcaf-8c3a-4963-b4b8-963d665ad2f5"
        },
        "item": {
          "id": "2ba4eefc-fff4-4963-b323-b06464526f22",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e937b45f-27b7-4e68-bb1f-860dec49de1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e108e7bd-13e2-4f84-89e9-96eb7f2717a3",
        "cursor": {
          "ref": "725ff84c-0257-4460-b240-e70f54a2ffc9",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "c3339d50-6a0c-4ab5-bd22-8ab8b601cc4e"
        },
        "item": {
          "id": "e108e7bd-13e2-4f84-89e9-96eb7f2717a3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5aeb857d-f010-4755-b3d0-98e071aa0be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e01213bf-0055-4b33-a5a6-504654f04600",
        "cursor": {
          "ref": "c06c3872-7b0d-4a4d-94a3-c1b32749e4e5",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f4881c22-9f7a-4095-b79b-8bb8532a30ef"
        },
        "item": {
          "id": "e01213bf-0055-4b33-a5a6-504654f04600",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "10cf8404-db42-49f9-b755-d3c4c0ddfc2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d37f6727-9ceb-4d8a-8117-23deca30777d",
        "cursor": {
          "ref": "6913c509-196f-427d-b249-b19707f576cd",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "55e8a4f6-f599-4f14-bc92-63b5e37f1cd3"
        },
        "item": {
          "id": "d37f6727-9ceb-4d8a-8117-23deca30777d",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "f8575da6-f19d-45f3-a557-b699ff8ae21c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "317cc0b1-2e64-4a17-9a2f-8131c697f114",
        "cursor": {
          "ref": "117cbcb3-930c-4b65-a963-ebf362a47024",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "8c3a54a8-27ac-41aa-b7a0-0a4b1e8407a9"
        },
        "item": {
          "id": "317cc0b1-2e64-4a17-9a2f-8131c697f114",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "28588fb6-6a3b-4671-a3fc-f0c7c92d64d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "529a51bd-5c8a-4ef6-9989-ad4cf89608c6",
        "cursor": {
          "ref": "8661ae45-1ebc-4657-8edc-fa595931e255",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "1d7e3ee2-036a-473e-88c8-dbf0b6382493"
        },
        "item": {
          "id": "529a51bd-5c8a-4ef6-9989-ad4cf89608c6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "a48dfce0-f7e8-4652-8ba8-e58572fa9dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "b368fa0d-e2e0-463c-a5e0-0d1540973b55",
        "cursor": {
          "ref": "7a5d59e2-6ffd-4178-8a6d-639c30e01b9f",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "e9b6e3f4-c914-4d00-b004-39f07dd67d13"
        },
        "item": {
          "id": "b368fa0d-e2e0-463c-a5e0-0d1540973b55",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "10c40beb-108e-4eb1-a7ab-72b51b978040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5d687aa4-acac-4c05-a123-aa93455bfdd6",
        "cursor": {
          "ref": "949f1adc-408a-47a7-a0dc-3ae0244d0ce1",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4ca01e93-fa26-4257-bc69-e7b091ae6fa9"
        },
        "item": {
          "id": "5d687aa4-acac-4c05-a123-aa93455bfdd6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3d919aa9-e87a-4967-90cf-6301387d42b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05aa7168-a9fb-423d-81ab-355984a0d2a2",
        "cursor": {
          "ref": "6df8434c-e01a-488d-8df3-a3da3e04d03f",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "005a9af2-a602-41fc-a8ab-007874dc4aef"
        },
        "item": {
          "id": "05aa7168-a9fb-423d-81ab-355984a0d2a2",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a38132c0-2695-4893-a2ba-ca1267566102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "f6a7a7ce-d80a-4378-8ce3-0acf2ccbcd62",
        "cursor": {
          "ref": "60df6874-3468-4659-9811-02fd4701a8a6",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "1d879f8c-6aec-4521-a5e4-323d98a0c12b"
        },
        "item": {
          "id": "f6a7a7ce-d80a-4378-8ce3-0acf2ccbcd62",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d14809ef-6f18-4d51-8167-20ad8cd26814",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1229,
          "responseSize": 1523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "00db052d-6ab9-4352-9930-97158ac011dc",
        "cursor": {
          "ref": "474ae93a-29b4-456e-b3ba-77b0830a24ad",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "ad2cb965-90bf-4d37-865b-bcdf4803239e"
        },
        "item": {
          "id": "00db052d-6ab9-4352-9930-97158ac011dc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d66b4817-4ddd-48a0-b747-55467db7b76e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "ca49d8e6-8e7e-43e8-a1ec-b5c70dc6f4b7",
        "cursor": {
          "ref": "ea15f1bd-6816-4302-a4de-ad1e168660a7",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "dd18c3c7-8842-4faa-9d36-a22ee101055d"
        },
        "item": {
          "id": "ca49d8e6-8e7e-43e8-a1ec-b5c70dc6f4b7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "37005ccc-900b-46a8-9036-3a56904970a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 119,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "3806ce67-4c30-44ca-a4aa-333a89199a0d",
        "cursor": {
          "ref": "9efa294a-ee52-42c9-a570-bc2edb7f81b6",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "4f4df08d-fb73-444e-b457-1b1741fbec06"
        },
        "item": {
          "id": "3806ce67-4c30-44ca-a4aa-333a89199a0d",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7c01770c-66c4-43e6-a84c-2e2c910241d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "702d72d7-073f-40fe-9e65-de4afa9e15b6",
        "cursor": {
          "ref": "23deb550-dcf7-476f-96de-b65fa8aaed48",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d6132c96-d457-463a-9b12-d19492d2c897"
        },
        "item": {
          "id": "702d72d7-073f-40fe-9e65-de4afa9e15b6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "0549b13b-4cc7-4e5c-8062-0d4d7a405a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "6075eb6d-cfbf-48e1-ba35-e008a82a8f4b",
        "cursor": {
          "ref": "8be1a716-d747-4fa0-8df9-93c0c8833537",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "029dfc50-3298-4bdc-9845-c2f7159cb219"
        },
        "item": {
          "id": "6075eb6d-cfbf-48e1-ba35-e008a82a8f4b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c91bf894-187b-4215-8436-e811ad47d74a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef13c88-8589-444d-bc92-efe1975fca6c",
        "cursor": {
          "ref": "abe13801-6095-481c-bedd-5e8ddcfa8a08",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "d84f8338-833e-4bf0-aea4-304f3ee6905a"
        },
        "item": {
          "id": "bef13c88-8589-444d-bc92-efe1975fca6c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7a16e56f-9353-4d1e-931a-425802aba2e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adfd5476-0c0f-4b23-ac13-5e3d1546ba6e",
        "cursor": {
          "ref": "9bc42fc3-8b10-449d-9adc-c665632bb967",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2cc1d6c1-047c-4324-a2dd-991a8c379b5e"
        },
        "item": {
          "id": "adfd5476-0c0f-4b23-ac13-5e3d1546ba6e",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "54d24864-0ed8-414e-b7fd-d98aa85c4bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bfb38c2-f5a9-4db8-92b4-778a29540c21",
        "cursor": {
          "ref": "2ad7d3ae-6e28-422b-a634-53d42f6d2818",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "b69ec10b-e4c1-440c-a7c7-1388578d6d97"
        },
        "item": {
          "id": "0bfb38c2-f5a9-4db8-92b4-778a29540c21",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "a3e299ad-6cb7-4223-b198-cf35c954d877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0a827b-0802-4826-9c3b-1ef292e1daf8",
        "cursor": {
          "ref": "08f8a36d-a3a2-4948-adcd-4f6fcc03c5e6",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a6c1885a-b973-423f-9305-97dd30cf77e7"
        },
        "item": {
          "id": "7a0a827b-0802-4826-9c3b-1ef292e1daf8",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "afa14c63-0012-4cc2-827d-4f99c6023efd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b26cf3-5b5d-4921-8f7e-0db025a3e351",
        "cursor": {
          "ref": "beb2ba03-a2a5-499f-9a1e-6bbb46cd8caa",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3609d8db-a173-4cec-a5a9-2349ecc99010"
        },
        "item": {
          "id": "66b26cf3-5b5d-4921-8f7e-0db025a3e351",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "8c0edf54-3b03-4e1b-9b48-1eaa1959ea10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61653594-24a2-4607-b9d3-fdd0bb168a6e",
        "cursor": {
          "ref": "4ea78abd-cbdd-43d3-881e-73e3c9d35755",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "60dda03b-7c24-4af5-8b57-7e2e217b99be"
        },
        "item": {
          "id": "61653594-24a2-4607-b9d3-fdd0bb168a6e",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "93db24e1-2bef-4ed4-8a7e-cee5700641fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20369299-c5f0-4bc8-afdb-568100fb1801",
        "cursor": {
          "ref": "95f29a1c-7a85-4a03-aaa6-f97f4dde5f54",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d0ef906c-363b-42e6-9c82-56adb4ae2edb"
        },
        "item": {
          "id": "20369299-c5f0-4bc8-afdb-568100fb1801",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "284acc1c-25f7-4c18-a965-ecd4d9c6b686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a7b326a-bce8-4b35-a99c-7a7c7c31c4c5",
        "cursor": {
          "ref": "3081e686-3f0b-4e65-8afc-716dea6692bd",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "cdf43e0f-74e8-4ba8-b57c-6b337d9fc5bb"
        },
        "item": {
          "id": "6a7b326a-bce8-4b35-a99c-7a7c7c31c4c5",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4e3095d5-dcca-454f-be3b-5b5529be3546",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9feca207-4833-405e-af31-25358af634b2",
        "cursor": {
          "ref": "8c01c9de-b22f-41d9-a0ad-4568845fda59",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "340bc775-bd2e-4be3-b6ee-5129624b4aca"
        },
        "item": {
          "id": "9feca207-4833-405e-af31-25358af634b2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "370a50f6-181c-4b22-beda-46b8ea1c1a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90959f6d-62e7-4aba-aff3-f325ae7a68d0",
        "cursor": {
          "ref": "3facab14-f7ae-47c7-bbbb-04d71bcd1b0c",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4f7e2e24-c591-4bbf-a0e2-ac5f3f30a102"
        },
        "item": {
          "id": "90959f6d-62e7-4aba-aff3-f325ae7a68d0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "60a9c34a-90e0-4345-a02e-accaa1ec7369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d30c3a1-b12e-4d97-81d2-b71e3aa82709",
        "cursor": {
          "ref": "a664e8bc-0692-4465-840a-7f6b1acc0481",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1b2b0f2a-304d-488f-9b95-0c73be20939a"
        },
        "item": {
          "id": "8d30c3a1-b12e-4d97-81d2-b71e3aa82709",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "08129d08-ba7c-4f3e-af40-94806c2b0d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c2714a-79e6-44f8-b0ab-17898c5a60b9",
        "cursor": {
          "ref": "e4393aac-19b1-4142-b8a2-e49bd44a3bc0",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "e9cee030-c1b0-4660-a053-451654f799a6"
        },
        "item": {
          "id": "c1c2714a-79e6-44f8-b0ab-17898c5a60b9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "b555542a-68c9-410e-b26d-5d24e336acfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "175bf67c-ce5f-4d80-82a9-ac4c1f45ee27",
        "cursor": {
          "ref": "37201075-5752-44b6-8a98-b0d1c59fc2c1",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "f8cc2bf1-5429-4d29-a171-5b4c4e85b631"
        },
        "item": {
          "id": "175bf67c-ce5f-4d80-82a9-ac4c1f45ee27",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "6eeec76e-d88c-490f-b4bc-9988b7f6105a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1251,
          "responseSize": 1517
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "eb766fa0-8de4-4a55-9917-e84968cf91a9",
        "cursor": {
          "ref": "9faef687-2969-492e-8ebd-9a36685fb49f",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "f43dcf4d-890b-4d8d-949b-51871458e6b9"
        },
        "item": {
          "id": "eb766fa0-8de4-4a55-9917-e84968cf91a9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9ad3e1f5-057a-4ffe-a5e5-0676e50d183b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 923,
          "responseSize": 1503
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7673681a-bf70-4be3-8636-c3d08b845bf4",
        "cursor": {
          "ref": "817b343c-b124-4c08-89f7-757bed6d4204",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "861e5b4b-f51f-4a8e-bd36-a089dced1759"
        },
        "item": {
          "id": "7673681a-bf70-4be3-8636-c3d08b845bf4",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "8751e4aa-8eec-481f-9ae8-7fa1a6ee9e81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "5efd4114-a178-44b2-8a93-1c338d194167",
        "cursor": {
          "ref": "ebdd20e7-b9a0-4e74-adf5-0b867e82c458",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f225ffd6-9843-4111-9488-3eea710e6d5e"
        },
        "item": {
          "id": "5efd4114-a178-44b2-8a93-1c338d194167",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "fc408bbc-119a-4e49-99a6-2e02c3bd256a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 781,
          "responseSize": 1502
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "6265d26c-8b13-48a8-9189-c9d5170d3e51",
        "cursor": {
          "ref": "d7b45029-e1b1-420a-b380-d9bfa7f5377f",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "69306a86-e215-42a3-a7c5-cb49dc28e442"
        },
        "item": {
          "id": "6265d26c-8b13-48a8-9189-c9d5170d3e51",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ece7343e-603a-4f35-8a08-8c187a134eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f1c6c599-b88a-4428-802d-c9619dbc50f0",
        "cursor": {
          "ref": "0af9162c-ab79-4988-b7e3-0568d00e7707",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "86df2d8c-5ee8-4343-867e-4e512696041f"
        },
        "item": {
          "id": "f1c6c599-b88a-4428-802d-c9619dbc50f0",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0d1e085d-677b-4c2d-976d-f803a12e2574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece825a4-df06-4b1a-aa42-55c918dce578",
        "cursor": {
          "ref": "2539e5cd-3158-4bf5-8881-b6b4f8fb1134",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9bbfb8b6-b321-41f9-8f19-04faa39a9747"
        },
        "item": {
          "id": "ece825a4-df06-4b1a-aa42-55c918dce578",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0b1c98fe-cbe0-46b1-bbaa-ecd671411fcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e862c8-130f-4bf3-b080-35f893636341",
        "cursor": {
          "ref": "d569d5d3-e7b5-40a2-8a1a-3b977000bff1",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "88b9855a-5439-4976-9be7-385ceb447f6e"
        },
        "item": {
          "id": "48e862c8-130f-4bf3-b080-35f893636341",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "34447b46-780a-45c4-810c-e22212f5bacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2761b038-627f-41ea-82d0-d5537ece9f5e",
        "cursor": {
          "ref": "d5891a4a-95b9-4e94-beb4-a49db2d27788",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "637865e1-0144-40c8-98e2-2a42e8c0f217"
        },
        "item": {
          "id": "2761b038-627f-41ea-82d0-d5537ece9f5e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "b45a109b-8685-4a91-8407-b0361cdfc3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a00063f-5465-46e7-8759-e3a5145dd0fb",
        "cursor": {
          "ref": "46724ef5-f038-4652-9cb8-98373ea43ae3",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "07e3e617-70d7-43e7-bfff-7f3170f6f863"
        },
        "item": {
          "id": "2a00063f-5465-46e7-8759-e3a5145dd0fb",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "e3ae6d98-d82c-4a2b-b76f-43647c6cf2c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621ea993-e490-4f61-bb9b-5bfb3aa1d865",
        "cursor": {
          "ref": "02a653c8-7cd7-4aa2-9613-0330e2d59288",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4198cad3-fbf3-44e3-88b2-ed589f08e1da"
        },
        "item": {
          "id": "621ea993-e490-4f61-bb9b-5bfb3aa1d865",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "65cff432-6738-4e2d-b50c-307fcaf0d83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1536,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "369164ba-81f4-40c4-aeae-89c4a74d760e",
        "cursor": {
          "ref": "11d09f2c-a540-4d16-b928-cd3328b0a4ec",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e0f392a6-942b-4c9f-884f-2f9fd096cc4d"
        },
        "item": {
          "id": "369164ba-81f4-40c4-aeae-89c4a74d760e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b4c04b80-f726-482d-99d1-da7229d05a70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0217db31-44ae-456e-b8b4-b918faf0371d",
        "cursor": {
          "ref": "2acfbfda-46b9-453a-a8fc-5903a182bd96",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6844054b-c8fe-4bf8-9f64-9dd252fdf710"
        },
        "item": {
          "id": "0217db31-44ae-456e-b8b4-b918faf0371d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b22f6e42-3572-413e-9955-4e305ec5ab6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d89d415-794c-4a46-8dc5-f096ef9471c7",
        "cursor": {
          "ref": "90f3d25a-f507-43e9-86b8-b232e9eec029",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "8c790a88-f75b-488b-9bce-036fef5bbec7"
        },
        "item": {
          "id": "5d89d415-794c-4a46-8dc5-f096ef9471c7",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "094365db-ced5-470c-9fc3-c35a10c131c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c06f328d-b455-48c0-8d4a-cfea62df2f2a",
        "cursor": {
          "ref": "a1807e3f-c185-483b-94a4-58fb9ba9153b",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "69907a50-0371-4693-b0fa-6c2d90e27379"
        },
        "item": {
          "id": "c06f328d-b455-48c0-8d4a-cfea62df2f2a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "08bdcfc3-e63a-4c3a-b27c-1afac09f7173",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23cc3a2b-2904-44b6-a1aa-c251f723e805",
        "cursor": {
          "ref": "09f7088c-4463-4ceb-883b-a6ed2ff86e1d",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "d7b5e043-1fae-4f5c-8942-cb4c5798e6c5"
        },
        "item": {
          "id": "23cc3a2b-2904-44b6-a1aa-c251f723e805",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "2531629b-8c8f-4c13-8a07-e0db88fbcc91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a9cc1f-6809-432a-89d6-158604326c5f",
        "cursor": {
          "ref": "dd636817-7a50-4aa0-b9f3-c8b46344f45f",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f0cb65a5-27f8-42bd-a780-d63e95156f5d"
        },
        "item": {
          "id": "95a9cc1f-6809-432a-89d6-158604326c5f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d3a4de9b-4b22-42f0-ae4c-82a90a80247d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84820b53-f3d4-4d32-8202-d0d4caea593b",
        "cursor": {
          "ref": "63eda38d-f25f-4880-83df-1b33c7c29bad",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "8b6b779a-e6c1-40af-bdab-1deee57647c5"
        },
        "item": {
          "id": "84820b53-f3d4-4d32-8202-d0d4caea593b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d9fb2253-228c-48a9-ab54-1cac765bfe5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f722833-c3ce-47d9-a87d-369635f003a4",
        "cursor": {
          "ref": "fe3ab7e6-2a82-48f1-b483-5d2d07a80c33",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "fb034090-42de-4b8c-bf24-fbeeff5a5483"
        },
        "item": {
          "id": "7f722833-c3ce-47d9-a87d-369635f003a4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "f6eb7e70-bcbe-41f6-9d5c-64b2034b66ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 1537,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67de2c9-d353-4c36-9a9f-6e486ed6c9e4",
        "cursor": {
          "ref": "da063d2b-302c-42cc-859b-af0925c4292f",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "4f9d2ec5-3f8c-43a1-b390-60dc0d209923"
        },
        "item": {
          "id": "c67de2c9-d353-4c36-9a9f-6e486ed6c9e4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b8a2e878-7b52-44d1-9ffe-fafce53c2267",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a877139-a27c-4017-b61a-855d151b82cc",
        "cursor": {
          "ref": "39b54461-6c6b-4f52-9f15-444844843a20",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "7ef2b74f-a260-4424-acce-602384d94456"
        },
        "item": {
          "id": "3a877139-a27c-4017-b61a-855d151b82cc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "440b8bb1-6283-4b98-ab8f-91adc03d298b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca4d601-cd0e-4aef-a74b-9d7f95bb1e83",
        "cursor": {
          "ref": "f92828bb-21cd-4142-9de2-8c57ba7e6d18",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "9c4496ff-7ea2-42fb-abd2-c798a88c7f8f"
        },
        "item": {
          "id": "3ca4d601-cd0e-4aef-a74b-9d7f95bb1e83",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "06f01248-f9d1-4ab4-82f8-3e9bdb340900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2380efa-6b48-4b08-a264-34d71c5dd813",
        "cursor": {
          "ref": "b051e4a2-18c0-47c3-8334-1e85908450d2",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "95756b61-2cf8-45c5-bc6e-b4b130f829ee"
        },
        "item": {
          "id": "f2380efa-6b48-4b08-a264-34d71c5dd813",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3b612694-10a1-408d-8a3c-4e17e8c5edb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08ef3122-9cfd-4ede-9778-462eea32dd5c",
        "cursor": {
          "ref": "dd61e73b-14ea-46f3-8959-29c262423dbd",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "43dfe448-d823-4b87-8324-08be086d1d25"
        },
        "item": {
          "id": "08ef3122-9cfd-4ede-9778-462eea32dd5c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "998466c4-1789-478a-bac1-cf31dad76c1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d35d32e7-7a84-43c7-8fcf-f57dbda4a1e9",
        "cursor": {
          "ref": "95a9dfc6-87d3-42c6-913b-49e6d132ac02",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "eb2da64e-de33-4ad5-ac05-e4a7c57d2b2b"
        },
        "item": {
          "id": "d35d32e7-7a84-43c7-8fcf-f57dbda4a1e9",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "16bf667b-5ff6-4e74-8aa9-c1b68d1f2432",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "596c9830-68ae-4f22-9acd-fb4c01864e94",
        "cursor": {
          "ref": "be0a0b3a-c2d4-4462-b2f2-c709a658c4c0",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ece5cf03-1ccc-47d1-9aec-441362477304"
        },
        "item": {
          "id": "596c9830-68ae-4f22-9acd-fb4c01864e94",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "024a20ac-a692-4660-ac7a-627bd791eb46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5a6defd-9f7e-4deb-a53d-1af5928f5f06",
        "cursor": {
          "ref": "66674cbe-8757-439b-babc-e245a6d6c653",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "f086273c-eb46-4ab2-bfd8-10aa1e742f2e"
        },
        "item": {
          "id": "c5a6defd-9f7e-4deb-a53d-1af5928f5f06",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "97a48f0b-f606-481f-9ce8-9be61157520f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "015c8968-14a3-4bfe-8f26-6323d6ad2464",
        "cursor": {
          "ref": "07832ddd-a49b-4877-8c77-0c115114a246",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3c60b82b-561e-4097-b30e-110699fe270e"
        },
        "item": {
          "id": "015c8968-14a3-4bfe-8f26-6323d6ad2464",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "688929aa-da20-4d86-a14f-31cd079ab555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a20a8fce-9186-4ea9-aa85-7df47e369a53",
        "cursor": {
          "ref": "7a17a077-5fc5-4a44-97aa-24885a936491",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "0b0af53d-ec2a-48a8-9721-3a51644a060c"
        },
        "item": {
          "id": "a20a8fce-9186-4ea9-aa85-7df47e369a53",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "25e14b36-6238-4257-ab60-f8e1d91cbed5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f292569-fbad-4763-a42e-eec728823196",
        "cursor": {
          "ref": "456780af-1b6f-4909-bc01-c1bc8f04b13d",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "c431e253-833d-459a-892a-8767fafc5856"
        },
        "item": {
          "id": "7f292569-fbad-4763-a42e-eec728823196",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3a9548b6-207f-4822-8729-669b63993612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f7bbaa-50c4-4c2e-912e-dd7b35cbb2ae",
        "cursor": {
          "ref": "7b03b206-c4e3-41d9-b78b-5826b1e02b0c",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "a07084b6-7c28-4fc8-9347-1cd1f5bcedb3"
        },
        "item": {
          "id": "97f7bbaa-50c4-4c2e-912e-dd7b35cbb2ae",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "08fd025a-c3e1-441d-9a8b-dde8fe866f2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b37d1b-ab66-4712-8831-e899fe1fb8c2",
        "cursor": {
          "ref": "7eeb8b6c-5424-41a4-80d8-c4f797029e82",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "465f95fb-2c00-4423-88b7-e2920026658a"
        },
        "item": {
          "id": "09b37d1b-ab66-4712-8831-e899fe1fb8c2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c5f9fbb8-ebac-4e55-a120-e9b0c0bbd48c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab82a521-5165-4ea8-b6f9-d63da5226271",
        "cursor": {
          "ref": "e2369e70-a52e-44d4-ab6f-622c0ca20909",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "3e4f2511-9b1b-4586-b5a3-995b4faae36f"
        },
        "item": {
          "id": "ab82a521-5165-4ea8-b6f9-d63da5226271",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2e08ffb5-1477-42c8-a65c-1b4416c0f0f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f97482c-2c6f-42a5-b46c-c07152584892",
        "cursor": {
          "ref": "c23c4da6-7f59-4157-b599-147cb54c7789",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "a69275b9-996e-4e28-a3b4-2324a2373021"
        },
        "item": {
          "id": "3f97482c-2c6f-42a5-b46c-c07152584892",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f4a3fcd8-87a7-4858-904e-b4c036d58d9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85145a16-ba75-430d-b6bd-9e71344de0d3",
        "cursor": {
          "ref": "876a6986-9edc-479d-8e9c-19ad9cab3d72",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "86f5565d-2231-4d39-9a1f-117e62f45791"
        },
        "item": {
          "id": "85145a16-ba75-430d-b6bd-9e71344de0d3",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "49f04207-6150-47de-9b96-3429b63b0cf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04cfdf20-655d-4466-9e4d-8238c2fd6cbb",
        "cursor": {
          "ref": "07cb41f0-37f5-4f11-9738-e277cc77e3ab",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "2b20ec2a-3b76-4780-8c0a-b9f9bf3a8a5b"
        },
        "item": {
          "id": "04cfdf20-655d-4466-9e4d-8238c2fd6cbb",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "3d358af2-0a23-4448-a0d5-62fee11a9925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "630f07a1-b7b4-43b9-870d-5950e51f2263",
        "cursor": {
          "ref": "c2164ad7-a0ae-4ac1-8dc9-d03874f2da97",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "dbbc892c-6c42-4b7b-a23d-0159cd404f17"
        },
        "item": {
          "id": "630f07a1-b7b4-43b9-870d-5950e51f2263",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "e17c0c47-5327-414c-9347-f3ae16771161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477f01fb-8f1c-4353-96b5-82a33bc2341e",
        "cursor": {
          "ref": "06c976b1-3631-43ac-944f-a61d81f40a41",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "79a53ed3-8b84-4a03-87fa-38e99758ca91"
        },
        "item": {
          "id": "477f01fb-8f1c-4353-96b5-82a33bc2341e",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9c51cf9d-1f0c-4af5-8877-83827b3b1b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c856ffdf-34ff-4f8a-a2a8-6571614e3b21",
        "cursor": {
          "ref": "34b539ee-71b3-41ee-bd18-a2dee27bc6c5",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "598fa679-e9fe-4287-b7b2-88f5855934bd"
        },
        "item": {
          "id": "c856ffdf-34ff-4f8a-a2a8-6571614e3b21",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "acecce2e-344f-4c80-b8d8-0c91d7277a3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1433e7-525d-450b-9443-892c588aa4cf",
        "cursor": {
          "ref": "c324f5c3-eaeb-47b1-ade6-2a1cd84d27d9",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "69565412-1770-4ee3-b7e5-6afd47a1236c"
        },
        "item": {
          "id": "6b1433e7-525d-450b-9443-892c588aa4cf",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e329b29c-3ba5-4c5e-b15c-3ff7cfa9ef93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987487f2-464c-40b6-a3b2-4175d640a7ef",
        "cursor": {
          "ref": "05618605-a287-4f14-a686-db3932119095",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "88b5b3f0-c795-498d-acca-ccf65adf9148"
        },
        "item": {
          "id": "987487f2-464c-40b6-a3b2-4175d640a7ef",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3fa8f22e-d404-422a-bbe6-e680754e7961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 1083
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:277)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d194ee-1745-408c-8263-a74d088ef93f",
        "cursor": {
          "ref": "9719962e-dc49-4361-8c68-a51fd2d6a27b",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "36803779-d609-483d-b359-7907c3d5dd82"
        },
        "item": {
          "id": "a6d194ee-1745-408c-8263-a74d088ef93f",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d80d6dcc-c1b2-4012-a483-23398164167c",
          "status": "OK",
          "code": 200,
          "responseTime": 2380,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "33496d9f-6a5e-4fe1-aa59-209884f27ae9",
        "cursor": {
          "ref": "e4a1ab54-54bf-4e0f-afc6-1df085574904",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "b786b4b4-414a-467e-90f6-04886f35d012"
        },
        "item": {
          "id": "33496d9f-6a5e-4fe1-aa59-209884f27ae9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ce125174-840f-43e4-9268-5ae5de86003c",
          "status": "OK",
          "code": 200,
          "responseTime": 780,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0d5cfa8-9de5-4af9-a077-54a45a4c9deb",
        "cursor": {
          "ref": "469b5ba6-d26e-4231-b5e6-f7d7408e4365",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "7909a80d-f693-40cb-bef1-4f347115ebfa"
        },
        "item": {
          "id": "a0d5cfa8-9de5-4af9-a077-54a45a4c9deb",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "a0d5cfa8-9de5-4af9-a077-54a45a4c9deb",
        "cursor": {
          "ref": "469b5ba6-d26e-4231-b5e6-f7d7408e4365",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "7909a80d-f693-40cb-bef1-4f347115ebfa"
        },
        "item": {
          "id": "a0d5cfa8-9de5-4af9-a077-54a45a4c9deb",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:280)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "c0ab69b2-0ee6-4c34-90b0-d00e70e61526",
        "cursor": {
          "ref": "7286d97f-ace9-4769-aa41-5319e394d7e5",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "0024f064-d856-4faf-b1ba-89dea0af01a6"
        },
        "item": {
          "id": "c0ab69b2-0ee6-4c34-90b0-d00e70e61526",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:281)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "b2ab2360-0d48-4dd2-a547-614f76378480",
        "cursor": {
          "ref": "b0ed7c6f-651c-4a7d-ab86-dab62ab164af",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "7c912139-471b-4f32-bf79-916c958bd744"
        },
        "item": {
          "id": "b2ab2360-0d48-4dd2-a547-614f76378480",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:282)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}