{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9ea23d6a-3f4f-4716-9ab9-cc8abf06af9a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a5a22280-d35f-4293-9680-fee27cf1eb31",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "302dadc9-f082-48ee-8f31-38d453e24516",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "95712b43-035b-4ae3-842b-5e4b43a636f2"
                }
              }
            ]
          },
          {
            "id": "5a5929d7-bf68-4fa7-957c-15e4870bbd86",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c2ea7b20-4358-4de8-8f4e-e8ebdd8a7c5d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "26973c99-178a-4f5d-b353-35b9bfca78ad"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8ec0ab34-f2aa-4484-9be0-93e6d0384d2a",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "500d56dd-4d25-4dc0-8613-10fbb786b0f4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e72e4e4d-5154-4337-b8a1-3e738c0c9ca4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb9a4b5e-3c74-4462-be61-c792a2b6c6a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e0f45e1a-3def-4495-b488-153a91d79705"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d9a1d691-3b44-4398-8c9a-06c8e5b975aa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "27ebba6c-5830-4b6e-bebc-26c9865e3f67"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f20693de-d092-4703-9af3-c3dffd68f637",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a0479169-9974-474f-9fbb-36c72a1d959c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b27b9ae2-247e-4b5e-b3aa-55f24535371b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "40da0503-264b-403d-8b14-c4d03557ec12"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91843527-5775-49f6-82b0-4ab6ddb120ba",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5dd487b0-22e0-42d7-84e4-b361ca0dc39f"
            }
          }
        ]
      },
      {
        "id": "683955cb-2076-4603-b5cd-23e1c2809c4d",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "9fa334bd-3c44-4c0c-97e7-c58af7bc17a1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "41801c84-fd65-4d21-8696-c9ea833747df",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "02c15c50-adef-4153-909a-bf9af2cb464c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8adbf3f-efc3-4ee2-ad17-1833e8678f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "16367725-52e8-453c-bb60-f6cca0ac8fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2123234b-9e1d-4212-af90-1fad75244332",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd279cee-88ae-4101-b8bd-6587928e4117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc171914-a4ba-4327-be35-837011465d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82ddf54a-a6f5-4eb1-8f5e-99ca2a9ae650",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "493ea691-ec52-4728-a096-7f5cb81ca186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e12249ec-ad9b-4b2f-8e4c-5fef7b47b266"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8936b811-4e32-4420-8335-86f9b58a4fbd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "23310f18-f8ad-45b7-80f1-5ebea5bcd67e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0f1e3f3-b0bc-46bb-8216-e2b075b6a118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4cff3181-640e-425e-b8d8-132dfca22251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3eecb93d-9c16-45a4-bf93-e768406b2a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8015e137-5377-44be-9013-a5f2143361ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7dd6e9e-92e0-4197-bee1-d497d458f537",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebeb7e7c-eac9-4b28-bc2d-90c1139c0ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "207dd290-e30a-4900-ac57-c972179c278f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afba2369-0f55-46a4-8007-996eef9f8b96",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "6ea914c8-9dfd-4238-820d-3ae64f708de4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "83b787aa-c1c5-4080-ac3b-509c1073b37c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b0603c2f-f8a6-429f-ae0e-f045b998727d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "132a2433-b681-4dd9-b2b7-644ba07f8b4f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "47466434-d5a5-45b3-bf1f-6367e7030eac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "38e1892e-e977-4c13-8732-0f4862cfe1d9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "53118cc2-793a-43d3-a0f2-2fe057775ac9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "78b26716-a2bc-48e5-ba9c-cd0d93a90794",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "70d58ae0-3aab-4178-8435-5c3a8e6f473f"
            }
          }
        ]
      },
      {
        "id": "84b88697-70e1-45d8-b5ce-d6eb60b8b036",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "733037ea-cf88-4b56-bc7b-fdf73ea7db1e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "60cfd598-99e1-453c-8de7-8233c14564ae",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "60462632-e5c7-4616-964f-079397d24718",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73aec87-e29e-4919-a84b-53a06fc306ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6145f1e4-4d34-40c2-b6b6-54eb2c612519"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51f1434b-83b1-4352-914b-d7e51bf493dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "983f1ebc-f277-4746-836e-3d22c0e2b891"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50943a1e-f9aa-40e9-892d-5d484b8ae80a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc5a1b4-4afc-4f74-adcd-f41736d3e12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19e15428-9e68-4141-bb56-c877993806db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c72ea45-b0c1-4bde-b742-b126000d83fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3db1cefe-7afa-4230-8456-37cca40c6f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d553c61-951c-4965-b4df-e174ea4acbdf",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34dd63f5-505d-4cb2-97d4-4b334202e19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "141836c3-616b-4b76-8d92-3de38093af76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a56fe785-597d-4292-97c7-e09f0dcad308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c4d1565-66e5-4f11-873b-325faf9838a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf938b3-2f09-4c22-9ab4-77b5b1e7682f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d52cb7da-7f6f-469f-ad1f-7947ac8fbd4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf120e7-6b83-4cca-87d6-3e5b68f16043"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fc17e15-ca57-42b0-8f55-c7f918e95a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aff43aab-99f6-404b-abd0-ce25eb5b6e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1591b609-2444-4bd8-a98a-b8118c668657",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52982304-8d3f-4d82-a915-9f17477f3596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae9a561-55a4-4c50-87dc-aebe76848e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254d84fa-b953-4bca-96f2-f4bb209d3ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4dfdb5be-bc46-4ff0-95e4-206da362a5ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bc474df-0381-4499-90ec-ba17098c7a4e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d5041e-e565-492d-8718-47aedf18dfd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04bbbc23-d2db-45e9-a58d-910beebd9529"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135ea717-e401-4470-9ea1-dca34c4fbb1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee3dbb25-b8c2-492e-a167-fd96697b3701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c29cc6d-1769-47e9-8af6-f3690c942724",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ef506e-d297-4944-bd3b-829583a44b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fb0d6ad-ee6f-4d7f-9b2c-c73bbc8331f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46a65d24-d918-42d4-b4ed-d51306dbffc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2b197129-0f51-48f1-a517-ba3403345d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98e4bdbe-0c67-493b-8c7d-6be30bf14863",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b874a2-722c-423b-8780-73868af32bc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5cd35f0-dcff-4e28-98cc-63004537dede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e358f94-16d8-48cb-8182-c04bac7b57d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75f5961d-5bd4-4d68-a439-cc6b35032730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac043691-468c-48ce-bd80-2177fa29a2c2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7601fcc-a4d3-4077-82e6-36e4b55bad89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d4f3785-fd87-40e0-9433-6100df6354b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "545d28e5-b05d-474b-b28a-acfcf832185b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b81dad1-c639-404b-b22d-8d4426144e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce34bbf-a0b5-4abc-88c4-bfb02c59d90d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fe82f3d-39c3-4936-9be0-a1de646d2342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc16dd4-bdb5-4dd5-9364-b575718eeac6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f28fa13-6efb-4412-8799-eef11ffb1188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "809fa55f-3738-4ca3-8890-8d48d6d461bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e16f9b9c-40fa-40ab-9467-372913b3caf0",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1ddcee-43bb-43e2-af9c-8b8657d3551b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8771c065-f997-4fa9-b02e-9264e01f3387"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e216839d-9fef-4c25-825d-b1dfb836160b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e2ad3dbc-b248-4482-b274-531d719b6779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a44e014-962f-43a0-a0d6-13600beec300",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8db353a5-7fc5-4fa9-967c-0d34948ca2a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f486169-f2b1-413d-b616-635a577a8b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003982fb-191c-41fb-8887-904459abaf11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3e70810-08f9-45eb-bd18-f38453711bdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06664c0b-ef1a-4ad8-ad72-e2725c520968",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e696a49-cf40-4c7e-ad59-c1376cdd5d03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8656a33-49dc-4afc-a9f4-d9ca228cfd0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f544174-879e-4ad9-9c91-6213cbf8e700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab97cc9f-87a3-44cd-9b77-dadf1f8070f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea7373b-e20d-44d7-a410-5305bb765120",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd73b681-fb51-44d3-b293-90212129b9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c4b92ae-47f8-4790-a2b7-1c3266dc054b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3cf825-cd2e-4394-af27-d34ff41e243b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fa48c57-af6b-41e1-8dd9-aeb452d2197c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866e210f-52ce-452d-9c3a-d8d6fad68993",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f96469c-d9bb-4190-b33c-c66cf697d159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc5fd78-da60-415e-acab-944ce4e6aead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7b3e23-5021-4f88-a882-729a644ab6a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a4d00b27-5bb5-4bd7-9f95-36d072b83fc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97020f6e-63d6-45ca-8669-ae85d9452b19",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78a4fffa-9726-4aad-af1d-ca095ed7ce00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a467c499-083b-434a-b1d1-0a3d2bba17b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63b6d9fa-0e4b-4f04-b069-5eb256f2c688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d59933e1-c092-41d5-a16e-2429f5d3a579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "727af6fc-1109-4ea9-bba0-c6db35e683f2",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ff82d2-8900-4ae8-8901-d063ad298c07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16497c0f-912d-4339-baf0-989c44def1b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed731f7-f856-4192-abbf-e87377fcc44c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "195ac9c0-70bb-40e1-845f-1bbf57c265c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a127cc8b-0161-496e-8f11-5b0360424403",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff837ae5-314b-4bb7-ba51-34fdb2543792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b00b19e2-3452-4e36-87bc-1738ba75c8ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0552ac-4e71-4ec5-938a-9728fa03674b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7be5a1ec-bfbd-4128-a682-e88cb9ca4d0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbbdff5-d124-47e0-a5e6-b5eaafe73dfe",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efccd6b6-8e88-4cc6-a424-1eae2105ddc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8026f9d1-bf69-4ac5-b7b9-13a7b1a44eb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9980aed2-0007-4390-bf51-5abda95789b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17449d09-f113-4aec-a579-6d6d87dd38fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3b69da1-2beb-41f3-9831-b596a139ecca",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "048dca0f-dfa5-40b5-9064-107820a9c895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beff7571-16da-4061-b8a5-3ee774bcada6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aab3c8b-c638-4ebf-8e55-ba7d4cab20e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce8ef4d6-8e26-4beb-9706-f9a8ee7a8946"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc3b7f0-ff4f-4812-a2e8-f4155843b1e1",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23ed7c8d-5ee5-4735-a946-660187f4643a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83aaaeab-03e3-48d6-aa72-ba1bdb1d66b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee7d47be-df17-42d6-8569-1a9f1ba92d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3f4ff23-0059-4076-a377-9e81e3ef9d5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40f7241e-e291-436b-9277-b2af8110b139",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39e6510-5b70-4f84-89dd-99dcf45c1dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31d453e1-d737-4178-9aa6-fbce47abebf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a417f455-7bf7-4567-b93d-e1882cfcd301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b3e629c3-e623-470a-99c6-d6a7e1992ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe3aab6-0c63-4ab4-b7a9-015b1a889d94",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef762459-4285-48a2-8fac-7748d2ea19eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "196210f3-5f7c-4c77-9f25-a31876c3cf10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b388472-3645-47cb-a678-12bcfb874b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "21d8e8f9-cbf2-4dc5-a81b-db43374e0bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdad909d-d43d-4e77-ad42-ad3a8c59e469",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50365559-2fbe-456b-a816-3cc9f9906be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "600f3c63-5805-425e-ba19-519baae68fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c69081-51cd-4077-8bfc-fe76a5d79620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d1e8a29-b3a1-492c-8e82-0586b63c8ff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11bf4ef8-a521-45fd-95ea-a4d84b442e61",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "933a715e-ab14-4404-a0f8-e2f754f8bcf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca82d5d9-260d-49a3-bd6e-a8afdf4a8779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24223954-b322-4490-99a3-36b739ea9ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dfa2933-d5d2-40c0-b1bd-4036f497b482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "942ee1c5-d412-406a-b0e0-11d27c75f539",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffb7813-f66f-4b99-ae25-c39f1e09a0fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad05e46-5303-49ee-bf07-8cec711a197a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8047979-6d7c-4570-b63d-42e932667014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ede17104-e559-43c8-b46b-9cb865570707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b53d62-b134-49f1-9478-4955d755dace",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d19216-6483-4636-b8db-a688d3b16b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3d16a31-bdfe-44da-a451-8c48d29ef09a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9fc85e-be54-4952-bb22-a5542cc44e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b7ec23-bb0a-4dc3-a0f0-c3055592dc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815da1f4-efb8-4e7d-a6a3-b46ab8e68694",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41d0b039-f673-4654-bebf-cbee9861366f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f3fee32-de54-4459-96c3-419dec085988"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19c27631-7b28-474d-a401-8de4a12a0db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d69c2d2f-e178-4414-99e2-f1fe457e63bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883deae3-68d6-4e6a-a635-f6e49f5f16bc",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8228974-46d4-44b3-81dd-24c98593d1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0494f279-df7c-43df-a415-1d949782e6c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b68094a-374e-4fb1-92bf-892f5464f27e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef56d97-53ed-43b3-8a94-4c457ac11bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a64d42e-5e6d-40e6-b59f-915d1515f05f",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ec9162-c4e3-4a5a-bb92-81c51d64bfb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afdbac38-8f41-4af5-8558-4f47121fb687"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adafad35-5d63-4d2b-9442-e0cb38fa4c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "72cbed4f-9c12-4345-b358-a72bbb86cb01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2d3b8a-696a-4c8e-919f-0f8574345fc0",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9df937-edd7-4ec3-9fb8-db3e8a1eab7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1996a7c9-d135-4353-8db3-82ec4c2e871b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2614efab-f1c3-4f65-99b9-5747fca740f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b551a7d7-3031-4077-82a1-c1030a689b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35efa6d8-6ba1-4aaf-bead-9f8785031adf",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfa35802-c8b5-4845-af8b-7935fa126264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3a0c9ca-7f2d-49bc-9d76-e4f9470ba311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "977fe62f-dabe-4b5c-80ea-11479fa5741c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "700abd8c-7f75-4f60-a921-a5e8f079a056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cccfe8-21b8-4e1a-ab0c-be7f204429bb",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a9beb3-41af-448d-ac95-bc433ffc2b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4c1cc92-0eb8-45e9-8cac-be9c33af6b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e97f69-f7d7-4f61-a5dd-f365dc7ee59d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c758c44-f537-4c1a-a893-93161b53a5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72e0df1-3a71-4a57-8756-3bc3522ddb21",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbe86bc4-0ceb-4b17-8127-9073f4a50ba2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc4fd79-57f4-4e96-bf25-71ba60b38df9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45616bf2-20ec-47c0-8267-ff7c9486a242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1608f6bf-ff69-4957-b624-3b5e03c89aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c17d3a2-e174-44c8-94a4-60c9af8be446",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee2f8c84-c376-47c0-a781-8666b6631c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b036c73-da11-4870-8ec4-4cadca200ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee2deab5-7feb-4a61-b0f7-0cec2b117297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "40935b3c-c547-42fd-80a3-665c66089e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deedfce9-b6f9-499b-9950-a84593310832",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e2d30a-4d37-4ea7-a0c5-a3660aef892a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89e32f3a-e653-48f5-9064-5f6b12427024"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2df8de5-657e-420c-b426-1f2ba880cab9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "08410408-fc37-4e75-a2c2-c6743330d77a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbab7f88-0e8f-4a02-b76c-1d8aa40860e4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9d13251-1e1b-4059-9626-28055b2db213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5baccac-7789-48b6-a945-932f5ad50dea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626c0360-9dc3-4537-bcff-5acb35ac310a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "48b33a9a-6d8e-4f4a-a2d9-52ce7f3169a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3841842d-8bd0-4bf5-9055-9177ab97fae2",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed462981-2600-4fc8-ac7c-137e84f6ea08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46fb36fa-d325-4b2e-b836-5989870efeb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756a2237-d6b1-46f3-8d2f-df8a43c2eff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b814843-4563-4f1f-8f6f-b522b544ca21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b0829b-9899-4064-9f91-7f51df41b1cf",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de6c810-d398-4664-8e1c-a826783ec4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac76ddf-b4b4-4196-b334-cdfb145b230c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bee8366b-feef-4937-bdc8-ec9562ca34fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "448f1f8e-9128-4c11-8a33-aa2a80b4c156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83cce2e1-7b9c-4a58-99f7-cdd465b928bc",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea6ab9b8-6100-4257-9011-b87b38b96ea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3039a4b-1d72-4c9b-ac3c-934d1ef15ee2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a323a6-1515-4b23-ba69-1a76991c97cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "375055a6-af58-404e-8118-47d3df31570a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619e6030-9da0-442e-b008-977e65214de0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd8c49e5-20ec-4194-b9aa-00e928dfa6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc33cfc9-96f1-4b10-a327-b3fce9eae4cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0056d71-8852-41f8-a0e8-ce8f8244e0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f87b9b52-7e68-477b-ac1c-0fa94fa1ad62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fdc56d0-65f2-4fd3-83b4-35023510468e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d746e02f-8db9-4cdb-9692-55645a41b356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25308da7-60f4-41f7-8417-9483e8de83fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2429aee9-ed11-44f1-9f19-041c10a89cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a5ff1e48-2a00-4c76-b1e7-b2ea97e5602c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bebe17a4-ed75-4bd8-8de6-88c4bee6e2ed",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3827e6a9-6abc-4645-b30e-7131230ade39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc79220a-7ad2-49be-b1fe-a2bdf01f1158"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89f6fc22-4f2c-4b5b-a20d-09cc7501a860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "43ea2599-0328-4129-97c7-22187a503f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3bf5e18-bc3c-4929-bd97-a9226d9520ec",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb4e646-419d-4bb8-839a-2b66931b3645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0794fede-b75a-4199-8823-7a6cc3f11fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27a7a51a-4578-4e79-b451-752cd1bdbc98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c94ddb7-4ee4-4730-a7a0-99f9db789db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe17a6a-f4bb-4dae-95f9-19e8118edc9c",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18a0cd59-fc23-44e5-af05-7aea1d0cd9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb9eaaa-e0ec-4b70-9fc2-e6acfe0ccf98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60a5c69-ccb8-4f37-86df-02c658d84b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "56ca71cc-e932-422c-ba7d-f0783843bafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c200cb-38d7-4ac4-a832-13e84ca1ac27",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7d9f63-9960-46b7-b129-14e67c20826d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee49ba34-c635-4376-8fe3-c42bd42a8e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "282dd989-253d-4c73-97e8-1267c3e910d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b85c772c-11a4-490e-992e-85492b3c9e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c3e928c-9abc-42a2-a08c-c0827a42176a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef267e7-502f-474e-beda-49aac00a4d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64648b46-9892-4bdf-a4c5-481e48494c3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43fe474c-4128-4d9d-8bcf-e832a125776a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6877c2dc-1874-4eec-abcf-06d4e3cb43d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f491d63f-a297-473d-9145-4f22ecf23f36",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f623bffc-b789-4786-a092-4342f6e3763a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a84cece7-587c-45a1-8079-b613cbec977b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c4c32f-05ea-40bc-8169-d6ccd0e856b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "64966b70-3196-41a8-a7f0-5e9fdd3ca3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580486c0-db84-4135-a821-6a7f057bd86f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a3c7733-a580-4941-a95e-4737e69e2369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e7c85b5-aa07-4294-8b1b-67ebef23ab6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e674f9f-6f76-4072-bc60-50933b361c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d286e2b1-26c5-446c-89cb-0a179ca8d0c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ce2a83-9ce0-497f-8bc9-d87ec37ff85e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aca0c96-bbca-45b4-af49-d6d19f93e9f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ef22a08-a28a-4459-89b7-b693d592ee6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "876e6caa-7a54-4137-91e2-2c114c6654fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "40d5bfa1-b946-4645-856f-05777deb67ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7725c6a2-4e6f-4caa-b296-0ec2dafff4d2",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e73e88-f841-45cd-a5eb-d645474dd037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c88b42-7130-4386-b5fb-95e3c8718a53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5e0b226-6d9e-4fd8-bc1b-913eb8ee7673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a44f1b82-7de5-42c6-8512-1441f0d6ca16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f4d4b3-8b59-46e8-8fc2-7c43a4427866",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0edf743-e2f4-41cd-ab56-5869e6bdc79a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cdd78a8-2f0a-4e38-b4d5-2da0bb1403e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4717b10c-ce6b-4763-9265-72a8bf429b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "41116c89-d984-4282-89e0-b6b1f9d7614e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b56d36-468f-4cdf-afb0-e3d6e780e148",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66af4235-11e8-43b9-9183-25efa42fa08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf4db01-021f-4a06-a95e-b918c8b8283e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f541da58-68ff-4665-bcf9-d3b48a662dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8865de82-b27e-4e97-acbd-1d8ac6bd418a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf99f176-5121-4665-93ce-c8ad02d768a9",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be18bc5a-5008-4200-b64d-38d84d869105",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "527d01fc-3b0d-4f15-88d7-a81e7511315c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f69ec02-4648-40cb-b558-a30d6ae6e334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbf63d09-eb20-497f-9d67-6ec84b2bbfc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb340a85-b270-44f6-8dce-19cd62a9f169",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68607df-c7c8-4ee9-874a-658696354799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9527368c-f544-4295-92e5-248b473850fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1547e62-3c0a-4e34-91b9-5e15716f027e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19af9e0f-1ef0-4b32-87ac-8cf7e1cbdca1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0616fdcc-bb89-489f-8dd6-b4d0038d5b59",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "614f989d-78c8-493c-b349-b61f4ceea2e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a25d5d6d-33ad-4bce-90c3-1a0976384a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67471730-23b9-4930-a574-eceb7650171e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4073b4bd-b521-4f08-bb2d-186298e27f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66388880-75ee-47f7-a1d8-36ba87ef4bf4",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f226968-e668-4779-8206-f45ceea94793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f837a807-56f3-4a6a-954e-c59240c3c574"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef20877-4052-446a-af61-afd269773823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e103fc6-8466-4282-879a-2e165951e44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7a59d7-5ef0-40a2-978f-54687a603e45",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "671201a4-9e98-481e-b034-d57b4d767d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05a9d543-0a2f-43c4-a5b2-a999868978c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3ee185-cb8a-419e-b471-3ba0fc4ac4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "8603a128-2a97-431d-9014-dfe40ecbb92f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1556c5-458c-4d6f-92a9-661fb9b49f45",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d239ae97-744f-4f12-be4e-03ca46e11afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93933a09-81c6-4f90-88e8-88c915f3c672"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256feca6-2c07-4292-9242-57a2084bb7c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ae63170-9850-4203-9e1f-08e4a3de1f69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af7bc45-db2b-46aa-a763-cf8046e1fca4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b2df001-6c81-45f8-9444-17d1a9ae3279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f56969af-d2fd-4553-9150-0d1da23356bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9cc21d-3c06-4937-ace4-7b301b9df9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6a8b36ee-cfe6-436a-8daa-ddd35a936260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0058f47-0420-41c9-83bc-23f3a818f442",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08f00ce3-d83d-416f-a346-50d71d035f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80301cc-bd81-4749-9962-d84c00032d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03810085-e87c-4453-8276-e44875afc5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f93dc368-bbcc-4303-8503-4fc718188b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "845d713a-38c2-461b-b340-8b8c6f76007c",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bb6d962-73cb-484c-a677-e7dd1e183aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be7e2900-0462-4d01-abbf-7cb744a94d89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4866b42-bfb3-49c2-bf69-426336da3282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "879af194-36da-4263-84e0-46f61e4a3518"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6717ca38-4276-4c75-9abf-edf5880af8c5",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b9664e-8f72-4b4d-b686-c00ab41e2152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06477f0d-4bf0-4544-a4c4-d48ca5aa9201"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bf2ba7-21f0-4eb3-8ff4-b6a3ff746e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "029d6eb6-167a-4054-8fd6-68dc42803ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a9472c-cafb-4255-b723-09dff02758bf",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98c5ba53-ed05-4ec2-9eca-3cba36eb40be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3305e36-5407-4791-add7-6a3a61d58ce4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd9fbbe-e0c6-457e-a83b-f12776acad5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8b90e1e-6e4e-4543-8ad9-1ca55d2fc529"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a005ee1-1a8a-4e80-b235-6b0d832859fc",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf91643-a356-499d-aa3c-530d067339af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0f1f086-8b8e-4775-bdb0-8b49769fe533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bac69df-6b6e-4659-ab31-b1ac3d05f3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8fc854b-159e-4a6f-a7ed-17c9fdf6c17c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc2b06be-b050-4c36-a3e2-f8e6907355b7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c062f9-2667-404f-86c3-e05bb990c0f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96c1dbfc-0ca1-4353-9975-823f9af60559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4307accf-7fc4-4566-8b8b-8812305d9360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b00df94-0426-4fbe-bb79-35d3ae2b81c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6044ad-3846-46f3-9493-acb22b6994eb",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "809f876a-9827-43ef-8fba-f607a90ed682",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c3389e-b9e2-4f7e-b21f-694160e6e72d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4c00e5-bdac-4254-946c-d3780dd75cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79c2e333-e468-4b0f-99a3-72cdf8005f78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af54c4af-861a-4068-ab12-8b943a46642b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a779dadc-c551-4cab-b564-3fa5e84ccc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5212e20-2555-47fd-a0ad-756b8b56e454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046fb324-4c1a-4f11-bd7f-090fcc0d459d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f12a9e12-07df-423e-9301-1fe62c98cfe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ec6653-05fc-45d7-8340-c139307be631",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d9295e-e686-4c7b-a779-2970b487bb4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79de8ed4-2bba-47b4-bdc6-d4ce6f59c23b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff63930-d844-47eb-b88c-e22587f385b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "fab09129-c241-42ff-a08a-cc499bd89fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139559d2-281c-4e15-902a-a2c62e6abcb9",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b904f286-961c-4313-8749-53ea271818cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba4bab2-46ef-4ee9-ac46-3646a309bc25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68d4bea0-209f-4a99-a7a2-7167db5f0cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e38141c-2d80-4dfa-9679-ca66ec6dc2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d09ebd-69e0-40be-88b9-55ef4f6f0b99",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc362c0-51fd-493c-b6e6-7950e9505de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b57dfdb-e2f7-4a31-8f4a-568acbd161f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59960ae-6c32-4e82-86e6-72855751157b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "368a754d-e030-4283-9ca3-2b1498c9bb8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1addb3cc-c28b-4f4f-a60a-4df6faf401e8",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06b1c68-75c5-46f9-a808-ae8ea41a260b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85cb1a52-1616-4ac2-a91b-4b39a1ad7817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc3fd15-c597-4603-aeaa-bb389e666574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e95d26d9-d440-4ba3-b99c-56f7e059a269"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c1dae5-e206-4816-863b-60f0d439a871",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc05312-f416-4584-9e96-284b7ece276b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34dc1756-7db2-47de-95e9-dcf0add49160"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5f0bf1-2708-44fe-ae38-3e430cbacee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1be5c7d1-1830-4123-951c-2382eb2d3bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1e40ac-c05a-41af-a1fb-1f418666a390",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e2b93d-f2f6-4a45-a2db-4f03dfeb0ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83eefa4b-7d72-4cbd-8f14-066bfa2022ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484017a7-bae9-446c-a1b5-68093d47e114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "683538ee-7970-4251-9d98-6017185f92c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5edeaab4-2089-4a49-9076-0a4ee34859c4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "846cc2e8-ed22-4a83-aeaa-aff2533033d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25a8967f-15a5-4bde-a263-d3b4026a2920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb6c209e-cec7-4756-bd83-e34579bc460f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3bc899e2-24b6-4c48-b7ac-ca218ccca0c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d2bf0a0-9632-468f-8627-d58bdc18e833",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "499f209b-5eb7-4fc8-b3a6-b71e8a70af3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92ba04fa-5d71-4ac7-a835-0845359cb8c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389db02b-ec4d-418f-900b-0e146123cc9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1521729b-e053-4611-9729-f6925b5b7f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d7f863-5638-4fb7-9c47-f90c0d8a8960",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd0ec0c8-7758-4087-88f9-83dc090545e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4be8b85e-aa02-4e1d-b276-573d070ac6d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3c9a5c-bb18-4c8a-b75b-b0c11e18a636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "78ed2a80-f16a-4a65-ac67-9aa2d6ac56a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "376a00aa-b379-463b-9d61-0ee5382d65a9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef496b3f-7dba-4002-bbf0-32326fb68bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72352231-20b0-42d0-a4a5-8816f7f421b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f3e346-7d89-4a65-ab09-7c01e9e50b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e75fd78d-69fa-47a9-bbdf-92faec59a95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c809794b-8635-4f3a-a945-4eea4e3ef463",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ed3326-52b9-4210-9200-687a06d84147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0c82d5b-0c16-4f33-a69f-9a8f338439dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef6a0ae-c7fc-437e-8fdd-5aad8913bbf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b519af08-b557-46ee-9294-8a866eae76fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c53f7f3-7080-419c-9b6f-b23df4dd23ce",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c2978f-fe89-4527-bcee-0eed41af8713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "477a5912-702e-4d93-bb39-c64d4397ffdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29054200-bd45-4356-a33d-f6f2cc450ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "15af472c-4f10-4f45-9f2e-f9eb86a4c1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a8ccfb-f7a5-45ea-a661-eddabe3830ff",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40549c3d-99fb-4cdd-b887-0796847934a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52427335-0ac0-47ca-a3c0-14787bdaebae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93de1fda-8670-4111-973e-f220d1cbab9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c834531-9df9-4cab-95a4-914a6defe810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b82340d-3b19-4d09-8cdd-207b22f52be9",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e592f50-4a3e-4664-8a4d-cda3b11585e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0399b07a-8a74-405e-bb35-1f73962cdd25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7759c3-f452-4435-8156-e44ea45529d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa8ac87d-69ff-4719-b905-a5b09760c0b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f56e38-6a68-4a20-a46b-3001e876baeb",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69e0eb38-8291-42ce-a294-a1f0fc4d86c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48201442-3a27-44ab-bd90-2fbe9f62fcc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9cde6c-4717-4482-92c0-822a0ae89ba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "429a5807-eb05-4867-b15e-08594b1ba508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24fa7c2-f1f7-47fa-80b5-8ef669fd5a0f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac6a8bc3-ab2a-4a51-ac8f-ab0acb93ea58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f7daf85-c3e8-4e30-8ab1-56f656549dbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd80ff4d-9da0-4c65-82e0-b1283e027e74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7ca91e28-17a0-4434-80ca-497cba82609d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2acd05f-0806-4186-9072-f6de9b804316",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f688a6c5-ef70-4d47-8cb3-fb6a478f50a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63dee19f-ac65-4b3f-a474-f0e250c07305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4379fe12-9b10-478a-90b5-6a68fefc6719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ed00ae7e-d9a8-4ba0-a3be-1d66da0f0d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e9dc701-be79-4916-a55b-4d12fe37ce7c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "247f8462-0126-42ca-8cd7-5eb6ef039926",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc9c0e7e-d170-4bbd-ba0b-78c1f0944290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bf200cb-01dc-4238-81a2-2781c173584b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad186692-2490-4c28-8721-34f53c067b81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43defd4e-3b08-4f75-ac28-21ca92f9c752",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c690b03f-c58a-448d-9d6a-af08337f22d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab1f56d8-334b-4d8d-afab-03d83417222b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6731683d-5c68-4c01-a006-613d8fbbbf03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2131929-a41c-47a1-b46c-b04030610fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52b10a6c-a617-4432-a1f6-3d71ee287d17",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea3d131-aec5-45f3-9cab-9c63c41774f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb2ab59-2a38-461e-95a9-b0e5b1f0f85b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668f907a-9c0f-4362-b392-147a1ddf1165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3389f10a-8fed-4751-a129-18701be02513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342723b6-1075-4a7a-b0df-f566c27311c9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "629834da-490f-4115-9f6a-648ad84a9fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b62b5016-d286-4da6-971b-007a50de475e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e5ea88e-19cd-4fc4-b763-b43530703817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2733ed97-cbe5-4c78-8062-7bb3fd222ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82db9fc3-1bbf-4300-b51d-1b9e8cf16455",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4022f5b9-5e94-4a03-9aaa-c016cc353e50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6292053-822f-4240-a6c9-df358f568c7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83cbcb44-f9ca-4bd5-9145-0d65d1d984c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4ea9b060-1f6e-4e87-99ce-41a9904dd506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacfe9f4-bedd-42d9-9b76-d48372ff0249",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a012d79-be95-4a2d-8c96-5233c3aa5af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e30c6168-879c-4a63-9a6a-1c62eac1f4f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11e8039f-2783-40be-99de-b978ea519858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "77ed9ea4-32d3-4780-803b-419f674fc74b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50372ed1-0eb5-4337-9c52-58adaf0f39d1",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f59e9517-f22e-458c-a6ba-415a9ad256e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "da4289f0-9382-44db-90cd-5dedd67b1625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41513202-033e-4a4b-9f63-075477c796f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "dee95015-1ef8-47f0-b2e9-148f7e5ad263"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b594b8e6-8831-4984-b269-9979287fb394",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b7683fe6-706c-45ca-bc0d-47c400378f45",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b8d7af-0d55-4297-b68b-689724c4ae61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5a5a7399-fe3d-4bd0-b0cd-f6c373d0094d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffabde58-4d83-4c44-bf34-abdae92a95b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e12dec6f-cdff-4639-9039-b4a220b20b91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557bf6f1-6360-4498-a5c9-a3b9fb5c1197",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73ef0a7d-76d0-4433-b7e0-faa30f4e0107",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e73907e-4d1e-4363-b985-055467582c81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796dc338-4cd8-4a31-ba47-2bf94318d1a5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0679645e-09f9-44ee-8e30-0333e33e49be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e09fcb8e-3ea8-40c4-bf8a-7351d83ed278",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddc94fe2-3982-48e1-a38c-c965be66dc2a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cbd7fe86-5766-465c-b125-d0c2b749c05a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a30384b-e50b-4c5a-b648-b8c53785e99d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bf5a2fc2-1153-41a9-8925-1a53acf1bc4a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5ba24a88-0c1a-45c9-83e9-09fc4cc0e2ce"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6d9706f7-d976-492c-884b-9ef2ec1842b7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1098d40c-1dcf-4824-8c13-6d3fee8413b4"
                }
              }
            ]
          },
          {
            "id": "0966f081-eaac-4816-a78c-939d07138366",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9986be2c-65ab-4097-a167-309275b61d41",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "63a67ebc-0444-4ae9-9ba9-50ccae2825e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bbaf61b7-5221-42a7-ac4e-8b3b22d7fd6e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b03b84f9-707a-4f34-906a-3a895c13405b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dc4861c7-4588-423a-83b0-08bab48151b3"
                    }
                  }
                ]
              },
              {
                "id": "f58c9411-ff0d-4bbf-89e5-546d0ec2a12c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "596aed27-e8dd-488c-bc90-d92df0cabe20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2a34696e-8124-41d3-a820-7d3b97bb3cf4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f7b7879-e02d-40cc-b682-ccd196ea9844",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "577d7fe3-5e9f-456c-916b-2ff03ad9418c"
                    }
                  }
                ]
              },
              {
                "id": "4b6cd84b-76ba-46a5-af8d-a1c2a50b0bae",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "15274f23-86fa-4257-81b4-94593c6881bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91d4ef02-447d-49b9-94a2-bb98251f02ec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "762ab2ad-7250-486f-9bf2-99530c08ee7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e9663bc0-1fb0-47b8-86fb-08f77b0c9eab"
                    }
                  }
                ]
              },
              {
                "id": "b0fd6c11-8921-4e99-9455-5d0452aa663f",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5b6c5792-b0dd-446f-af24-e626553b295f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ddc58c45-48f8-4c37-8f88-e70aeb9d3bd5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c8c9b12e-a1aa-41c5-8cd9-d7d8200cb1ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "df710d60-9f00-4aa8-8b49-8b17a34abf6d"
                    }
                  }
                ]
              },
              {
                "id": "02042f30-104c-4cf7-8b6a-92a0474f4554",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a908d4f7-272c-4448-8c1e-1e13d578332e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f0523571-d5a2-42c7-8e04-65abf189e0f3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f1178fa-4acd-4bc3-8612-6994e2bf05c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "eb3b809a-4968-441a-818c-72163557548b"
                    }
                  }
                ]
              },
              {
                "id": "72840f0b-0213-4363-9616-8abc159b286e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5452eb4e-0dc7-49ae-a46c-4f7b2e037d36",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a35d7856-b8d2-40c1-b127-bf1d9be78118"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b7586c86-86fc-4516-9ca0-e26a3450af84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7756c840-3696-4c63-82e0-7f8fcbefecf0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7ce9ac79-a298-4c6a-9659-2a886c702279",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0e079d48-e773-4efc-9117-0727c193fd57"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "461ec78c-b3c8-4069-b5bc-8f32f6ee0a15",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eddc3995-8d32-4b74-9df7-2abe20bc6b10"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "87cc13fd-fb81-485c-8de2-d80f4b045b7a",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "e8f8ba8e-abf7-4ed2-9147-60874928750e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f88abf0a-4fe6-486f-84a7-d0bdee1e8fb4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5eb9f8b5-898c-46a3-a603-9b337357c760"
            }
          }
        ]
      },
      {
        "id": "d41f9347-5e40-4e71-a9a8-5e2d5eecd47e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f03a746f-9af8-4bad-a266-7d263e27c10e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "70f3a089-f273-4bbc-83b9-ada9b2f739d0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b245d809-b91a-4958-b56a-50aaa77bb977",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8300550-39d6-4fc1-a677-83c7e01262d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb18a45d-9f40-4561-b19c-7559e212dff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ba7c7c-c729-4df0-9b42-10be74e4f93d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d98079b9-19fc-4571-a665-32e6f442bdbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c187bd2d-cb83-45da-ad1c-cc919e9b95a2",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b379cb-3697-47bd-8b32-8bc8c17efb60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a46e550-3878-4e9e-9058-ac20548db2b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a86f64e-5dc4-45cc-aa6e-380897406044",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "31415c23-2033-4c12-9ef1-f1cee25bc0f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7aa7780-49eb-4911-8e84-de16056f96ed",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4104d376-5124-4daf-93e8-c00c8b430179",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60e04661-149d-43f0-8571-dd17ce29e5e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4abd1f71-86b0-4178-867e-b5a1dd855bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5c8d2a-433c-4cbc-9d95-0c57c36cd889"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a70a2fc2-a463-46d3-8e08-3df813c5e0ed",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b4a5bdc-f11a-4165-952d-56371a0d510d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ea5c5a3-f330-47d1-b59e-7b33b5a2f69f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "011e01b8-677c-412c-8159-eca25dc16a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3412ba8-1b05-4b13-94db-cee1a0f7c241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9d0ea39-842a-49bb-9df8-eb73a9b6de0f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9afd87c6-2f8e-426e-9aca-f76c7a766059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe559d0c-9082-4001-b63d-1dc490040bd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d3002f-ac4d-45ac-b440-24cf618ddcb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4451da0-ada1-4e3b-87e6-7f87f676261b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62260a8-95dd-4a75-8ab5-9be7acd74334",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddbb508-8da6-48b9-a150-21d0dbc78e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32bc1ce9-a2e4-4777-bb4b-adcc00cb9e1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1052b14-a547-441a-8c17-fa9e5f05ce74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a340885-dfc8-4787-985d-1b9f869ae4f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d7e4d50-bd1c-418a-b96e-108ecfcd061f",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c2978d0-7f98-4950-86f1-651ea0878c8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2649fab8-b622-450f-b16f-b107f524482c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b12a86-29e8-4510-a32b-0d0039194994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "2166df32-f86b-4a2a-a919-10f8ac327397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7644161-2c0c-441f-a587-f65ab9fd23af",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee89902-ebbe-4158-baca-d71e81392ba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b7d9d5f-5df4-4674-b9ed-9e2ac770007c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "152fa6cc-6dbc-4ccb-8c6a-86f6887f9483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "948dc251-de11-46c1-bb33-c9ef5b4310f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458d20ce-824e-460c-9208-d90a6703e8e5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49b8f915-4fa9-4258-94ad-530511b39bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8c4971b-fea6-49f0-8eca-028e15739e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a772f3-2431-449c-94e8-75885f990647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9770c3ca-1c63-4e9d-9803-83a45d1f423a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0652ce62-b1a7-42c8-9186-2776d903924c",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1f06ae-d769-41ae-98b8-d7b035853a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33221bb6-dcc4-46b3-8ae3-365ae92336f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "527c3806-30f8-4dd9-b4df-34e8548d6e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9f4913b-bf3d-4797-97ee-b1c8097b7e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec29870-2a9c-4933-a70e-fafbd0c91de2",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d550f4-a031-41bb-a1e4-2758cac110ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "231cd925-607d-451a-9f98-f52ceda54a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051fc61b-97d8-438d-8f4a-da484fbd5e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "31a51182-84d6-420f-b80b-bbfa1825aed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8712b299-d46a-43ce-8574-99ad1be27d82",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2704148-a714-489a-bdd6-41e57fb08cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03bfd400-fe90-4091-8e51-d7dd9456e639"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3266bb52-ccc0-40dc-b0f7-3440c1453be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2ede49f0-7382-424f-ba69-6d40df1bc534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9f9835-202a-475f-8365-41330ed8bb74",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35355f75-00ae-480d-af48-1f842411ecbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20cd65a1-38be-4843-8b07-93b69348738e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad81563-4994-4183-ad3c-2e1829ce2701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfb0348e-6e80-4cb4-a369-e6dd3bd0b850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb58700b-8db8-4873-baa8-bfd9ff4804e8",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afea738d-a39a-41cb-9a45-3bed9fa6ff90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f8a4946-882e-4ff7-8d2b-29b4fe6151b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19157abf-4a81-46b2-bae2-bbaf036acaa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1d745e8-aa92-4679-9ac0-14f38db1b06e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa73919e-e60d-4f16-8460-2b471c8b45c1",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c31b6eb3-f26e-436d-8f83-5f2ef1fd02a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96b19dca-7923-4c52-bf7e-0fe54372a60b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb5bbf0-1350-47fd-a504-4c24e80fb6d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "af09f523-8e15-426c-9e55-3ca4e3d81f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51891d1-0673-42e4-9e70-bf7e6ccd8984",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1055bbe6-0676-4cb8-a04a-d88310bb002b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987498b6-7fa9-4c6a-b520-55fc84d81360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b016778c-41ec-4a53-9bde-cab2adba2ff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cc2138d-eeae-4d57-a212-590d362a376e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fd46888-e83c-414c-9d21-0eab8472ff0d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6090ca31-11a5-43be-9a4a-064366e08774",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc21df76-cc60-46af-b4b9-44ea2db18ac2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "111b093f-4a4b-481a-8a6c-d62041052e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "5b17959e-4567-4a3e-a48d-b1fa652869f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62164adc-dc43-406a-af38-94df89dbe8fa",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff85633b-b2b8-4ab1-ba26-2ff33d58d2d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1281922-b2cc-4e05-b114-ca110a36f32a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb81317-283c-4e1b-af0c-a941a72ad639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "04ffbc53-a0ef-4ba7-870b-62f64d62c47b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f371bcb-7eb8-44f2-848a-22fd23023524",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a87c60e-cb38-4b1b-bb9d-952c2a6b326d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad6e4f89-5960-4586-99c8-872a3ea5bdb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ddceb86-312e-4f0e-8689-f2af66b311c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "387f7b0e-a644-45a3-9fd4-65f91b811e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fdf90f5-9a9b-4498-92d0-ca227e0df239",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4f4f49-dc1c-4d0b-a0bd-c1b11655d4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d0641a1-655f-4114-964a-9e31f896be05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "858ae2cf-cfb7-4f3b-ad78-2f42dd891bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d8859eb-eca1-4cce-b1e8-0c5a8f04a6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdd14c56-dbb2-4716-b9b2-538e5d1f9509",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "516824e8-c15b-44d3-a505-054910284297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11bb57d5-166f-410c-88cc-6558a59872dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec71e0c9-8993-4361-9dda-1868d4ce36ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46a1f500-0c3e-4237-b4c9-f9ddec2e089b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe0504e1-439e-4f05-9f55-36f0b81b5e09",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09f2bca-4eb9-435a-962d-76291da581a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26855091-7804-4465-9008-af2cb964ef10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7feb43c2-37ea-4e14-8611-b8f00a7525c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec5a1ec9-36fb-46f8-a125-ca6be9aba02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e81f76-7964-4849-830a-655aa5d8410d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "991dd011-ddde-4d0b-8a0b-7ce1fb8621d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84fe0a27-6cea-42d4-88c2-82d3ba3f0ea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3e9ba4-6b6c-43c6-a2da-02751186f78c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74562248-cf7c-4cb8-9326-7439ae8c1190"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2b5f3c-ee36-4ae4-a5bd-f30af339f014",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9c10cad-96b6-4560-b86b-af52c1ea22f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70a07f2e-097e-451e-aeaa-85ee9ec5dea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7e71f40-a931-444b-b67b-0b72d6cd7691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c91de1-ba46-4465-b9d3-3c3e7c740c1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "811d40b9-ec15-4585-b52a-54b200c45a02",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9005e42-50ab-45c6-911c-958889fd4ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08df1380-4296-4e28-83cc-c5ca06362bb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f04d761-cf1e-445d-a33f-d47949173539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e3ef6d45-4048-4446-869e-ed8b2d4c87b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40ac39da-4615-4c2d-8c37-26a2e819a0d8",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d614ca29-a6d6-4ca7-b019-fab224c53bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27da29cd-3666-4695-ba89-734b01806e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd8f64a-9b1c-4e3b-b482-a120ffb4744b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d729e4bd-d194-4ad9-9724-bb797ffabee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14d9989-98eb-4088-9f1f-0adbd041a53e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce1c858f-96ec-4644-abc9-d28067e27087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf12fadf-5a3f-4a87-a68a-87f7b928fa06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fce32c2c-67f4-49d9-9798-80c94579a368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5189227-1c61-4eba-843e-9ccfc711fc5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a31090ba-3228-4e04-b37e-79d1cba82108",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "635a1683-ebac-4871-bbf3-1fb4d04d9680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e2a90eb-960f-4c71-829b-e37dd2eecb2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0bd45a9-9a6d-45a2-a7af-ca3e619b4756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31f32aaf-94d7-4d53-89b8-383b61ddd28f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de67c37c-208e-458c-886c-0475b410cf92",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2856cf-76cc-4424-8ee9-693788d56d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cf7dc4c-1213-4f2e-9fdc-f9f02eb385af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f031cad7-525a-420b-ab93-59ab6234b0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9db1aa26-961c-4d0e-afe5-b1bd6a38d6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab8dc6a-6c60-4db9-8460-f160d77d3117",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed9ba3e-18f5-498a-a5c6-807b1d517250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cdbe763-0252-45df-a7df-3aebb47938f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a658fe-eb4c-49f4-96a9-0e8b7c129d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5594bfc0-35d7-4547-b1f8-ab1f6191a043"
                        }
                      }
                    ]
                  },
                  {
                    "id": "440ca115-2a04-4cef-a747-c614266783fa",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11f77417-5826-4f14-9d61-bd1344131c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc522a93-1759-4eff-abc0-515009dc051b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "456bca88-cbe8-4318-905c-1155d1ab605c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad53dd8-1ce3-47d3-9174-aa96bb4fe45b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded675f1-77d3-4378-91ba-c4c2835299a6",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b2a01f-2841-49c3-b2de-59c599ef5f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41986f5a-3d31-472e-9ac2-d9bf0f1fd517"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521d2e20-3aac-4094-8fc5-a22d3c957c48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0fafdedf-9789-4c9b-b0cf-03c9671261c0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "859860ea-ee45-4853-bd59-2140cbf7f460",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0c8f9d19-c2f2-4199-bb03-02a171577a0f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40aa4383-b66a-41c6-a11d-1c37bf1bc1b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "486d52d7-746f-461b-b266-785a6599cfc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "924b07cf-72fa-41d2-a428-8d1f2d39f2a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d098cb7-d7a6-4ca4-ae35-226b762ea5e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f7529b-d7bb-4c67-b980-755618a74d7f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e928dc-b38c-4e95-a6b4-b5cb5edf7f16",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "9e0d3648-c400-449f-8ba9-9e0ae51b9bec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ca65aae-67ae-44e9-8885-fd71b13e78ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ba303a2-f3fe-4309-a4db-9e981f9a489a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5372efc3-13a8-400c-9289-6827ac4e6d4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "355161c0-eaca-4bd7-a400-e030d86a3ec0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4be09e3e-3f14-477f-ae00-554511ce5a3b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4d8fb78c-08c4-433d-8819-359355779f1b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7ef2ee48-ce3c-4a9a-8d92-fce2561cd754",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f311a37b-4483-45f2-8bcd-e6583e271d1d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4b4c96a5-da26-49e9-ba60-4fe7f992d914",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c234e1d-0497-4905-8f4c-88a97c47050a"
            }
          }
        ]
      },
      {
        "id": "d3bad1ce-116d-40a0-8bad-0af7327795cb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b0b0a8fa-6491-4805-9c05-48099d3c1cf4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8bad43fd-78b1-4f5b-a8a3-a3307cb33336",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fe5b6ce6-0981-4aaf-898f-e8a810b86729",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfc7613b-0d87-42ae-a24d-bb1ee752a1db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b98c3aa-2335-432e-b776-a7fb02ce06a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b20fe5e-b099-4124-8eac-c6058a4e821f",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b75b95-3cb7-442f-94b6-eff04f61a46d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e51def4-ba95-4b7c-ae8c-665396a597ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb13c98-c15e-42ba-b1b4-e5e6cae412a8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e71abfb-9540-4e4e-bcaa-07ba3ab22707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5a1804a-dc21-47e2-a392-fe13d1779d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4443f1-a77e-4b1b-90b3-fb150d386f11",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4a3b85-bd05-4728-8d6b-19c02f12bb73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3e39d3-3a94-46e1-8479-df7d6dc45bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9c7c16-5a59-46ff-8806-3690a631b820",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "090a1851-a9df-4683-b73e-dcdd67b6c840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64fed89-4a20-4366-be00-0619c88b1912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2a3c2f-51f6-49c2-9b04-bb2efa72dca9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b992af3-613f-4aee-92e5-f4d950d8d7de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d257d2ef-0803-4a5a-933d-49ce7fb4d971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f89bc3-15b5-4fca-b96c-1ade17c23766",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee3daa0-442e-4f31-8e5a-49a3edebd379",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98facec8-05bf-46a0-a205-c36b2c58274e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a918c11d-c126-46a1-89a0-e1dfd540f586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "867040da-8d22-4787-8726-42d8020dd4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2735816-2418-4499-9a3f-6844da849799",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38831df1-8bd9-4687-af20-e64d1067062d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19d485ab-81b6-4bf0-a6a5-62eb738c98fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a74990-76e1-497f-8546-61462a24b0ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47d07421-0c6f-4c03-9d7b-071bf03980d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bde6a21-b323-4a61-9208-2a7a33834a90",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa66fec9-46cb-4b69-953b-8773314f1218",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d682f14c-db15-4483-89e0-02fa75f91994"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3afcfe03-b5fd-4d73-bd6d-0118ef8e4a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb81c9a-fa51-4acf-84d4-54aa20cd6532"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e88004a7-f73a-4cb5-9775-f6a1ff30fcac",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cec00f7-4900-4dad-b0a7-9003773ed865",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc135040-8f0c-4960-bc18-33ac79c7b632"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e0d8e32-57e8-45e5-b40f-b4c829aa6368",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94d9806c-3a87-4ea2-9eac-e3c8760fffae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b03525c-e8a2-4533-a807-3991324ee117",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2874bdb-62de-45f1-bf97-7d52d35d7af2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59231301-e06c-4906-b635-7d7df6aec073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c916db-f95b-4133-9d96-9c670f245418",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c76be96f-4a58-4e09-b541-181ff99d48dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d56b16b-ba15-4e9b-b045-52aeee3f676f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aacde65-8773-4cb5-890f-196c79e1f0aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d5595a5-fc77-4b34-a902-9a6c47091e04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37e8d3ce-3fb7-480b-92b5-a436d03a4fbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0fbb912-f801-4b44-b082-ac6b59229571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57788bc1-534c-415f-92df-3d7904f9171f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aadd1f92-d26b-4deb-9825-90b1d902fa83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84d232aa-7b20-41b5-9a38-e4ea47dbba93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af4a84fe-271f-4ad2-bfd4-17a49766f9cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6faaa8d7-3060-4079-9e0d-5c54fa679f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7c13af9-afeb-4d4e-8741-d0f9971f4547",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc643c6d-0120-42c9-9b28-6fff252a25cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b56c97c8-1cf8-4cf9-b10c-5e2b598d5cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "508de4e9-f978-45e4-b6ff-838ac093a8d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873d2340-ccf1-4672-b63d-981a8c0ffedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b201f4b5-d2e7-4ca0-84c4-d3dd66d43d48",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb42cd05-59e4-41f8-8736-607057d78f22",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "798f4bb6-ff1c-453f-b955-dc2e2e9e8a0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21d5574a-985a-4cc0-8ff1-f5d83f7fd623",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcab373e-1caf-4166-9d8f-93ac8b46be17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dbc672d-5fb5-487a-b029-d3618a951723",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a534f15-3dc4-4a9d-a02e-ee08c58f51b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71892ad6-b651-45d5-b05d-068b3e9cb0c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a0a2b5-94ff-4747-a676-152618935ed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d868a1-ba38-4956-b75d-af4869365fb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b5200ba-12cb-4c0b-a48a-4ea3c77db930",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c285bbca-fac2-4226-9b01-ce7fb0784ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d537e8-1006-4378-bca1-611dec66bdf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83ec149-d886-42aa-b782-e9cc162520b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa2ab151-5b9e-408b-9359-bee3b42e95f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e26e120-bd80-4ae0-bea8-4ad5fa0ddd6b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a063d4f-d183-4868-9b41-04cd9c4909fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fc38a09-f9cc-4ecd-811e-d5f0217f76dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a803d69-48ba-48d8-a9c5-c75eab692f20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a655f6-2fea-4957-839b-5111042aa2d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a19af25-d7b4-422d-a0cf-a62bb0a464c1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4971e2-5135-4d14-993d-ccf037b95212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a4d0903-4b89-4658-bd58-73bc2b59473d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b095f01-b90c-4d9b-ade4-5ba6484592d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb66206-2d78-4507-b3bc-79012a4ace2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10669603-c99a-48e3-8acb-ab2a322baf18",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcdc013-567b-48e5-85c9-b3f6b3280069",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73f4846-f6e0-4211-83a1-b105ebda9540"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "effbf054-9d72-4b25-9789-c26190002dd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c59e929-f58e-4b60-8d3e-a5387f2e7d3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed05db3-7cce-4465-aeb1-654efb13746e",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2a0f871-9cae-446d-b9c7-5e98e91e5592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fba8ae0-dac4-4251-9ffb-9ca97e2d81dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdd73c2-c920-4384-927d-5c32a6f60c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df0119c7-d1e7-4787-ac46-087efc1ed6a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b1fde58-f7d3-4c54-b529-cd591465b1e0",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53cfe7b0-f60f-4835-8db8-8e9e1402a0f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b113cfe8-5712-4233-9345-153bb941bdc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56485b84-a74e-45df-b235-89bf319d081e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e1e4d0-7ac2-4031-957b-17736a06dc23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f0f042-b013-438e-b4dd-0c113e5f4a18",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d530db0-7d81-467d-86ce-e8a9e65c351b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af8813e2-9845-4317-ac30-b83b73f43c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4e8198-1dbf-4e68-9825-36c6a591a9d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0db25054-f09b-49de-8a5a-f4b49d01b4de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1783933d-9d79-4d55-9fb2-cee01c99d6b5",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a66aecb-d49f-455a-8ff7-8fa726aa7ebd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83ca9460-d7d7-403f-8a07-97ecc8cd4ebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "678a1cec-ad26-41b8-ab13-cab3482661cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac36ae7-e95d-4bdf-a07a-280af099cbef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3e99b2-408d-48f2-b941-3b588dca6e13",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b63f2231-15b0-43aa-8c0a-877ef14d6744",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "488531ff-3e03-4913-9d26-6ca470b25a36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b891060-3bd2-449c-8fc7-4e933281e4f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb18cb1-4628-42a5-ba53-16729a5d703a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75e4b1fe-9b04-4a23-b27d-3ad04df3ebaf",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a2d836-afcd-4a0f-a4bf-f17c475c5080",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "285f58fa-33dd-4502-99d8-c3bb3b243c6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "559fd200-f8a9-4f32-afaa-504d628fd61d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a12b2b-f732-45bc-9e46-0879ea2e70c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5721a67-ce8e-4c7b-8921-0397c1c310c5",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b128d2-0cca-4c88-a93e-67e5429cd540",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c05a15e-ae10-422e-8461-d7717a962a90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77b9d8cf-dfa1-4651-9747-4f6b7381a5d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089edf60-96b5-4da2-86d7-e81a713c21d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f08429e2-b250-4ed7-9c44-2ea79ffc1bbb",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8903fbd-aa72-44e5-86a3-5e632209b978",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df99c9e2-da25-4006-82cf-23719e55eed4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab0cc2a-aa47-44a9-99dd-f242bacf9896",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380f9ce8-3e14-4f57-87c1-0e4196d22afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71dc3da-fe57-41b1-a036-da5c67aad88e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7b67040-88bc-4ccb-addb-43cb0108db80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "617613e7-3869-4e5d-b132-b073190905ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62ed76f8-72be-4370-9584-47a53321cf6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6627436-c3a7-4fa8-b5fe-ba73688f9bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e1aef3-5f31-4d99-8fa5-1019c41b9f6a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbeb44ce-4a60-4fa8-8acd-2a283d51cbc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dde925b-107f-473d-b619-7c5f9d6025f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e2917ac-e8a7-4015-9d24-4337573dcb10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f8d6cc4-5e17-43c1-abc6-2a8c49ccfb97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b750917a-bf65-42db-b2e3-195bdf108bda",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5cd882-8b24-441e-8935-92b581040859",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b385361f-b588-4a9d-936c-98216746d10d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b53f0ed9-c037-4d6c-9e05-15a0f6280f6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cce4b37e-45ca-4e46-9fe0-3b4bb7746bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c017dbdd-6a43-4b9c-8919-6776b946fa68",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a899469-1128-444f-a4e0-70dd0e122706",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4479bf4-bca3-4499-9ac0-65d7ef807878"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc46c0ed-709e-4607-b96b-7c7419b74dd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe1db9bd-3c74-45b2-952f-085356e97394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9bd61f-9661-4dbb-8afc-63f962fdc948",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90bba3d3-6a7a-46cf-a82c-91e50604be9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e55a3b2-a4b0-444b-a9b6-70954005063c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "428cdaeb-c795-4afe-b6f2-306280ddc643",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6362034-fb0c-461d-89c0-5ee49c7ed916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c277100f-e5f0-48ea-80a3-4e0ddb06dbf6",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c85480ce-a57d-437f-97a0-37a4eaf8c842",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "affe62c7-13aa-4528-90f8-b2b1632d9521"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ee5b954-f84c-42da-ada9-58ed179bf53a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c7d27f-ec0b-4d03-8d06-fafb500d5c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75182f25-37c3-4565-9780-74080e76306f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f9eefa-4821-459c-9193-13502acb8f5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e4b118-1018-4bbb-90c8-b906ca1f2377"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dac5330-9741-4ccf-bc24-17902b96211a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d3b300c-0f76-46d8-801b-13d715d52310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecc7f165-bcd0-4b82-b356-acab36670367",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edae87cd-c5dd-4040-be71-90bcf937973a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47a5208-2344-42b8-a7f3-5368bbaa0f6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d13727a3-721f-4084-879a-b8e6c569f618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0207b687-93a3-4a6e-84e8-2d5f4434056d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39505eb-de90-4fb4-aa39-6a3f7c04b8d1",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e990716-caa4-440d-b4b5-40e5850614a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dc600db-a101-4d83-b435-5e51515ebb6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc575d68-90a8-4e26-a17c-5f0df4f9b19b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42bbdc6-89d5-48e2-9973-ff4884d1f279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c62e729c-aec6-4a44-b2d7-1b6a44fcd141",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f8afc5f-3792-4d18-a3b1-9a6a7d6cbf97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4195f650-74a7-4a56-8422-daf67a5a8152"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80dc65f3-db68-4620-adff-6f5a70dca7f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be1db6b-f13b-4418-9104-b6f7eeadda6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9112fa34-8dc5-4240-b3d3-93d4e17ed562",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3563cb4-39a0-448d-819c-b9d7f8d6952c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d2554e1-caa4-4e59-81ec-bba37511d6ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "994c2d67-4ee0-49f1-8ba2-2c9079f667e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f3ed04a-9777-4f30-bd6a-8966a2183a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb077431-9a32-4b21-966a-b3e91d064fe4",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c685808a-a78e-4b72-814b-8cf36a6e961d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7c96aab-cee7-4cec-98d4-5a0ad3603b77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc72b34-dba8-4d50-82ed-6cd3ebc39522",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be41e9a4-840f-48b0-a1ca-c9efb7eb5c17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09b5fea0-3710-46a5-99af-f7733f20d759",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae01e616-48bd-47cf-83bf-b45bac5c5ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c468118a-6370-4749-85ea-daa4eeef9105"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e00034-1b5b-4a10-b4d3-99fefb321268",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09624b62-8cf6-4e8a-a76b-9c6535f45742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08f73cb-cf47-4619-8d0d-38ea8bd9ee29",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddda4eb9-b1df-4867-9f89-c47515bb0cad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c63f238e-3ab7-4a82-b12a-213a4debc79b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0780712f-9a7e-48b7-8e72-3a744a3fca3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3dd0aed-c1eb-4622-827a-ac23c56f7a6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62ca2b5-b73a-4e16-8319-c75155c32369",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fd37ff-e509-4904-b9ab-827eee8cf649",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d613e9f2-f8e3-41de-b8ad-eba66a0d8e94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fb528d0-724f-4fb8-bbc4-28f9969a3fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95eacf16-d3db-4479-b0a0-f17020d90814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf434340-7f16-490b-9aa3-3413146399ac",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1596a18-dd84-4798-bfdf-fa488e5f4979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59666736-c7b1-4424-a2b3-4d6e550d3039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6656c142-527c-485c-8352-08762c357d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a774127a-6ec3-4513-87d0-a762a917013e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681dd4ce-cc0d-46af-9ef9-c7c96caf86cf",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2aba7e9-0688-4ffd-89f9-ae2b69b2a046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "323ed2b5-4be1-4eb1-be6d-bc7bebab9e90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf58ea9-ae5a-4d0e-b24d-31e6be21c524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "994fb7a0-1965-465f-91b9-b71ef573ba0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb060fc3-3cd0-475d-a96f-d3eb50208c31",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29536955-dba0-410a-9b0e-7538a9c764a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3234d8c3-55c7-43eb-870f-74d9644f5c66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a45c039-1f2b-4ded-8436-f43137c01f63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bd4dd93-f36c-4b85-88d4-88ec3b2f42b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b317ff-5bc5-4de1-a33b-a430e0853efb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34cbcff9-9f5b-454d-94cd-6d56dedd13a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97ae009f-5227-4937-b0a1-6d6a6ebe8b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "753b902a-aaf0-479e-a6af-41f7adb62b76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfde9e7e-a696-45d7-9970-7edb30c60afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c19ece9a-5dd5-41e7-8703-9c2e05f49e22",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c4a8e05-7a69-47b1-bad1-b4310ad5a83e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b921fe1-105c-4efc-8a99-1a6f0233e0a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b622a9-d778-453f-8081-115685ec5194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ec399a2-2de3-4dc3-9a35-aaec611b739e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730aeeaa-3f5a-4c09-947d-365662df175e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f728b0a-d85e-4a55-a65a-8e0b0769f024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c3d13b8-6508-4921-8f57-17504b158c63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec94aca8-da7a-4d34-b5cf-b7b0f4c8081f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ff6fb5-0b5c-49da-86ff-ccd91bb70606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2000d4af-181b-48ae-ba49-a7e811c0c8f7",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63a26f3d-1863-4ae1-b2c2-c2c2ca4ae724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ec1a79-dfd3-4641-abb3-284594cbb50e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24b3da9-ba53-49ad-9cd0-da94116b34d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59e7b63b-a77f-4f49-881c-55f785efeba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0296e15-bff3-4504-b6a8-41b142f221fe",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d16bc75-5835-498d-b81e-19a4447bad03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b476013-3406-46f5-97b4-cddb3672a605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58059e02-a415-4e86-a57f-793dd36ef1cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "260809cd-45e3-4434-9491-f38bc92f84df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce10bdc-db71-42ca-a9c8-b32a0fbc672f",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79924253-aa11-441f-a9af-a6577dff2888",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aad7c75-60a2-43e2-8de1-403a86744564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c525a070-60ae-4476-9c67-e74e3590a134",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ff53035-9cd5-4793-8a65-731cf86aa0dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f438ea0-c360-426e-9bb8-ecf31b1bc41d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98da5085-05b5-4e8d-8334-2547264fc7a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4663b95-5e83-4fdf-9b66-5c743290c169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f06278-83e6-4f2b-8d5b-c80fe0ca3686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a9000d8-a0c9-481e-8444-d6480e148ff4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5beddb3-fd49-4395-a8cb-72751c4587bc",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e11a589-6f16-459b-9f91-d2dc7acf093f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de59ff9d-67e6-4905-915a-ed4eb70b766f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4caf3d1f-763c-4642-a07b-daa662b1b7f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e11649e6-ea4b-4722-8968-18a857669cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fac1f71-4b34-4578-8b11-889c3953ac9a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86fdc3dc-ca4c-41db-a002-d6b828513b4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04ae70ab-36cc-46e9-88bd-1169a602b082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1d36b6e-0e5e-4e22-b0c7-25c957627eb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ffe5fbc-02ab-4f2f-839f-2f7342329e1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fecaa6c-f040-45b5-911d-4896ed902de9",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16fdbd26-9325-40fb-8d7f-48ed5a56fe3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2a063a9-41cc-485a-9b1d-498f16c09c06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8759976a-4f24-40a8-bd0e-7fdabd12fb26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f66dac6a-01bd-4c6f-b6c9-a44cb2310d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7b6087a-e30c-4cbc-bc60-df482d016aa7",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5053378f-aeea-4709-bf14-b4614d53c8de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cced482-20f4-4853-ab8a-a63183da5ea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e7750c-51c9-4a26-93a3-f75914270edc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "618d46c4-9b69-4412-8d79-18340bd12ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75cba7e7-0faa-480d-b8d3-4ac867649bc5",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84144da-be58-44d1-b630-8e205c3221bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e0f0723-0e12-4132-931e-30ab9ad6d9cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f0a5856-21cb-4946-9af8-b8cf00de02b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3b28114-dc09-4f29-9f92-86ad3ceda749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e952885-04e7-4ff0-be55-2b9f16a19387",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37bbde35-b8ac-4c97-9986-c2d41455b4a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dac25a0-3933-402b-8861-f74475125a73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f2ebc5-c494-4a05-a025-e9b45688ee52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1981cadb-4aac-4ba9-80b8-f051dc7be6c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13d894eb-84d0-4954-b0e1-ca19fa2a3959",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c1793c-7147-4bdb-86b4-30250ce973ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76afc5c2-a76d-4052-9cc5-ca9afb85ca29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbc5673e-faf8-4869-88ab-2b33810f713d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ddde2a3-894f-49e1-8d64-e4cc7d2b3464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c679e626-a365-472c-bc97-c8da5b5aa909",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b12386-dc0e-4112-b685-62599953be4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb3318ad-122e-4e70-a509-fba8905e55f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b584c8-e4d9-4cee-9fd2-e009c3db7af1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d93a2da-c26e-43a8-a50a-635b4ba85b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9548bf1-a14e-4710-8749-8fcc0be73a91",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278108b6-cc65-4b81-8dd9-dea01882df83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "613ad355-cdcb-42e8-85cb-cc9a0b4e24c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "199f6eb3-b04d-4d7a-94c6-726cd7ee6a69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a5ba20f-3ab3-428f-8000-96d75cbe429d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4478a31d-32a7-4b78-85b6-3751b149aaf2",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7db7bd-7e23-4eb9-b8dd-ed712109ed7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43fde3e8-4d38-4f6c-b319-60e141358d80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86646f4e-780d-46e3-a5a5-1e982502931c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "332a2b57-88ec-45cf-9af6-b04aa897d2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d821718d-296b-440d-b758-3966339eca7e",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e7dfe1d-d39f-4735-a05d-80143f1b012b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cfb2978-84bd-4fb0-bec5-ed4424a9cdc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97903d22-25e3-4a49-ba11-19c524124f2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3542c1b-54e0-4a3b-8d39-33015f929bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152fc0d2-ba24-42db-ad04-bceac43e8b45",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "779348d0-7621-43f7-9fd8-36c310a3f756",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "271a636f-cd92-40a3-a82d-b42c6b0ec42b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc3c5d47-c08a-44f6-8142-0ec887382766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10454845-4d97-4662-8fba-b38790d0f8be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3eceb6c-cc23-4339-8be3-8ce419fc6b2f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b00a7e7-3bd7-42be-8015-c97bedaf423b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72f58df8-0bd6-46fc-9ed3-5410854c7e63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d14af19-98ca-45bd-80ae-5b2a82d710e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1ab10d1-0bb1-4587-8bc0-7fac5256dffc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3586172d-88cf-45a7-9a8c-5d4bb46ff87d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8d4f96-af6f-4bff-8d7c-b7560a0f90a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c7b8a64-56c4-4e68-a172-46c791d17ff6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3023bd7a-66e8-4bc6-a851-33ed2daf3e4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1235227a-6f93-4ef3-87ed-e4cd5dc6be2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8669c036-4694-492d-a5b7-b84185825fdd",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c470b8-3a78-483a-be8c-8f3d771b5d73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11e816a7-60d0-44a7-a2f8-eaea86465672"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5db0d61-ce4b-4e90-a313-aeb599e7175d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41b7ee2e-3fb1-4c4d-bf16-01aa32611c2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff965080-7888-4218-9658-e0bb3960a69c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b260a6-f329-4af2-8163-cc1daa56df07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9733bccd-fab8-4995-bc17-a6e2079242be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2263e8d-b37c-41fd-ac9b-a14455f93173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b37f1650-2056-44ee-8aa6-a8a5c18b06ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f17bdc4-fca0-4144-91f9-2d67b4e0b7d4",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c983f53-8e82-4e4e-a416-cbbe47eaa807",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02adc695-4b96-419b-b02a-29316b4a67de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06dd9f07-d844-42f7-8f71-23601816a883",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c87c16c1-fcc6-49a3-9ebc-ba0d8afce12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6bb3a57-d542-4754-8fc5-97dd890479ea",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da15b8ca-8ae3-442b-933b-71e3154f9590",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f995056-b2ea-4d4d-8370-37961494c13c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3576e56-12fa-4467-9486-475e2b73e211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6fb019f-fd49-4eb6-a675-cf1adfe38dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695bc8d2-a151-488d-81eb-f7075c965f27",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a026f889-6fb6-46a5-bbec-cc678bca23b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13c98a82-7303-47c1-952a-13986fcfbde2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab33555-47f7-470a-9f10-5456e05e6d55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac7e8784-3fbb-4909-a437-0512fdb5ecb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "763fa483-c5f4-40dd-8b79-259cb35f2dee",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8496ef3-526a-4f5b-bc49-1b17f9c37a35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "893fe398-160e-4619-9de9-6a3533c94f18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48bdb5a4-c132-4cd2-9026-1bfd082d301a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36149187-3dd2-4c2b-9b45-d78bea927388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26a5a98e-d9ba-4de5-8454-1bf861dc122b",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aea2f91-bb45-4e9b-950d-2a05fa81b37d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3f92b94-586f-4f0a-820a-63a6cb81f411"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5ebe5a5-254c-4dc4-adbb-a3ad791fd9dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0367aa27-1241-4ff2-a878-187cdc827200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b387a6c-8994-4095-a0e0-e05d0601126a",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32600e56-b894-43f8-b709-2a06d0396159",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9502ac1e-f7df-4acf-b908-30bdd8beaaa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5fd5f3-5b00-426d-99b4-50eddfa426b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e9657a4-a350-4bd4-b540-4a0ff4f9c56f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0968173f-f720-41f8-9291-ce5cb851a161",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a9e7c20-b613-4368-9320-2551356831b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b03e3ec-8d66-4477-9cb5-fa0c28edc44c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3d5f92-f8c5-4505-b901-9eca59eed89d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7a94af3-f789-4e75-818d-d9fbc2ead638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c76c11f9-2176-4816-9ffa-2a65b9e9dc25",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43fe9f0-a3db-4397-b8dc-c9bd1daf0006",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85d05641-85cf-44fd-ba76-9a9abeb62f76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dbb8246-bf8b-46e8-84ef-4be928a707b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59247ce6-c6b8-484a-a172-f8987640c102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ab0e04-d995-4b55-9152-5335968d9275",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a94fae81-5095-4ae0-882a-d368cb60d82b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "230f1f07-3536-4726-9096-60f6401c10ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03854148-5177-4756-9b35-af8b72c99703",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f364d90-7cb5-4b10-b506-3f7bce1c37a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "854977f8-9f7d-4d81-973f-c1c065ba352d",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d8454b-7092-4840-8194-3a155ee73095",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1a968dd-54ae-4061-9c33-0cb166631a68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23602a93-d1f8-4c0f-a6ab-557b5afb00ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a699956-c5e3-487c-b72a-35b3b7838038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e27fd4a-5ed5-43f0-ad7a-ec9f0979602b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebdd315e-b223-4d9b-9b96-834848038d09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca241dac-76d7-4cce-b595-cbfba0fb3c4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdddef38-03c2-4e12-8694-5b3f4e9a9313",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64aecdf4-0e9d-4107-a60c-a2016869b7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8ed5db-92a3-4a0f-8f70-eda5b30b1ce8",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa28258a-4ba4-4247-9dde-d8b4421880e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c4228d7-db44-4eb2-a697-1d05f4f892cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2cb7da1-d0cb-491a-9bb2-48c6e7857e69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146e8824-fa3f-44c1-98d4-85cd34eb6ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40c1eef-484e-400b-bdf5-e53f60a4a265",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e723b4da-6ca0-4b1a-9762-b6d5119168fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a03f99e6-9686-4755-a0a8-6c0d9f9c78f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "867e92c1-54a5-4032-a6c0-77823ed7eabd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2621bc36-6fa0-46f1-b62d-2cc6aa181cb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6483e30-fc09-4e95-b0c1-78a9231fb966",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3036822-bf0c-4fe0-a7ed-2fe17297d8fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e9061e0-e368-406f-be1b-3745afd58539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8870268f-125b-4866-bc49-2c336f4dbe0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0353d8b-1d9b-4f20-9e54-3646e3f606fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ec7260-7f2f-48a9-93ff-3c5ff7e13246",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11919fc1-8578-4970-b230-7f4a305782a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2fa6a33-6976-495e-a390-9ed4d5fbf94f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b9f60f-d6c2-451d-8628-a4e6e18211f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da54b39b-e1d5-4d43-b4f4-5ab88ec2b881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4fb2ca4-d7da-4e97-b32b-76b98e3f42ba",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2826d0-9a2d-4585-b272-e420be45e2a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "871172f3-05cb-44c9-82a3-4d82f4cd497b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f7be92f-bada-428e-9f6c-782d0f16b672",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06f76263-db68-48c3-b2c5-0fbf4028a164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6898b8-27cd-4dd6-827c-012b7f1098e0",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c048d69a-4b76-4361-81b7-c23389a05ef8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bd6b18b-6b71-414c-90dd-19c8d5ea6625"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10cc5151-a900-4371-9b70-fbd3648716da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00d97666-ce43-4f09-998e-e08a8065c67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0045c63-0b2d-4e6f-9ae5-e16843c9504b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e511a24-fc9d-46dd-b87c-ab30c48b69ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8e94add-d8c3-4e0a-b88d-11d16ddd2de1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be1196c7-fbc1-47dd-86df-3c44db4b11e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8377c38-a70d-4247-a44f-e054a43e3241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5534c99-bb5f-43cb-9691-f8b42d2b2641",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9450d4e6-2787-4cb6-840f-21f6ab515fe9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "580bde4a-59e7-4913-88b3-2c5144f01915"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6146b1-d953-4aa0-af49-28b3c455f9ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "393de91e-4e3a-4fe2-b796-37330003e695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5697fdb1-d0bb-49d7-af22-b337a0c2a968",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deec36c6-d6d4-4534-b5e8-d30da09b5203",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ffb0255-8098-4a8b-8ad2-774ee8e58d1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23a3b7a6-a3d2-4ae2-9c0a-20b4d0aada57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a24872-e03c-413e-80b1-3e62f0b13296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0c94ec0-33c6-46d5-9e57-3bc7cc4d780d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b42a71e7-25ef-481e-8999-7a3d936f8438",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c2d71ab-e366-4cc9-b883-7d1858aada40"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7db2d9b-ecdd-4ac2-b8e1-43d382153218",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41dcf30f-b751-44c9-8de1-efcf92645eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa9b28a-0d30-432e-b40d-497312a623b7",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cbf9605-d964-4f36-8c04-142ae09021c5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6371400e-0c74-4f36-84e6-9864dfa937c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92800e8f-07b3-470a-9c8a-f73b1f3b385c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "711db276-f769-4903-b9f9-46309104b659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "221af2c5-eacf-4132-bb5f-cbc1499dde30",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc1a646-c424-4621-8501-324f58705707",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b67a8458-fbaf-4d99-9072-4cc16e69295f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "145a818d-236f-4cb1-b0cd-e1f70c557a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80d8241c-ec0b-456c-aa78-91b51116117d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609e516d-6f5e-456d-95a2-3bc6bbdc0127",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbeafcf5-663e-4eaa-83c7-da163acf2451",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6067e0e4-f4c2-45f7-9628-36cee5add5c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a69ddca7-799d-47d2-a3d8-3840d509b634",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4515ff07-65b9-46a1-9199-35ac357b6127"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f659c32-83e3-4f36-bfc4-ed30891f9558",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1b7980-d8a6-4e72-aae9-ea3d0ab7f329",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85b7ba71-75ac-48ae-a33e-ce926dd0c4b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96767829-0778-4f07-97ba-e7682449c916",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884d7635-e310-4ff1-9588-b94701f368fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78fd0bb-b29e-4764-98dd-2cac507880d8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54b2f024-a93e-480e-beea-6f6821d99d31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f76a4c3e-e815-4261-a69c-c284e1376121"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c63d65d-08df-49c5-b590-18fa36418eca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37bf0c8f-44a3-4a3e-9428-eec214d4c4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee268062-d555-4681-9226-8996b84dfb61",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b73946f6-aeec-4867-aa94-b0f27c1d4990",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73168483-11f3-4b55-9fa0-0af2b12007c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "583929c9-f75b-43e0-9482-63a2af71336a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d998e9cc-88cd-4594-90d4-6ca7c50c75a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0e0344-60d9-486f-8b7b-9606917eaf24",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6657f0ce-da8b-4509-9305-020425834666",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2879aec6-c422-4292-857a-6e67ffb3ebe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf183784-98dd-4fc3-ab1f-d0d1ee0477b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b843bdea-9786-444c-9a87-4325d4b8c56a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b8a857f-d8fd-4dfa-a018-7d2a0ad9b09f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ec088309-3f50-4f79-a40c-9ab54c54a6a6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f40036ea-bf74-4894-b148-d7c120af9760",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "acc8ba5d-bed6-489b-81a6-dc02e77fba37"
                    }
                  }
                ]
              },
              {
                "id": "d0944056-9953-4739-a753-7a0d95283ba1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4bc6a2be-0852-4094-aa80-83163f46f7fb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89e5961-34d7-4899-8dd7-b0b88c94f30a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d6f1aa8a-9b1e-4908-86d1-764b08579eab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "180a446f-4fb1-4173-8bb5-3d6acadb4bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0c343ae0-60ed-4380-9781-6beb7475bba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b7ebcb9-6a51-434a-8985-095a49ae58d7",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fcabad-ce84-4993-8b04-027fa471fafb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ac4c106e-032f-4ee1-8eea-2cccf7dae99f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1e354f0-dda0-41ab-8500-593e8b07c97d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5feb157-4bc4-48af-aa7e-17680dc84b94"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5acb04a-4fe7-4c89-95f8-c98fba00bf4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e84c71a7-9672-4d74-86ae-069c50b8c30c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b891e037-ff0e-4733-8722-1121b5691982",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ed957552-1e02-4cc1-9104-7f2928027e75"
                    }
                  }
                ]
              },
              {
                "id": "0156d395-b335-43e5-8c85-9122f75f8d00",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "9bfbb184-5ea5-402c-bf1d-044cbe585e47",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04dac129-bae1-4d5e-9d28-b21dee9d6213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "99c0d275-8c4a-4a60-ac0b-cb6305ab5f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706b4919-2c14-4ec2-bbb1-31cc4e8cc636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae0d2193-81f9-4968-a87e-cf453637adce"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "35c2582a-046a-47b9-ad56-48a0ac79c098",
            "name": "Positive Testing",
            "item": [
              {
                "id": "109aa344-42c8-4495-bcf5-03e8fce30325",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c197feb0-a7a5-490d-96f3-b3e47d83e7e1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cc321037-929b-458c-b28a-9ad05f5e793a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00542c4e-a695-4417-9b5d-0fa030566557",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a0f4f4ed-65ca-42c7-af16-d0da02be79a1"
                    }
                  }
                ]
              },
              {
                "id": "0ffa884d-df23-4f73-8723-381e706dd8c4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ead315d7-9004-4b0f-bec1-d02ca98d8858",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7ba7f908-2dbd-4988-a336-cc38afc63d5a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0245c361-8d3a-40c8-a98f-7b0643050086",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d06f7a07-d275-48eb-bdba-8139e99f6313"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97e4cd8f-9d33-4191-bd08-e26e9b132d2e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e72f5b36-cf1f-4086-8f1b-7556d9245081"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8e30c3a8-d583-4890-8a8a-d3de1c3840f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e98e00e0-d724-4ee1-be6e-e40a19d40773"
            }
          }
        ]
      },
      {
        "id": "503b98c0-4e9b-414a-ba4e-3cf004877e0c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "87dc4e95-ca3c-46fc-bbea-3aeaefd6396d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "aa7b08de-36f2-467f-a6ae-3073588ac8af",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5488116-7a5b-4e8b-a08b-d6c99e57c38a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78e9eca7-1cca-41e7-8a98-cac2c7935ec4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "99eb5a5e-8963-451d-ae4d-5f7f140f4847"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0d86eb4-55c7-4a2a-a123-775b5b1c8d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a133073-3a6c-4284-b9a8-887595f5facd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3205a65a-4407-4663-aa97-5e6f9507ec2a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b1248f-7a07-4ec4-b1fc-6bcad78a4fa6",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "50c30587-88d3-44eb-a2b4-04f09fb4754c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "694a8a9a-a203-4677-9349-0bc2a1c0ec6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "719096ed-26c5-4c09-9ec1-89574fb049ce"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "eb2c6b96-0821-4611-b4ef-9cc088ac7167",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6bee0a88-71cb-4e27-b8f6-cca7a8b843eb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "251ce8b9-a00f-43c6-9d81-68630e2961f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd09c570-674f-435e-9358-49f454f97307"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb79e5b8-4278-465c-9024-81e9fb77498a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dcad3533-4742-4a8c-88c5-8405a0ba95db"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a6a26a29-ac99-45ef-b3a3-0de220af18f5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7f647d44-7109-4674-a49b-ee59a34ceff5"
            }
          }
        ]
      },
      {
        "id": "67cab2a4-b50c-49ea-808b-53c31007d35e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ec8872b4-b01d-45a2-81f8-44b834326313",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5d9fb36d-2310-4636-a86e-a55e72b9ad7f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d5d6ddf-3b31-4853-951c-a3c1e5b0cb92",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da5af1a4-b12f-49e8-b19f-66a1f19141e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34844566-3fbe-4bc7-a8dd-5ae511d1e707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd577ca3-ca6c-4905-adbd-6426351121a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "efa82aaa-d3bd-4d72-b858-5e8474b6757f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7545ba89-a29a-4ccf-8bfa-d73739ed30f1",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2d5d47-163c-4149-a3bb-c44dcea23bda",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "23bb966b-5532-44f4-84f9-59a2a5809d69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8f05337-4bab-47e4-b7e3-8e9c22ad156d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e16e59e6-4459-4018-b550-6801331353c4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fb99fe30-03f2-4b32-88ee-40839d27d1c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9331d2b-907e-449c-a6c2-4ca230ce4196"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b91f9b9f-c9a9-480a-b20a-095f507301e6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "209c0222-9727-49f1-b8c6-e586d8ed03a5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86667fe1-8619-4d0b-ac70-c5e0ea5bd215",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "de19c198-4335-4374-9f1b-05b0f685956c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3086ea07-eebd-493f-8f11-a4566e10992a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ad0d9df-fc5e-45f6-8020-71ff23a8fc71"
            }
          }
        ]
      },
      {
        "id": "a6f26646-db9e-4a38-8ced-e6155900a252",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "22e08a14-6b94-48ec-b581-0f156eb14696",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5ca99c78-5b82-4479-b76d-1651ba0573f1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cd8e809b-f9fc-495a-9f7e-42caf33763ee",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71c91ec8-e33b-4a89-b5f5-1f08922936f5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d245abf3-1643-453c-b67f-f820c320eeac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "717bc251-c6a3-4be1-b7ec-608520f97810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e3c4954-ff41-4d90-9065-9cbfc297ee11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a437d3-c7bc-4b38-82fc-d2f3a9eefac4",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb87fbf4-78d2-4d30-91a2-3d6053fdc72b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7d6dc47f-50f3-4dda-b4aa-cba161e041aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de05c620-43d8-48cc-8b16-23c3a8b17476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b5c4d81-503d-411f-b531-f0d4e0ccc60f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f3d1671-bf5f-4f95-a723-c33bd196d01c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d14cd17-55aa-43ec-ad83-530089373b0b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1e0cddff-d987-4085-8d72-221d957d1b73",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6bf395c5-da88-43f5-9fbc-93d78e4f6133"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0a4c298e-41d4-484c-ada5-bca3dd94793d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "8d50d947-8eba-4bda-8566-c9273e8d9594"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "977699b3-cb5d-4f92-8748-5577257a82b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b46f46d9-2901-46fe-9d52-b38f10453d82"
            }
          }
        ]
      },
      {
        "id": "2636dbe8-2e96-47f0-978c-755eb123c50d",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f9daf2c4-4e5a-4fcb-b69c-3f93124f3c68",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d7525fd-129d-42c9-9e1a-becfc684ba55",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b0a877e7-4cf6-41ed-8258-7286f82b545d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8022626b-6e8f-46f3-8c74-9e392f016873",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe373370-6f22-41fc-90b0-2498774c7fc3",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 286.13076923076926,
      "responseMin": 24,
      "responseMax": 6622,
      "responseSd": 791.8241295453032,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1679618258690,
      "completed": 1679618344053
    },
    "executions": [
      {
        "id": "a5a22280-d35f-4293-9680-fee27cf1eb31",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6a943f37-7d2f-4184-9d47-7536c35b0f08",
          "httpRequestId": "7e2026d7-0c1d-4b87-8e9b-7ed156ca2677"
        },
        "item": {
          "id": "a5a22280-d35f-4293-9680-fee27cf1eb31",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "da7bb6a3-9f50-41e9-9af2-6e7f5498d954",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 0
        }
      },
      {
        "id": "5a5929d7-bf68-4fa7-957c-15e4870bbd86",
        "cursor": {
          "ref": "d2729df3-3ff7-46ac-95f4-086587061f34",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7617266c-e368-4cec-9255-67d1128ca529"
        },
        "item": {
          "id": "5a5929d7-bf68-4fa7-957c-15e4870bbd86",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "832c3327-d2d1-492d-a707-fd4b68388b4f",
          "status": "OK",
          "code": 200,
          "responseTime": 24,
          "responseSize": 0
        }
      },
      {
        "id": "e72e4e4d-5154-4337-b8a1-3e738c0c9ca4",
        "cursor": {
          "ref": "707dbc98-1902-4a67-9387-5573d8a9bf32",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1cbd8d16-c001-4fb9-80c8-2b3d16fdcbe6"
        },
        "item": {
          "id": "e72e4e4d-5154-4337-b8a1-3e738c0c9ca4",
          "name": "did_json"
        },
        "response": {
          "id": "74c6cb9f-3bda-4122-926f-7d0b45a3ec8f",
          "status": "OK",
          "code": 200,
          "responseTime": 400,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c15c50-adef-4153-909a-bf9af2cb464c",
        "cursor": {
          "ref": "8b8b1d30-3332-4a04-bb29-cb1474be2e81",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d41a7ee9-d200-4165-959b-ba9a4ecca5a0"
        },
        "item": {
          "id": "02c15c50-adef-4153-909a-bf9af2cb464c",
          "name": "did:invalid"
        },
        "response": {
          "id": "5fc33900-89b3-4b0c-9ab1-6bb5edf306c2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 965,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "02c15c50-adef-4153-909a-bf9af2cb464c",
        "cursor": {
          "ref": "8b8b1d30-3332-4a04-bb29-cb1474be2e81",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d41a7ee9-d200-4165-959b-ba9a4ecca5a0"
        },
        "item": {
          "id": "02c15c50-adef-4153-909a-bf9af2cb464c",
          "name": "did:invalid"
        },
        "response": {
          "id": "5fc33900-89b3-4b0c-9ab1-6bb5edf306c2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 965,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "2123234b-9e1d-4212-af90-1fad75244332",
        "cursor": {
          "ref": "f63dd197-9444-4283-b469-e2449ebec14a",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8992e840-98e4-44d2-83f0-ee30773689ac"
        },
        "item": {
          "id": "2123234b-9e1d-4212-af90-1fad75244332",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "7b06ea49-8303-4672-bb70-33ed6c42facd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ddf54a-a6f5-4eb1-8f5e-99ca2a9ae650",
        "cursor": {
          "ref": "3b57c891-8be1-48cb-9416-af18cccf4af6",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "63ad9a5f-527b-4c8b-ae52-266659ee2062"
        },
        "item": {
          "id": "82ddf54a-a6f5-4eb1-8f5e-99ca2a9ae650",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "58677aee-55a7-410d-858e-23fefbc85129",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23310f18-f8ad-45b7-80f1-5ebea5bcd67e",
        "cursor": {
          "ref": "43bffee1-f17b-473d-bc77-3d840e780188",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "76bb7cba-c6a4-4264-8b77-ea04d764c1b9"
        },
        "item": {
          "id": "23310f18-f8ad-45b7-80f1-5ebea5bcd67e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "cd13c8f1-ad87-4464-96fd-227442cb28b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 56,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "b7dd6e9e-92e0-4197-bee1-d497d458f537",
        "cursor": {
          "ref": "10209a7f-8956-4a91-9fb5-7a0f85114b69",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bc75a993-0229-40c7-a0f5-5d481a4a3c1f"
        },
        "item": {
          "id": "b7dd6e9e-92e0-4197-bee1-d497d458f537",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "132dd3f5-5d46-43b6-8551-e7bd455e5fbf",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "b7dd6e9e-92e0-4197-bee1-d497d458f537",
        "cursor": {
          "ref": "10209a7f-8956-4a91-9fb5-7a0f85114b69",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bc75a993-0229-40c7-a0f5-5d481a4a3c1f"
        },
        "item": {
          "id": "b7dd6e9e-92e0-4197-bee1-d497d458f537",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "132dd3f5-5d46-43b6-8551-e7bd455e5fbf",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "b0603c2f-f8a6-429f-ae0e-f045b998727d",
        "cursor": {
          "ref": "7fe48ec9-2492-475f-afce-9c218812aa84",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b5b4025f-87b4-4507-87b4-021ad47d25ff"
        },
        "item": {
          "id": "b0603c2f-f8a6-429f-ae0e-f045b998727d",
          "name": "identifiers"
        },
        "response": {
          "id": "6611271a-5bf4-492d-ae74-79cb3c2ea3c9",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60462632-e5c7-4616-964f-079397d24718",
        "cursor": {
          "ref": "d0a5d069-38a4-4fcf-93b9-39b1383a1d9e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "da1cd7b7-34b5-4268-892c-b0a1cfd12068"
        },
        "item": {
          "id": "60462632-e5c7-4616-964f-079397d24718",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d38d5f7f-8ee8-4fa9-8bf4-f5c79008c2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60462632-e5c7-4616-964f-079397d24718",
        "cursor": {
          "ref": "d0a5d069-38a4-4fcf-93b9-39b1383a1d9e",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "da1cd7b7-34b5-4268-892c-b0a1cfd12068"
        },
        "item": {
          "id": "60462632-e5c7-4616-964f-079397d24718",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d38d5f7f-8ee8-4fa9-8bf4-f5c79008c2ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50943a1e-f9aa-40e9-892d-5d484b8ae80a",
        "cursor": {
          "ref": "173edb3a-bbe5-4cff-97ae-df8108e93a7c",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2d747b84-55e0-4328-873d-7fd25d929120"
        },
        "item": {
          "id": "50943a1e-f9aa-40e9-892d-5d484b8ae80a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "b3cf7606-b5f9-4c72-8cd3-e6bf527c8447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 172,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d553c61-951c-4965-b4df-e174ea4acbdf",
        "cursor": {
          "ref": "49aa56fc-6204-4661-874c-0f8dd84e9971",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "bd7e07d9-3aef-4c59-b14e-89e0627aef2b"
        },
        "item": {
          "id": "4d553c61-951c-4965-b4df-e174ea4acbdf",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "df432ec1-5177-4c31-9a10-1ff5e2a67789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf938b3-2f09-4c22-9ab4-77b5b1e7682f",
        "cursor": {
          "ref": "ad275325-6a6d-44e9-bcb4-e84c5214a6d8",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "8d1a31e1-2101-4c56-b002-40064471bc74"
        },
        "item": {
          "id": "2bf938b3-2f09-4c22-9ab4-77b5b1e7682f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0b85a0fe-8fb3-4da1-8cbb-31582ee0bc73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1591b609-2444-4bd8-a98a-b8118c668657",
        "cursor": {
          "ref": "bd7fdee8-9c5e-4799-8848-6ab45dde5c97",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "33397987-7934-45ba-8f47-f4c6c091d558"
        },
        "item": {
          "id": "1591b609-2444-4bd8-a98a-b8118c668657",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a8c8d18d-25ea-460f-8ac1-012e9ee7eab0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bc474df-0381-4499-90ec-ba17098c7a4e",
        "cursor": {
          "ref": "0392b5d1-2dba-4659-8c41-830e6ad67b36",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4790802d-711a-4730-bc0d-cbe18e6e0b98"
        },
        "item": {
          "id": "8bc474df-0381-4499-90ec-ba17098c7a4e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9c175c8f-7ba5-4b26-a43b-de2d1d01b2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c29cc6d-1769-47e9-8af6-f3690c942724",
        "cursor": {
          "ref": "e98fae3a-6309-4c68-ad4d-b9262f5d01bb",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6a369801-5705-4cdb-b86b-78d7ca888907"
        },
        "item": {
          "id": "9c29cc6d-1769-47e9-8af6-f3690c942724",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f45cbe5a-12ed-4ac0-a901-153dc232b081",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 214,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98e4bdbe-0c67-493b-8c7d-6be30bf14863",
        "cursor": {
          "ref": "efdb1b33-7f20-4c60-9c3b-39708911a77b",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "de8d8c2c-8229-4545-9920-688f05c969d2"
        },
        "item": {
          "id": "98e4bdbe-0c67-493b-8c7d-6be30bf14863",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "7270b254-2c8f-4885-9ddb-3cd3f624ada2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac043691-468c-48ce-bd80-2177fa29a2c2",
        "cursor": {
          "ref": "7d27f108-a564-4741-97a0-4d5a9816816f",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "91b2a34a-b459-4d8f-8e4e-9002b661747f"
        },
        "item": {
          "id": "ac043691-468c-48ce-bd80-2177fa29a2c2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "96400e6b-1fe1-4db3-9c16-8fc80669d2b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ce34bbf-a0b5-4abc-88c4-bfb02c59d90d",
        "cursor": {
          "ref": "2799a6fa-e0c3-40bd-b244-0f78e78f812c",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "d936bfb8-d176-4265-a6c6-31d2f08e98ca"
        },
        "item": {
          "id": "4ce34bbf-a0b5-4abc-88c4-bfb02c59d90d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7bb88ae4-2a29-49f1-b51e-6a050748950e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e16f9b9c-40fa-40ab-9467-372913b3caf0",
        "cursor": {
          "ref": "19aac1d7-0e87-40a8-9113-99c52773d846",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "51ec7285-b8a5-4548-80eb-5b68424d8f88"
        },
        "item": {
          "id": "e16f9b9c-40fa-40ab-9467-372913b3caf0",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "56619184-ff0b-4e63-b88c-2216e2878417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a44e014-962f-43a0-a0d6-13600beec300",
        "cursor": {
          "ref": "0d4b6eb1-96f4-4156-af02-e36dd93e928d",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "817d900d-1a92-475d-a720-428b389b0a55"
        },
        "item": {
          "id": "4a44e014-962f-43a0-a0d6-13600beec300",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0b5c607d-6e09-4845-9e6f-bc92e31750f7",
          "status": "Created",
          "code": 201,
          "responseTime": 1629,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "06664c0b-ef1a-4ad8-ad72-e2725c520968",
        "cursor": {
          "ref": "4506eacf-13d2-47eb-b585-f81345f17d94",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b9122623-0edb-409d-b014-5ab6832eccf6"
        },
        "item": {
          "id": "06664c0b-ef1a-4ad8-ad72-e2725c520968",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "92568eba-8974-4857-99c2-5580b4f65aa3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea7373b-e20d-44d7-a410-5305bb765120",
        "cursor": {
          "ref": "18fe14e9-0b62-444d-bf15-ab520410520c",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "023d2323-9072-4ef1-a895-8e9bec8e4455"
        },
        "item": {
          "id": "4ea7373b-e20d-44d7-a410-5305bb765120",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e5a2d140-8388-4318-b295-23430ec72f06",
          "status": "Created",
          "code": 201,
          "responseTime": 5821,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "866e210f-52ce-452d-9c3a-d8d6fad68993",
        "cursor": {
          "ref": "0d05702f-2d8b-4a78-b147-5694145c7893",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "b8d48360-10b6-4178-a445-bdfa9c64b394"
        },
        "item": {
          "id": "866e210f-52ce-452d-9c3a-d8d6fad68993",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e07cecd4-3084-4ef1-9086-6094e73c3434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97020f6e-63d6-45ca-8669-ae85d9452b19",
        "cursor": {
          "ref": "bf9f6543-be86-4f89-af79-88236108e07d",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "3dc08bad-9a43-4521-ae89-75c895688732"
        },
        "item": {
          "id": "97020f6e-63d6-45ca-8669-ae85d9452b19",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f7b9ab26-a9df-4725-9ce7-0fd64a5d724e",
          "status": "Created",
          "code": 201,
          "responseTime": 6622,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "727af6fc-1109-4ea9-bba0-c6db35e683f2",
        "cursor": {
          "ref": "65982244-441e-4c9f-9fa4-10dd04bfed74",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "acc3e22e-d224-4f5d-a9fe-5f0f44046907"
        },
        "item": {
          "id": "727af6fc-1109-4ea9-bba0-c6db35e683f2",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "2cc37635-b25b-465c-87b4-47448d76aa3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 401,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a127cc8b-0161-496e-8f11-5b0360424403",
        "cursor": {
          "ref": "020c523a-c572-41aa-be98-a8c6d40baf48",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "38a02b9c-bf83-4854-8eb0-076d21bc84e9"
        },
        "item": {
          "id": "a127cc8b-0161-496e-8f11-5b0360424403",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "a9fc4822-c869-4ca7-89c5-dbb2009005d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dbbdff5-d124-47e0-a5e6-b5eaafe73dfe",
        "cursor": {
          "ref": "e06ff9fb-8340-4d88-b8a4-a7e9355a5b0b",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "f91e396a-41f0-4c2f-b5d0-1c5093251701"
        },
        "item": {
          "id": "4dbbdff5-d124-47e0-a5e6-b5eaafe73dfe",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "fdc73d26-af5c-41aa-b2dd-ce0f009b0494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3b69da1-2beb-41f3-9831-b596a139ecca",
        "cursor": {
          "ref": "3920f542-7030-455f-88cb-93039e4db7c6",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a8d6be0f-8647-4fa7-b0a9-c559d2683d54"
        },
        "item": {
          "id": "c3b69da1-2beb-41f3-9831-b596a139ecca",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "84d282b4-9ae6-4315-8227-7d7e4582dd85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc3b7f0-ff4f-4812-a2e8-f4155843b1e1",
        "cursor": {
          "ref": "e9f9dea7-da44-41e9-9d42-9c746b5dd539",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ca10a25f-9a6f-4d3a-83b1-a993f805e6ea"
        },
        "item": {
          "id": "7fc3b7f0-ff4f-4812-a2e8-f4155843b1e1",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "3e896ab0-1831-4ac2-ba64-ee5891160ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40f7241e-e291-436b-9277-b2af8110b139",
        "cursor": {
          "ref": "6e7c4bad-eea2-4c01-a44c-51cd2f9569c0",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "8aceb4df-8d5e-43ec-a18d-33634af281cf"
        },
        "item": {
          "id": "40f7241e-e291-436b-9277-b2af8110b139",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "972b003c-daeb-4450-bf98-872bfbc64607",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe3aab6-0c63-4ab4-b7a9-015b1a889d94",
        "cursor": {
          "ref": "6d44ec58-7ca7-42a1-95b8-6f558344954a",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "52110ae9-8f29-4e72-86df-dbefdbab65b9"
        },
        "item": {
          "id": "2fe3aab6-0c63-4ab4-b7a9-015b1a889d94",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "2884ab4c-3394-435c-b9a3-290a831f507f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdad909d-d43d-4e77-ad42-ad3a8c59e469",
        "cursor": {
          "ref": "ddd70c46-16b4-44d3-9d90-8b833b744e2f",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0af70910-ddfa-4b33-8465-415dc93ee0da"
        },
        "item": {
          "id": "fdad909d-d43d-4e77-ad42-ad3a8c59e469",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "83a39e2d-108f-4b81-9c92-e299f9b69ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11bf4ef8-a521-45fd-95ea-a4d84b442e61",
        "cursor": {
          "ref": "bf0d5c0f-9459-4e15-acb2-b0132864b8af",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "5db30321-b7ff-49ca-bbb9-42f9a8642af5"
        },
        "item": {
          "id": "11bf4ef8-a521-45fd-95ea-a4d84b442e61",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "32fda772-96ef-4a3c-b49a-471459a0f1c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "942ee1c5-d412-406a-b0e0-11d27c75f539",
        "cursor": {
          "ref": "3c628e89-2499-44e3-8e10-921941bf0a4b",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "f9a4049d-d2f6-4eba-ba54-aeb8685fd265"
        },
        "item": {
          "id": "942ee1c5-d412-406a-b0e0-11d27c75f539",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0b17a5ce-da0a-4699-8a88-dde0d650c8de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b53d62-b134-49f1-9478-4955d755dace",
        "cursor": {
          "ref": "22e84f54-12c9-4a26-ae5c-613ae9bcb9c8",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d9bae23e-1cfe-487a-8826-a330a912b3d4"
        },
        "item": {
          "id": "11b53d62-b134-49f1-9478-4955d755dace",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d6ae1d39-b0a3-401a-8660-1b56d719358e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815da1f4-efb8-4e7d-a6a3-b46ab8e68694",
        "cursor": {
          "ref": "4aaf2a31-56aa-4e25-bde2-6586df9c70e0",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5e6e6366-6fbd-4f4e-a96b-9f48b305957b"
        },
        "item": {
          "id": "815da1f4-efb8-4e7d-a6a3-b46ab8e68694",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "705ded86-00bd-4461-b6e7-58a11905f1b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883deae3-68d6-4e6a-a635-f6e49f5f16bc",
        "cursor": {
          "ref": "4b590003-dde1-4535-a09f-76caf2b705b8",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a86625ae-e423-4a76-9109-94774702d784"
        },
        "item": {
          "id": "883deae3-68d6-4e6a-a635-f6e49f5f16bc",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "3a20bd34-86eb-4a10-8862-8ab07398ffc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a64d42e-5e6d-40e6-b59f-915d1515f05f",
        "cursor": {
          "ref": "798ddabc-e751-4e82-847d-9c707c886f0c",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "cefdde1a-331d-4d23-b316-b862fa820d07"
        },
        "item": {
          "id": "1a64d42e-5e6d-40e6-b59f-915d1515f05f",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "c33147bc-509d-47b9-8b1f-88ef2509a1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2d3b8a-696a-4c8e-919f-0f8574345fc0",
        "cursor": {
          "ref": "27b69c5e-20da-4e9e-9f64-ecb3a4c15bff",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "770e1328-01ab-4b5c-a145-14c00782eec5"
        },
        "item": {
          "id": "7e2d3b8a-696a-4c8e-919f-0f8574345fc0",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "0e7dece3-1436-45d5-8f43-4e782b20e5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35efa6d8-6ba1-4aaf-bead-9f8785031adf",
        "cursor": {
          "ref": "66a8b3ce-1325-43fc-87c4-150a173a0176",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "ceb766e2-af0a-418a-928b-d28f47149e32"
        },
        "item": {
          "id": "35efa6d8-6ba1-4aaf-bead-9f8785031adf",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7335476e-f0c4-4395-a49d-8149e734f6d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cccfe8-21b8-4e1a-ab0c-be7f204429bb",
        "cursor": {
          "ref": "41d2d505-d5e1-4337-954c-f9a784753f40",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c594bda0-eb9a-4fee-8118-0923258be81f"
        },
        "item": {
          "id": "c2cccfe8-21b8-4e1a-ab0c-be7f204429bb",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e07e6d3f-cb57-4884-9067-186fa82cc513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72e0df1-3a71-4a57-8756-3bc3522ddb21",
        "cursor": {
          "ref": "f3574e59-72f3-407e-a514-c30b5b404819",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b20e7aab-cacb-4c37-84b7-f01a122d8b02"
        },
        "item": {
          "id": "c72e0df1-3a71-4a57-8756-3bc3522ddb21",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b39e50a9-3af2-419f-9d65-1a24f01c673e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c17d3a2-e174-44c8-94a4-60c9af8be446",
        "cursor": {
          "ref": "b82167c9-2ee9-45d4-bf3e-2cf9789eb364",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "05056c2e-eabc-43be-bc24-c1f6f0f30728"
        },
        "item": {
          "id": "4c17d3a2-e174-44c8-94a4-60c9af8be446",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "e0638c3d-d42e-4a0b-87e3-38482a6c5a33",
          "status": "Created",
          "code": 201,
          "responseTime": 3345,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "deedfce9-b6f9-499b-9950-a84593310832",
        "cursor": {
          "ref": "84e66444-4c97-4599-9936-2208a058efda",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "60844cb2-b8ad-4e42-9103-48702dbc30f8"
        },
        "item": {
          "id": "deedfce9-b6f9-499b-9950-a84593310832",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "6074658c-2c50-4133-933f-9a67c22a05d4",
          "status": "Created",
          "code": 201,
          "responseTime": 2643,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "bbab7f88-0e8f-4a02-b76c-1d8aa40860e4",
        "cursor": {
          "ref": "368e45f0-b040-4bc1-b0e8-c2419d81c742",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "7e32ae89-ec44-4693-92ca-2ba4986e8207"
        },
        "item": {
          "id": "bbab7f88-0e8f-4a02-b76c-1d8aa40860e4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "63aee017-0bd6-4385-8c21-0aeb9f564b3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3841842d-8bd0-4bf5-9055-9177ab97fae2",
        "cursor": {
          "ref": "a25cf2b8-0700-4a9a-9b41-11dca9ea4b16",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e033503e-d9f4-41ea-80dd-18c8810fd20a"
        },
        "item": {
          "id": "3841842d-8bd0-4bf5-9055-9177ab97fae2",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e8b5f3a6-0260-41e4-93a9-b212528cd222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b0829b-9899-4064-9f91-7f51df41b1cf",
        "cursor": {
          "ref": "96add7c4-53f9-4745-9e4b-07ba10053a99",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a3fb97f2-f1c7-42f8-b68f-a34621b03ef3"
        },
        "item": {
          "id": "52b0829b-9899-4064-9f91-7f51df41b1cf",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "34eb3f45-0705-4825-859b-8117c6a76070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83cce2e1-7b9c-4a58-99f7-cdd465b928bc",
        "cursor": {
          "ref": "6425ac31-3664-46ed-9064-80982e4b6915",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "242da437-8d75-4fc9-8d9c-f37ed8733e98"
        },
        "item": {
          "id": "83cce2e1-7b9c-4a58-99f7-cdd465b928bc",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "79dd646a-d7ca-4839-8421-1b66d2f7dadc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "619e6030-9da0-442e-b008-977e65214de0",
        "cursor": {
          "ref": "bc452e12-bf80-4b39-965a-1cf529206549",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "904e0d2b-cddb-4324-b724-405c2894546a"
        },
        "item": {
          "id": "619e6030-9da0-442e-b008-977e65214de0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c84f0706-0d8b-417b-bc78-4c7e6295eaa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fdc56d0-65f2-4fd3-83b4-35023510468e",
        "cursor": {
          "ref": "cfd2a873-448b-4c87-bf56-1c274aaf5300",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "bd35bc58-6e19-4753-ae8a-ce5d31a52315"
        },
        "item": {
          "id": "4fdc56d0-65f2-4fd3-83b4-35023510468e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b19e7cd8-9d02-49f3-9c0c-96a9e3b41af1",
          "status": "Created",
          "code": 201,
          "responseTime": 2541,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bebe17a4-ed75-4bd8-8de6-88c4bee6e2ed",
        "cursor": {
          "ref": "bc369ff1-2068-4271-952a-6fdec934dd6c",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "feda6a53-3f7d-4dfc-b0ff-d0c70fd138c5"
        },
        "item": {
          "id": "bebe17a4-ed75-4bd8-8de6-88c4bee6e2ed",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f004acb5-3473-4b25-b112-24a1854f6fc1",
          "status": "Created",
          "code": 201,
          "responseTime": 2637,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "c3bf5e18-bc3c-4929-bd97-a9226d9520ec",
        "cursor": {
          "ref": "ec1d8fe2-c3d8-4b55-9771-5f87089703fd",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "76b5e479-902a-4af5-9451-192610cf59e4"
        },
        "item": {
          "id": "c3bf5e18-bc3c-4929-bd97-a9226d9520ec",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "04083d0d-7807-4d8b-b90d-785cac652802",
          "status": "Created",
          "code": 201,
          "responseTime": 2710,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "afe17a6a-f4bb-4dae-95f9-19e8118edc9c",
        "cursor": {
          "ref": "fae71bc3-c6b1-4dff-b383-c645de779948",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9ce6a2e4-d879-4a94-b2c1-b13d0368c8a1"
        },
        "item": {
          "id": "afe17a6a-f4bb-4dae-95f9-19e8118edc9c",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "db3bc80f-9a8e-4bd7-9857-941d519c8684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c200cb-38d7-4ac4-a832-13e84ca1ac27",
        "cursor": {
          "ref": "c5e8e184-fd6f-414b-8ab6-bc0c3f6a53b5",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2841c383-a6ec-40a8-bc4a-b43276098137"
        },
        "item": {
          "id": "f6c200cb-38d7-4ac4-a832-13e84ca1ac27",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "20b8e408-661b-4c0f-acae-add64c644d18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c3e928c-9abc-42a2-a08c-c0827a42176a",
        "cursor": {
          "ref": "97bc1ce4-022e-4cb2-9bc9-916aef3cbf69",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ada51619-0228-4f7b-9e52-c0e741367b95"
        },
        "item": {
          "id": "0c3e928c-9abc-42a2-a08c-c0827a42176a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fdf2fb79-0cc3-40a2-97fb-7bd98322f6ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f491d63f-a297-473d-9145-4f22ecf23f36",
        "cursor": {
          "ref": "d601364c-3e4d-4003-b967-5bc9d35d4902",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cbec29e6-e384-432a-ae83-8c26d89ca007"
        },
        "item": {
          "id": "f491d63f-a297-473d-9145-4f22ecf23f36",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "8c4ce191-f7bc-43e5-8658-f05046c7da47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580486c0-db84-4135-a821-6a7f057bd86f",
        "cursor": {
          "ref": "a76d5804-f4d4-45a2-a575-aba5f59e3710",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7b9618c7-3e3f-490b-9c06-8d88c9e746d9"
        },
        "item": {
          "id": "580486c0-db84-4135-a821-6a7f057bd86f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "39b48d21-c7d3-4863-8aef-09ac591c9291",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ce2a83-9ce0-497f-8bc9-d87ec37ff85e",
        "cursor": {
          "ref": "a104606a-145f-4257-8639-8895ebbcc1ae",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d6991c5e-e6bf-4195-8062-a273dc8a7dfe"
        },
        "item": {
          "id": "80ce2a83-9ce0-497f-8bc9-d87ec37ff85e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "eb0f8e2b-fbbb-4ecd-af01-437a30075946",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7725c6a2-4e6f-4caa-b296-0ec2dafff4d2",
        "cursor": {
          "ref": "077bd9cd-c32d-488b-a18c-68675d45743c",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "beb74598-41d9-451d-950f-eea9ae6664b6"
        },
        "item": {
          "id": "7725c6a2-4e6f-4caa-b296-0ec2dafff4d2",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6c6114e3-04bc-4e08-aaf4-59a87cf00bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f4d4b3-8b59-46e8-8fc2-7c43a4427866",
        "cursor": {
          "ref": "ca56e668-8e9a-48d5-af36-e74761d821ae",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c9422831-83b0-48c0-ae0f-acb6d2bb329d"
        },
        "item": {
          "id": "93f4d4b3-8b59-46e8-8fc2-7c43a4427866",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7ddd0a5e-fe03-4aa3-8925-cdcdddfdbd4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47b56d36-468f-4cdf-afb0-e3d6e780e148",
        "cursor": {
          "ref": "02efb62e-1d8f-401c-874e-00de01e0fecb",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "11a2759e-1dc6-449e-929a-671171d5b8c1"
        },
        "item": {
          "id": "47b56d36-468f-4cdf-afb0-e3d6e780e148",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f90cb35f-5d82-4b40-a3d3-ac5ad91cb5b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf99f176-5121-4665-93ce-c8ad02d768a9",
        "cursor": {
          "ref": "d7e89734-d11e-44f6-b75b-dd41cba799b1",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a5df69e6-34b5-474f-99d2-2525e240cb97"
        },
        "item": {
          "id": "bf99f176-5121-4665-93ce-c8ad02d768a9",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "efca99ee-d26c-48e1-9fff-f71c7d40c820",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb340a85-b270-44f6-8dce-19cd62a9f169",
        "cursor": {
          "ref": "5e63c8db-b8b5-43e7-9fd8-f8118c2a2db7",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f2b53b6a-5f35-48c1-96cd-b5f14952d8ea"
        },
        "item": {
          "id": "fb340a85-b270-44f6-8dce-19cd62a9f169",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "641f2555-25a8-4f17-947e-a2ee445de8fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0616fdcc-bb89-489f-8dd6-b4d0038d5b59",
        "cursor": {
          "ref": "d0baf929-b1f3-4973-9f10-f81cad70022a",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "401c7dee-0296-45f9-8e21-83c52f58f0ef"
        },
        "item": {
          "id": "0616fdcc-bb89-489f-8dd6-b4d0038d5b59",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "5a28e020-e31a-4074-a93f-57197b3af9e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66388880-75ee-47f7-a1d8-36ba87ef4bf4",
        "cursor": {
          "ref": "463394d1-d544-4721-b5b5-7d2d118d9dc9",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4c9f71e4-7c12-4d29-a118-a61b427aeef8"
        },
        "item": {
          "id": "66388880-75ee-47f7-a1d8-36ba87ef4bf4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f36e22e9-b243-4180-b451-9a398d6026b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7a59d7-5ef0-40a2-978f-54687a603e45",
        "cursor": {
          "ref": "fb18028e-cb59-4a37-956e-2d1e0a1789f7",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "ce612d77-c86e-4f4b-b3ba-588e7e1042c0"
        },
        "item": {
          "id": "8f7a59d7-5ef0-40a2-978f-54687a603e45",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "724d26f0-78f0-4631-a19b-57251d0440cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1556c5-458c-4d6f-92a9-661fb9b49f45",
        "cursor": {
          "ref": "5bf122c7-915b-40ba-b471-e580a9a99aa5",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3bbc69b0-186f-4981-a480-ab7ec6cde017"
        },
        "item": {
          "id": "2b1556c5-458c-4d6f-92a9-661fb9b49f45",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1043c3e4-529f-4e19-9e16-ad0dc77e9717",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af7bc45-db2b-46aa-a763-cf8046e1fca4",
        "cursor": {
          "ref": "f7ba4188-a761-4b43-9dd4-714fb9d95b2b",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "b59c19bc-0e59-4444-9124-b02a339b143d"
        },
        "item": {
          "id": "5af7bc45-db2b-46aa-a763-cf8046e1fca4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "696ddf09-5348-4658-88cb-6498e176753a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0058f47-0420-41c9-83bc-23f3a818f442",
        "cursor": {
          "ref": "1eff11ec-5a77-42d1-83ad-8967c7e17908",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a1b94374-040e-4fa8-b1f3-b40e66dd7702"
        },
        "item": {
          "id": "a0058f47-0420-41c9-83bc-23f3a818f442",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "7430fbf2-b3dd-4a45-ac62-b14d8f90283f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "845d713a-38c2-461b-b340-8b8c6f76007c",
        "cursor": {
          "ref": "8a92a42b-5ff7-40ab-a36b-d9d97541a20f",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "bd2869ed-d987-4d92-9185-b7c35156dd6d"
        },
        "item": {
          "id": "845d713a-38c2-461b-b340-8b8c6f76007c",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "96e7cd68-17b5-4d46-ba0e-d68d2490dcf3",
          "status": "Created",
          "code": 201,
          "responseTime": 2879,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "6717ca38-4276-4c75-9abf-edf5880af8c5",
        "cursor": {
          "ref": "c51d059d-a3e3-4c90-90a7-f2c8407dd72b",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f6e32f50-54ce-4f82-997a-635e1c784d41"
        },
        "item": {
          "id": "6717ca38-4276-4c75-9abf-edf5880af8c5",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "1e31ef56-7ce2-45bc-957e-831f385a45ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a9472c-cafb-4255-b723-09dff02758bf",
        "cursor": {
          "ref": "9077bdae-b8e9-45e4-8fdb-639f3f851c5b",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5c19a55e-2cab-47a3-ba51-741aa64b3767"
        },
        "item": {
          "id": "d4a9472c-cafb-4255-b723-09dff02758bf",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2c678a4f-9a14-486e-b021-e3e0f473334c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a005ee1-1a8a-4e80-b235-6b0d832859fc",
        "cursor": {
          "ref": "755f4f81-71f9-4c49-b90e-13aaabb20223",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4e13e306-eff8-475f-b471-0e14168cf5aa"
        },
        "item": {
          "id": "7a005ee1-1a8a-4e80-b235-6b0d832859fc",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "0f3a3d78-85ef-4ca8-9d2f-973fe7a8e01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc2b06be-b050-4c36-a3e2-f8e6907355b7",
        "cursor": {
          "ref": "7372e7c7-3ee7-4ad7-919d-999588d89b0c",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "00adb070-9086-4665-bf91-444a5afd4983"
        },
        "item": {
          "id": "bc2b06be-b050-4c36-a3e2-f8e6907355b7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "7cb7bb53-c83f-4e12-b3ab-1f2c3065e90d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6044ad-3846-46f3-9493-acb22b6994eb",
        "cursor": {
          "ref": "95a585c6-5fd4-439c-8811-ab558ba9e56d",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8d8d8c9f-7a94-48dc-9b3e-6ff45b053058"
        },
        "item": {
          "id": "5f6044ad-3846-46f3-9493-acb22b6994eb",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "44c0bc28-7109-4923-bad1-3a123bdb295b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af54c4af-861a-4068-ab12-8b943a46642b",
        "cursor": {
          "ref": "8711ad2c-36f8-4508-ba7c-4cc9d4a23d21",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "cfa66e58-0350-4f0f-ab69-399b17873638"
        },
        "item": {
          "id": "af54c4af-861a-4068-ab12-8b943a46642b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "53024248-9d36-41f0-a558-4473bc6dd06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ec6653-05fc-45d7-8340-c139307be631",
        "cursor": {
          "ref": "78ef44dc-beac-40d3-9871-7778e33f87a0",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "3ad56e14-8317-4615-b32f-0e6ce9900cb5"
        },
        "item": {
          "id": "42ec6653-05fc-45d7-8340-c139307be631",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8cb91ae3-ca7b-46e3-a530-7138460b2422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139559d2-281c-4e15-902a-a2c62e6abcb9",
        "cursor": {
          "ref": "360de8cc-3492-4536-ad02-cd0df8b367c4",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e3a116fa-2f5f-444f-bfb7-630f1ad9b06b"
        },
        "item": {
          "id": "139559d2-281c-4e15-902a-a2c62e6abcb9",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "048f2312-1ac3-499f-82f6-b163a6ea508d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d09ebd-69e0-40be-88b9-55ef4f6f0b99",
        "cursor": {
          "ref": "2bd13a89-2ce5-4796-809d-488faeae4e1a",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "42dd6199-e1c9-46ae-8b10-2fa32e3c4004"
        },
        "item": {
          "id": "24d09ebd-69e0-40be-88b9-55ef4f6f0b99",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a20fc34e-acc2-496d-a550-1390586b54c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1addb3cc-c28b-4f4f-a60a-4df6faf401e8",
        "cursor": {
          "ref": "16eb01d1-490f-4248-9502-4d0b7f75d0db",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "81658676-a4f6-401c-9c18-2a314be4b716"
        },
        "item": {
          "id": "1addb3cc-c28b-4f4f-a60a-4df6faf401e8",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "59a50a1b-5e91-43d9-84f4-44a28510ecbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81c1dae5-e206-4816-863b-60f0d439a871",
        "cursor": {
          "ref": "a1b0e412-8cc6-45aa-87ee-d0df7020ab9f",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e59fadf3-954e-415b-8b7a-73e34df73c33"
        },
        "item": {
          "id": "81c1dae5-e206-4816-863b-60f0d439a871",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "6312139e-e3e8-4ebd-855f-24897e0e5228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1e40ac-c05a-41af-a1fb-1f418666a390",
        "cursor": {
          "ref": "63af5bbd-0ca1-4711-9150-ead30bd8709e",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "70533e29-a17c-434e-b135-288045b97b09"
        },
        "item": {
          "id": "ec1e40ac-c05a-41af-a1fb-1f418666a390",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7660256d-c573-47a6-ab73-1f6d70e34e73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5edeaab4-2089-4a49-9076-0a4ee34859c4",
        "cursor": {
          "ref": "88c43dba-45aa-4331-8dde-fe2f7e33a890",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "53c60a3f-c8be-40e2-bcb9-cb51224e79a7"
        },
        "item": {
          "id": "5edeaab4-2089-4a49-9076-0a4ee34859c4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "754aa6c3-131e-436b-a746-7c4085f8172c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d2bf0a0-9632-468f-8627-d58bdc18e833",
        "cursor": {
          "ref": "14dbd994-8c16-4447-96e9-b3dd0c8213b2",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "4ed3ff92-7acd-4f8e-8c04-67c2c61282b6"
        },
        "item": {
          "id": "8d2bf0a0-9632-468f-8627-d58bdc18e833",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "b7c47897-8479-41eb-9779-1ef1aaa7d044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61d7f863-5638-4fb7-9c47-f90c0d8a8960",
        "cursor": {
          "ref": "d57c008e-97aa-4f46-9805-46ca6db9e648",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "52e4ceb9-1239-4c53-967d-ad6158ff1a7b"
        },
        "item": {
          "id": "61d7f863-5638-4fb7-9c47-f90c0d8a8960",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e9e78462-1669-481b-9df8-7bfdb62c738b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "376a00aa-b379-463b-9d61-0ee5382d65a9",
        "cursor": {
          "ref": "7d074026-3c17-4799-83c1-38e5375d69bf",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b06ae698-6d3f-4fee-ad7e-2c26b9134b1c"
        },
        "item": {
          "id": "376a00aa-b379-463b-9d61-0ee5382d65a9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c45400a3-1ceb-4fe0-b6ed-f1560be60dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c809794b-8635-4f3a-a945-4eea4e3ef463",
        "cursor": {
          "ref": "7c3e4f1c-7457-47d7-b981-de3a3631225c",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "08f45533-3876-4d8d-88d9-3854f0b28145"
        },
        "item": {
          "id": "c809794b-8635-4f3a-a945-4eea4e3ef463",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "42d23464-9420-4272-af9c-29a9f8bba050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c53f7f3-7080-419c-9b6f-b23df4dd23ce",
        "cursor": {
          "ref": "d5ceb11a-d708-4db9-9f63-08da377afa76",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "eb4a28c5-a1d3-42ca-8a69-23f04d7679c7"
        },
        "item": {
          "id": "1c53f7f3-7080-419c-9b6f-b23df4dd23ce",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2c513862-3b29-49ea-b3a4-d8450ac1bd7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a8ccfb-f7a5-45ea-a661-eddabe3830ff",
        "cursor": {
          "ref": "728eaa41-e73a-49bc-a236-2a152b6725bb",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "44379fee-c2ce-4f7f-ae05-8c897cb04272"
        },
        "item": {
          "id": "81a8ccfb-f7a5-45ea-a661-eddabe3830ff",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "d04efc47-848b-4fac-92a6-8ce26cd094cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b82340d-3b19-4d09-8cdd-207b22f52be9",
        "cursor": {
          "ref": "31f2a683-c9d7-4bf2-8778-2a32de8f43c7",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "82128f6b-7739-44d8-a0d7-27a6ef617beb"
        },
        "item": {
          "id": "5b82340d-3b19-4d09-8cdd-207b22f52be9",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "af6454cf-d108-4e14-8820-33e391715c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f56e38-6a68-4a20-a46b-3001e876baeb",
        "cursor": {
          "ref": "327a301f-2596-4685-921a-a2c6c692e17c",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "98efbd71-ec2f-4699-aa3b-7f1cf509d53d"
        },
        "item": {
          "id": "46f56e38-6a68-4a20-a46b-3001e876baeb",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "7e730353-be6c-4f7a-8995-e0c358940ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24fa7c2-f1f7-47fa-80b5-8ef669fd5a0f",
        "cursor": {
          "ref": "8ea2c03b-a478-4105-bc24-ef6ee51be52a",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "148da940-8355-49d0-8d58-27b68faafbe3"
        },
        "item": {
          "id": "a24fa7c2-f1f7-47fa-80b5-8ef669fd5a0f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "cf4d5646-70a9-465d-9178-cebb5fde9319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2acd05f-0806-4186-9072-f6de9b804316",
        "cursor": {
          "ref": "cf757da1-1304-42b2-83e0-6182f0250fee",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c1aa67da-1024-4152-a001-db45395f3114"
        },
        "item": {
          "id": "b2acd05f-0806-4186-9072-f6de9b804316",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "0bf67239-fb24-45f0-9724-f0ac739c3473",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e9dc701-be79-4916-a55b-4d12fe37ce7c",
        "cursor": {
          "ref": "de6fd1b4-f4e7-4ba4-b4fb-1024d2f184ea",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "20939764-3db5-4fa4-adbc-536d9bc7ac19"
        },
        "item": {
          "id": "2e9dc701-be79-4916-a55b-4d12fe37ce7c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "58851346-f60b-4dbb-9d1c-62ea2a3c3f75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43defd4e-3b08-4f75-ac28-21ca92f9c752",
        "cursor": {
          "ref": "26a2e256-601e-4d43-9cb4-d0ebac363cd0",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f0357b36-a17f-4f2b-aa2e-49836bc6b77d"
        },
        "item": {
          "id": "43defd4e-3b08-4f75-ac28-21ca92f9c752",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "95c1ffd1-3aaa-4d43-9c2a-3dd818e638b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52b10a6c-a617-4432-a1f6-3d71ee287d17",
        "cursor": {
          "ref": "1680c668-999d-4665-bb83-1ce9264710a8",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7d97f581-7ab8-4880-838a-9b01c655a890"
        },
        "item": {
          "id": "52b10a6c-a617-4432-a1f6-3d71ee287d17",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b314c41d-7650-4ac5-bda1-e7b0a1d379cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342723b6-1075-4a7a-b0df-f566c27311c9",
        "cursor": {
          "ref": "e3de0213-75e4-4f3c-b05f-e3f4dbdbbc0a",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "53423c0d-927f-4a5f-ad61-224b6acc7651"
        },
        "item": {
          "id": "342723b6-1075-4a7a-b0df-f566c27311c9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "27bc82b2-27af-4d74-a859-8a22a9351e8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82db9fc3-1bbf-4300-b51d-1b9e8cf16455",
        "cursor": {
          "ref": "6726a2ab-d013-4ba7-9f7d-6f25451b9c9a",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6f05411c-0bce-41c4-9031-be337faea8c5"
        },
        "item": {
          "id": "82db9fc3-1bbf-4300-b51d-1b9e8cf16455",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0efef79b-edae-4026-8522-3e207707db18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cacfe9f4-bedd-42d9-9b76-d48372ff0249",
        "cursor": {
          "ref": "c3842281-d646-4f55-a340-3ed87318186b",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8dec167d-8827-40fa-8eb9-01b5f7077622"
        },
        "item": {
          "id": "cacfe9f4-bedd-42d9-9b76-d48372ff0249",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "be751914-a4e5-42cb-b52d-3ad3e110553b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50372ed1-0eb5-4337-9c52-58adaf0f39d1",
        "cursor": {
          "ref": "db46dbcf-65f8-4142-8416-1086e4e05bf1",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "4874e226-b31d-4338-8f36-779f83437ea9"
        },
        "item": {
          "id": "50372ed1-0eb5-4337-9c52-58adaf0f39d1",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a23c286b-9eee-4d4e-abae-fa1e1bf8fb4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7683fe6-706c-45ca-bc0d-47c400378f45",
        "cursor": {
          "ref": "7e3e4123-8b81-4644-8756-b9ecc9c7f771",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "e62bdac3-fefc-4699-8cd8-fe0ff30b095e"
        },
        "item": {
          "id": "b7683fe6-706c-45ca-bc0d-47c400378f45",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f640ab87-f7be-4b14-9bec-ed07be16e2db",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "557bf6f1-6360-4498-a5c9-a3b9fb5c1197",
        "cursor": {
          "ref": "61a76718-e131-4e2b-a94b-6289faa52211",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "97e132a9-e4fc-469a-bb47-319adce35f88"
        },
        "item": {
          "id": "557bf6f1-6360-4498-a5c9-a3b9fb5c1197",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "cf68e339-b54f-45b5-a408-c913fbc509b5",
          "status": "Created",
          "code": 201,
          "responseTime": 1898,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "9986be2c-65ab-4097-a167-309275b61d41",
        "cursor": {
          "ref": "d92ba450-955c-4668-8aed-aecd02956d90",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "7700648a-496a-4643-aa6c-c3f4df31b1e9"
        },
        "item": {
          "id": "9986be2c-65ab-4097-a167-309275b61d41",
          "name": "credentials_issue"
        },
        "response": {
          "id": "e9a748c5-b931-44f1-a630-b899b6a99475",
          "status": "Created",
          "code": 201,
          "responseTime": 2672,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "f58c9411-ff0d-4bbf-89e5-546d0ec2a12c",
        "cursor": {
          "ref": "459f4f77-5785-4864-9f75-0f149487e47d",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fe742bf0-06cc-4e67-9853-eae36e4f4654"
        },
        "item": {
          "id": "f58c9411-ff0d-4bbf-89e5-546d0ec2a12c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "675fc131-2129-4acd-9b85-f71f8bac96ca",
          "status": "Created",
          "code": 201,
          "responseTime": 2507,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b6cd84b-76ba-46a5-af8d-a1c2a50b0bae",
        "cursor": {
          "ref": "67b1abde-747c-47ab-936e-3144a95c9107",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c6169008-3248-4ad2-bb0e-9751da3fb648"
        },
        "item": {
          "id": "4b6cd84b-76ba-46a5-af8d-a1c2a50b0bae",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "0f4f8a8c-7603-44cd-ae2b-60b9e286ba18",
          "status": "Created",
          "code": 201,
          "responseTime": 2503,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0fd6c11-8921-4e99-9455-5d0452aa663f",
        "cursor": {
          "ref": "967d306f-4466-422a-80c2-b48ad8608b8b",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "069293da-f5ae-485b-abb6-2f062bebfbbb"
        },
        "item": {
          "id": "b0fd6c11-8921-4e99-9455-5d0452aa663f",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "2c9069b7-7c27-4fee-ba2d-436d2362f266",
          "status": "Created",
          "code": 201,
          "responseTime": 2516,
          "responseSize": 992
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "02042f30-104c-4cf7-8b6a-92a0474f4554",
        "cursor": {
          "ref": "5450c2a0-f3dc-458e-b2b8-2760354edd17",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "cf23802a-7d81-458c-8422-2543e020a5e9"
        },
        "item": {
          "id": "02042f30-104c-4cf7-8b6a-92a0474f4554",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "b4fefc90-815d-48b7-b158-68830b3dc89a",
          "status": "Created",
          "code": 201,
          "responseTime": 2636,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-03-24T00:38:37Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-03-24T00:38:37Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "72840f0b-0213-4363-9616-8abc159b286e",
        "cursor": {
          "ref": "5c23518b-64d0-4f60-82f9-31e1b3d52c5a",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "fc8d8298-892e-4bbc-b789-be17c7d61cd1"
        },
        "item": {
          "id": "72840f0b-0213-4363-9616-8abc159b286e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2861263a-5616-4bae-930b-718b91ebdd64",
          "status": "Created",
          "code": 201,
          "responseTime": 2347,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b245d809-b91a-4958-b56a-50aaa77bb977",
        "cursor": {
          "ref": "349bfb61-c99c-4976-b625-c895e12f5aaa",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1dea2e95-e803-48c2-8d40-890cdac4e71d"
        },
        "item": {
          "id": "b245d809-b91a-4958-b56a-50aaa77bb977",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "74eda222-cf1e-4e15-9072-5c1a8857a260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b245d809-b91a-4958-b56a-50aaa77bb977",
        "cursor": {
          "ref": "349bfb61-c99c-4976-b625-c895e12f5aaa",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1dea2e95-e803-48c2-8d40-890cdac4e71d"
        },
        "item": {
          "id": "b245d809-b91a-4958-b56a-50aaa77bb977",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "74eda222-cf1e-4e15-9072-5c1a8857a260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 179,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c187bd2d-cb83-45da-ad1c-cc919e9b95a2",
        "cursor": {
          "ref": "31cbf747-0611-416e-82a4-6d58a534cf04",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "c0855aae-dc61-4b03-9d21-a9ab3f5a3685"
        },
        "item": {
          "id": "c187bd2d-cb83-45da-ad1c-cc919e9b95a2",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "468c09c6-fa88-4daf-8706-6cd454e593e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7aa7780-49eb-4911-8e84-de16056f96ed",
        "cursor": {
          "ref": "83d27575-c062-4469-b390-a0f6c01b7eb3",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "09823a24-ef5d-4a48-8970-a336583a02be"
        },
        "item": {
          "id": "e7aa7780-49eb-4911-8e84-de16056f96ed",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6b3a70d1-7b8d-4a03-a74a-29d17e69b092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a70a2fc2-a463-46d3-8e08-3df813c5e0ed",
        "cursor": {
          "ref": "31cbaf07-7079-4d6d-80ae-00172df8f81a",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c0cf15f5-184a-4093-a40a-159d0c5c40fc"
        },
        "item": {
          "id": "a70a2fc2-a463-46d3-8e08-3df813c5e0ed",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3b1f5fb9-a360-4f54-a764-9d1ba6f57e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9d0ea39-842a-49bb-9df8-eb73a9b6de0f",
        "cursor": {
          "ref": "bd25d0b4-271c-48a9-86e2-fc17e82bb1ba",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a47d0a6a-969c-4a90-8d13-793aa1728f60"
        },
        "item": {
          "id": "b9d0ea39-842a-49bb-9df8-eb73a9b6de0f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8e83f7b8-c867-4b3b-9a2d-dd14d3764ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62260a8-95dd-4a75-8ab5-9be7acd74334",
        "cursor": {
          "ref": "26034152-28aa-4ba3-a5b6-625a096e1836",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "749bee43-f5dd-4acc-a5d7-366aa6e2583b"
        },
        "item": {
          "id": "b62260a8-95dd-4a75-8ab5-9be7acd74334",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6dba5839-a1d6-4837-b91d-2cda53e9f964",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7e4d50-bd1c-418a-b96e-108ecfcd061f",
        "cursor": {
          "ref": "a0c0c47a-a7f6-4b68-a205-55852eb9da69",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "d366427c-e826-4ea1-81ed-54988ab54a81"
        },
        "item": {
          "id": "3d7e4d50-bd1c-418a-b96e-108ecfcd061f",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "90f0fe31-c687-46b3-8a09-0f430a9d592b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7644161-2c0c-441f-a587-f65ab9fd23af",
        "cursor": {
          "ref": "52596a4a-0fb2-4f89-841a-36782881bf60",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5d8e86d4-4f13-4ac2-8960-f4e8577d1df3"
        },
        "item": {
          "id": "a7644161-2c0c-441f-a587-f65ab9fd23af",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fd46fd96-61c6-407d-a338-965e746f9a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458d20ce-824e-460c-9208-d90a6703e8e5",
        "cursor": {
          "ref": "261bf08d-e68b-47e7-b656-a9d490cff59a",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a04ce7af-bdb2-42c4-863c-85e50c110e1a"
        },
        "item": {
          "id": "458d20ce-824e-460c-9208-d90a6703e8e5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "eb4aef96-683d-4b91-84af-f729239cdf0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0652ce62-b1a7-42c8-9186-2776d903924c",
        "cursor": {
          "ref": "01dde2c8-c0f6-46d1-9986-de7c7feb5e3c",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f2843f8a-d442-4541-a9cd-3f91ad508b35"
        },
        "item": {
          "id": "0652ce62-b1a7-42c8-9186-2776d903924c",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "027e7fc0-4711-425e-883c-7a669fefc1e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec29870-2a9c-4933-a70e-fafbd0c91de2",
        "cursor": {
          "ref": "45d68cd7-23d0-4072-8be0-41ad84ab7418",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fe0cf0f8-9c74-429d-ab4e-d3be5ff36856"
        },
        "item": {
          "id": "7ec29870-2a9c-4933-a70e-fafbd0c91de2",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "25df620b-bbac-4085-87b1-39399768098d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8712b299-d46a-43ce-8574-99ad1be27d82",
        "cursor": {
          "ref": "c33b7c9b-9211-4626-9948-ebbd3fe74b22",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d1f2e6c8-d79f-4dae-98db-280d8da28d66"
        },
        "item": {
          "id": "8712b299-d46a-43ce-8574-99ad1be27d82",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "518cd604-db09-458d-a074-1490498a374a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9f9835-202a-475f-8365-41330ed8bb74",
        "cursor": {
          "ref": "cbc7081a-4e6f-47db-a8b0-8ec257801ba3",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "55855f91-630e-47de-94be-4e84fe4a6720"
        },
        "item": {
          "id": "0e9f9835-202a-475f-8365-41330ed8bb74",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "3de9c337-550d-44e6-a55f-dfa7547d97e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb58700b-8db8-4873-baa8-bfd9ff4804e8",
        "cursor": {
          "ref": "4c1175f7-5c95-46ff-bbee-21a8e3fcce2f",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a05d75c9-928a-4f23-b947-08f1275f5d19"
        },
        "item": {
          "id": "cb58700b-8db8-4873-baa8-bfd9ff4804e8",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "40d5b186-eedf-4fd5-9697-3fe49c163e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa73919e-e60d-4f16-8460-2b471c8b45c1",
        "cursor": {
          "ref": "67d222b0-44a0-4bf5-9ec9-6bac472cc300",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "0f4b2084-178c-4151-b856-4c0bff0828d6"
        },
        "item": {
          "id": "fa73919e-e60d-4f16-8460-2b471c8b45c1",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d8c567b5-9e35-4f76-a042-f7e29dd61795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51891d1-0673-42e4-9e70-bf7e6ccd8984",
        "cursor": {
          "ref": "05016000-44de-4c77-9ae9-2a3052233efa",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "572b793d-f91c-40c8-98a3-a1ed0b26399f"
        },
        "item": {
          "id": "d51891d1-0673-42e4-9e70-bf7e6ccd8984",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "14075064-b02a-429e-a4d0-ee011f414aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fd46888-e83c-414c-9d21-0eab8472ff0d",
        "cursor": {
          "ref": "5584f8ed-254c-4c05-8991-75a6e91596f3",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "75923aee-1815-48b8-976e-80b56cea3c60"
        },
        "item": {
          "id": "5fd46888-e83c-414c-9d21-0eab8472ff0d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "0530e432-6b30-453c-93de-de8f5e479bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62164adc-dc43-406a-af38-94df89dbe8fa",
        "cursor": {
          "ref": "3bddf126-e954-4368-a019-3891d086c00d",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "3d5c322c-21c8-40e1-8e76-11ce31d10a2b"
        },
        "item": {
          "id": "62164adc-dc43-406a-af38-94df89dbe8fa",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b8560c5c-7aa4-45d8-b389-eaa21fc26827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f371bcb-7eb8-44f2-848a-22fd23023524",
        "cursor": {
          "ref": "d83f2724-0e61-4f8b-9260-ad09c130667a",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "502f3d4d-7271-4ab3-bb62-b83486902355"
        },
        "item": {
          "id": "8f371bcb-7eb8-44f2-848a-22fd23023524",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9eeafda4-c8d6-4500-8f64-e099ebffadf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fdf90f5-9a9b-4498-92d0-ca227e0df239",
        "cursor": {
          "ref": "5378a427-46a4-4cfb-8ba7-6793e0bdb76d",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "43125d72-3fa3-4739-9c8a-988b244237a3"
        },
        "item": {
          "id": "8fdf90f5-9a9b-4498-92d0-ca227e0df239",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "1022d8e5-2dc8-44c1-ac4c-a1f530f461e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdd14c56-dbb2-4716-b9b2-538e5d1f9509",
        "cursor": {
          "ref": "73971f34-aadb-40f1-8d37-90502fa28663",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b6a89941-ff06-4c26-9a66-c1bf62ccd714"
        },
        "item": {
          "id": "cdd14c56-dbb2-4716-b9b2-538e5d1f9509",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "355bf6a5-f36a-4cd2-8fd8-51ec0ef31b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe0504e1-439e-4f05-9f55-36f0b81b5e09",
        "cursor": {
          "ref": "129e833d-a9aa-4cc2-8580-408bd950d822",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c44a58a6-0c42-499b-9b79-6e3de16ca139"
        },
        "item": {
          "id": "fe0504e1-439e-4f05-9f55-36f0b81b5e09",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f8e35f7d-4958-45ba-baf8-0d3e6602fca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e81f76-7964-4849-830a-655aa5d8410d",
        "cursor": {
          "ref": "66760f17-c5c2-4281-b901-b6ff0179b253",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0123d3d5-ef1e-455d-90e2-50db0e204a62"
        },
        "item": {
          "id": "f5e81f76-7964-4849-830a-655aa5d8410d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "90233800-da29-4480-a4b3-b011a9eeb6f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e2b5f3c-ee36-4ae4-a5bd-f30af339f014",
        "cursor": {
          "ref": "5ad562bf-f983-43f4-a3e1-3744818fec19",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "7338b9c7-36ff-4c35-b76f-c720c7352337"
        },
        "item": {
          "id": "1e2b5f3c-ee36-4ae4-a5bd-f30af339f014",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5d835c9f-bd37-45e0-8ee4-b53002016014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "811d40b9-ec15-4585-b52a-54b200c45a02",
        "cursor": {
          "ref": "7a4e5541-7938-4c9e-8c0a-09afc0c9dcd1",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "45ef482c-e153-4f04-b589-487ed9636fd3"
        },
        "item": {
          "id": "811d40b9-ec15-4585-b52a-54b200c45a02",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "d2aaed0b-cde8-45c7-a264-4625c192d1b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40ac39da-4615-4c2d-8c37-26a2e819a0d8",
        "cursor": {
          "ref": "d4702eb2-61f4-4507-b73f-ef0b8bfc0cb1",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "11e62c8e-cc60-4b29-9a8a-0214153c4248"
        },
        "item": {
          "id": "40ac39da-4615-4c2d-8c37-26a2e819a0d8",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "9fe136f1-1c59-4688-8ff3-0abc43c1a2ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14d9989-98eb-4088-9f1f-0adbd041a53e",
        "cursor": {
          "ref": "9639eb88-0038-4733-b125-de1ee027b663",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e04f95bf-f632-4cbc-8725-1533fe624cb0"
        },
        "item": {
          "id": "f14d9989-98eb-4088-9f1f-0adbd041a53e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "59069d4f-4a3d-4e61-bea6-b88d4a7add5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a31090ba-3228-4e04-b37e-79d1cba82108",
        "cursor": {
          "ref": "a883bbe9-fccc-4daf-ba7d-ea9db08e7c18",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "07a56ffd-ab81-4b1e-8bde-1df89d9315fa"
        },
        "item": {
          "id": "a31090ba-3228-4e04-b37e-79d1cba82108",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9e459f18-c581-4e0f-bc62-cfeca1b7a34e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de67c37c-208e-458c-886c-0475b410cf92",
        "cursor": {
          "ref": "cba24589-2424-4d6b-a669-ecbaff2ee7fd",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ec3a3af9-2d46-4ce5-b8df-fa1963c521cb"
        },
        "item": {
          "id": "de67c37c-208e-458c-886c-0475b410cf92",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "14279bcf-b487-4883-a500-93d36d883167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab8dc6a-6c60-4db9-8460-f160d77d3117",
        "cursor": {
          "ref": "717324b8-8899-4833-a06e-22ccabda6ffd",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f928aafe-24e3-44e5-98d8-327b8b9afff3"
        },
        "item": {
          "id": "6ab8dc6a-6c60-4db9-8460-f160d77d3117",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "125b3cfb-17e3-4063-85ad-c659dcc53266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "440ca115-2a04-4cef-a747-c614266783fa",
        "cursor": {
          "ref": "6ccb410a-7c39-48da-8a16-fd66198c4ffe",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5c21a302-1a8f-42f1-b988-633f411b6286"
        },
        "item": {
          "id": "440ca115-2a04-4cef-a747-c614266783fa",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "f727e176-6ac3-4dcd-bf70-d6f5098ca236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded675f1-77d3-4378-91ba-c4c2835299a6",
        "cursor": {
          "ref": "16eeb7c5-a3a2-415e-b31b-b8a6ef958688",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "cd02d8aa-a7fd-4fa5-a209-2a4f0c67b5e5"
        },
        "item": {
          "id": "ded675f1-77d3-4378-91ba-c4c2835299a6",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "a87bb3b3-a3a7-44a4-90e1-c6e647fa4ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c8f9d19-c2f2-4199-bb03-02a171577a0f",
        "cursor": {
          "ref": "31529a79-c4ce-4c2a-9417-8d3608df560b",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "34dc1855-1405-4754-9e6e-c0a446a23c6b"
        },
        "item": {
          "id": "0c8f9d19-c2f2-4199-bb03-02a171577a0f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "eaead81b-f6a8-4f1d-bec4-50fd2487021a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "a1f7529b-d7bb-4c67-b980-755618a74d7f",
        "cursor": {
          "ref": "450b6dbb-19ab-431a-b78e-e3152efb1542",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a27a9840-9025-47dc-87fc-b9745de324a0"
        },
        "item": {
          "id": "a1f7529b-d7bb-4c67-b980-755618a74d7f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e8b1e67b-9297-4307-9f30-f514281cbf89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "fe5b6ce6-0981-4aaf-898f-e8a810b86729",
        "cursor": {
          "ref": "fd98f9b8-119a-44e3-89e0-5103f84c2460",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "86aeb844-0730-47e9-b7be-8d5d78740343"
        },
        "item": {
          "id": "fe5b6ce6-0981-4aaf-898f-e8a810b86729",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8a54e0e8-1d61-4183-8b18-78d56568e472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5b6ce6-0981-4aaf-898f-e8a810b86729",
        "cursor": {
          "ref": "fd98f9b8-119a-44e3-89e0-5103f84c2460",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "86aeb844-0730-47e9-b7be-8d5d78740343"
        },
        "item": {
          "id": "fe5b6ce6-0981-4aaf-898f-e8a810b86729",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8a54e0e8-1d61-4183-8b18-78d56568e472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b20fe5e-b099-4124-8eac-c6058a4e821f",
        "cursor": {
          "ref": "25b89a5b-1b92-4805-ba78-88aec59c682f",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b30cb714-f7a3-4e40-ad4d-47014b1f47ff"
        },
        "item": {
          "id": "8b20fe5e-b099-4124-8eac-c6058a4e821f",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5106eabf-57f3-461b-816b-3912d05dbf91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb13c98-c15e-42ba-b1b4-e5e6cae412a8",
        "cursor": {
          "ref": "fed511a4-4c7f-41e9-b9df-b9573f80498f",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "87a98856-1840-448a-90cf-5544c2234a78"
        },
        "item": {
          "id": "feb13c98-c15e-42ba-b1b4-e5e6cae412a8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9f13040e-2557-46fa-8be0-b95ddb37a6db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4443f1-a77e-4b1b-90b3-fb150d386f11",
        "cursor": {
          "ref": "58dcc91e-f8cd-41a2-8348-b11f5d3efa69",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1fbac035-a324-454f-b5e6-763214eef70a"
        },
        "item": {
          "id": "bb4443f1-a77e-4b1b-90b3-fb150d386f11",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e1779d5e-3e25-4a13-b47b-d58ab530b8a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9c7c16-5a59-46ff-8806-3690a631b820",
        "cursor": {
          "ref": "9f1512a2-e9ed-4371-bbbf-d6ee49b4e95a",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6562a8d1-17ba-4de5-bdbd-cfc51b55fac9"
        },
        "item": {
          "id": "8a9c7c16-5a59-46ff-8806-3690a631b820",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "78bacfe9-4474-410d-9f9a-051bd7aa2945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b2a3c2f-51f6-49c2-9b04-bb2efa72dca9",
        "cursor": {
          "ref": "826a52a5-7104-4a4a-a3cd-507ff83c329c",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8a38a2aa-2117-45f0-9c73-917204e6b8a1"
        },
        "item": {
          "id": "9b2a3c2f-51f6-49c2-9b04-bb2efa72dca9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "240bf661-db3c-4625-9ca7-aef3f24e0a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f89bc3-15b5-4fca-b96c-1ade17c23766",
        "cursor": {
          "ref": "d3135d6b-c34b-4079-a116-ae914d3f3a02",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "26c5916d-aa7f-4f75-a83a-ca48ad293e37"
        },
        "item": {
          "id": "60f89bc3-15b5-4fca-b96c-1ade17c23766",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4305d8d6-70c6-4345-ac32-a9714728edb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2735816-2418-4499-9a3f-6844da849799",
        "cursor": {
          "ref": "7c7d9a5d-e3ef-4221-bfe9-3540294d2da6",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "af2aef86-1c15-47cf-ba0a-102ca60d6bc3"
        },
        "item": {
          "id": "d2735816-2418-4499-9a3f-6844da849799",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "eac65c09-8a32-424a-a807-333df6cabce8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bde6a21-b323-4a61-9208-2a7a33834a90",
        "cursor": {
          "ref": "d6b72b07-d6c3-4d7e-b945-107f0f11ec97",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "83e447d2-6c02-4e6e-9f6b-0d0f60ac2bd8"
        },
        "item": {
          "id": "2bde6a21-b323-4a61-9208-2a7a33834a90",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "76f80004-9251-4ed1-ad12-2d0ef5330680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e88004a7-f73a-4cb5-9775-f6a1ff30fcac",
        "cursor": {
          "ref": "f0bfe764-a3d1-4531-82f8-fb31fb166248",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "ca1b56f7-9d4b-4788-8be7-b2afd72830cf"
        },
        "item": {
          "id": "e88004a7-f73a-4cb5-9775-f6a1ff30fcac",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7b82a8af-345f-4c1f-a517-0d23db4d688f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b03525c-e8a2-4533-a807-3991324ee117",
        "cursor": {
          "ref": "7e09a6d3-00b0-4dc3-99d8-737816822980",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "aee27e7f-a3d6-4eb2-adc6-db84dd5118d7"
        },
        "item": {
          "id": "9b03525c-e8a2-4533-a807-3991324ee117",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d07386e4-4a17-4af1-b798-a144f19940ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d56b16b-ba15-4e9b-b045-52aeee3f676f",
        "cursor": {
          "ref": "43dc0bb6-5b7c-4377-b2cd-7d5cbd0a6f0d",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "eaf01299-2d59-427f-a35d-75ad8904aaae"
        },
        "item": {
          "id": "5d56b16b-ba15-4e9b-b045-52aeee3f676f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "69671c6c-2e97-46a1-98d2-da50d272dfec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57788bc1-534c-415f-92df-3d7904f9171f",
        "cursor": {
          "ref": "34e4da6f-b5a9-42da-9518-b75ec638dfae",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f559b88a-f3b5-4e2a-a6de-3ef80e14a78f"
        },
        "item": {
          "id": "57788bc1-534c-415f-92df-3d7904f9171f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "3fec0e1d-7233-4e1c-acf4-98a0222ada80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7c13af9-afeb-4d4e-8741-d0f9971f4547",
        "cursor": {
          "ref": "2f3137ee-6508-43c8-8ab9-1f74e0627f39",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7563c9f4-818c-4ba0-be2c-b7a5fbcf8610"
        },
        "item": {
          "id": "c7c13af9-afeb-4d4e-8741-d0f9971f4547",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1033507d-c01a-4c5e-a143-d68df65e5b5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b201f4b5-d2e7-4ca0-84c4-d3dd66d43d48",
        "cursor": {
          "ref": "386635f8-50c0-41d4-8af5-a9d8d46e92b0",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "f4272101-3ff2-4e2c-acb5-f3e3efb03364"
        },
        "item": {
          "id": "b201f4b5-d2e7-4ca0-84c4-d3dd66d43d48",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6c6c4fc7-eb1b-4baf-870b-254b0f1f0716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dbc672d-5fb5-487a-b029-d3618a951723",
        "cursor": {
          "ref": "862b0f4b-5976-4f3a-9c22-a1829956dcb9",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "23910416-420f-48ad-bcec-2ef95cafb939"
        },
        "item": {
          "id": "0dbc672d-5fb5-487a-b029-d3618a951723",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "edaef0e2-b4a1-42de-ace2-4ce8770fae1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b5200ba-12cb-4c0b-a48a-4ea3c77db930",
        "cursor": {
          "ref": "9d5761f1-7843-4b96-a802-6fe3893bd643",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "bdbf797e-dec6-4c85-814d-ffaf899b5092"
        },
        "item": {
          "id": "5b5200ba-12cb-4c0b-a48a-4ea3c77db930",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e6bec396-f0b0-4a55-aa14-7351c34b6515",
          "status": "OK",
          "code": 200,
          "responseTime": 280,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "2e26e120-bd80-4ae0-bea8-4ad5fa0ddd6b",
        "cursor": {
          "ref": "feba16b2-2468-4aff-81e3-3183b098b380",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "056461c9-00f4-444e-92fc-d1352aa55519"
        },
        "item": {
          "id": "2e26e120-bd80-4ae0-bea8-4ad5fa0ddd6b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2fcca53b-5470-424e-9a36-48eb3de246f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a19af25-d7b4-422d-a0cf-a62bb0a464c1",
        "cursor": {
          "ref": "c568fafe-1364-4764-a773-bb9d15d88ae5",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "28081dfe-caa2-458f-a818-80cdfc4a9137"
        },
        "item": {
          "id": "4a19af25-d7b4-422d-a0cf-a62bb0a464c1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4d67501a-e749-4c3a-8f07-8682170c5639",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10669603-c99a-48e3-8acb-ab2a322baf18",
        "cursor": {
          "ref": "90c1f7d0-369c-4d2f-848d-fe88414a2cc5",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "d5b512db-d885-4c66-9a5a-d4a3b5e5ec2f"
        },
        "item": {
          "id": "10669603-c99a-48e3-8acb-ab2a322baf18",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "7dbf04e4-06f4-4d1f-8849-aaaa1b331b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed05db3-7cce-4465-aeb1-654efb13746e",
        "cursor": {
          "ref": "a0bb617a-757a-40e8-bd26-e10a95a43fb2",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ae6e3422-811c-48ca-86f9-587b6e51ead8"
        },
        "item": {
          "id": "2ed05db3-7cce-4465-aeb1-654efb13746e",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "58ce037a-9a74-4a84-b77d-04a7b88d4c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b1fde58-f7d3-4c54-b529-cd591465b1e0",
        "cursor": {
          "ref": "b69894d3-6bff-43a3-aff2-d67049f41eec",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "fb9b497d-b70e-42a0-8566-203aa989132b"
        },
        "item": {
          "id": "1b1fde58-f7d3-4c54-b529-cd591465b1e0",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "31935c27-4aed-4bc6-91ab-08f0052557f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f0f042-b013-438e-b4dd-0c113e5f4a18",
        "cursor": {
          "ref": "70c06403-e28f-4023-ab10-fb8af0b5b42a",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a17bca1f-50b4-4da9-b3a5-2d4b0146861d"
        },
        "item": {
          "id": "b7f0f042-b013-438e-b4dd-0c113e5f4a18",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "50a5c4ef-f453-498c-8ef9-7fe33f32b51f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1783933d-9d79-4d55-9fb2-cee01c99d6b5",
        "cursor": {
          "ref": "900b8ccb-16aa-45f5-9968-2b2e12e0f165",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0557796c-88aa-48d3-aad2-9038f5310bc2"
        },
        "item": {
          "id": "1783933d-9d79-4d55-9fb2-cee01c99d6b5",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "03fe0def-0b00-4bb6-971e-519008280f00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3e99b2-408d-48f2-b941-3b588dca6e13",
        "cursor": {
          "ref": "6698b329-ade6-4f7c-a23b-3b1343a891d3",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4175f33a-c6db-43c4-a96e-022baa87dacd"
        },
        "item": {
          "id": "ee3e99b2-408d-48f2-b941-3b588dca6e13",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d27908c3-7d59-4336-a007-e1d40cac9dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75e4b1fe-9b04-4a23-b27d-3ad04df3ebaf",
        "cursor": {
          "ref": "e3fb6e46-e23b-4fcc-a41e-50b3be675249",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5ee9e251-ec77-4370-97b5-fcf7f3e65f22"
        },
        "item": {
          "id": "75e4b1fe-9b04-4a23-b27d-3ad04df3ebaf",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "0f33e5ed-a73a-4e11-890e-3304c17cd8c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5721a67-ce8e-4c7b-8921-0397c1c310c5",
        "cursor": {
          "ref": "935ef580-b506-41d9-845e-f30269b9e873",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "5dcb4509-8869-4dd3-98cd-88eb00fb87e0"
        },
        "item": {
          "id": "f5721a67-ce8e-4c7b-8921-0397c1c310c5",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f8a29375-2b2d-41ed-8542-ea3b57b4d240",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f08429e2-b250-4ed7-9c44-2ea79ffc1bbb",
        "cursor": {
          "ref": "4043c6c9-2316-4a56-8a70-4ab8841e3381",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1e3a84d5-61a1-4fb9-a80b-d86941563145"
        },
        "item": {
          "id": "f08429e2-b250-4ed7-9c44-2ea79ffc1bbb",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "80088bc2-4209-486b-aa2a-8146198e8855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71dc3da-fe57-41b1-a036-da5c67aad88e",
        "cursor": {
          "ref": "a913e2b6-9ff6-4e9f-9d22-fc04053efae3",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "73b538d9-fd01-4432-a3e3-d2c9173fd13e"
        },
        "item": {
          "id": "d71dc3da-fe57-41b1-a036-da5c67aad88e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "60d7013e-e430-48b8-8320-5646e30dc0a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e1aef3-5f31-4d99-8fa5-1019c41b9f6a",
        "cursor": {
          "ref": "303b99ca-ea30-40b0-b2c5-9ee4fcdcb646",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "36811cc4-f1d0-46e2-860b-131a493014a4"
        },
        "item": {
          "id": "74e1aef3-5f31-4d99-8fa5-1019c41b9f6a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "79872565-8032-43c8-916c-ca64fbc4ecc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b750917a-bf65-42db-b2e3-195bdf108bda",
        "cursor": {
          "ref": "e33b7981-ca81-4cf5-802c-da0bacd336ad",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "944c26d7-e14e-4f37-92b1-7274658e92a4"
        },
        "item": {
          "id": "b750917a-bf65-42db-b2e3-195bdf108bda",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "60d2019f-a3fc-4d59-858c-42f06cdc26cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c017dbdd-6a43-4b9c-8919-6776b946fa68",
        "cursor": {
          "ref": "e28037f7-25a6-4ba3-bc9f-5432029a7edb",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "433bca3a-b5a1-4231-893a-3da6a536f364"
        },
        "item": {
          "id": "c017dbdd-6a43-4b9c-8919-6776b946fa68",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b8f268ef-20a0-447a-b0ca-c339022f0da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9bd61f-9661-4dbb-8afc-63f962fdc948",
        "cursor": {
          "ref": "4a52212a-44f6-4214-8217-73f48f6d9e28",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0bfd843e-65c8-48e2-9a58-a885a8896a41"
        },
        "item": {
          "id": "2c9bd61f-9661-4dbb-8afc-63f962fdc948",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "5ca0923e-a0ae-4ac4-ae2b-15b2f09c3089",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c277100f-e5f0-48ea-80a3-4e0ddb06dbf6",
        "cursor": {
          "ref": "a7cd4453-5df7-4a5a-8a5b-49924dd4b447",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "106337a1-4f1d-4310-bd03-626522d684ac"
        },
        "item": {
          "id": "c277100f-e5f0-48ea-80a3-4e0ddb06dbf6",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "10947e84-522d-40ed-adac-d8e49cf48440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75182f25-37c3-4565-9780-74080e76306f",
        "cursor": {
          "ref": "87ff1025-41dc-4be6-9d25-1374fba28641",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "bca35cf1-4857-43ba-a5cb-3a0bd5436145"
        },
        "item": {
          "id": "75182f25-37c3-4565-9780-74080e76306f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "89501232-7403-4151-b9b4-ee0d2a42c6d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecc7f165-bcd0-4b82-b356-acab36670367",
        "cursor": {
          "ref": "fff62898-b228-4b95-8aa6-ed1fe069c022",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "f7a8069d-d911-4a0e-b07f-72f1d8288024"
        },
        "item": {
          "id": "ecc7f165-bcd0-4b82-b356-acab36670367",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "43e840fe-e9af-41be-a9b1-f84bb5a3f19c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d39505eb-de90-4fb4-aa39-6a3f7c04b8d1",
        "cursor": {
          "ref": "4c914226-8192-48ea-a5dc-4fb227d237bd",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "097406da-7d08-40a7-a3e2-3ecc545634fc"
        },
        "item": {
          "id": "d39505eb-de90-4fb4-aa39-6a3f7c04b8d1",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "2d7893f7-b72d-49ec-ba9c-9234b18e7b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c62e729c-aec6-4a44-b2d7-1b6a44fcd141",
        "cursor": {
          "ref": "7a862c05-ce27-4d63-af7d-8e75a186cadc",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "af3ae8ee-e76e-40dd-a85a-6e0db42ac614"
        },
        "item": {
          "id": "c62e729c-aec6-4a44-b2d7-1b6a44fcd141",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "fc0ca362-26ac-4020-9981-e80d44d5a581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9112fa34-8dc5-4240-b3d3-93d4e17ed562",
        "cursor": {
          "ref": "5b62bdd9-08af-4351-8bc5-b8d4ff2b7f9c",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "facbf6a9-3e38-4176-8cf9-e61a3fb6c533"
        },
        "item": {
          "id": "9112fa34-8dc5-4240-b3d3-93d4e17ed562",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2d2df139-d214-4c44-93a6-cfe54b23ff1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb077431-9a32-4b21-966a-b3e91d064fe4",
        "cursor": {
          "ref": "9c0da88b-ad59-4506-8dbc-bd55bc62e36b",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "a7024b96-c36e-49a5-8c90-e50275f46fb8"
        },
        "item": {
          "id": "cb077431-9a32-4b21-966a-b3e91d064fe4",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "78dc51f5-1f92-40b7-92c6-280a0b8ce08f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09b5fea0-3710-46a5-99af-f7733f20d759",
        "cursor": {
          "ref": "ee7ee2bb-38b6-4ad6-899f-62aad1cf163f",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0821c8f1-bc49-45d5-ac13-1914c26e80e0"
        },
        "item": {
          "id": "09b5fea0-3710-46a5-99af-f7733f20d759",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d208f0ad-d48e-4399-9bcc-04db5292fd89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e08f73cb-cf47-4619-8d0d-38ea8bd9ee29",
        "cursor": {
          "ref": "8cbeec13-c568-4c0e-b551-32e2667ce0a5",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "40919eee-a51e-4715-9614-39879f8fe749"
        },
        "item": {
          "id": "e08f73cb-cf47-4619-8d0d-38ea8bd9ee29",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "87027a2c-51cf-4618-b182-26868b66cb0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62ca2b5-b73a-4e16-8319-c75155c32369",
        "cursor": {
          "ref": "cffd0f02-7259-434c-81ea-a301401f9841",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b7ffcb8b-882c-4223-9a07-e03d59d4ac2f"
        },
        "item": {
          "id": "e62ca2b5-b73a-4e16-8319-c75155c32369",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "228971dd-736c-4779-88a6-4373e3e64c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf434340-7f16-490b-9aa3-3413146399ac",
        "cursor": {
          "ref": "79e466e0-966a-4e0d-91d2-ada4f4c327bc",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "84a4d342-0024-4838-88ea-26a5d2e1426a"
        },
        "item": {
          "id": "bf434340-7f16-490b-9aa3-3413146399ac",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "e37dec26-fc3e-4234-aba7-1ecc684fe401",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681dd4ce-cc0d-46af-9ef9-c7c96caf86cf",
        "cursor": {
          "ref": "0c864b84-167f-4621-96cf-56b0dbfdf330",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c3d44e21-1c46-4999-b845-529cf7e74fb8"
        },
        "item": {
          "id": "681dd4ce-cc0d-46af-9ef9-c7c96caf86cf",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "d74c4d5b-367a-41ff-86f4-21d9efa2fad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb060fc3-3cd0-475d-a96f-d3eb50208c31",
        "cursor": {
          "ref": "27bb291e-ff1a-4345-98bb-c7d545543546",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3dd26ac3-9765-4838-b463-4f0e8e1ff794"
        },
        "item": {
          "id": "eb060fc3-3cd0-475d-a96f-d3eb50208c31",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f8917553-5451-40a7-b5a2-86fcda11bcae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b317ff-5bc5-4de1-a33b-a430e0853efb",
        "cursor": {
          "ref": "de5bbe6d-d5d4-40b1-a7d2-b1991f8ed632",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "1d8e0526-5f2b-4bc5-9bb3-b2d587a6bef9"
        },
        "item": {
          "id": "92b317ff-5bc5-4de1-a33b-a430e0853efb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7b52f996-2c62-4aac-b705-c7fadb5127e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c19ece9a-5dd5-41e7-8703-9c2e05f49e22",
        "cursor": {
          "ref": "c3fff906-7be3-46ed-9b8d-1a76b6bb6b08",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "78291d9a-f031-4474-b27b-46cd693fe7f9"
        },
        "item": {
          "id": "c19ece9a-5dd5-41e7-8703-9c2e05f49e22",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "0b1c810d-0440-4f1c-aa97-7fd817c4b3f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730aeeaa-3f5a-4c09-947d-365662df175e",
        "cursor": {
          "ref": "8a159d79-8921-4a29-b814-0683969cdea7",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "5a5dd170-9a0b-4dce-9eb5-bdc5e91103e2"
        },
        "item": {
          "id": "730aeeaa-3f5a-4c09-947d-365662df175e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "37618687-7711-44d4-b022-2971c6014e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2000d4af-181b-48ae-ba49-a7e811c0c8f7",
        "cursor": {
          "ref": "6b519397-aba1-4a65-a413-554b0dfbd123",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "83c34aef-62cf-412c-863f-8174a96e6094"
        },
        "item": {
          "id": "2000d4af-181b-48ae-ba49-a7e811c0c8f7",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "86535c76-61ba-445d-91a3-125c1c2d72a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0296e15-bff3-4504-b6a8-41b142f221fe",
        "cursor": {
          "ref": "36937127-f461-476e-87af-09664a567183",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "20dc23ba-3a01-4dd4-941a-70e8a986d2db"
        },
        "item": {
          "id": "b0296e15-bff3-4504-b6a8-41b142f221fe",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "6fe1b0ff-b64a-49e1-846c-9a23954b5458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce10bdc-db71-42ca-a9c8-b32a0fbc672f",
        "cursor": {
          "ref": "71d14a30-a198-4681-897b-aea946663c7c",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2841a6bf-e6eb-4981-8a54-b00dd3e43fb9"
        },
        "item": {
          "id": "fce10bdc-db71-42ca-a9c8-b32a0fbc672f",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a84ac379-288a-446c-b188-5695ff8d7fdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f438ea0-c360-426e-9bb8-ecf31b1bc41d",
        "cursor": {
          "ref": "b2a711e8-ef6f-48f1-8a17-11300a1c9846",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "c1ce309b-a557-4aee-b0d5-0486e230e535"
        },
        "item": {
          "id": "5f438ea0-c360-426e-9bb8-ecf31b1bc41d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a23da5b3-ae46-43b9-8338-714216f76402",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5beddb3-fd49-4395-a8cb-72751c4587bc",
        "cursor": {
          "ref": "80f0a50c-e145-45b6-b0df-84575a58c682",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "6ff6fa73-6908-43dc-b2e5-9a2919103f35"
        },
        "item": {
          "id": "a5beddb3-fd49-4395-a8cb-72751c4587bc",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7065fa74-421d-4d97-ae21-44f671965926",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fac1f71-4b34-4578-8b11-889c3953ac9a",
        "cursor": {
          "ref": "cd87b345-1079-4f45-99e6-972f3c115c54",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "23085b6c-01f6-48cf-aa91-2cab49397448"
        },
        "item": {
          "id": "1fac1f71-4b34-4578-8b11-889c3953ac9a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b79bce50-c5a6-4ed0-88f4-e65ec69e40d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fecaa6c-f040-45b5-911d-4896ed902de9",
        "cursor": {
          "ref": "0a7fb5a2-4ae2-4ae8-8e20-e6bcd2738f54",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "3b5ed547-141c-45dd-84f3-74d98bd5004d"
        },
        "item": {
          "id": "6fecaa6c-f040-45b5-911d-4896ed902de9",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0d0b7c58-ad05-4e43-98f7-f4afdb4983e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7b6087a-e30c-4cbc-bc60-df482d016aa7",
        "cursor": {
          "ref": "9ee29a32-9ae0-4c9b-a3bf-193c6bd8f341",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c2759ea9-4fdd-4743-9035-8b85c647bfe0"
        },
        "item": {
          "id": "b7b6087a-e30c-4cbc-bc60-df482d016aa7",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "20a97570-7b30-4676-9d7a-a5aeb49c4372",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75cba7e7-0faa-480d-b8d3-4ac867649bc5",
        "cursor": {
          "ref": "43a337e1-e47a-46da-a8ce-4af0e67659d8",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a6e194f2-5d38-453b-bb84-57f50563e904"
        },
        "item": {
          "id": "75cba7e7-0faa-480d-b8d3-4ac867649bc5",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "07eddca1-a775-4c14-8823-bc758c7db25c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e952885-04e7-4ff0-be55-2b9f16a19387",
        "cursor": {
          "ref": "47d83307-831c-487f-8880-ab234621b987",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "8f462171-5adb-48ee-a8cc-aee31496c01e"
        },
        "item": {
          "id": "4e952885-04e7-4ff0-be55-2b9f16a19387",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "0148798b-3d42-442d-948e-0ad6ee080dbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13d894eb-84d0-4954-b0e1-ca19fa2a3959",
        "cursor": {
          "ref": "041776ba-0d2c-449d-9879-bbe547db6815",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2e753803-6a94-4a4c-bcf7-bc4dea89038d"
        },
        "item": {
          "id": "13d894eb-84d0-4954-b0e1-ca19fa2a3959",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "45ad7859-81ae-4c2e-87e3-9f5f0bd0fe69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c679e626-a365-472c-bc97-c8da5b5aa909",
        "cursor": {
          "ref": "34449b3e-7e8e-43a3-b4f2-5e59ef6795ca",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "44b38e4a-19ca-4b5b-bf18-5c60215e06b6"
        },
        "item": {
          "id": "c679e626-a365-472c-bc97-c8da5b5aa909",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "ea461e19-f4cd-4985-a40d-58eea61bb637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9548bf1-a14e-4710-8749-8fcc0be73a91",
        "cursor": {
          "ref": "a7e28faf-614a-4897-ab29-b38e57b7e6f1",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9288fe4c-1701-4613-9915-29f4b03bc3d2"
        },
        "item": {
          "id": "e9548bf1-a14e-4710-8749-8fcc0be73a91",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b2fe8d09-b40a-4cd2-9394-bbf2606c67af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4478a31d-32a7-4b78-85b6-3751b149aaf2",
        "cursor": {
          "ref": "ebbb2baa-038e-44ac-8d36-310cb11eeb61",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "fd0d3d59-5b40-45ea-abaa-dd2bcd1788bc"
        },
        "item": {
          "id": "4478a31d-32a7-4b78-85b6-3751b149aaf2",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d3baaf66-b3d5-438b-aa6c-9980b1b62128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d821718d-296b-440d-b758-3966339eca7e",
        "cursor": {
          "ref": "ec1f2493-d9fa-43a9-b0e0-5d36dd35bd52",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "841d2fcf-1e69-4cdd-bdd7-e102c0e2728a"
        },
        "item": {
          "id": "d821718d-296b-440d-b758-3966339eca7e",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1200d77a-3149-4094-bf9b-f3786541dffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152fc0d2-ba24-42db-ad04-bceac43e8b45",
        "cursor": {
          "ref": "1d07e457-1236-4059-a8ba-9a96e58e42a9",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "9faa7a6e-6924-4e58-9736-6b8dad9a673a"
        },
        "item": {
          "id": "152fc0d2-ba24-42db-ad04-bceac43e8b45",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3dbfc0ab-4289-484b-9078-a2a8e41f506f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3eceb6c-cc23-4339-8be3-8ce419fc6b2f",
        "cursor": {
          "ref": "adcba637-ba8e-461e-97fc-2768ddd28c66",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "786dadaa-03c3-4d08-a3d0-460d8f088988"
        },
        "item": {
          "id": "e3eceb6c-cc23-4339-8be3-8ce419fc6b2f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d1541c41-d063-4fd2-844a-136491f06a0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3586172d-88cf-45a7-9a8c-5d4bb46ff87d",
        "cursor": {
          "ref": "b5d7b662-6b11-4bc7-bab8-b21a0bd0f97c",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8e785e8d-d10c-4332-8b7d-0e9501e12d81"
        },
        "item": {
          "id": "3586172d-88cf-45a7-9a8c-5d4bb46ff87d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "00296e51-ebff-499a-a343-e84895c51172",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8669c036-4694-492d-a5b7-b84185825fdd",
        "cursor": {
          "ref": "ecb6e3e9-3567-4d71-9238-6ff01b8216a0",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "488a659b-3fe0-451e-8512-a40aa40b3a7b"
        },
        "item": {
          "id": "8669c036-4694-492d-a5b7-b84185825fdd",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "701254b1-2686-43c0-8ff8-069db92fa94e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff965080-7888-4218-9658-e0bb3960a69c",
        "cursor": {
          "ref": "6b034c88-dbce-485e-9af5-d2ecd261c9d1",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d4743a68-5333-4cdb-ac33-6a3c49beb6db"
        },
        "item": {
          "id": "ff965080-7888-4218-9658-e0bb3960a69c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "3bb987e0-054b-433e-a4af-1a77c2b33a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f17bdc4-fca0-4144-91f9-2d67b4e0b7d4",
        "cursor": {
          "ref": "5e35100b-8600-4242-a4e6-0b142e7c3143",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c08ffe45-d5e0-4b7c-b25b-3d0f2da03f08"
        },
        "item": {
          "id": "1f17bdc4-fca0-4144-91f9-2d67b4e0b7d4",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ee8e5a0b-30c5-4af8-a71c-71504ede04b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6bb3a57-d542-4754-8fc5-97dd890479ea",
        "cursor": {
          "ref": "1340122e-8950-4f4b-bd08-38808f78d570",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e2a9e1b9-f508-48ec-8b44-66f8a5623745"
        },
        "item": {
          "id": "c6bb3a57-d542-4754-8fc5-97dd890479ea",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ff4e586f-ae37-48c8-9191-c7e65933d984",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695bc8d2-a151-488d-81eb-f7075c965f27",
        "cursor": {
          "ref": "9534686b-009f-4c67-8984-751fd476826c",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "d11b0194-962e-4806-8de3-c9d4db7dea19"
        },
        "item": {
          "id": "695bc8d2-a151-488d-81eb-f7075c965f27",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "23094371-e5ea-42b2-b7f2-9db259e8d502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "763fa483-c5f4-40dd-8b79-259cb35f2dee",
        "cursor": {
          "ref": "a7ce9cc9-4dfc-4fc9-a244-354f028cb1ff",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "a9730532-a7b5-44d5-bf28-3bbb6430b6ad"
        },
        "item": {
          "id": "763fa483-c5f4-40dd-8b79-259cb35f2dee",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "15ffd593-1b90-417c-9f23-90943f7ae2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26a5a98e-d9ba-4de5-8454-1bf861dc122b",
        "cursor": {
          "ref": "5e41103e-5f67-4fff-9722-c4263e36d94f",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7690b0ca-1ddf-4102-a0c9-e756d19a0e86"
        },
        "item": {
          "id": "26a5a98e-d9ba-4de5-8454-1bf861dc122b",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6b199adf-8a36-4443-962c-23949b56cf59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b387a6c-8994-4095-a0e0-e05d0601126a",
        "cursor": {
          "ref": "bff0c246-69c9-41d0-b82e-681e03575a9b",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "6d1a8c95-04a3-49f9-abfb-9928b66d024b"
        },
        "item": {
          "id": "9b387a6c-8994-4095-a0e0-e05d0601126a",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "9476f119-987e-4044-ad48-651d567c1e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0968173f-f720-41f8-9291-ce5cb851a161",
        "cursor": {
          "ref": "986b4680-3e2c-46e1-8b28-6660258e8c2a",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "9c2716f6-38c6-44b2-a5bc-d9454d2661d4"
        },
        "item": {
          "id": "0968173f-f720-41f8-9291-ce5cb851a161",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f6e83d44-6317-4042-97ec-4475b40e8973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c76c11f9-2176-4816-9ffa-2a65b9e9dc25",
        "cursor": {
          "ref": "a96d35bb-60c7-4a05-a5f8-2ebc18fcd9de",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c1d089ff-e022-4c8b-9eea-8be5b9e45452"
        },
        "item": {
          "id": "c76c11f9-2176-4816-9ffa-2a65b9e9dc25",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a7148650-d788-43a3-8222-dd720c3eb4a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ab0e04-d995-4b55-9152-5335968d9275",
        "cursor": {
          "ref": "f0236b49-07ac-4740-90df-ff4faa9517c9",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f64204f9-7cbd-4f0d-b0f4-f0b5169fd1d7"
        },
        "item": {
          "id": "43ab0e04-d995-4b55-9152-5335968d9275",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a22e704b-3780-4041-918b-8d7f945de872",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "854977f8-9f7d-4d81-973f-c1c065ba352d",
        "cursor": {
          "ref": "207a7bb3-ae35-4226-abb1-51c0774cb5a4",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "042afac6-9a6b-4169-9513-c231115a4e72"
        },
        "item": {
          "id": "854977f8-9f7d-4d81-973f-c1c065ba352d",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "45c69eb0-ccad-4a0f-b60d-306980f315c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e27fd4a-5ed5-43f0-ad7a-ec9f0979602b",
        "cursor": {
          "ref": "040b4bcd-f0d7-4086-a3d8-6f332f0b00d6",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "941bcf81-7096-48a0-a9f3-bb09a741959f"
        },
        "item": {
          "id": "2e27fd4a-5ed5-43f0-ad7a-ec9f0979602b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e9606dff-d250-4e8f-b2fe-93f8abf20f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8ed5db-92a3-4a0f-8f70-eda5b30b1ce8",
        "cursor": {
          "ref": "b9c698eb-ff0c-4358-af89-e8bd0757b834",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b96545d2-5326-46c4-baf6-c617dc76a5c8"
        },
        "item": {
          "id": "7b8ed5db-92a3-4a0f-8f70-eda5b30b1ce8",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "f726125a-b32c-4f91-8550-f565b51b303d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40c1eef-484e-400b-bdf5-e53f60a4a265",
        "cursor": {
          "ref": "3bf18792-f3c0-49bf-b1c9-f9be20a7fcc4",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "09603b22-262e-4e8b-acf8-ace12fbefa21"
        },
        "item": {
          "id": "a40c1eef-484e-400b-bdf5-e53f60a4a265",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "252aefe6-2e60-47f9-8213-0ff40237e217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6483e30-fc09-4e95-b0c1-78a9231fb966",
        "cursor": {
          "ref": "4c7dbfbe-15a7-46ee-a8e7-247953278058",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "bc7467db-928b-4788-9203-eb896bcf3b43"
        },
        "item": {
          "id": "b6483e30-fc09-4e95-b0c1-78a9231fb966",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e2fe3a15-f5ca-47e3-a1c0-2c41f24e1db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ec7260-7f2f-48a9-93ff-3c5ff7e13246",
        "cursor": {
          "ref": "013a899d-76af-4a6c-8486-6a9a8ebe0623",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f2a13ca3-61b8-4ae3-bd1e-2181e463e416"
        },
        "item": {
          "id": "09ec7260-7f2f-48a9-93ff-3c5ff7e13246",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "dd92559f-5d34-4760-aef4-019ca250aa06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4fb2ca4-d7da-4e97-b32b-76b98e3f42ba",
        "cursor": {
          "ref": "22345541-93aa-4de9-abb5-15ae6b09a1eb",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "9a63962f-7dde-47bf-a70d-3f787b5ddf17"
        },
        "item": {
          "id": "f4fb2ca4-d7da-4e97-b32b-76b98e3f42ba",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "513dbb67-4e60-4ad2-b693-5dbf868c3acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6898b8-27cd-4dd6-827c-012b7f1098e0",
        "cursor": {
          "ref": "f2f7db7a-1814-438d-b3b0-84fdf3bbc203",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f9476287-51fe-4743-854d-1d8470f1d65d"
        },
        "item": {
          "id": "3b6898b8-27cd-4dd6-827c-012b7f1098e0",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "659b4058-ccdf-4156-97aa-5089131c96ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0045c63-0b2d-4e6f-9ae5-e16843c9504b",
        "cursor": {
          "ref": "5665d692-a2f8-48f4-9132-d04f1cdfc2d1",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a179c1ac-f367-45a7-8ad5-7df1fcd628ea"
        },
        "item": {
          "id": "a0045c63-0b2d-4e6f-9ae5-e16843c9504b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3e560f52-ef28-4162-b08a-728ae0728031",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5534c99-bb5f-43cb-9691-f8b42d2b2641",
        "cursor": {
          "ref": "fcc430c6-bfb6-4f9f-8395-bf96c4603a41",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "a0ca703b-857c-4b4d-bff0-ffe216932693"
        },
        "item": {
          "id": "f5534c99-bb5f-43cb-9691-f8b42d2b2641",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "b06b146e-14a3-4466-96a5-0de5385da922",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5697fdb1-d0bb-49d7-af22-b337a0c2a968",
        "cursor": {
          "ref": "d79a12c9-8452-4c5d-9dfb-1c67777eb795",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "061be9be-5ace-4cb2-aecb-a454a8c45ae3"
        },
        "item": {
          "id": "5697fdb1-d0bb-49d7-af22-b337a0c2a968",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "87dfd64d-42fe-4281-a3c2-4dca3d790042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0c94ec0-33c6-46d5-9e57-3bc7cc4d780d",
        "cursor": {
          "ref": "f24da3cb-4923-4694-9bfb-378e6077e4da",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "a69c752c-af20-4297-81eb-90f12f01d59e"
        },
        "item": {
          "id": "b0c94ec0-33c6-46d5-9e57-3bc7cc4d780d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2d65291e-fcac-4e45-9340-c042eb2c57f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa9b28a-0d30-432e-b40d-497312a623b7",
        "cursor": {
          "ref": "a0d5f951-7230-40ae-b86e-9e4a07b67833",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "a024e27d-753f-4779-996e-7db9603f7dee"
        },
        "item": {
          "id": "dfa9b28a-0d30-432e-b40d-497312a623b7",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "c9186f49-d2fe-4522-ab57-d4ec62ffff94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "221af2c5-eacf-4132-bb5f-cbc1499dde30",
        "cursor": {
          "ref": "f40d5a00-b14f-46bf-808a-3cd41b432c1b",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7e1c8a90-b550-4cbf-842b-84383e953440"
        },
        "item": {
          "id": "221af2c5-eacf-4132-bb5f-cbc1499dde30",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b0c599cd-8acd-4cc1-8e9d-b663871d8e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609e516d-6f5e-456d-95a2-3bc6bbdc0127",
        "cursor": {
          "ref": "35a085c5-b0d6-4afd-afaa-71a67772b4cd",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "adeba269-9624-4239-b627-c50b238d03d6"
        },
        "item": {
          "id": "609e516d-6f5e-456d-95a2-3bc6bbdc0127",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1cb269dc-dda4-4a62-aeb1-64e6c25d688b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f659c32-83e3-4f36-bfc4-ed30891f9558",
        "cursor": {
          "ref": "eec332c9-2b44-4320-859e-d4874295a87b",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6f0612af-92ed-49c8-b03a-b12d127277e2"
        },
        "item": {
          "id": "0f659c32-83e3-4f36-bfc4-ed30891f9558",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "fcde730e-8fc8-48f2-b5c4-fca53ec4db47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78fd0bb-b29e-4764-98dd-2cac507880d8",
        "cursor": {
          "ref": "adef39f1-e73c-4b34-a3de-9d0597af26b6",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "53860ffb-c76f-459e-966d-7cc92b029942"
        },
        "item": {
          "id": "b78fd0bb-b29e-4764-98dd-2cac507880d8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "02d1a903-7c53-4979-8510-e14c236dad47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee268062-d555-4681-9226-8996b84dfb61",
        "cursor": {
          "ref": "d2a820b9-f69d-4872-ad76-11c76ec27059",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3783a251-828c-4ebc-a198-8805240ab20b"
        },
        "item": {
          "id": "ee268062-d555-4681-9226-8996b84dfb61",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "2bdf3505-af02-4a17-9547-0c0ceaa10616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0e0344-60d9-486f-8b7b-9606917eaf24",
        "cursor": {
          "ref": "ea04c3c2-3807-450e-9065-0c7247e839ba",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "998c28e1-40d6-4965-8559-c047b51b7856"
        },
        "item": {
          "id": "fd0e0344-60d9-486f-8b7b-9606917eaf24",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "151d6652-635c-41a6-a10c-19cf4185264c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc6a2be-0852-4094-aa80-83163f46f7fb",
        "cursor": {
          "ref": "fe3fe523-c2ed-4fd4-b0b8-74e3844f285b",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "330fa754-a1ec-48fe-a308-dbf139a94709"
        },
        "item": {
          "id": "4bc6a2be-0852-4094-aa80-83163f46f7fb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "8b5a6784-f661-476a-a36e-39075d8f2e7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "7b7ebcb9-6a51-434a-8985-095a49ae58d7",
        "cursor": {
          "ref": "b059b9eb-0a0b-43d2-9ead-ab9c12dc9819",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "5f044b82-eaca-4278-b10a-a121f523da9c"
        },
        "item": {
          "id": "7b7ebcb9-6a51-434a-8985-095a49ae58d7",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "84352e7e-7255-4dd2-adf8-b05b8c3cc2d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "9bfbb184-5ea5-402c-bf1d-044cbe585e47",
        "cursor": {
          "ref": "1d38ba2a-2fbb-4a04-bf79-dfdb5119ead6",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "8da398ab-c848-4bee-b999-b85a6824fb52"
        },
        "item": {
          "id": "9bfbb184-5ea5-402c-bf1d-044cbe585e47",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "5ca2d7fa-43f8-46fc-a86a-e2f15ed34b63",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "109aa344-42c8-4495-bcf5-03e8fce30325",
        "cursor": {
          "ref": "12190f44-e4db-4f5e-9002-d88bfef620e0",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "79c7dd8b-c7c0-452d-9207-08d24e93df09"
        },
        "item": {
          "id": "109aa344-42c8-4495-bcf5-03e8fce30325",
          "name": "credentials_verify"
        },
        "response": {
          "id": "59b9a4d4-390a-49c7-81cf-ff4966a2f0a5",
          "status": "OK",
          "code": 200,
          "responseTime": 1782,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ffa884d-df23-4f73-8723-381e706dd8c4",
        "cursor": {
          "ref": "62930936-d5af-4814-926d-a343d6e92315",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "75233a0a-fb5f-495a-b578-8cebfe9b3731"
        },
        "item": {
          "id": "0ffa884d-df23-4f73-8723-381e706dd8c4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "b7ac88b0-d25f-473f-ab99-5eb678ddf1bd",
          "status": "OK",
          "code": 200,
          "responseTime": 2251,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5488116-7a5b-4e8b-a08b-d6c99e57c38a",
        "cursor": {
          "ref": "b60cca78-0271-4c79-bac9-610d36c3528c",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c46fb3cf-8934-420e-9728-3d5d876ae1c2"
        },
        "item": {
          "id": "f5488116-7a5b-4e8b-a08b-d6c99e57c38a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8a82d016-1ba7-4126-a63a-bca54eb5b4ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f5488116-7a5b-4e8b-a08b-d6c99e57c38a",
        "cursor": {
          "ref": "b60cca78-0271-4c79-bac9-610d36c3528c",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c46fb3cf-8934-420e-9728-3d5d876ae1c2"
        },
        "item": {
          "id": "f5488116-7a5b-4e8b-a08b-d6c99e57c38a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8a82d016-1ba7-4126-a63a-bca54eb5b4ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "f5488116-7a5b-4e8b-a08b-d6c99e57c38a",
        "cursor": {
          "ref": "b60cca78-0271-4c79-bac9-610d36c3528c",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c46fb3cf-8934-420e-9728-3d5d876ae1c2"
        },
        "item": {
          "id": "f5488116-7a5b-4e8b-a08b-d6c99e57c38a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "8a82d016-1ba7-4126-a63a-bca54eb5b4ee",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "3205a65a-4407-4663-aa97-5e6f9507ec2a",
        "cursor": {
          "ref": "aea2aa7c-51c0-442d-b4ec-cd0a9e653f27",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "61b1494a-37cb-451e-a4ca-812cc3adf067"
        },
        "item": {
          "id": "3205a65a-4407-4663-aa97-5e6f9507ec2a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "9c06a1ab-142d-455d-b3f8-f18541c4747c",
          "status": "OK",
          "code": 200,
          "responseTime": 137,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "7d5d6ddf-3b31-4853-951c-a3c1e5b0cb92",
        "cursor": {
          "ref": "e66f2a1a-cf6c-4df4-b7f5-04a048864da6",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2d5ca68c-9029-4809-9aca-57829ffb14bd"
        },
        "item": {
          "id": "7d5d6ddf-3b31-4853-951c-a3c1e5b0cb92",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9f597b67-62d9-4a95-afd7-9f09c9a913b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7d5d6ddf-3b31-4853-951c-a3c1e5b0cb92",
        "cursor": {
          "ref": "e66f2a1a-cf6c-4df4-b7f5-04a048864da6",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "2d5ca68c-9029-4809-9aca-57829ffb14bd"
        },
        "item": {
          "id": "7d5d6ddf-3b31-4853-951c-a3c1e5b0cb92",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "9f597b67-62d9-4a95-afd7-9f09c9a913b9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7545ba89-a29a-4ccf-8bfa-d73739ed30f1",
        "cursor": {
          "ref": "dfaeeb3b-e8dd-4fea-830d-288bea45e037",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "af594f77-c6f5-4c57-9a47-06753788d38e"
        },
        "item": {
          "id": "7545ba89-a29a-4ccf-8bfa-d73739ed30f1",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "624fba82-50f0-440f-b5c9-382cfc29a251",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 130,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "cd8e809b-f9fc-495a-9f7e-42caf33763ee",
        "cursor": {
          "ref": "15ed8048-53da-41b9-84ef-88869fa76e56",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6701c86d-9ad3-4d07-82f4-a372c170d4fc"
        },
        "item": {
          "id": "cd8e809b-f9fc-495a-9f7e-42caf33763ee",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "aeb54937-2713-4a76-8057-4fc1af3b7cd2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "cd8e809b-f9fc-495a-9f7e-42caf33763ee",
        "cursor": {
          "ref": "15ed8048-53da-41b9-84ef-88869fa76e56",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6701c86d-9ad3-4d07-82f4-a372c170d4fc"
        },
        "item": {
          "id": "cd8e809b-f9fc-495a-9f7e-42caf33763ee",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "aeb54937-2713-4a76-8057-4fc1af3b7cd2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "f4a437d3-c7bc-4b38-82fc-d2f3a9eefac4",
        "cursor": {
          "ref": "03d9f4ae-e371-4835-89a7-04c76325d662",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "68e9b221-6438-40cc-a810-5b42e46e2da0"
        },
        "item": {
          "id": "f4a437d3-c7bc-4b38-82fc-d2f3a9eefac4",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "9fba7098-42de-4f6e-8546-869d3c6829c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}