{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0fc260ca-9b2b-4e9b-9640-5366285d6045",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3eb805a3-90b1-45a7-a8c8-f0fa4a3c3be8",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "46822820-ecea-4d32-be82-069290b3b1b6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "dd4db183-d7b5-4927-adff-556a103b9a85"
                }
              }
            ]
          },
          {
            "id": "82c06328-6c3f-4403-81ce-168ad132f9a4",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c69fad46-f449-43cf-8051-85d6654fd915",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2dec3525-8f38-4800-894b-2d904ffd4012"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "a3f1d245-f51d-4acd-bab8-f120c62e6b7f",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "6a86dd79-3947-49b0-bf23-e1f0c8010a8a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8f0050f3-0bac-418a-97ac-557f699f697a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d20c5e69-1bc4-466a-9d1a-6d665584f3b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "765adcf8-020f-4fee-9648-783467fa4143"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "821019c8-d7d7-409e-a4c4-b154d23ed7ec",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b264451f-c8b7-4d58-9a8f-52956458cb2c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "00f39bae-441b-4105-b8e4-91ef3cd24385",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "62bfdb7e-e6f2-4927-9b88-9aa87e4bcc4c"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2e00a16f-53f7-4ed6-a305-cba62e173a0b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "024d0d2e-d3f1-45a1-932f-27f569f174a3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49990690-5668-4a5c-b3da-116eb99e7f47",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "375ccf21-4082-4a9a-a8ac-f3ab69341f53"
            }
          }
        ]
      },
      {
        "id": "c3385179-b4ac-4e0b-81a3-be2f2418bf65",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "3a163e63-dbb3-4398-9e53-00683c925a12",
            "name": "Negative Testing",
            "item": [
              {
                "id": "98dac56d-18de-48cb-8b50-1d5360aa9635",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0ec3231c-9165-4302-88d0-65c162ae4d93",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78cf7d2-d775-4ff1-a6eb-92ea153441df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dbef5862-79ea-41bd-b22b-3bd78b863c5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dc3252f-0701-496f-a7a8-84910dd3616d",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa58940-9e8c-4881-92ab-b8a5be7a0c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "988104bb-cc94-4150-a6be-a5b8fb170527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1097638-5569-4154-a96a-02a799a6bc3f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d079a0-e046-43ea-8f15-e3a50ce41e72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "473d6a50-27e8-4230-843c-61e8fdff875c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3aae045e-dc99-4159-a6c1-dc3c7dbeef18",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bef6a28e-49fe-4cf6-bf64-4669977b9634",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e00dfc11-d495-416d-9c26-45d1212d5068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "81d924e6-dcde-4a81-aed4-7c017ca52972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cc493b7-7c3e-4d09-b0a0-aee5f68ce66a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f51dcf9-79f7-4279-9c6e-8561eebef7fc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "ab339673-6c9f-4c2b-945a-fafebd7f4285",
            "name": "Positive Testing",
            "item": [
              {
                "id": "86b0991d-f73f-4950-9bb5-bd3fbbfae679",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "197df070-c0c7-437a-b570-475ec5f0018e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "72f30ae8-93f1-408f-90c3-50f2f4481e65"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86fd139c-9cc1-4b21-9879-0617946bd401",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "067fbff8-ff51-480e-8d21-382ba4fc4eaf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d676aca-49d9-43ef-961e-077083619cde",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6221afad-cc84-4938-a3ba-5ee0f977295f"
            }
          }
        ]
      },
      {
        "id": "2a7c3a87-964a-4484-939c-3f7de29f2b83",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "b0a53711-ddff-4b91-af94-013ceaacfdf1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d2c2d32d-d8c9-49ac-9da1-0e3a74d89b7d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a7308630-3545-43cd-aa42-83e58ea541b7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e5f7ea-67e3-4d30-8e2c-4f078d4d43f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "305d1c5c-36c4-4168-be59-a09231176c61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac6ae72-8144-4c49-8cc9-ded2c1cf58c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e8a2dbfe-9692-4946-a539-30c729062c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b6849d5-2aa6-41e9-82c4-3ff67a4fa000",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3132e56-e256-4ad3-918c-3c5ceeb9bfc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c5500d-3ee5-4d15-aad6-f9e4e65c22e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b103c4e7-ddac-46e8-a46a-5c36345ba18a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2797a1ae-7964-489a-9c30-ccaa1783d164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5807c7-6f63-470a-b3bd-8d89a5480dfa",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "731c8f81-db3d-4e53-997d-8d2a82fe9165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a65e9c37-23b9-4524-bcff-74dbd28c0ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d66acaf-d54b-44f6-aafd-1d8b15b51f7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f54d14ee-1b9c-46de-a751-9c224721679d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914e4d79-45eb-4735-bd3e-cec7774326aa",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0507491b-a5c4-4254-95c4-d1ac28dbd434",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d67c6a-5f5c-45dd-a40a-f88635bed688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8633ea57-02dc-4a81-8952-90fe6cfd0ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5621a07d-0bed-4cff-a641-9ce3e85acb29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255a90d5-eb1a-4f3c-bf4d-5421e660f659",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4577620-51aa-4dd9-9b7b-2b78287d0e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f532d124-7b8c-463d-9b26-e8aaa117672d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c6ba27c-c318-4354-9b78-e8098ba5e212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5f2f3915-47a4-42bb-91af-53124b0640d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c5fa2b-84e3-4fe9-ada1-f12a102d0d1d",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "029a8682-c03e-4ad4-ae56-9b6db8793cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7448595b-a8aa-429b-920b-b4b3f794f3c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8af2012-6ddc-4d8c-a6f7-6ab1d6627285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9878eebf-3681-452d-8390-3e157b847d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3b7e7a-a599-4a59-a0c7-3287909c6eca",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb831982-f2d2-4197-8a08-40656baf5086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaea9575-8747-4046-988a-93d6e609db27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b85008e-1255-4982-a7b4-0e5b97732a68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c4ac057-235b-407f-8bdc-496009f2295c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8033fa-2262-4edf-83a0-626add1af4d2",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "924fbb9f-e45a-4de2-bffa-55e25936ae40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79a4fce3-3b78-4406-ae7e-f675c5a8c2b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4df207f4-0374-4eed-8f54-beae46231587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6570aa3-c443-4a4a-8508-2af8539ed102"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b143a9-c608-4873-b716-443c35decfa8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ce7a4ad-6b84-4ae9-be7f-6c1a494aac07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d33ee6d1-db08-4876-a773-3f61b5b23324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de49b1b-f087-4743-8f5f-652eef3ef194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d27d8374-1d07-4ce0-a720-3cd23e7f7a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b491ad21-074e-4974-b2db-bb63c33c1d0c",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "717231c1-7e25-45b1-9890-8fc00671a5ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac41ca6c-ba48-4e12-ad87-b00f375dc156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc97a63-3b28-4fa0-b3fc-f6a4b95c4c6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee9179e7-9cb4-4577-9672-32a1f3f8f5d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ff4088-60e4-4f87-b03a-acc45ad793cc",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7a78f3b-c904-4da6-a632-d4a4d63b1d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88dbba59-01b7-4a26-accf-94e3487061eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b30e92-164d-43a5-a0c0-3c79aefb390f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "715537b1-ff1e-4464-844a-d32e0348fb6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5737fd07-3444-4d69-93eb-1f830471cb5d",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2463dd4e-f6c0-44bd-87eb-4d23422b596f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eabb60e5-7209-40da-8525-8aa6fc7834f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62299cbd-68ee-4406-92c4-4634fec01eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d0c855a2-5152-475c-a0f2-9799beae561b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4abec7c8-74a0-4a56-bb09-0e309af3b5cd",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "405b1b44-226f-4607-abef-0c4c104cf25a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bc49eb9-b0f7-4df6-b197-e3954212a622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9150c2-a4cd-468e-b208-e71a55a9a476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6ee78b6-02f9-4cff-bc3c-f0bf1018a479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2093a2e3-0581-4673-ac82-9ab44698d0a1",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3308ea69-9655-4060-997f-fca9784d3382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e4c00b-50ab-442f-af5b-c9cfa37d2fcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6051fa95-3925-4ac5-a91b-003a04e32773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bca56a95-0c7a-4deb-ace8-efa11e88edf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8012f5c-5bf4-42db-9c18-de460b616679",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e6ec89-1543-4acf-8ead-7beca7e63d28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450f6762-f633-46ab-b7d0-a83f37899f95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "590d6fed-6c95-454d-8e88-779db16e8d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b4c2a1b-3743-42eb-be20-d463aab23e8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8415ac3-5e15-45ed-ad58-8e23756560a0",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c768fece-6baf-4d1c-b101-94a2f53d2b92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c870c0c1-b7f9-4bd5-bef0-61e9baf153bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbbb7446-19d5-438a-94cf-7d8894c3c772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bd8a054-404b-4a38-b12f-7a9a2074b322"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab7004d-bdbb-4990-9a43-174bcde7b8cf",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8765754-e2d4-4d9c-a596-247314343dfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e62f966-1c40-4552-8055-e0cc5173cd33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29782eb3-6cb9-4c73-b5c4-bcb5423d1437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "147f5636-823e-436d-b813-89f6fcf0300f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea9b492-4149-48b5-a3a8-3dc89f170864",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86a41524-bbb8-4b36-b960-df41966e0cdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d43e52d-5bdd-4c6b-896d-3dc67cc968ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ca623b-fa38-4603-bfae-a5dc1b348643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "271cd410-c4ef-4eb7-a758-7b6cc5172b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91c94430-6c3e-4f08-930d-248c21f3cfac",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "885db268-9354-458f-8659-15936dda534f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61a2cc14-2105-43f7-b991-6084adb40531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d75730-024a-49fc-b8dc-1dd42a0df79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c77455ca-7915-4b1a-adb3-c2704a0d3d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922f8651-f7a4-4534-b172-fe1eb3a82e68",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af8d0d6-65e8-49c8-9af0-9481478456da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a311bef3-b1cf-4221-a646-f5a8eded0f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4730ea9-3d0f-4c47-8b7d-a233d51d07f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9f28745-1370-4f0c-b383-90e3fd5eb16a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ef5d07-aa22-4448-8547-2fc6810004ec",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42943369-45bd-4679-b720-d8c0eed8f8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc10e795-dc3c-4375-9a53-f66dd3494fd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beab08df-ebc9-4f44-9dc7-2646f494c5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9113d61e-22ba-4c32-a16a-509c4d0c480f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eed31dc-a638-4301-bea5-933e4dae0b89",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6992ec68-3186-4fa2-a5ff-eb90e6d5f866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1698fb6-3bcc-484d-91f8-93a6a6cf8d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0792f1ab-a6e7-41d2-9712-3898e624119d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e63d1285-658e-4454-aa7f-da2891a36688"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1744815d-8d3f-4d38-afcb-072de600ee97",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef0b5a7d-96a2-4f28-a1d9-0c02546d153b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f995e51-9a87-4054-9154-65c7fc57f3e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0801e798-05bf-4d21-9a3f-d649dfeee5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a66b9192-6d3c-46aa-a167-d27c71fa89fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c249ccab-f514-4196-86fd-746a740f81d0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a16c27-91ef-4283-8a1e-15d4924990f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f97c2868-d2d1-4c32-8cbb-1292ec89b00b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b472aa88-421a-4401-b584-da1ddb5da517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "4381c390-6d00-47c7-a052-94167d0f10fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d985f4f-0b57-41ca-add4-78c7ae0f9d57",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73d25e5-87e9-42b9-988b-db4188e02be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9f0db1-a856-46d3-8388-d7bf108db47f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99acb022-d6be-459a-b438-31f8b9a66bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fea98196-2ee6-40ee-8456-5f6edcd35482"
                        }
                      }
                    ]
                  },
                  {
                    "id": "534157db-4234-4869-a57c-e50209360f71",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb85b3e-7d7e-4da5-b029-828469f4fa23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aed3af9f-0ccf-40db-9783-0042af3f434f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aded5a56-7e2b-406c-aaa7-5c6df0ad4a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "54cc3aed-ea02-4524-9099-a2549fc8c585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7273d526-2331-4963-8c1e-9c13169ffe88",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbab7638-d920-44af-a3fb-ac488ca2200f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "402eaa97-2c20-4e21-a3d3-df7f8304a31d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e731149b-2d7f-4be6-8c09-749c170b092b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1737a95-62e8-4472-a429-9c4672a34a52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "839ae90c-949c-4893-abbc-4013426b78e8",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "549e247b-b3d6-4377-863b-79f2148ff6cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce8f5300-5cd6-404d-b080-66e79f371a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18d680c-1ef1-423e-a97e-5e4bd9687ccb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb0b80ec-fff0-43bd-8a8e-37abcfd3e8fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec626470-51bd-44e3-aa43-19bbcc523501",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "214c4761-7017-434d-aff3-3ae56308e4b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abff05c0-8a88-4289-b23c-08bc9a57272d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f6a7b6-7ee1-4739-a7ed-4789c86b513d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe95f9a-ca40-41e2-a2ce-3e503b0f2e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac3b7e0-b5f4-427f-8b7f-341af0bf7981",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13d6b506-eb03-490f-a740-d9731abe9eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05fa9b8e-395b-47ec-a86e-ac833bda413f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b244191b-8eba-48f3-9dd2-cc52f4d9b9de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc133eb3-cfe5-46d2-9633-0f82467f42ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80724af-5fb3-4db3-b1ca-3ef668368f65",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b5d702-ac2f-4afc-8fa3-72aff402f9c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81deba45-a7fe-4c03-ac83-b1b49ce2423f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d69fde4-707a-4ec7-8b61-3e3578d91c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "52961831-aa9a-44c1-88d5-86eb223787e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d98b29bb-0f9a-4c4b-98d7-9bcf42595a48",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c18b58-a4cf-441b-b683-4e3c30474274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe70c9e8-8fb4-406b-9a7d-e74ed2c644af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7b538e-3bb8-4c89-bed5-b858efda56c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "17d9c536-1957-40b8-9a3b-83d4b3bf0cd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29eadf0d-d080-4ff4-b76c-597cc47d4b10",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1958882b-8b1a-4fc5-9e7e-7bb9beb58577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b11a26e5-4c9a-46a6-97f9-52aa24ffb018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2a3206-c464-42e7-853a-27861bb58bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4b6ade8-d9a6-4774-b017-f4653db48e62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dffea4d-fed5-4e94-b525-44cc30c2e2df",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a960361d-fc04-4cd1-8881-5da360c3ddbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be5042d9-4b47-49ec-b028-42ae93cf9928"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9479b71a-93ef-44cd-9fdf-3013d36e5445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "81d1e0d5-adea-4fca-a1ed-a3944974df01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2a09d2-0eaa-4c2a-a006-da9cc988d32a",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e0412c-ec84-4c0d-9426-73bd031261ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f65d1dec-0b38-4911-8382-16ea7424970a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b8c7274-3d5a-4d34-91d1-d51d6498ec72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "10a2621c-1a13-4e54-8822-274e9cce101b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be39b58-d005-42bd-a5ac-1cb5c141c523",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "006557f8-19b0-4ce1-aed8-16ae43f78f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a962064-22ca-4ec7-a74d-0a34839a2257"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2ce09f-23d0-4335-8acc-b092e95d9a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3e50f739-7205-4271-b534-0542001f2c11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "649b2050-6ad3-4644-a0a4-cad207497f28",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90df53b-610e-46a2-9e59-172184822a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb036837-1422-4faf-a58e-5805e47bcd8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a5fc058-83e8-42d9-8fd7-a4a6f115edfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f939760b-19f1-4760-9f6c-83c8b3d8d696"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adcae5f-4df4-407f-ba54-952a361244a0",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e868bf1-db77-4a2b-a2af-651027caac80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d030f022-4c51-4018-8ca6-293e98320db7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1afb2fad-df8e-4d26-8830-83bcd85db75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ab6fb7b5-d037-4ebd-aae5-5f5b94913649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d230891-5dcf-4b00-81bc-7e011da2913c",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49493b48-935d-426d-ba39-7c00e049979c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2402b5a4-39f8-4188-86cb-61c3ecb86455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81e6bbb-3fcd-42eb-995f-bb41ec0f08b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "58079b4a-e727-404a-88ef-1e9e6af079f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba77319e-f952-43b2-8cb4-92dff032c96c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d651a14a-2ac1-4039-872c-ac2faaddb10b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be2797c5-c70d-4fbc-b6e9-2b99ead0274f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "113953e2-49f1-437e-a7db-7715d6f145d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2441b17-dde7-4964-bd2f-491b83d79bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a78cc93-12f4-4bb3-80b5-17fa90268fc5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8c2d7a-13f6-48f8-ae50-a63ba09985b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b32fd799-3dc4-4e12-848f-23f63843f662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "797c979a-0b59-4a48-ad99-377fea2271d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bfce12d0-eb23-4a4b-8afd-ef8e111e308e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff8b618-2f91-4d09-8cbc-cc975703597e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa505377-40ec-4d38-84f4-c124dc724f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3aa059d5-8d5a-446f-8177-984f0b338c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8ad663-a175-4948-9312-06a23f239fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe49dee-77d1-4fd4-b85b-7595999d57c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4001f4b4-d229-4c46-ba28-4c99bb604aff",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d588afa7-bb32-48b8-b4dc-4c8f313df936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "566aa72d-e1c6-469c-8fff-0d5e058eded1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ab0d0f0-8186-41c6-bbbf-ac4e9870d2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8754939-6582-4996-8baf-892e09b397e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b2a608-1346-4979-9b1f-6a6c959c8cc2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ca0ff4-2e11-4018-83a5-5c41a681ee63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "147ca2b2-09e6-42f2-b13b-a0918678296c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5deac929-52b7-47ff-9bf6-f0305a5e692f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f55860-f5b2-433e-8a1c-4e849bb101ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10475f09-2643-42e2-8c75-e41d4e2d8561",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fae115fe-2821-4ffa-a47c-6d8b4deee04b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf0630fd-c3f0-4a22-9a63-b5fd6ea8bd0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "946a45cf-ec75-4bf6-81c2-2bedadf4fb92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3422172b-c648-47f0-bb54-83db19eeee54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45d244c3-8422-4fe8-9fef-8e8d92b6b47d",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1950bbba-f6fb-443e-bc7c-c13f119fe88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5af94a2-07d3-4d98-9bc7-25db6360a55f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a5fd26-5c69-4344-b8fd-6b28262b69a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "565b82c4-7cb6-4aef-ae71-9823a38b1c27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f0e3f1e-e544-485b-8d4c-2030e1e85735",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46ce0e5f-02b5-49d5-9125-60cbeeb2a000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f747c60d-47e0-4037-892c-aa6197b096a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e360404-3049-4fb8-984d-f8ca3e9653ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2d294fa-f74f-4ff6-962a-13970f67c409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31282ec9-3ba9-4635-8d9f-211379084d29",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c58ddf8-d9af-4dea-957d-f5b558087e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "172e17d3-1e0c-4bc2-a055-905cbd3b9251"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ccc9a5-065c-415c-a731-aa9122657c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de16e96f-071e-49f8-8fae-466f34b5f96e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "410f296c-8cad-4f96-a263-b523ab750512",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4ba931-10d2-454d-b25d-817de1ba9a1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ba2f510-97bf-4eaa-8984-2a0b25d699fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "379923b5-5f4c-4aeb-bda9-f4703e81d20e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce61e4aa-20d7-4fb0-bca0-3855d4ff4527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d111db-08fc-4be9-9fa3-f567ee5ac18d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cac6e3-9101-4809-a243-c0a8e08d23fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeef9fa1-e471-4e4d-b510-e74c54028a0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4443c70-cec5-4697-a918-0c24ca87693e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98f8972d-c94b-4686-ad18-eca25d32aa31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353262bb-f200-4cd2-92d2-b1b3d5f1d6fc",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24e89abc-4398-4dc6-a362-ad2481af4665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a72e84-ea72-4355-a615-7a504673f288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "604f32e3-0fcc-4989-ab59-dce0886e254c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd971e4-8414-4f81-9285-9d58f0e2f11d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf42ce5-28fa-4fe7-9fe2-c8cbd840eadd",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15f22b26-1130-4ee2-8ca7-452b19d554df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6bb28cf-17f3-42cf-ba11-c475e0c96785"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca0a657-de13-4194-a2c2-575d536611fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a1445bc-3773-457c-8829-17e963dc6871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b52dfee5-a1c4-488c-b4cf-82ef2800319a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13e87d3-f6e0-4f43-b588-a69282ecb639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46645101-3604-45f5-818c-3ec2970a0c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68ae49de-58c5-4277-a9f7-184756a2ddf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "882bdae0-e96c-438c-b9c5-b78f4282ecf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6866e327-6043-49c0-95bb-6c8f68ec8e22",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8106919a-f9d8-4b9b-a5dd-cf8ee77f8832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "155b4982-9c26-42bd-9d55-ee37a3ab5419"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6070f1c3-d0ce-459f-a7e2-e4a94940ec8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "93c0df1d-83d4-4c88-a489-ba9602d53023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430d06bc-908b-422f-b714-f7bdcd329a5c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8962bf23-53bf-4006-a413-a57dcd7032da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c9b98a-9339-4f11-be86-3b7d914b9dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49e62a71-fc7f-4a13-9d06-bb6acb0f0d3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17a21247-2020-42ac-89c5-b0aa0811c2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1bb64e5-0ddf-4613-9f9e-1da285f0aa81",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfe60641-2e5e-4a3d-8013-84a227864139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b13898-e200-459c-88fb-5cb70b7c0f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baf423ba-bf31-4ae8-98ce-51e5da377464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "ca637dae-2ebc-44e9-8adb-ca5672da723b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45aab5e-7a71-4134-9d9f-f591df5f7846",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37fad5ae-e027-43e1-85d2-f40a5532fed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e9a4ebf-c4e5-467b-8f6b-b3b34a077712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8baab88-df7d-4c20-a10d-7b46db9d6389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "072ba094-411d-43aa-b7d7-26a17ff7dfb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c744ae-e391-49e3-9523-b62157e07f6e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43b5a90-6e18-430f-b563-6271546706dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c76a3c8-3ad4-427e-a931-7539e1da3718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32179c60-88d1-45aa-a8a3-314feb955c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d99d67f-3753-4245-a8a7-22afb5e4df94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879fa30e-3f4a-4c5c-9a87-9df994e4c361",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76e16b15-39ba-4960-873c-28aea0151cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb37ea63-a52b-4b4f-a2b2-3068a4a52e53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186345a1-8bf7-45f8-acc3-77df0b15d51d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "10e6e9d9-2ac5-441d-a947-640fe7651b85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fbd903-3d5a-415b-a587-2cb257fbeb9f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850d409f-ef2d-4ee3-9981-536928bfee09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc594a01-9965-46f7-acf5-89c33a51430f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7dbecc-5947-4b35-acce-3ac5bf60b879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "061454ad-2f3f-49a2-a268-1d0d91dfd8f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a37876aa-50f6-47bf-8afe-cedfd7a8cbf3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81780162-7bda-4d88-8762-e3671658e39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8765ea6f-80b7-41fa-8908-d987a1e22591"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a82f5e9-0ae4-4e44-9e57-6f769966dace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "19deab61-367a-4605-832a-113ca0ccd2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292c76d0-98e0-4e55-b790-ad7785003892",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "055e0323-a293-4765-be5b-c4ed3b5a028e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27b049f-331c-4737-bbdd-f49f34ce2f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e20460b-3415-4c34-a447-c87b96f3aa94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "eadc69ea-aa18-466f-bf44-ab8f217873cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1fc03a9-1020-48c0-bb3e-b4834741cc8b",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a24027b5-640e-438d-ba8d-3e7871337391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8617d079-31cd-4d5a-a01f-21f6d68bf739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2bba7a2-a6d2-4f67-a561-121d3b32b722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a29d8e82-cb16-4a05-9e70-724d7b1b0478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d71875-5353-43b4-8052-d885ca1d1ed6",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fab6f1ec-f329-47d4-8706-253a102c55d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e794097-0a47-472d-94c6-220f1f6c5fbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5097224-7119-4f86-ae27-01ad7d44c983",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b6207f28-a2a0-432b-96d6-3cdd380efb52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4773ed1-0105-4016-93e7-17b49443aff4",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32640f2f-ba93-4ab3-8b87-6aac6c043796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f18b617-c3a6-49cd-acdb-3a5fc61056da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "806b0bb9-255d-4e89-9e97-b59cffeea675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce4b2038-ad89-4c6a-ad99-e08e9bc82ef9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57037628-c502-4b0e-9370-7ce6f45127f7",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afb49aa3-5c83-4951-8a45-9328a3db9079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce16a69f-f449-45eb-b74f-35131fab4a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312ded37-8b04-4a29-b159-70f981f1944f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1baba475-0e40-4d3e-809a-445f89ad262c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbc2b8d6-6402-48a2-bbad-54e795305815",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb2467a-f2d1-4423-8092-92729ae367f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d54b03cd-04a3-4d37-a7a6-3b60cce39b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c070478a-a795-4b38-811d-611ff64d5251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90fc500b-0781-4029-8168-13f10e35a3ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09339cce-6879-47f1-be85-49018b21dda1",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ee73a5-7836-45d6-ad0f-cba910470231",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8db4f5-429f-44cb-b2db-d2b40799ed89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f00f82-aa5d-4058-ab98-d9b0fe1fe709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "8542b0ce-f964-4e92-be29-78b76318005e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3e84360-ccd0-4701-8e41-2684e82b36d1",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8cd7a6d-1140-4c26-b179-01ca77e40bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1897019-a0f1-4594-9821-bbb0e8017074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac0a2a2-c6c3-4a1e-8bbd-8c640cc81e15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce2e9740-a830-47eb-9349-d95abf9c0cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4dc08e6-b6a7-47c2-968f-1d18608cc64b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61dd81fe-85cc-4aca-b6b2-a2f3412cd692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eac3dedf-00d5-45c5-99f3-87fea45cc453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bb39a3-40a4-46be-b4ac-76db407c40f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5de52581-c0c0-4d06-8679-aa74e0a4ec4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c51001-faaf-4866-8f78-ead91156d91c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbae331-5200-4c1a-8699-c903fe81c245",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "654fc437-f24f-497f-bd0d-dfd2694d0fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78391f99-5bce-4a47-88f7-f10d64769fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "86373e02-ddd0-4787-b13b-440ab5df4944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d7d162a-3a21-40e3-a08d-4a11aad4da0d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a642b84-82d7-4111-8e9f-38b59cf3c2fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef5314e1-20f7-489b-b39d-745e04edb05b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b416940-0f0f-4a63-b10b-578c59286445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2c671d7-6ea2-4db7-98b4-28c34d0866fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b262cc2-a818-480c-8460-9b672f290e58",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3d95828-ae7e-4a17-8d88-e1284d149967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b634e9e6-b8a0-4f89-9696-825ed34eb17d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fe96dc-31a9-4f02-b387-1327c4a7093c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "02336924-22d6-4919-ad9b-174033488bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb59c36-9c6b-4f71-8832-edf7d676163b",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c31b389-92f6-4ac7-a51e-97febfc4be48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f8239f-317d-404b-af38-3d027dbf50b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa8efe28-776a-4153-94b1-584f5de20802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "15ec02e2-06cb-400a-96b3-e817f167b2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e4f1330-5cd4-4c42-8c86-5af4f6558079",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "448dc3f2-a8b8-4414-b465-3a6720e276cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ce73b0-305b-439d-b9a0-e47a699a7b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c28505c2-8cae-48c3-b8ee-208ed96a6026",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "10329166-eaac-410f-99a7-21d3cd629c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9aceab8-a6a9-4154-804f-b391860881a7",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d36fb9-d5dd-4e05-be1d-7a0eca6c77a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11ca2cd7-92bb-4395-8a19-3b87455e75dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4d283c-e5f1-4426-b089-5a645d1994a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "80811313-9428-460a-88e7-9fb907368d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08a71a96-a662-48b7-9a69-e8db411f6df4",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce2d5c9c-1dc8-4db9-b0f4-e409756e9ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0386f524-73e3-4ab6-a33c-90be45e5548e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93cb3a2b-19a5-4ca2-999f-07e9be3aa7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "53b320ed-1298-4c3f-be25-a7772a34c535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101fbe4d-35b7-4edf-a249-d7921a015c46",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef998c43-cdfa-409d-a328-14f403f6f2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f91dec8d-645d-456a-a9e7-4ea047e8a729"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50873898-fae0-4fd8-a89b-f46773da6d22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "25d1ec5e-19d4-4319-bbcc-41acc5a2de0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50a716c6-307d-4e40-9027-49194e9ccc43",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cc99127-be26-4d20-a64b-4591a7443b9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d603b20-6b02-4d47-ab08-d9963346f2f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c5c6517-f38d-439f-b37a-a96ff9f52e53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "38d85af1-b0b8-4efe-8afa-13d046444f74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6ac148-bab8-45e1-bd18-b1e53699e7ba",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b0d9a1-67bc-48c4-ac57-062157c88f3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faedfe7d-8c8b-4d42-a863-7fb48226ec96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7673a52-01f8-48b5-8998-91ef05e91ce4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9969c09e-24e2-4a9a-9b07-cf5a758738b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46a1616-3e49-44b8-9c39-162f73e9505f",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c88316a3-3fdf-487d-831f-5fea43152c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc579cac-c24f-4dfa-865f-70575641707d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6283f958-24fe-4786-9eec-52fffe49fa73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "af801022-62e6-475d-aad5-6479c4c86bbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c37fb5c-ae09-4d9f-b791-86ab90419071",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da1ef394-30ff-4793-b414-73e612cceed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59158945-44f7-4fae-bdf8-70fe0ff16f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c70cf51-45ad-4d3f-afbf-6e31b93cc08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "58c6cc8a-b755-4128-b256-7f86a5cc8a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348455d0-8e92-4d48-bfdb-bf6c4d4bdb61",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f09fb1-c683-4b5b-b5c8-2ff776b3995c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be61280-c941-4455-afd0-9089ae558d71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179d1a3d-2bd0-44fb-be83-ed44ed1518db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71f76eed-b395-4503-a25b-8279a13d7f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d601334-959d-43aa-ba20-cbd89b42c89b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85ab3b4-9611-44a5-ab5b-7b03f0191bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f2693cb-def5-45ef-bd37-fe79fd3efe81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c17ace4-c156-4278-a1a5-340df2e0a456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0cae11a4-fa2e-4b6e-9b23-564d9ad4868a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9343ff-aa30-4f80-8704-cbc53ac7c42b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1a0a3a-ace0-4c2b-99d8-9e74d6e9d45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "885db8ca-5ef6-4e7b-b322-d8659f1ce336"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12408fca-c7e2-4d31-9711-6cf6c4c683e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0aa2a7b6-e435-4bd0-9f04-e8b1ff1f66ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df9487c-534c-44b3-943f-9adfefe36244",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0275ce84-0b5b-4804-8e45-09971f0ce88d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea20c0e-ed4e-44ff-892b-870f139c5690"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6771c6a-4bc9-48b3-99c0-50e59a9e339f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc49d73-d69f-4eee-a6f3-13d5f80fbb83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ea3c3b-f3ed-42fc-96ab-aa122b08d0c2",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1155f63d-56aa-4f38-b513-445812b383d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "750cb591-3282-4310-9130-ce8d9582c1b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fff22ab-97cb-4c9a-abdd-db16ee66cdfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d6739e5-b3b4-48a6-adae-1d52712a1a48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f1f18bc-a5c1-4ec7-a84e-3087bc063616",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "286a278c-d577-4ee8-9ee1-e91adbdf9d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3886348-5cd9-45e6-b184-bcc1888c5d1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f5d797f-8ae3-4bff-8336-6acada0462b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "92600ec0-a7d4-4989-87cf-34d5edc88096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f79b15f7-3675-4a71-a0a6-d56af5ce071b",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c1f535-7a67-4e34-a609-7e5a3d55f2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c67ece96-875f-4bfe-b999-22730880d286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9515359a-cba0-4b1d-a0ad-5daac336cc87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "104f0c16-1dc0-4771-9d43-d0c4da065680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28955289-4977-4cd1-8231-098d70e7d031",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a827b888-374f-45fc-b85a-2523870d16de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c82c2f3-4a2b-4119-8ab7-d092bfccbe16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d25dce99-da38-4141-b5a9-054a2f95991a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "46892874-cfe6-48e4-b597-4f25783a8545"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be9075d-d07d-4573-bd0d-f9c28b44088f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "867d155f-abcc-4ee4-b2db-3d9c2bfa655a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fa1f536-cf49-4e07-82f9-8af401c19da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d07095-31f4-4643-ae71-8b1bacf8d44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9aadf1e-c98f-470d-839e-de41152dda7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5fcaf4-0d20-41fb-a6d1-24f2848c10c5",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44995a2c-86cd-4b2a-b096-1f459cfe826d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "6584f5d8-65e9-4946-a444-bb8bc562e8e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02403c5-e4a9-4f67-8c8d-1fc936b8d650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e5c37c6-310f-441b-a702-d6db174d4ec8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4bb85b9b-d840-43df-bd50-a16ddcf6805d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ea43ae9a-9799-457d-9bed-02982103c928",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae11554c-d857-4e2e-8759-50e032966464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1113fa07-c3b0-434e-8527-d7d6115ceff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54144c65-5f04-45a1-a73e-68a3198d398d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "96602fd4-4126-45ce-ace6-9e803e0d17f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "179aab96-b4da-40a1-b59c-a8312902100c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbd71b5f-7b4b-469b-8d9a-0c64813d55bb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4fc03053-223c-4f36-81b0-75eb76600243",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eca13077-e7df-4d4d-918f-3af0ee732ab9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "36dddd5e-c1a2-4925-8830-ef153d6c0f89",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d997c69b-ccf8-4c83-92ae-7c200e2cd81c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "bd8c9bee-34b5-446c-8009-460f2f4099e8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "169106d3-4bcb-433e-8440-cc43a5f2141f"
                }
              }
            ]
          },
          {
            "id": "67bf6f80-78a1-47d9-98d0-02407795e3a5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "faef2bf4-5d6b-473b-b762-bfcc76196978",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "665d674e-a248-4ad4-a46f-cd3b6b1ccecd",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b0a949-80f2-499c-9c6b-535d86296486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "35468927-0be3-4132-8a24-a1d4012edb22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ec2222-1de0-4d3b-99e7-97cbe3d4b5fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d34ae37-f606-4c24-9a7e-5c192e45e9ac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d8034b61-aacf-4c9a-acfb-95916341922e",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e1c1b46-7857-4468-b66b-a407908eb35b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "38105f24-26b2-4d71-b16a-af87db129387"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4c168508-22ba-4e45-b81d-e2f168bd4b83",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3f58c49f-4b64-4564-8e15-47d29d6168b9"
                    }
                  }
                ]
              },
              {
                "id": "13ea75f3-4d58-4e0c-ac4f-e098a3ba798f",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc47aded-aa5f-4c1c-87a6-0179ec6b7892",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ece19480-1bf0-4ee5-a964-f8d04a4fbcd8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3a99f0fb-7d0e-4960-a743-2e9c08bc102b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0890470a-6312-431a-8a73-7b47f293f927"
                    }
                  }
                ]
              },
              {
                "id": "7194b057-5044-4475-9bd1-a380cf94e3b9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "39b10b6a-38cd-4737-9512-460c7054219c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "873d6933-6903-4ae6-b66a-07cc84625da7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1e9ccf28-e651-49e6-894f-1a5f954ad818",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c5be980d-6148-40c0-90c5-be9f985ed914"
                    }
                  }
                ]
              },
              {
                "id": "4abed2a1-ee2b-4272-a6d5-cb5d63000e56",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a223187e-5953-44f3-a372-2e43f9ee08cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c95b2f62-f9d4-41d5-93ba-3ff532e2e0f7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8828edb7-a27d-4026-87ff-446d05fc77bf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "51046a72-52af-4e32-a383-b7c93b26f339"
                    }
                  }
                ]
              },
              {
                "id": "6d729f94-141f-499b-a989-2a41db1e26e0",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76454b49-f655-4d7d-a42b-65a98c529e73",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "202789a4-780b-4810-9b08-1a256de26173"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c47d2ba8-c56b-44ab-921e-c5328b201e44",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6f9bfa9e-7f2f-4272-a0ac-3778a89ccadd"
                    }
                  }
                ]
              },
              {
                "id": "756a6821-dbb7-49ad-9797-410502d7d363",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d50837b0-21e4-4283-8fc7-7d4abc22386a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2af2cc4e-a41e-4848-ad3a-e95b33dd1d25"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40abfe0f-8a84-463d-8996-4b2bb10d234c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1e88da39-124a-4165-9505-616a8eb17676"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2825c64e-e11d-43ac-a2a4-a39b3adb5e3d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b316208c-d826-49da-937d-48b66c33367a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c53e5ba4-2324-4ab5-9772-b63639421bb5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "407f5ee9-482e-457c-8635-f50fcc566cad"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1137a876-76b9-495a-9936-599947064482",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0469a985-513b-417e-bc1d-4bf34dcedad1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "595f68a5-f2b4-43aa-a09b-10eb33f2c2e6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4020cc0a-9707-4c0d-a864-74dd97970f82"
            }
          }
        ]
      },
      {
        "id": "2186a6ae-d993-4c8b-b0f5-e8e864a5fc2e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e221f768-4fc5-404b-a816-d16288908447",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b0b3e430-af0e-4631-a6e5-5993ca73e202",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3f365fa7-8e9f-4d79-94cf-505b8ff4cadf",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbe60cb-0596-42a9-8d60-598dc64f1188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a16bb909-216e-4145-a7dd-4d166a2c39a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca17e08e-ce1d-40c0-b13b-e02a93cc15aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "98a83654-a4d2-4b21-9faf-da17b9f5cbc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9531843d-f8c8-45e6-9cad-c9944c481000",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342575e7-f975-48e3-9bfc-e0e9accf8137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83ba42f6-8a10-41d7-a1e5-ddd2c92ec852"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c99e765-23c3-4df6-9eb8-3dc57a340dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "25cfd75e-c4fb-47b6-bd52-7142d7361e65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32acb4a9-7c17-4f2c-b6c2-27673d6493ee",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52b0d7f7-b1f2-4cbe-80f4-fef3dc986403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c37259-38d9-4313-b117-89fe73ad7cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3afa3573-ff62-4004-8f40-5c7907abd032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d080023-e126-45cf-9759-f0afaf0ddef1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac85be0e-4eb0-47e7-b3b7-855081b4e58a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed53fae1-da7b-4166-bafe-6a5b4d177f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "061f83a1-ce38-4a20-9f10-ea9d96256f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562aca7a-1d75-4176-aee9-4dec694818f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8dde035-b7c4-40fc-b3cf-5062ad007419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213c751b-599f-4e37-bc11-0ca91ffc7d04",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb99fea-6729-4031-a6c4-fcb64b42fed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0c47bf8-103e-4ce0-984b-4a38ffd53093"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29056fd1-72dd-4969-b626-045def7bfbf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ffc249-6f3f-4240-bfda-997ddeb90d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e408b3a-789e-4d82-aff3-641ea78d96bd",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb58087-3fc5-4e4b-80a8-5651eb804b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9180ec1f-a8aa-4488-b4b8-53029c31043e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79e20882-5d1d-4935-827a-ca22c3461123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ad195df-3691-463f-bbe2-a2ea5385f1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744091b3-b546-40b2-b0c7-395e63dd68b5",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24116ff6-14a9-4f3d-a922-e317b231977b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bae258de-f6ed-4e3e-a522-6560c251ed1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20694fec-f2c3-4f74-9b11-f99bcdcb61d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdbdcc85-7c58-4262-8fe2-6e3e764ee450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5295cfa1-4857-4c26-a046-fae3e7568efa",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b21a9d62-49e1-4ec3-b21e-b7e7087f6416",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f6c3561-41fd-42f1-82ee-dcd9e10fa99b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f3b6ef-9450-4cef-a26e-15252a08f676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afcaf704-9020-4733-9ba2-65a544ad9384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59be9918-af5e-4b18-9cce-bbd2404cb4df",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79bc699e-2a40-4140-be77-6a1574ade2aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d441be3-e2aa-4fff-9bd6-917b80c352b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e140f742-2d7c-4ff5-9466-fc0588df1d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f3f420b-e901-48de-9458-b24899c69efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8053dd22-4704-4db5-ae57-a2c013ee6b30",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17728c7-1abf-4d6c-9b6c-4ca7dcca5d12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba194683-ddc9-4c03-a57f-057ac9b5bfce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ccec47-662d-45cb-a246-ea04f8a34ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "46a0c4e2-9659-4857-ba88-221cdfc19b4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2053777-f0fc-4f7d-a5d8-c94426a7f5b9",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4681f8bb-2bac-470d-99ea-6306ee2e9c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c8f96ef-1471-43c2-9679-6985ee150b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b5563a9-5938-41ad-95d6-773ef59f5e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9ce7dbb3-988b-4e5c-8bfa-def5994701b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91eed590-2ab2-4315-a77a-f18ea79eada2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4b2cdb-f10e-4980-af94-962fb69e8a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf28de4-2ef9-4f35-bdc0-50eade6fff95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4bec1b4-5e5e-4eef-9b56-ec7cd1c051cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "938e3f14-590f-499d-ac79-ee256f838e1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49038cfd-13d0-41d8-a7ee-8573f7d084eb",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "693d97c1-8dac-4cd2-9efd-4f5d2e19679c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db504800-aab2-449e-9043-d6349cd79d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132505db-c771-4653-b516-b420ba7eb49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9acc7411-c378-4cca-bab5-1b4ab81f99f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1863e322-26e2-4292-b1a8-b8ea992c633c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb76f107-fb77-4d9f-b7bb-7c497f358a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee9b2204-e82b-41ab-8afc-3388f4d3abf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b04e8e7-63d7-4df8-87e4-43ab9a4da780",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3df6df18-bba8-404a-b926-a08255c14edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "602df3db-b316-4584-a69f-acd22a2065af",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f1ceae-bb4d-4243-a058-527809d00b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6140a0a-11f7-4e51-9e62-64f03b5b37a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbb3b6d-ced3-4958-8438-88dcbaec2a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "68906d55-efa4-4d58-adcf-ac7811eff2af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d45e5f6-fa0e-40c0-bba5-77cda22104c3",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3c46d4-5770-4ac4-8f75-4c617a7492d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02c37b94-5f8a-4173-bda6-bbb0299bea5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2888a5f7-ed33-4dd7-a477-dcf222643d64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6509ddc1-198d-4a36-9f07-1737835e3671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d07c8b-d529-4c3f-bce9-089b58a4544d",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb9b34f-c36e-420b-a0ce-d659cdee24e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca2cb7b9-0988-4aab-8206-a97eaa74b3c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7fafe5-0ea7-4610-9dd3-3635a05dc7e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1ecfdbb-02bc-4a70-8331-174559ed69ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f4af255-73c4-40a2-b9f9-9c330648400c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410ed531-2e3c-4952-86fa-00ecf8ca1953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1934e1c2-3951-419e-a58a-774c9dc68590"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a855188-9ed1-4399-a403-c8c9b254dc8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "70bcaf18-e943-4f3d-94ef-2be4d2a2ce87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f796827-de98-4af9-9454-8dd94052b460",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36823cf5-b824-4cef-a0b3-68fd31f81730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d04a605f-2452-4766-b8a3-190245e19f97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad61630c-d8cb-4372-9787-fdb594662f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34bd3f14-ed37-4507-a9b1-bb61b966c6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493f2250-571b-4194-8454-f53d736490b6",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef54edcc-676a-4ee4-b9c9-69ad1bae2fe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b11e542-532f-4947-b88b-59f970fa1714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97315064-0c6f-424b-af0e-226ffc8c52b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9c1c430-ae65-4348-a586-321eb777cc12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35607089-e6bf-435c-84cf-6ce4c4cf203e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1648873-c933-4cf5-9b85-463536f575d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9f086e7-86d3-4443-8be1-fd30a0bdbcc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f6d1ea0-d73a-428c-aa20-403a675586b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b00b2c4e-3728-465c-b66b-62e362df0b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f206f238-9b21-4b15-b967-89f87e22437c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "811ee43b-5725-4d71-a42b-44f2bc94c9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "978b3e42-f126-4bbe-b025-59745dd556f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ca0593-73d4-4275-a550-c4193d2022bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7a1c02e-30ac-49ab-80fa-f8c2d66bc6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5a909b-2c1c-4fb5-b2d7-9aaf251341f0",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797f5a2b-aa0c-4f36-894c-5b34dae59c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3106d8ae-de93-4a2d-a1ce-34c207fd645c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81b83b76-8ccc-4c6f-9767-304fd112d6f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70bb82eb-ba5b-41e1-bf03-a11e985f4abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df92dec0-931f-42ed-87ed-1d99a7f79678",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7da5d3-d228-4515-a65c-2b9a3068c383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9267b57c-1b37-4c93-856b-34e17a782ad0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a671e6c2-cb42-4951-9c51-f68b7b4d379c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bed8eb7-fc7c-466a-ba71-8d25dbc8a2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7440ca52-3163-4939-8565-b292edbaa6c2",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c5d020-249b-4868-b87f-6f81207f8f2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adf7e465-38de-4152-8e8c-f1e893e1cba0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d537278-8df8-4d1a-9302-3ca44f76c99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e92ca26-7353-4c82-9bba-f1fe9e8c81b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6644ade6-2a05-4ec5-b503-b44e3e951302",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b4d263-4b4f-40b2-ac8c-d20bfa0fc394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f895bb4c-32a7-4a0c-950b-5dbb9ffcb7c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79020fe4-5d46-44a6-9953-ec472f9b7327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31047ca2-4cf5-4b1e-b0d3-7c04e8fd28fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba04ca4-f236-401d-88ae-9da3f1576ac5",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b5293b-235b-49d5-9fd8-c24c60818b28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d53c71e6-6dfb-4b3c-89e1-4999881b384a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddc1f614-f202-4c0c-90ef-4f67740130e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1392352b-25af-4b75-9c06-94565f1efcf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6ba925a-b5a8-4b3f-b26c-b321e9325b59",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed91eb42-44ac-44d6-8623-b85c3fc7710f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad7feed0-a242-4113-883b-a7489f7c2623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16233819-b7d6-48f9-a76d-80ad9642bdc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c3e0d8c-3dad-4f39-a0b7-502f306e46f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "882c809b-8950-4d07-b2b5-a50d0907ad24",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b554e1-227c-4848-af1d-eb38b3898e99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "606f8139-ba38-4d8c-97e9-04134989025b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d26e0191-bc84-417d-b350-7a018b270b05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f600a31-5593-4a02-a19e-7946c62b296d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7894fa0-e180-4912-af89-01fcf3076d89",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5863ecac-a326-40e4-a49d-6e1ead06b02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b24a84d-48a9-4e9a-aa2a-2d65e1a9a4ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d871ee4e-8da5-4699-bf15-936ebe895d6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1a304ae-8997-488e-a314-b682381d0554"
                        }
                      }
                    ]
                  },
                  {
                    "id": "780f8776-3d88-4f7c-8a1d-162c9cd4cb77",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2a33c7-7fb8-4c63-91d2-112707f9f901",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10458982-3400-430f-87c4-d398c654c525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cc7ba54-4c63-4c8e-ab21-c58c9d708f87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8bf4145-0d68-49f9-8c70-e0b31a5ac6ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e97e50b8-0b75-4de3-9e34-1b77cef4423d",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae0d8b5-679c-427b-9d5e-fa594bd928c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40c73092-803b-4f66-96a7-9e64b04a5f27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b004ce-32e1-4304-862f-9b16104f6251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "206e1f6b-f5b8-44dc-8f55-ada41abc34ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf623a4-424f-498e-9b1d-bdb7dbef7973",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "949cf428-24c7-4569-a383-a91950ee5d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a64280d-28f8-4db0-a46a-4c0cf0895465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca0ff3d7-f7e7-46f9-8f10-be92338bc8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "671cf84b-857f-42bc-9179-f518cc211a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392908af-2efc-4f88-a094-94a8b68235a6",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c712819-8430-49a2-8bde-5b32b7d918e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bc5c14d-ef23-415f-bc91-92308b58f094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3175b1ad-29f1-4a1f-89de-2a08c3dd4695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8e87af7-4639-4ba3-8c27-4c3adc0ec319"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4afce56-16e8-48cb-9c2f-4737ef64bcf7",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4407a2c-97a1-4317-bbf2-84fe14ac5a73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eda5844-7970-47b5-949c-11a04c36b7cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714c0461-759d-4f02-88fa-233df3ee0e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8be3223-20b4-4ed0-822e-ac19801836fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75028b4f-e050-438e-9541-faa748727c1d",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "059bbc1d-ecfc-4933-a7b6-fd1b75b6e4f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6328e9f-c82c-4bfb-b1a1-b4581dfb7679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa3cf192-98b9-481b-860d-b64703b21555",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1331d218-9f54-4d31-b90f-79ee34b5d87e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abff2d80-2660-4d2a-b2bc-b5c0ead9bebc",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecf4fbc0-f329-4c9a-9307-c5d10c0fdac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c413e23-2374-4da2-af1e-fca2e23cfe2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "364fbb4a-6871-4284-a1be-5aad3c9820a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "625f0f01-5f85-44db-9c0d-0b749f8da445"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b7c82be4-3044-4d4f-93ee-b51917fdac32",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6fdeda50-3afb-41e4-ae90-761e6a794138",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d994f227-8c29-4fa8-8db5-d0bfea9ca120",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a062048e-db43-4a87-adb6-0708705f63a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff1c666-7357-4ae2-b5bb-16d7ec78baff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4c8488d6-68ab-421a-a44d-4a6932e8f5f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a7b742a4-912e-4419-9371-2e22827ee35e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "098366bd-57f0-404a-a5e1-ad2ca93b637b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b86e805-4851-4796-9edc-d23137e6e3bf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f94d6156-70a1-4cde-9929-5e8bfa69e3d2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80569afd-d0c2-4de6-ac58-05efcb560264",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "50805a24-9106-4690-beb0-58f36346daa8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac6db69f-efab-4346-961f-a94e5bfca90a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4d668438-ab52-4037-82b8-393676e7fa40"
            }
          }
        ]
      },
      {
        "id": "d67389ff-b4bf-4320-b4cc-9d45749742e8",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "a87b411c-f24f-438b-92df-2d82acbc35eb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "35bfd97a-11ef-4bcd-8f65-0ec270803764",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6bcc37b1-68ba-430f-8913-eb7b452f6bbd",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0d1dd3-f0bb-4159-ae43-18e6a130fd61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14119090-0094-4811-ba13-547ac02878ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06781f9e-f526-45e6-aef3-ad671e5e4b51",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7214cd7f-a684-484b-9f0d-3d390f2c1671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44f182c1-453d-4105-b0d5-810495a234f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bee0f08-6840-43fb-b68c-bfde20ac2567",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9a28dbd-39fa-47f7-b64f-9ec01da3776b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9117c6c3-c471-4974-bc8c-8858af985cbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa62d517-f153-4723-8782-bb8dda9fe5dd",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fafad871-51d9-4917-9a4e-e1c2cdb7f84f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "915eae7b-9dfd-4f8e-a67a-6764be725ace"
                        }
                      }
                    ]
                  },
                  {
                    "id": "980e8cd2-611d-4007-be13-adf5cdbb47b9",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3908e7f9-f773-4ae9-aa6d-fb81bfd963f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "441cefee-e10c-4d7e-b98f-b1bb2690041d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddabe5f-efa0-41ba-9e52-0a038c6ff2e1",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b782adb-4a7b-42af-bd34-17b8251fb311",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dae7c9bd-0569-482a-86f4-2f77cc8ed41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19f91274-e8c3-47cc-b198-123a4e1ba48d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd1a14b-bfa1-4249-8746-ff839387de5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1219231a-12b8-4d76-b6ed-9eb5e3282ad2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "181cddb8-6a83-4952-963a-a65470837ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ece1499e-9cca-45a1-9397-92679ade8462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b6e17d4-365b-4393-ae10-92d06614c8e0",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e781ae9-ed6a-4be5-8c3a-1ac461b2ae88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd501607-dafa-4019-81fe-8f113a126756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99d247a2-e808-4a9d-9cb0-fd77472b72f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6eba9be-b9df-40ae-9210-2cc6645df284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72b082d8-773d-46c4-98a0-d511f387c301",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4825ce4-c6dd-4b60-8da9-3f57310e891e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a582793c-20bf-49a5-8348-844103e83c23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a4033f-e249-4070-907a-738c2688fe97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c186ece0-d875-49a6-b67f-e6e9408ec84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3434620b-cb03-4319-bed5-926073f39635",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dc7021b-6c69-4cc2-ac35-0a754732b4c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe2d9d2f-c269-43f0-b9f9-68cf7f3ef1db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce17752f-8241-423a-b636-687d92c64d46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4565b5fc-863e-4ebc-b1ac-a583af995c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35b55be3-101d-4372-9d19-293ed25884e1",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1a8863-414f-4f60-92fb-c7011082bb65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c199d4e6-3249-4afb-9340-c7f6096f1dc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d9f9987-771d-4e4f-bdf7-957fe52487e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51349228-01db-4be4-86eb-5db8215d75a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004e086c-8be0-4251-859d-6aa031761df3",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7833102e-4241-4978-8f77-be9d25e39a8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acbd9d3f-fa68-4aec-93b7-42a75ac73dc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "651dc322-4973-4b60-bbcc-2604fd7c4e2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8258b7a3-8347-48b3-9bda-79698bd5cc35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ed705c-89a8-4330-8c23-ef7677564f7c",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2be5bf6-bd73-472f-8c4d-d90eab7e21e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "795f7b2e-0c28-49e8-8bf0-ad663461a547"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2ccafa-6c44-47a6-8265-846cb5811026",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862bea3b-d978-40a1-9cba-df363ac7b68f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2119e605-13ec-4169-a681-00bf4e489f52",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d495f4b-c256-4112-993e-a8fd8541c328",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec0aef43-5064-4992-9b48-5725c70fe378"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c37b47-ee94-4205-9c71-a7fe068d7873",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3006f2a2-ad03-40f6-844a-39739c82129f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95ab8e2e-3260-458e-84de-5650c3c18525",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba384be-041b-4f07-b3b2-e534ee77668b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0fe6eef9-63f4-4bd8-886a-3536a1ad0801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a941ac39-8d14-4af0-a0c2-c3e62bffa94e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "783b639e-6b03-4aa8-81b1-ca6383fdd2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3c147a3-ad1d-4aca-8af7-fb34cce473a0",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98da197b-ee50-4540-b05f-6aeb9ff76871",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c236740-0f43-46c2-b698-be39d1f3469d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6596d718-81d4-442d-8324-6f438480cf7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa70cc77-04ad-4607-a03d-64b4fb53a8a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f67fc85e-71be-413c-b692-0cc607a51b51",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7cca6b-0840-48ab-b48c-5cc1b45d7947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48c6e8c5-f455-419d-961c-bd68ae15fff4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a19b331-0f4b-4065-8670-af156398ce19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "430fe2c9-1571-4f82-be04-b4873b28f38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ec21b7-af8f-46a9-9b76-f4199a079c6b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bbd842b-1266-4539-b326-03ea128c2de9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0729dfb8-4a8a-4c16-92d0-925d38f6a699"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d7cfeb1-f40f-4013-8eed-404d7b08b4d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6a0357b-048c-401f-bae4-ab4b0ea9aa6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc6ff5e6-7e75-42ba-bd19-ae63667d2883",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1479fc-8db9-4246-8f12-869de9376ae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c1e0920-f611-412a-8056-b13e198215c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c0fc9e3-c6df-4af0-9974-655d0164baa3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b90f8058-6ea4-450a-bb2b-03e0c8a9cb0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16226202-d6ee-4a90-bc60-045d4daffe70",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24dd58dd-a68f-44ef-b14c-cd68035fca4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23db7946-c1ea-4cda-a330-32313c44d440"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e0d3ab-ec36-494d-8151-9329fe0e20a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4b62936-7bd5-4d67-b4eb-98e89ef5f18d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99514332-59dc-4e44-a25c-d7f8e1733a93",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc0d0bf0-3f09-43e5-9c05-1f20ed180061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa5f69fa-ad90-47a0-8143-2f8f8e4e338b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8701a8d-6c3a-4e2a-9a2a-664784113252",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa3e8dac-8eec-4f28-8eba-7ecc8f0d9308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94c98f16-f2ee-4d92-8df4-bcaa4fa9e41d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b6f651-1292-464a-8791-dfa41a921042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07f3d351-d71a-4d0c-a771-d32ab50ec1f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f7fe17-da51-4b93-98ce-6a6b023cfcfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5812692c-1199-40c3-a620-76fe20d6068f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac62834-855c-40c1-b7e8-fce7ff3a23f9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "637dcb16-4282-420a-abf1-741d5625c74f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "278810ac-24d6-4548-ae3a-7dae677e77c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b393630-7396-456c-87c7-2b048ad466b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14ed5053-a85a-4752-8bcc-df019b6ec275"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7ead3b-a967-4ee2-bfe5-34bd5870ef21",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a0083b-2ace-4c2f-9805-ebcb483fa5cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20b30242-6d57-41bc-a777-6e52655e331d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63caab6-545e-4234-97e1-dcd4e635ce84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77171962-416d-4231-b022-615c9003e7a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7093d3-b72a-40f5-af84-79549278fadb",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7abee3-1d55-4fd8-8452-c53e7b4b40b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9819ca68-332a-475a-ab4d-5726f4dc07a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b574b3f-5261-4da5-aae1-edd3756dd07b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d398f29-882a-4ce4-8f26-689a8380f781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a6d902-5bbc-43a1-bf90-64b1ea2ccb53",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49caf643-364f-4eb8-9d60-a7969ebfe827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2918bfc-21a3-4a91-aaf8-0f61b73b99d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "974c8edd-fdaa-4e4d-b6bf-4149c879feb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e775f29f-91b5-499e-8815-def808be7846"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16acf1bf-42b9-408b-8814-3b2e942a88d4",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60f47586-758a-429a-9fd1-6850ce6bb55b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b024eef-3166-441e-a6b4-8f0c64166628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80563c67-11d6-447f-90ce-d3b9c11034fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12f9d255-c076-4f84-9d1f-0c3f349aaf7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d792a108-1006-45bf-898f-83852f9ee221",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae4f3bd-2dc2-46e6-9eb4-489b66eccb56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "336c1dc8-a106-4381-beb8-d77ee6c1950b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee312434-bf55-4ebd-98ac-182b10e99bea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ce26c47-662b-4a12-b57f-42bc7cff6244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7fd188-948c-48ed-b140-b63bf93e30b8",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b650951-bd34-4970-83cf-1440e5e0fe13",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1df9a73-561c-4805-ad30-d894361dfd44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6efc0a63-8b26-4c70-9851-e8044bc1cda2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a68f83-b902-4b49-b98e-3f3e1bebbd1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c52150-9040-4acc-91c3-0fff39b4a441",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66a0e78b-fc15-479f-a9cd-f94f401df4a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52acb2a9-90b3-4dad-b302-697efeb7f1ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8430e1a5-692a-4004-bef5-29c0c2e865c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc465ce4-f1b1-4606-9532-0988a3f78881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83fbb6cd-7d02-4455-80a9-709dc8d4994b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42705b0-237f-4051-93ad-0b8fbae619da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8956bb64-3a90-461c-804b-7354ed8581c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d86cfb-64b2-451c-b297-e7c2b3963ca3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "510b1789-a788-4d28-8dfa-1778183b2eee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bb7c82-0f58-4b72-a563-180c5a7833fe",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bf96695-aed7-41db-835c-e846817d3853",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af624ead-355b-4f0a-aa81-59824d5972ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32d97f50-97d1-4f0a-bbd9-2a6bef03c181",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2959467-9aab-4edd-8aab-f6167fb0d6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e994f6a2-c86b-4ddc-a337-067f49c32c5f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccd3877-6a6a-4f52-ad27-a14841b11779",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "af4a7ba1-0b77-40f1-b9a0-91a237f7310e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96be01dc-9567-4882-80dd-cee2a4e8deb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d941ab13-d15a-4038-8856-5b37cd2caf25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bae17e0d-7223-437c-9377-319c0eb7cb1c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bffb47e-3841-4b05-be33-495af9a82c31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1838bd8-9af1-499e-a36a-a166ae16a075"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bca913-131b-4f2d-82d8-87948ddadc50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b06b7c26-692e-440b-a085-7f82f9787548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4a09f7-031e-4919-bafe-d0a436ff08ef",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdc3143f-80eb-4c94-bf03-706f40960aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d18077c3-07f6-4fad-a0f5-27b3b66c5bb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d69b78b-5ac5-41ac-b910-8264d551e4fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed93905-ed4b-4e53-b9d0-aad96be55822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2856ef75-36e4-45a6-997a-32c40b5eafb6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2144e82-48d5-4e44-b77c-5d9bd985aeae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea379619-f67c-4e58-b3ef-6c0974d155e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c454e1-e920-4056-bd0d-559f249631f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9376749f-a913-4adc-aa9e-d751ce5e3d26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4680bd01-e457-420c-9992-89cfcc61edff",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8294aa34-3b04-431c-b7dc-daf21c07c073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96d92e8e-4935-472b-9a7f-96d3d119a27e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e751a38-bbda-4016-9bf2-1d3b9d02040e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da2cc4a8-feaf-4004-8325-79ecbf7b265e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e70a4b-32df-4b4f-ba82-0e500f64b1aa",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a58e26-c746-4753-8799-ae116075727d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a28c49a3-c35d-4e0c-b1a2-d6a80984d531"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7f6743-c7d9-47ea-9b2d-540f3141b31c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76bce0ae-6adb-471e-b465-45d7854189fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4074ec-19b0-4574-aeca-c867195aea46",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "592f767e-3de2-4e46-a6e2-23bda5e74ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d32b362-098f-4133-a422-725b3e79ffa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bce6c7c-eb76-429c-8ad4-6ad9360b403b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d5c9ecf-4f05-4828-88b8-adebf0007026"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d4221c-fdf9-4692-9c6c-ac8bcf78f054",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c670688-ceb7-4596-9719-633ef7c6307a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42d32eb6-3c03-4c3a-94ab-95522b970589"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b1a079a-aae1-400d-86ca-4ba3b4e76460",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf7cb2dc-0832-432a-b63e-8086bb78226f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "227a1ff2-c93a-485f-8649-e7446764127d",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7352fefb-9ef3-4e69-a84f-a16d19036c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49c220e9-eb7c-4820-a5ca-8c567c8bf30d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f20faa-1339-4db3-adb6-16aba47a486b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b419bc-69cd-4716-94ed-b370a82a5578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82309724-f160-4bb0-9277-6e5e9f95c1dd",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fafea0d1-6353-4f01-bb70-a24acd5e29d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbeb28b5-6f78-4f79-a4b9-516fea55fc58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c61260f8-7d90-43bf-957e-ea9fae738423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50908a84-23d4-44b6-be2a-8cbb20ea9f11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ca4952-96dd-4938-bb2c-810d80fab340",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c91d0bf-88b3-4a21-a5e8-2168f29ac67f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5403a5a-6f5b-4511-90d0-9b86b7d8cef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94cc24c7-0a0e-491b-af96-531ec27d5f87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "837d0953-7148-4f87-8c78-28aa91a8eb6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709c14ac-8a3e-423c-b54e-228bdb1898d3",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0ac541-5609-4144-a968-a6e12e4a2e11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a30681d-effb-478c-bd58-ff73d3f77978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de085e2-11d3-4cd0-bb4c-65c052c42f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eec57229-1625-49cd-9ab9-981d0ca19ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "125847b2-8434-4bf5-9c5a-4ad835f4fa2b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fe27c5-643c-4b21-a5d0-4d9ff372c562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60fce182-e341-4aae-bf03-1aec1c1565ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e2bd61-3618-4d32-a820-d4b1adee4ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80b891f5-3773-40b6-8a8c-9d511f476d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01415486-5145-4993-8bbb-4c63f4e5f1aa",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfacedca-30c1-47e0-8db0-e56dba7fe185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23db325-85a5-4b1d-b3c7-2601d57616d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6685599d-eb0c-4f34-87ae-5949a661dafc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a5eda0-abac-4d72-ba1e-3bba9367b55c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c110eb77-fcd5-4f77-85bf-2f6519b302dc",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8becb020-0595-4bcc-859f-5d075e9f9ece",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce8fa362-ee49-420b-9d7b-a53d985aebff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af20e1d-17a6-46bc-b78f-377ea343b96f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c98714e-23bf-4130-b55e-8631dc25348b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4046db-90f3-4c80-959c-f6bd69757780",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1dd3ad5-e6f6-4635-96f6-7f38c1d240b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7df2daba-b7a0-4e49-9053-f9f87d517905"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75114781-53c8-402d-8e80-f5e0d1696bda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68b18e30-e099-469d-a61c-ca0ecd940fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c67260fc-7184-41f6-9e97-f5a0768661e1",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c515d683-e25f-4479-9d2c-a6a8e0b9d5e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75dea093-e08c-482e-a327-21e99f212b0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bef98639-8472-4c6e-ae85-b2c0f2910e66",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa351b5c-06b6-4ad6-8023-1a58b2e83cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2c898f-862f-4cb5-b063-fdd28cb19aef",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf712e8-f198-434b-b24f-a21c4a9c629e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a66d41b8-d776-424c-a960-eb6e95089f5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30d6723f-ddbd-448d-86d0-f0f5dadf8c44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5b7516-ca33-44e6-b710-0d6c2f4543d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08aa3f65-5cfd-4390-b009-b485eed8f27d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12273c7e-db42-4e12-9d1f-addac9b2f96e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e48a874-b0c8-415e-9cc9-8ce806c7b710"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86995648-1fc3-49f8-9852-765ce4d05ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f84c14b4-51d5-4aba-a4ee-16a2a0282811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9533be8-d5c3-4e9b-98e2-3db4ea275068",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2320ded4-4f66-46fa-ad03-ccd7b0d1a77a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51a83de-c39d-4b5e-a966-53d152006592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42693950-e552-4410-897f-ae0276489a22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d0d53aa-d3e6-4e35-b167-d7bca772dc94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bce9813-1443-4a2d-8fe1-0978b0f3c337",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dbed25f-3aa0-437b-8902-c7de9fc63395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0000a866-e03a-4835-9847-b11a28e4cbcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d4ae0a-591e-4dcc-a8ab-2de68a4f5202",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6883ec99-dd3d-4157-b05f-8aaca8fcbd66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f352a8dc-8d1b-4333-bd82-c35aa055ba89",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603b6e3d-1e7a-4417-9b30-e63c0dfff65f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d14fba-c411-49ed-b677-1acee06ef14d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "199dfd05-801c-4b54-9d38-139b3be6196a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f147e1a-e40f-4efd-8b77-0b171701f92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beb92805-9baa-4f12-802e-b3afdb816b59",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8212a426-9ca7-45bf-b5a8-df45f8fb93bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e60b384-c34d-4f71-9435-5909dcc2f28e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b165b03-3daf-4005-91aa-6696d07d5a9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b279a2c9-1160-4e64-bc67-37a94c41f21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e0504e-b0de-40cb-94d5-4dc318b77a1e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "783083fd-3424-4069-b8dc-8f82d006fd93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed7e176f-d044-4fed-9d14-6eacfa44f2e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0270e19-c2d5-4632-a75a-96e4601d19c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eaa14c6-1ae1-4299-a763-d7586010a783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a1135f-904b-4b9c-b289-f40e52301e7b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d49c6603-ade3-4180-9dd7-d473770c3df4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87022336-969c-4602-9718-9130ec5b2804"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c6c421-af61-492d-ac08-26638ff37309",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07497f90-4651-4b77-9f08-541c9b2240c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25438a8f-3e58-4205-8de2-2639d3638f3b",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03c266f-4303-4308-b97a-f52f087591bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90b8f914-8cb9-499a-921d-327988359ee6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eafe8dfc-136d-42e9-b665-77d3c93f005a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "659c45ef-9498-4e33-9788-f58c82f88b52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3ac76d-3d7b-4eff-9e32-42e8461f05bb",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33168d62-9741-475a-b59a-1774c53244ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8e56d0d-cbb3-45e7-bc41-d2149f352b35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79f5e9f1-66fc-4e50-af51-db84778a8262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584e1f8e-6906-4a73-90ea-a6d638b616c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6593be0d-63e2-481a-8cc6-f79f94841a4a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a030df9-9925-47be-aa30-d52ba43da949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f184bf-4aad-46bb-a79f-bb2fce667fe0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2270da4-a99b-422f-8c48-34e5eb0d01dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80cbd409-30c6-4baa-b323-0c732ca3aec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1cb8cad-804d-4a82-9a18-e88235657a5e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8922fbf-73be-4842-9c06-f2fa1688e259",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad172b6c-da79-4299-91ed-d224711a4ddf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ed0984-7b92-4165-a507-d2da0da5a033",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fcebc2a-049a-4f11-9cf4-fd8f05d9ed03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4138c17f-42e7-46b7-8390-14998a2ac47c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f90fb01-7037-40a6-8713-59a26aa8a2a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca6807ff-94fb-4990-9dbc-716593f38ec9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07c322b-b2aa-4e02-ad1a-1c7d0affca4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0773bd6-c86b-4cfb-81b5-813dfb8e386d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce41b908-a27e-4bdb-9dd7-e6c15e19ac15",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e1a5af-d609-45bf-83f7-210b9ea425a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50f84992-9a9e-403f-a6fa-b147b1667eba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96ef691e-1180-4df9-b398-fc0376ef8d1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b27e9eb3-eff4-41ec-88c0-4b5f144fda52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be20e73-7f2d-4538-89b7-78787bddce85",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed032e4b-7a50-48c1-a1ff-8cef0145f60b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ef28910-64d7-424c-b0dd-a1388e17459c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09d6d78e-5cda-48e5-93ff-c269a0bde9c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51810efc-f9d3-4a7d-a2c6-baa505927257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a5b127f-7ab2-48a7-bd29-617883220b29",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaf5a5dd-6c59-4a30-82c3-cbaeb2c61482",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab0e264c-94b2-4698-848d-e5ffe488d99e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa46179-e8e7-4b3e-8770-9cad656a7636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aae2efbf-a4c5-4c49-b505-495d6b24f059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316cc4fb-a1bb-49c6-be4c-ff0c93ded42d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "668df406-4e0e-431b-ba88-dbf351165ff5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d9da89e-ce12-4c6e-b476-9311ddf62b2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4072ba1-57da-4536-9931-1f1b05f51e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e4dc20-dc70-47e2-87b8-23b7f7423884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41bed6d6-bf7d-42db-8d67-6ab0b4b32297",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6053ea-b8b9-42fd-9f9f-574b277fb596",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "839f7ecb-1238-445f-8252-c916d52793cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4949faca-3141-44e2-a88d-4841a3c0da15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac27faaa-9f5a-4bbf-843f-68975b8c1c06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3dff53-b467-4217-bbe4-09cabd4046b9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310e7c21-ab3a-4a8a-9423-6809c655faeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b611631d-8138-471b-adda-39eae40a4a68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d779a8-1594-4000-843f-d3a0c3e1c51c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eac5e54-a2e3-40fb-88f7-e4c292663089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e97e62-9f48-48fc-83f8-f85e64386d59",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e0da9e-3f25-427c-b9e9-53b60b4cc9dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94e5cb6e-bf5c-4ec0-9e69-df1d883aa11f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc77b1b5-4f3f-47fb-92b4-f4548cdac8a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fc525f8-1b40-472f-a043-4b9803ad5c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58162b6b-9102-4e09-983b-3c6028a84c68",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3781ad6-eb5a-47c1-88c9-cd3635b0d63e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b1140272-03e8-4a25-bd64-fcf952458b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be20a2bc-49f1-441b-bc12-e87d00880c7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce208d2b-4689-4b50-92e3-fe91aa9a1e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477e99c6-b93f-4be1-ba51-0fb08a8d4cc6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcda4a0e-4f98-49c7-81f0-f63d4ad4f171",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "daca0940-4f69-4853-b610-73e2d2f89f9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4abcc6-bd9b-460f-bc4f-eb734742b603",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c5c46b4-4bd6-4222-90f3-fd765d9ba70e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff623d6-19aa-4955-be0f-cd6f647ff389",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c75a3b-c295-49d7-80b6-023da79e938f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "faf4493e-03ba-4a96-b861-02285e78e2c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1d4c20-ed5c-437b-9715-aa3a1354506a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1d6991f-f726-40bd-b284-e5b4703e22f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d30f6cb9-2ac2-4607-8669-6ca3898d7d9d",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1a68851-4f8d-4cf8-a72c-d092df92e705",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fc5f489-c1df-41c7-803c-6e76b6429563"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f5ceacc-0801-4b21-b327-15922d529660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e890c426-567c-4f12-98b3-f9a432255950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94a25510-97b6-412f-93a3-40a3e3ee7304",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8c0c7aa-ae8f-4b7c-b6dd-7c2c08777d4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6461c498-77a5-447a-a757-fbb8139c059c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dff5525-a5b7-4a3c-b936-cac9675136d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aba29ea5-f867-46f9-b925-17db9c880b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f197db6-5c0d-4ad7-a4fa-aa4070ac459b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887a6524-ddf9-4d64-9f7b-9e9f175ddd20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26ac056e-080f-446a-ba72-def986e9e1c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed7a961-3dcd-4467-b321-9207a063f074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac8de418-ef93-4b3d-980a-e0aeb461ecc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54b2365c-8030-4627-bc51-3fdcc59ecf9f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d07f5b2-aaf7-4a0e-96b6-6c11a3b9c89e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e6a99ec-22f1-4de3-b539-79b7ee79975c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6099c27-2711-4705-94b3-6415f71f295f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dc78d97-716d-4491-b74d-f13e1f20864d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16dbd667-2810-43fd-83c9-c058fde1b3f7",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461cbd94-0774-4c60-8398-1deaf76274fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f97444d-2672-456d-8846-4e381cec373f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81c3ee0d-f22f-48af-b26d-a1e0fdd1f735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36d14533-71b3-4bb3-813d-3172c9f26706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69aa13e7-014b-478b-8380-a3477fbcd999",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cfad8b1-e3a6-4368-b452-1a81d3d50362",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cd8e830-b500-43a2-85f9-794470f6b765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a5e008-4c09-4079-9110-2e66d6cbfde6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc3efbff-8a2b-46a2-b2aa-1feca8ca969a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c4cfcd5-08bd-4e0d-bb96-f14668a2f415",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a48f960-cc2a-4eae-9644-cd0f3e8f69b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13222675-adcb-41c3-94d4-dcf731ba0cdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90020a6b-aba8-43c8-80e1-452716b9dc15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab196ea5-c0af-4fc1-9f72-d9d9e9bfb251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9198b6ce-0084-4bc5-b086-7eb8eac04534",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a1274fc-64a8-4850-b0a0-5971da1d8083",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "547781a3-57ca-4c37-8fc0-73a31fd60115"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd744c5-09ad-4c2d-8d6c-ba86f41c3a0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c5d980a-ed89-4855-ae45-73253d1e3deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e4de495-b843-4d44-aa71-8847599133f4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7d06a1-9bef-470d-b99f-090390eb484b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2ae4b2e-c9f8-4e10-9fa0-8d6673b84d8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ffe715-26b1-4c0d-8013-a346c5002958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de915c4-dad2-4c24-ac7d-635d413f8aa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "697cbc0d-c379-4270-9de5-066678e5dbb1",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fbee2f1-9e92-47fe-8449-4c00917fe3e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31f62b90-fdda-41be-9375-e997b3657a6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "712b96ad-2bb1-49b2-bb32-bf58243a3f06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84558b1e-25ca-4263-94b7-48edacd6dc99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c042fa8-9156-4fc4-8c70-b03500ea276d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06fb4777-b21b-4ea4-868d-85dc2891faa5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d344783-4aea-4445-91e3-e82fed517d06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "050c8043-5db0-4882-bfa9-eecae338151e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27b0ffe5-c808-4e1e-998b-bd5d9acd53ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779d322e-da5c-450f-a4d4-d24bfb0a619f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d7aef2-8409-4dfc-9286-2926136fe94b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0eb48fb2-d307-4900-8b22-8f30557eb599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13ffa0c5-c655-4215-97ca-b98ccb88b17b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e294ca5-d869-4c76-87ab-42489381762f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "968bb888-2882-43a1-a6cd-98dc9ad4cee3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee68b42-8be2-46d6-9150-0dfe28df3d06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4216e2a-76cc-4eb1-81e6-73812d13fd71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1141a74c-4d09-4e84-bd03-9b54d93c0213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c94380a2-f385-4243-a6e3-7861c0ebf405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47793946-46d7-403e-bf29-c37497e0e4e8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750983cf-e3bd-4edd-bb41-b08f621d40e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b72e7d3a-a89e-4523-ae70-56710469bb20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c9df66c-cc03-46f0-bd94-296df1e6ef3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78079cc3-806e-403a-9395-f80999ffd228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8379a7cc-f71c-41ea-9310-acbfe2d7092d",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d40a1e6-ad0a-4db2-b810-48a241f868eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ca3e5e5-5176-4c8a-9092-9f88c5a30fcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ed1120-b85a-47b7-b224-b9fd86fa11cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416bcdcb-c8a9-4bc7-b476-e14009fd0476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8582a909-fcfa-4379-9984-ff81f2d46bf5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffaa323d-9b90-4fd2-a5b4-513ff47cb7b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a604bf7d-4b23-4c7d-a366-e68fbcfacd23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfbffc03-573b-473c-be52-28d0f09f4629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82be7b2f-6536-4527-9008-42498498362f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfd6dbd-6266-4648-881e-63bda80da0a7",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47750005-9efb-43a4-b5c9-e81315fdab16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a635c84-7540-49cc-b525-7a6d1a898776"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7d388b6-6257-4355-9be1-afda97afbd69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3d4f4c9-f13e-48ce-8785-b2a288a96c6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398265f5-0b12-4193-ad0a-1b43c151f32d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e5c321-320c-4614-812d-ae3afc32f9dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fd5dedc-0132-4cd1-bb6d-67e888adaefa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac582bea-03da-4aa9-8cde-807e3e42811e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "351be771-6be5-4dfc-a0ca-abd2b2549662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb19c05-e537-4243-817a-6251e032eefa",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431d4957-1940-473c-833c-d9b34ef064ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3a43541-ba11-4cdd-810d-ae3e9e60483b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52e74962-d9cc-4b7e-b23b-8b3a7159db85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dda149ab-6cc1-4d1e-9433-56d78133f9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdf69e4e-b8cc-434f-a166-7dc5d64c9c7e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0db8ea5-7b89-40c0-ac0e-cd6d588a899b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2dc10bb-8528-453a-8351-756abee520b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f411354-a492-4167-8f43-f7b6fab3c63e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d528895-d8b3-44db-9ca6-8f6430eaef09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c842dc9b-ed23-4587-9535-ca10593d83e0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8753faae-3057-4f47-b437-b056cd3e3f6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cfa9722-34b4-4c09-9de4-eae57c464556"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "881c7e33-8abf-445e-9ece-35d240ecca49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da2cd95-c5c3-42ac-a359-367c0a2e1361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b7b4c4d-5e9d-4280-b957-b4d83d07229c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "257dafd4-703d-48fd-8326-56daac695d91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad3cf5d9-20ea-4487-adfd-d8b608081d2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea5d0f78-e10e-45a0-ad39-5230a1bee900",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40c0badb-2e63-487d-b062-df0f4e37a09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1972d689-9fa1-4c07-a253-c79c1ee3998f",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ad20086-37bb-4fde-b761-bbb2d42a0101",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9e629cb-3188-49c0-99b9-5bd863c142d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "957c812c-8fd1-4941-ab21-eac36a862ce4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5207869-bbfb-4483-8306-80f15e98cc4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a80f2261-57aa-4903-8c6a-bc450de97a0f",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcda6ae-ca6e-4d8a-87ac-570ae79af71d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f58fdb26-59ea-48c8-932d-cfe1d03575ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ff789cb-03d4-4c29-a32e-b458276029e2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ab1e0fe-f8e4-49a0-8f70-5787359648d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca23863-e39b-4ae1-99ee-d322985c1f91",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9fef77-ee9c-429a-880b-c2d290333c01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "233c7921-a404-4c91-a3f4-2257069e2484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b093a39b-fa68-4d87-b7d0-18feca6b1905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad797471-9203-41a9-a2d3-875211f4403c"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a71113d-2ef0-4251-a4a3-9ed95392a743",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "224b09f7-481a-4e71-8928-f4f0febcd8ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4ce87485-10fc-4c41-bc75-244a2eb55257",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4b26aeda-25db-4be9-a96d-3cb3dcac7e89"
                    }
                  }
                ]
              },
              {
                "id": "9b5f43f0-9b80-4109-a2f8-00b2525279fd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9dc20b44-e976-43c4-9286-901cd2c55900",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9313822-4bcf-4224-ac94-5d667db25a56",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ae601536-b53e-40b6-95df-97a957761d3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b52979c-ea6d-4d6c-824f-9993cb2b632e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66f655a3-52f0-4d06-b495-12ffe7bdb137"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2eb5f23d-2b79-45dd-afde-4da0607247e0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "91b3d314-fb9f-4f11-be8e-5097cc8c2feb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb1cc3a8-6939-44ed-b270-d59ac48324f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cc6b834f-f45d-4476-9873-04fe754e25d8"
                    }
                  }
                ]
              },
              {
                "id": "5b9438d9-4407-427d-b2bc-cbebb5e2f4ce",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e86059ab-b5f5-40f4-a36a-0898ec3a6939",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a3906ae-7bd6-45ca-8234-a637f76f2c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "deecc803-238d-4e58-857b-558f7e4e8d46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e1edf8e-57e0-4e09-b578-4601673fce02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac902b29-efb6-419c-87ff-a02fd5526934"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "819f81bd-9a0b-45b3-b376-6e284d4805c5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c380343a-e4a7-465e-858e-bda9aa651469",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9cb79c9-f444-4bfb-a407-57fa40fd3f11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "564819ee-05ce-4275-8e42-4788084ba175"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d0a7df5-d05e-4790-86b2-1e757af9db83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62f403d0-7c55-4f31-9900-b7242ba824a9"
                    }
                  }
                ]
              },
              {
                "id": "48fd8209-75e8-4f14-bfe4-cf0cefca1c1d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e372420a-b5eb-482f-bbdf-2b6aff867e55",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ca525966-cdef-4594-86ea-6f9d57cc3ef5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b29b8b5-cf9c-4d47-b085-66e5e00ad27e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "26774c30-7089-4cea-8d2f-f97b53d229bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ccbb6097-c4b9-4719-846c-8fbf30fafdb0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "018b503b-8a47-420f-a758-40206fa92fee"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "de17c6d9-7964-457e-bd65-d3c0e78d8e03",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "00ce262c-1a40-4ec7-86b7-3dcc518cd3c4"
            }
          }
        ]
      },
      {
        "id": "d2e16147-2e32-4e31-b83d-f63a4cf366e7",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "98f4bb5e-6aa7-4a88-8577-732225dede1c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ac6660e-9667-4c76-be03-6944c74a383d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7a93e4dc-4023-4f99-948d-7376b9f643a2",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883e7ea9-aa28-477b-b9dc-af78f9a0a4e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d5136adf-d7f9-49f3-ad64-05fb9096ddc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "459d2218-9c4e-4a2d-85d4-72486be6dfca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "58c67672-b73c-44ea-b910-142704afa31b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "267509c9-a5b9-4e1f-86e4-2950ca06005c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f940f84-70d7-4e5d-9c16-a73471d75069"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9140522e-e928-4fa7-b84e-92398298f3ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fd3861b4-97cc-4bcb-8233-e0bb915bc48e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b7843286-e325-4016-b48a-936d81a1753f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2de5dc98-1b68-46c6-82cc-4d382d5b6cac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "217a7acb-6b5c-4246-9c7e-29bfb155291d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "399d12ad-8c05-483d-9ca2-25ea7f076c59"
            }
          }
        ]
      },
      {
        "id": "2ce046e2-ce53-4e80-9d4b-da9b7f8bf16a",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "ffc1cf39-5a52-4a15-9dba-956bbed7372c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f304f26b-afcd-4f4c-8e18-6316ae5b2b54",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0b022571-ecb7-46b2-bab3-380d8447502e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01496048-ccc3-4972-a762-aff1794d3462",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cbe48df6-01bd-4fd6-952e-ea92f889287c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41936a9e-13b7-4a10-ba6e-9b7a8b421cb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "27c69d26-a66d-434c-9541-8bbdfa4d66f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0a8cc7bc-37e7-42b3-9bbd-52863feeb323",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7200f556-d82b-4bb0-96f4-0b92dca26e22"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b2bcd4d-d46d-44af-9ff6-5e0dc6a758cf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae577cc9-cb9f-4bc3-a416-308044581cea"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45f1e50c-2dd3-4e4d-9d61-c3142147cfa8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "25e2d87e-4dcf-4484-a81a-e3dbb6ca1336"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ddc8954d-5792-4199-b8c3-b3d4126500e2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c1c34b1-ebc6-4206-b755-18556b0dc389"
            }
          }
        ]
      },
      {
        "id": "1ec6d914-3ee5-4b2c-b301-78c81ae8372d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "460eacbe-7d00-45c8-b895-9d2c77b37990",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3d64fc44-8403-42e1-9fc0-0d3586fa99f1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "efc3b4c6-97bc-4b50-aa80-9bff7b6f21d9",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4913d0ac-1587-41b6-8892-98f669eff173",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c91fd50-dd79-4ac9-a49d-880b11a4bb5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2eec2a2-d064-4215-9cce-3e84a29a9a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e45c5d4-c829-469a-a30b-0a4a34803553"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "df8429b9-80e7-4647-852a-76521a9e62e5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5bf16cb8-f7d8-4daf-9046-aa6a14a5aaa3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48942200-38d6-49de-934f-4b8fa7e0afe7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b878193-379b-4ca5-9a53-e4d4404583e1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d672800-dcee-4f07-afdc-a24559c4f705",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0e31c085-9935-49c1-b238-0bfc36085b29"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06ad219a-572e-4a80-a67e-38173a47189a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "584f4e90-7cb0-44a6-a640-f8ff3fa630f0"
            }
          }
        ]
      },
      {
        "id": "403fa088-f4a9-43ea-bb98-77cf97cf824f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fab55956-a3fc-4a5b-a7d6-c09c1fe30a77",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5ee3f30f-daba-4ea4-87ef-708efdda29bb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4dc1e106-8f3e-4861-a30d-ad2a34497d7b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bb9c8754-2406-44a9-b00c-41af7c2f69a3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e73d978-d5c6-40f4-ac56-258ced3b4c0b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 119.12301587301579,
      "responseMin": 6,
      "responseMax": 963,
      "responseSd": 91.2742506698848,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1716511024009,
      "completed": 1716511062412
    },
    "executions": [
      {
        "id": "3eb805a3-90b1-45a7-a8c8-f0fa4a3c3be8",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "954e60f0-5fda-40dc-8d4b-32a99bedd74b",
          "httpRequestId": "c4771434-5f6b-4a95-90fd-21b250730c0b"
        },
        "item": {
          "id": "3eb805a3-90b1-45a7-a8c8-f0fa4a3c3be8",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "fcb094e5-c891-414e-ae42-df4815548225",
          "status": "OK",
          "code": 200,
          "responseTime": 46,
          "responseSize": 0
        }
      },
      {
        "id": "82c06328-6c3f-4403-81ce-168ad132f9a4",
        "cursor": {
          "ref": "55275cbb-8adc-4584-a0ab-9282cafb2891",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "dce3e5fa-ac38-4d19-926c-808b2b563e80"
        },
        "item": {
          "id": "82c06328-6c3f-4403-81ce-168ad132f9a4",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "041c0ef2-cb02-4914-b2ba-17f6a9245586",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "8f0050f3-0bac-418a-97ac-557f699f697a",
        "cursor": {
          "ref": "665ea35a-42d8-4d8e-b9ba-c3ec8cbe1b96",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c05b670c-bb35-4c4b-bac4-0a45648180cf"
        },
        "item": {
          "id": "8f0050f3-0bac-418a-97ac-557f699f697a",
          "name": "did_json"
        },
        "response": {
          "id": "3831695f-022a-418a-b152-55de759aeaea",
          "status": "OK",
          "code": 200,
          "responseTime": 253,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec3231c-9165-4302-88d0-65c162ae4d93",
        "cursor": {
          "ref": "c0e014ca-bbac-441a-bf11-e6d0501a6c08",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c13b281a-83cb-4450-8552-efc7e9e72713"
        },
        "item": {
          "id": "0ec3231c-9165-4302-88d0-65c162ae4d93",
          "name": "did:invalid"
        },
        "response": {
          "id": "a3362052-221b-4e38-abcf-2b5d3e380845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ec3231c-9165-4302-88d0-65c162ae4d93",
        "cursor": {
          "ref": "c0e014ca-bbac-441a-bf11-e6d0501a6c08",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c13b281a-83cb-4450-8552-efc7e9e72713"
        },
        "item": {
          "id": "0ec3231c-9165-4302-88d0-65c162ae4d93",
          "name": "did:invalid"
        },
        "response": {
          "id": "a3362052-221b-4e38-abcf-2b5d3e380845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dc3252f-0701-496f-a7a8-84910dd3616d",
        "cursor": {
          "ref": "220fd3ba-3a46-4744-8a11-b8da762ac5e1",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "7f60acb2-f992-4913-9523-0dc998971b39"
        },
        "item": {
          "id": "5dc3252f-0701-496f-a7a8-84910dd3616d",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f3687613-398e-4065-bbba-739b132deb53",
          "status": "Not Found",
          "code": 404,
          "responseTime": 223,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1097638-5569-4154-a96a-02a799a6bc3f",
        "cursor": {
          "ref": "eb9b3f3a-e8da-4935-a00f-9b5ff5d19079",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "ddefbdfc-02ef-4cfd-8fd9-330fb7cc0ac8"
        },
        "item": {
          "id": "b1097638-5569-4154-a96a-02a799a6bc3f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "94d45675-9838-4f87-8daa-c7338435b668",
          "status": "Not Found",
          "code": 404,
          "responseTime": 90,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bef6a28e-49fe-4cf6-bf64-4669977b9634",
        "cursor": {
          "ref": "b063dcea-e8be-4af2-904f-50e51bddba54",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "65907e8e-8336-4eae-968d-1c2d5aecbe88"
        },
        "item": {
          "id": "bef6a28e-49fe-4cf6-bf64-4669977b9634",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "9a0da85c-690c-442f-bc7e-e310d5977135",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86b0991d-f73f-4950-9bb5-bd3fbbfae679",
        "cursor": {
          "ref": "11dff239-21c6-4a40-96a2-65e20099b608",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1d1a27ea-788e-4a04-9fda-4d9fb1e36936"
        },
        "item": {
          "id": "86b0991d-f73f-4950-9bb5-bd3fbbfae679",
          "name": "identifiers"
        },
        "response": {
          "id": "18b492b2-8338-492e-ba16-351b448cf13b",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7308630-3545-43cd-aa42-83e58ea541b7",
        "cursor": {
          "ref": "14d46c4c-f99e-4647-8a82-57eeed46aa27",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "8e098294-7972-42ad-a225-32b92babfcde"
        },
        "item": {
          "id": "a7308630-3545-43cd-aa42-83e58ea541b7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "3d4d8900-802c-45d4-a193-5f2fdfe0fb89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b6849d5-2aa6-41e9-82c4-3ff67a4fa000",
        "cursor": {
          "ref": "89ea68c2-053c-4f3f-9c17-da5b8b876eb0",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "25f376ba-06fe-473c-ac1d-50303c130025"
        },
        "item": {
          "id": "1b6849d5-2aa6-41e9-82c4-3ff67a4fa000",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "36471a0f-ed13-4a33-a78a-5fd4e18a9449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c5807c7-6f63-470a-b3bd-8d89a5480dfa",
        "cursor": {
          "ref": "eb115d9d-724f-457c-be23-f4ff18d43c08",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b5525f1f-f93c-4ce5-8f14-ea3fd5865800"
        },
        "item": {
          "id": "3c5807c7-6f63-470a-b3bd-8d89a5480dfa",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7271d41c-dd79-4c1a-ab2a-239cefbbf716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914e4d79-45eb-4735-bd3e-cec7774326aa",
        "cursor": {
          "ref": "7317f856-8b4e-4e5c-9f7d-143f233ac135",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e5defbba-b447-4b05-a809-4cff78999ccb"
        },
        "item": {
          "id": "914e4d79-45eb-4735-bd3e-cec7774326aa",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "d70c05e7-4d70-4572-a333-9d0a6bdfc04f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255a90d5-eb1a-4f3c-bf4d-5421e660f659",
        "cursor": {
          "ref": "268c73a4-179d-4eae-9c50-93bfe0d6618b",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "25df757c-9552-4697-9af3-03b57b1f200c"
        },
        "item": {
          "id": "255a90d5-eb1a-4f3c-bf4d-5421e660f659",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "127cbbe7-1fee-4c6c-9c1c-f8d590ca8c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c5fa2b-84e3-4fe9-ada1-f12a102d0d1d",
        "cursor": {
          "ref": "d4aff7e9-3986-44d4-96b1-c8a6cda7a8a7",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0f27c2f9-7440-41a5-8b17-ead72a7c6fce"
        },
        "item": {
          "id": "63c5fa2b-84e3-4fe9-ada1-f12a102d0d1d",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "e7fee159-acc8-41a4-b9ec-1729517b80a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3b7e7a-a599-4a59-a0c7-3287909c6eca",
        "cursor": {
          "ref": "db96d3eb-da37-4326-813a-4de53f885911",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "6233c898-5171-437c-9b7c-e4e92d06bd2f"
        },
        "item": {
          "id": "5b3b7e7a-a599-4a59-a0c7-3287909c6eca",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "64229a1b-628d-4468-b06f-cc78afe112c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8033fa-2262-4edf-83a0-626add1af4d2",
        "cursor": {
          "ref": "cd09a915-52fe-481a-901e-523a72cf5ff0",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "92470ee7-4680-4a72-91e7-430499b95dfb"
        },
        "item": {
          "id": "2b8033fa-2262-4edf-83a0-626add1af4d2",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "d66f156d-9d76-4ac4-86ba-c38bf68287c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b143a9-c608-4873-b716-443c35decfa8",
        "cursor": {
          "ref": "0729c184-afe0-40a1-add4-09e8f9640595",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "8daea4f2-edfb-4754-8d01-dc0a9405fdaa"
        },
        "item": {
          "id": "80b143a9-c608-4873-b716-443c35decfa8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "93f363c9-b485-4e78-8875-0e64277f7720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b491ad21-074e-4974-b2db-bb63c33c1d0c",
        "cursor": {
          "ref": "2f516c27-7b3f-4118-a06e-c84de8ea471e",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f5aabbdf-2f57-4a19-bd15-c24a567384a0"
        },
        "item": {
          "id": "b491ad21-074e-4974-b2db-bb63c33c1d0c",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "47ac9cc5-876c-4490-ad3d-2f323085a839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ff4088-60e4-4f87-b03a-acc45ad793cc",
        "cursor": {
          "ref": "e6fce843-2d04-4f79-8be1-91b71dc14bdc",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4615a0f0-4fdf-46bb-87ff-f303b2017722"
        },
        "item": {
          "id": "29ff4088-60e4-4f87-b03a-acc45ad793cc",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2b07b45e-9a0e-4f16-836e-932370599386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5737fd07-3444-4d69-93eb-1f830471cb5d",
        "cursor": {
          "ref": "bf318b6f-ba85-415b-9e65-efb354ab9f42",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "87e77b27-c865-401a-a141-828242b0211f"
        },
        "item": {
          "id": "5737fd07-3444-4d69-93eb-1f830471cb5d",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "738975c8-6f19-4624-acc4-773e53d06ef4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4abec7c8-74a0-4a56-bb09-0e309af3b5cd",
        "cursor": {
          "ref": "2b007751-0bb9-4782-88e2-65070c90a1a5",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6e2ba14e-469d-490f-b659-55fc7bdaa5ad"
        },
        "item": {
          "id": "4abec7c8-74a0-4a56-bb09-0e309af3b5cd",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5de1609f-7f7a-428d-a2ef-08a2c10608f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2093a2e3-0581-4673-ac82-9ab44698d0a1",
        "cursor": {
          "ref": "5c6bbdb4-d9b0-4656-9dbd-2dc5d947f72d",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "fc1bfe5a-767b-4916-b464-7514a030aed1"
        },
        "item": {
          "id": "2093a2e3-0581-4673-ac82-9ab44698d0a1",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "266cae05-b18d-420a-87a0-30bc5f994dee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8012f5c-5bf4-42db-9c18-de460b616679",
        "cursor": {
          "ref": "6ca5a404-3e42-428a-8cf7-a1d2111c193a",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2097ec76-f7c3-4107-be3f-ca002db9fcaf"
        },
        "item": {
          "id": "b8012f5c-5bf4-42db-9c18-de460b616679",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c5a159eb-597b-41a2-99eb-8c651e282321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8415ac3-5e15-45ed-ad58-8e23756560a0",
        "cursor": {
          "ref": "990ea215-db4c-4e07-be8e-70f2eb297f34",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "fb51b154-bfb7-4c02-a437-a05d213092c7"
        },
        "item": {
          "id": "e8415ac3-5e15-45ed-ad58-8e23756560a0",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ada32e79-c8c4-455e-9dbc-85ffef4d2b74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab7004d-bdbb-4990-9a43-174bcde7b8cf",
        "cursor": {
          "ref": "499d3f3c-a6dd-44f2-9b74-63cbde910d95",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "42eb82c6-2df9-48f9-a2c7-31c72754c384"
        },
        "item": {
          "id": "4ab7004d-bdbb-4990-9a43-174bcde7b8cf",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7cadf2a3-d9f3-4507-b462-9283cba7a64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cea9b492-4149-48b5-a3a8-3dc89f170864",
        "cursor": {
          "ref": "0f5fe0d0-2880-4a31-ae10-9bb2c4bbdde5",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "4c0198da-949f-4d99-886a-7d50be790cbb"
        },
        "item": {
          "id": "cea9b492-4149-48b5-a3a8-3dc89f170864",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "db423119-a1e8-439f-916b-a5d110d517f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91c94430-6c3e-4f08-930d-248c21f3cfac",
        "cursor": {
          "ref": "e1be5665-535f-40c4-b556-036bdeb47902",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "35f3db40-3e59-47e8-9c39-b56cc2541dc0"
        },
        "item": {
          "id": "91c94430-6c3e-4f08-930d-248c21f3cfac",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "255ca45e-d65d-4cfc-84b5-6fe6ae6d502e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922f8651-f7a4-4534-b172-fe1eb3a82e68",
        "cursor": {
          "ref": "dc287001-73f2-40a6-8438-58ffe0046deb",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ccd53f1d-73ed-4ca4-82bc-db3c28ce57eb"
        },
        "item": {
          "id": "922f8651-f7a4-4534-b172-fe1eb3a82e68",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "2c87514e-8127-4a2a-a39e-b5127d26a67c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ef5d07-aa22-4448-8547-2fc6810004ec",
        "cursor": {
          "ref": "e1d7a1c9-d7fd-4597-907e-f883bcf0982f",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "34d59ef8-1025-411e-8a0f-f1247ed57302"
        },
        "item": {
          "id": "44ef5d07-aa22-4448-8547-2fc6810004ec",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "35fe51ab-9723-4769-9a3c-083566a8e8a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eed31dc-a638-4301-bea5-933e4dae0b89",
        "cursor": {
          "ref": "6baf044e-081a-4273-934c-5384eb243f39",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "aa7e75e0-b504-4f7f-b2d2-5e64f9af6c58"
        },
        "item": {
          "id": "5eed31dc-a638-4301-bea5-933e4dae0b89",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "d99cb5dd-78e6-4a38-b31f-cc24f95aec2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1744815d-8d3f-4d38-afcb-072de600ee97",
        "cursor": {
          "ref": "936bdeb4-a5df-4a26-a9d3-7ac1ee4894a4",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ccbb16e6-35bc-4595-8d14-733cea655119"
        },
        "item": {
          "id": "1744815d-8d3f-4d38-afcb-072de600ee97",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "c44e3564-c545-44eb-bef1-be2a256f6beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c249ccab-f514-4196-86fd-746a740f81d0",
        "cursor": {
          "ref": "779f9d32-2337-45d4-b530-b414cfc17100",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5ca6592b-2898-40b9-8cf8-aa1e7191cb1d"
        },
        "item": {
          "id": "c249ccab-f514-4196-86fd-746a740f81d0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "65da15e2-ae37-47b6-8c8e-53817573b1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d985f4f-0b57-41ca-add4-78c7ae0f9d57",
        "cursor": {
          "ref": "b39dcdd7-40f4-4466-8c05-68cef494ec2c",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1f75c2c8-250a-4ef5-ab2e-87a79db6c2f2"
        },
        "item": {
          "id": "6d985f4f-0b57-41ca-add4-78c7ae0f9d57",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "02bed4d4-fad3-4cc4-9122-936e7e019786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "534157db-4234-4869-a57c-e50209360f71",
        "cursor": {
          "ref": "4362b87f-88a5-42e1-9fe5-c9f13cfdd1b4",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "c94e824b-e7f6-4a43-b989-bb94dabc6a25"
        },
        "item": {
          "id": "534157db-4234-4869-a57c-e50209360f71",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0ddb4f68-0c93-46c3-9ea8-c153d8166e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7273d526-2331-4963-8c1e-9c13169ffe88",
        "cursor": {
          "ref": "477bb2f8-855d-460b-96be-f49f101a12db",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "7b0b99d7-351d-447b-87bb-e7dc15238e7c"
        },
        "item": {
          "id": "7273d526-2331-4963-8c1e-9c13169ffe88",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b91cc33e-3a96-4b47-9952-17d9979cb048",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "839ae90c-949c-4893-abbc-4013426b78e8",
        "cursor": {
          "ref": "edd9616e-51a7-49eb-ae4f-53bc7e88929b",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8afd3771-63b0-4948-903b-71591a4fd12c"
        },
        "item": {
          "id": "839ae90c-949c-4893-abbc-4013426b78e8",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a7bcc51d-fa0d-4cb0-a0fd-c81b4f8ede2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec626470-51bd-44e3-aa43-19bbcc523501",
        "cursor": {
          "ref": "4d4336a2-a8d7-468b-bd65-e48f39c41c61",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "99ac4932-bd26-43a2-a46c-9e56e3b218d1"
        },
        "item": {
          "id": "ec626470-51bd-44e3-aa43-19bbcc523501",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cd20de5f-6dcc-4481-9d30-ca672ede22b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac3b7e0-b5f4-427f-8b7f-341af0bf7981",
        "cursor": {
          "ref": "18d20e5d-bd74-4eea-82d5-da3ea15df15d",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b6255585-d3f5-4de5-b573-4d5ab5141501"
        },
        "item": {
          "id": "3ac3b7e0-b5f4-427f-8b7f-341af0bf7981",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "b1e261e8-65f0-4e25-9628-37b713a2c33b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80724af-5fb3-4db3-b1ca-3ef668368f65",
        "cursor": {
          "ref": "c7785715-5cde-41ab-a5dd-ab587926e8db",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "702c1df6-9146-448c-916e-ae7d4e2e1856"
        },
        "item": {
          "id": "e80724af-5fb3-4db3-b1ca-3ef668368f65",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "897c5be7-cf3f-4cf1-84c5-611be9895a59",
          "status": "Created",
          "code": 201,
          "responseTime": 963,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "d98b29bb-0f9a-4c4b-98d7-9bcf42595a48",
        "cursor": {
          "ref": "77bdf061-21d7-4bee-b013-49e74b977b4d",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "6977951c-b2bc-4c99-9d87-afa4bd63ea45"
        },
        "item": {
          "id": "d98b29bb-0f9a-4c4b-98d7-9bcf42595a48",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8ccf12ea-59e0-4922-a6bb-8057846e2125",
          "status": "Created",
          "code": 201,
          "responseTime": 366,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "29eadf0d-d080-4ff4-b76c-597cc47d4b10",
        "cursor": {
          "ref": "a05e8616-a389-4447-b8a6-6ce1b67c296b",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "dec94ae9-921b-4aee-ada2-39f86f7a4bac"
        },
        "item": {
          "id": "29eadf0d-d080-4ff4-b76c-597cc47d4b10",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "9e59c85a-9250-4660-89e8-0771400a844c",
          "status": "Created",
          "code": 201,
          "responseTime": 352,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "4dffea4d-fed5-4e94-b525-44cc30c2e2df",
        "cursor": {
          "ref": "ea5922ae-a0dd-4559-8115-ad95cd0413ae",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "f0f85544-b387-4acd-ae22-da5957288767"
        },
        "item": {
          "id": "4dffea4d-fed5-4e94-b525-44cc30c2e2df",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "6cb17a12-4902-4b95-ba49-6b7ed0e82df8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2a09d2-0eaa-4c2a-a006-da9cc988d32a",
        "cursor": {
          "ref": "9cf3409a-b749-4bd1-a538-cf2d71db93d9",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a7e55282-e2eb-4c30-a9c5-5ca52e23611e"
        },
        "item": {
          "id": "fe2a09d2-0eaa-4c2a-a006-da9cc988d32a",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "4207b82f-1ed2-4a14-8342-d88470e14cd4",
          "status": "Created",
          "code": 201,
          "responseTime": 358,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "0be39b58-d005-42bd-a5ac-1cb5c141c523",
        "cursor": {
          "ref": "595e5574-61f3-4162-aeb8-9e7f655ef3ab",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "256e3dfb-3ba7-4720-9075-67851ff38dff"
        },
        "item": {
          "id": "0be39b58-d005-42bd-a5ac-1cb5c141c523",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f4a4fbc8-3c9c-4c00-a2d5-2df4ebdb42a9",
          "status": "Created",
          "code": 201,
          "responseTime": 356,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "649b2050-6ad3-4644-a0a4-cad207497f28",
        "cursor": {
          "ref": "4df11ea2-81a3-43ba-8b4f-3ac9eb8bf0dc",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "37dc37b6-9f08-45a7-8b33-91282bac1a22"
        },
        "item": {
          "id": "649b2050-6ad3-4644-a0a4-cad207497f28",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8d2843f1-70eb-47a7-9290-aced79dde42e",
          "status": "Created",
          "code": 201,
          "responseTime": 351,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "6adcae5f-4df4-407f-ba54-952a361244a0",
        "cursor": {
          "ref": "a7eabca3-7cf2-4cdb-b8b4-4d9541caa23c",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f1b3956d-b766-4a80-a6bc-94d63dea023c"
        },
        "item": {
          "id": "6adcae5f-4df4-407f-ba54-952a361244a0",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "707b54e1-4368-4aff-80e0-0887677b4f9d",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7d230891-5dcf-4b00-81bc-7e011da2913c",
        "cursor": {
          "ref": "5a11dfe3-628d-4773-92b8-107b2ddfedce",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ce03c72e-a939-4c58-bedb-d2ab8cc41d95"
        },
        "item": {
          "id": "7d230891-5dcf-4b00-81bc-7e011da2913c",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "849ced46-20b5-4e06-a7dc-1b96c9bc81c6",
          "status": "Created",
          "code": 201,
          "responseTime": 337,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ba77319e-f952-43b2-8cb4-92dff032c96c",
        "cursor": {
          "ref": "b22588fc-c752-4c38-81c1-60f20d59ac74",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "33bf00bb-8847-4061-b2ee-d3d519691633"
        },
        "item": {
          "id": "ba77319e-f952-43b2-8cb4-92dff032c96c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "7126f713-e526-4875-a0ec-4af3e81bde46",
          "status": "Created",
          "code": 201,
          "responseTime": 332,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7a78cc93-12f4-4bb3-80b5-17fa90268fc5",
        "cursor": {
          "ref": "39898015-8e9a-4cc2-b51c-8178983d5c74",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "3730e0a1-81b9-4a02-8c0c-255203806e7a"
        },
        "item": {
          "id": "7a78cc93-12f4-4bb3-80b5-17fa90268fc5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "a798a17d-363b-4c92-9f4d-135c3432e407",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1ff8b618-2f91-4d09-8cbc-cc975703597e",
        "cursor": {
          "ref": "de4d0463-ce6b-444c-a6ad-163bfcdf9570",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "38d42f4d-f1a0-45c2-ab37-7edbda65a727"
        },
        "item": {
          "id": "1ff8b618-2f91-4d09-8cbc-cc975703597e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "428672a8-df1e-4c3d-a4d8-7134e9439e13",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "4001f4b4-d229-4c46-ba28-4c99bb604aff",
        "cursor": {
          "ref": "2873b79c-cd57-4226-8ee8-34896f4945e1",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "78037cab-8cc6-49af-8c64-b136d89e53e9"
        },
        "item": {
          "id": "4001f4b4-d229-4c46-ba28-4c99bb604aff",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "9b2f50d5-0415-489b-909f-e9c897eef4c3",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a7b2a608-1346-4979-9b1f-6a6c959c8cc2",
        "cursor": {
          "ref": "e9f44406-f35e-45d4-b02d-98e54cbe4b7e",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f0b2a8de-d73a-46a9-846d-8965d75665f8"
        },
        "item": {
          "id": "a7b2a608-1346-4979-9b1f-6a6c959c8cc2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "d90e1f29-5425-4892-b113-de4bf1ecb435",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10475f09-2643-42e2-8c75-e41d4e2d8561",
        "cursor": {
          "ref": "c38561a9-7862-4943-b4f1-b20e21fa905b",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "082b4231-26bb-4798-aabd-0192dcdd4ae2"
        },
        "item": {
          "id": "10475f09-2643-42e2-8c75-e41d4e2d8561",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e6d3a781-8b0a-45ec-ad3e-0a00fea87a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45d244c3-8422-4fe8-9fef-8e8d92b6b47d",
        "cursor": {
          "ref": "f090e57d-a5ea-4c1b-b06e-4628f58d108f",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4354a739-fe87-45c2-a044-ee5ab768f2b0"
        },
        "item": {
          "id": "45d244c3-8422-4fe8-9fef-8e8d92b6b47d",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "62435f09-9724-4fde-8bca-9613a007035d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f0e3f1e-e544-485b-8d4c-2030e1e85735",
        "cursor": {
          "ref": "ecb38314-b947-41af-a8a3-c6e78a656abe",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "7ee81925-8da9-422b-abe8-0ca42c96ab58"
        },
        "item": {
          "id": "6f0e3f1e-e544-485b-8d4c-2030e1e85735",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4406888d-d2d8-48c6-8310-38dee26dc698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31282ec9-3ba9-4635-8d9f-211379084d29",
        "cursor": {
          "ref": "bb537d41-87ad-41da-9fe5-232204b9bee0",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "6c9d248c-f14a-4614-b85e-5b523f727711"
        },
        "item": {
          "id": "31282ec9-3ba9-4635-8d9f-211379084d29",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "09fa047a-96b0-4121-9488-c2f3e4f9add9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "410f296c-8cad-4f96-a263-b523ab750512",
        "cursor": {
          "ref": "c1bbc8f0-4aaa-479d-b178-ef10eff1dfee",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e9984455-6529-474e-8d73-35e70f32c0e8"
        },
        "item": {
          "id": "410f296c-8cad-4f96-a263-b523ab750512",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a6370a1a-7e70-4fff-8e26-89f93bff2b4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2d111db-08fc-4be9-9fa3-f567ee5ac18d",
        "cursor": {
          "ref": "bda536ee-0867-4dee-bfa4-12a76f417123",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "850ccb72-a971-45c6-988d-b1b42330345b"
        },
        "item": {
          "id": "a2d111db-08fc-4be9-9fa3-f567ee5ac18d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a3d53046-fe38-46ec-8e0c-ce5968f4a9d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "353262bb-f200-4cd2-92d2-b1b3d5f1d6fc",
        "cursor": {
          "ref": "667de605-b677-48f0-b23a-1162df2ce5d7",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4b63c6fc-2b22-4daf-a491-ebd9c3b2d7d7"
        },
        "item": {
          "id": "353262bb-f200-4cd2-92d2-b1b3d5f1d6fc",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c4c95acc-ab40-4f66-abdf-6f91b94f751f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf42ce5-28fa-4fe7-9fe2-c8cbd840eadd",
        "cursor": {
          "ref": "7794994e-d22d-41b7-9acf-c010a0083709",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9d2f3fa2-9169-43af-ba04-ba2404a15c8c"
        },
        "item": {
          "id": "0bf42ce5-28fa-4fe7-9fe2-c8cbd840eadd",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "549eb95a-ef57-4b9d-a866-98b4f0295d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b52dfee5-a1c4-488c-b4cf-82ef2800319a",
        "cursor": {
          "ref": "b064d1ff-d3c5-4bdd-a221-b1dfeb6c2419",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "93a5a511-f7b2-4bd1-b893-b9bd4d193cca"
        },
        "item": {
          "id": "b52dfee5-a1c4-488c-b4cf-82ef2800319a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "0c697c9c-7385-4b1c-948d-a56b5d1606a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6866e327-6043-49c0-95bb-6c8f68ec8e22",
        "cursor": {
          "ref": "866c200a-d0cd-48f4-978e-89ffe1dee499",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c3e50132-f905-48f2-b8eb-cf7839d198d2"
        },
        "item": {
          "id": "6866e327-6043-49c0-95bb-6c8f68ec8e22",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0f8eb08b-bfb6-4a13-b30f-b4c23deef5bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "430d06bc-908b-422f-b714-f7bdcd329a5c",
        "cursor": {
          "ref": "f85210c7-5755-4e4b-9609-1fc8bded46b0",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "fd3a80f8-a35a-4ea9-bc15-d9a50dc8cbeb"
        },
        "item": {
          "id": "430d06bc-908b-422f-b714-f7bdcd329a5c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "e6a7050d-3d81-4125-a8a2-1f49d934a364",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1bb64e5-0ddf-4613-9f9e-1da285f0aa81",
        "cursor": {
          "ref": "037bacf5-145c-482b-aeb2-c9aa5521b648",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "974f2c50-c299-46db-8c16-ee9adf6139f0"
        },
        "item": {
          "id": "a1bb64e5-0ddf-4613-9f9e-1da285f0aa81",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "52f34784-a9f9-42f9-ac0f-8069778332dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a45aab5e-7a71-4134-9d9f-f591df5f7846",
        "cursor": {
          "ref": "dd2e1964-9050-4304-80fb-25424e3ba9c5",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7dbedcf6-b169-4734-9d49-7e9e6d0c9a12"
        },
        "item": {
          "id": "a45aab5e-7a71-4134-9d9f-f591df5f7846",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "87c6a5de-fb31-499c-b6a3-97fffa44cdfd",
          "status": "Created",
          "code": 201,
          "responseTime": 325,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "36c744ae-e391-49e3-9523-b62157e07f6e",
        "cursor": {
          "ref": "9a72f225-189c-490a-a4fa-961806961974",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "91c7113f-7b18-4dc8-a8c0-d3b47fb588eb"
        },
        "item": {
          "id": "36c744ae-e391-49e3-9523-b62157e07f6e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "6292c8b1-4bee-41e5-a672-a85c385c9fb3",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "879fa30e-3f4a-4c5c-9a87-9df994e4c361",
        "cursor": {
          "ref": "ce2eb742-109a-4d3d-8410-af487fa59220",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "9c31930d-5da5-4c45-bae8-a461dde0d717"
        },
        "item": {
          "id": "879fa30e-3f4a-4c5c-9a87-9df994e4c361",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e0d462d2-4ff8-4909-addd-c29ee75cca4e",
          "status": "Created",
          "code": 201,
          "responseTime": 349,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "13fbd903-3d5a-415b-a587-2cb257fbeb9f",
        "cursor": {
          "ref": "2aeebd69-30d3-48aa-9e32-22a891e92606",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3ab60960-a573-43bc-b30d-5c9bdccd1af7"
        },
        "item": {
          "id": "13fbd903-3d5a-415b-a587-2cb257fbeb9f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "c3c6f87b-2944-4d11-8dcd-766108b82f38",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a37876aa-50f6-47bf-8afe-cedfd7a8cbf3",
        "cursor": {
          "ref": "7418270d-8f43-4f06-9fc2-93890f3bd609",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "820c5fda-e2d1-4bcd-91e2-0e1d2aa68133"
        },
        "item": {
          "id": "a37876aa-50f6-47bf-8afe-cedfd7a8cbf3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ba21859d-93ad-4a7c-8b92-ce575b939547",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "292c76d0-98e0-4e55-b790-ad7785003892",
        "cursor": {
          "ref": "fe0b8cac-a33d-45b8-8592-0fbff62e354d",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e759359a-1cbc-47d9-a999-addcaa891d36"
        },
        "item": {
          "id": "292c76d0-98e0-4e55-b790-ad7785003892",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "0a88eb96-29ca-448c-b739-f746c77ae434",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1fc03a9-1020-48c0-bb3e-b4834741cc8b",
        "cursor": {
          "ref": "8fe0f481-50eb-400f-a732-7deabf887d52",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ef3fbf80-a80e-4278-b677-045639bbd9cb"
        },
        "item": {
          "id": "a1fc03a9-1020-48c0-bb3e-b4834741cc8b",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d49a4aa8-a3f6-47a1-84d1-5536aa9c1f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31d71875-5353-43b4-8052-d885ca1d1ed6",
        "cursor": {
          "ref": "b87fa12f-a358-4fd7-bbbe-7b87b4fc8b10",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "eeac9b41-70e1-4c77-bde9-a863dd1d3cb9"
        },
        "item": {
          "id": "31d71875-5353-43b4-8052-d885ca1d1ed6",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2000f15e-6fd8-4a09-b865-448b48597d9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4773ed1-0105-4016-93e7-17b49443aff4",
        "cursor": {
          "ref": "54866ca6-1e38-4ee3-8fdf-8c00b595ce7d",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "8b207802-557d-4c13-adaf-e1d6e6865781"
        },
        "item": {
          "id": "e4773ed1-0105-4016-93e7-17b49443aff4",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "a8b1f35a-cc9c-4afb-96de-79b35a2673af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57037628-c502-4b0e-9370-7ce6f45127f7",
        "cursor": {
          "ref": "1dc600c3-577d-489c-b0d5-6f828e2d471b",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "d7b23b43-d4cd-4447-884e-e893c4fbaf9e"
        },
        "item": {
          "id": "57037628-c502-4b0e-9370-7ce6f45127f7",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "be359f3e-42eb-403e-93c5-81788d52bfef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbc2b8d6-6402-48a2-bbad-54e795305815",
        "cursor": {
          "ref": "e1a2b01d-4c8e-491d-bfca-e948f1d458c5",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "64138670-ef4c-4363-ba28-53a3c248fa51"
        },
        "item": {
          "id": "dbc2b8d6-6402-48a2-bbad-54e795305815",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d49be09c-c838-44bf-b337-7f9ff79a58e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09339cce-6879-47f1-be85-49018b21dda1",
        "cursor": {
          "ref": "9b912560-9c74-4ab6-950a-daeff2d501b9",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "675cf451-48bc-4103-805b-ed7b8c5454be"
        },
        "item": {
          "id": "09339cce-6879-47f1-be85-49018b21dda1",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e9fe2ef3-ab6c-4c12-9bfc-d9c781895c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e84360-ccd0-4701-8e41-2684e82b36d1",
        "cursor": {
          "ref": "77b0f5f2-e554-48e9-8edb-5c0afe4142af",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "df398dc6-2453-4b34-aacb-7735f658d3d4"
        },
        "item": {
          "id": "d3e84360-ccd0-4701-8e41-2684e82b36d1",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "7ab45ed8-10ec-4fb2-b5d0-6de03328ca5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4dc08e6-b6a7-47c2-968f-1d18608cc64b",
        "cursor": {
          "ref": "a2742ba9-750d-4e23-8af3-5ef676e252c8",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "235a0766-5610-4713-b8a0-42aa06a8259a"
        },
        "item": {
          "id": "d4dc08e6-b6a7-47c2-968f-1d18608cc64b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b1fa36fd-6bdd-4e90-b848-4fbc6bafa898",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c51001-faaf-4866-8f78-ead91156d91c",
        "cursor": {
          "ref": "945d0f58-6e71-452e-b7f3-ca59bf91b120",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "831e1ba4-186e-4fe9-99d1-118bf0e3dbb0"
        },
        "item": {
          "id": "16c51001-faaf-4866-8f78-ead91156d91c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "a336e1c6-aaec-4753-994f-0618fc807ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d7d162a-3a21-40e3-a08d-4a11aad4da0d",
        "cursor": {
          "ref": "dca8e575-1f13-4c08-a0e9-fe890bba4fa3",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "eb53edf9-9b62-46a4-9f61-844625345847"
        },
        "item": {
          "id": "1d7d162a-3a21-40e3-a08d-4a11aad4da0d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "954c7aa6-6b5d-484d-8b45-068f1a0d041f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b262cc2-a818-480c-8460-9b672f290e58",
        "cursor": {
          "ref": "8353af06-935f-49eb-86f2-c5763a98950d",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "62ac3098-071f-410a-8ce2-8dc301e4e014"
        },
        "item": {
          "id": "9b262cc2-a818-480c-8460-9b672f290e58",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "8cba13f7-b04d-474f-a06d-245390b25b30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb59c36-9c6b-4f71-8832-edf7d676163b",
        "cursor": {
          "ref": "ed9fde6f-ae55-4272-8259-dd46e9fedcf3",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "788977b3-5e13-439f-a10d-1a1a91c8e970"
        },
        "item": {
          "id": "5fb59c36-9c6b-4f71-8832-edf7d676163b",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "3ff86fd4-b6b5-415a-a6d7-aa9aef7a2b3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e4f1330-5cd4-4c42-8c86-5af4f6558079",
        "cursor": {
          "ref": "94d8e8bc-538a-4016-835e-93e7341511d3",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "465065cd-c5a4-4d66-9735-481cfa7563e7"
        },
        "item": {
          "id": "7e4f1330-5cd4-4c42-8c86-5af4f6558079",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "8395abe8-8756-4f6c-9246-ce91ed2110a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9aceab8-a6a9-4154-804f-b391860881a7",
        "cursor": {
          "ref": "a1a51b48-df98-4480-861c-2eb7bb1fa0ff",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "df7c2a7e-5363-4401-8fb1-e173f0bd55c8"
        },
        "item": {
          "id": "a9aceab8-a6a9-4154-804f-b391860881a7",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "bce47da3-ccdc-4c0a-8658-811d15c80d88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08a71a96-a662-48b7-9a69-e8db411f6df4",
        "cursor": {
          "ref": "8c5ae67e-99d0-4ac1-959b-7177fd64785a",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2b351bc3-a625-42c6-8d68-143556584228"
        },
        "item": {
          "id": "08a71a96-a662-48b7-9a69-e8db411f6df4",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "0591ef42-2a24-40ff-b822-3cf159d53903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101fbe4d-35b7-4edf-a249-d7921a015c46",
        "cursor": {
          "ref": "4ef3a59a-b423-4810-91fa-31fadcf3bab8",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a69b1dd8-18bb-4de8-a5bf-5e2e2fe3e800"
        },
        "item": {
          "id": "101fbe4d-35b7-4edf-a249-d7921a015c46",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "0b5753b3-3065-4ce7-befa-6ff70c4ce5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50a716c6-307d-4e40-9027-49194e9ccc43",
        "cursor": {
          "ref": "ce252ca8-114a-4815-b9b3-4b2b9549447f",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "85917f8f-1218-4efe-8573-af1c14eb8560"
        },
        "item": {
          "id": "50a716c6-307d-4e40-9027-49194e9ccc43",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ffdaf982-b27b-40f7-81eb-a264626583fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6ac148-bab8-45e1-bd18-b1e53699e7ba",
        "cursor": {
          "ref": "c960e0ba-e877-46aa-a3b0-9be69a169b8c",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a0261095-8c5f-4dcc-a8d8-ba0a1285dfcb"
        },
        "item": {
          "id": "dc6ac148-bab8-45e1-bd18-b1e53699e7ba",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6e39f175-c2cf-4655-b6e0-a775509452fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d46a1616-3e49-44b8-9c39-162f73e9505f",
        "cursor": {
          "ref": "4aac6104-d427-4259-90bb-3ffcc9c3ea2c",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c973fab3-cda9-47ca-8c7c-9f62fd126ede"
        },
        "item": {
          "id": "d46a1616-3e49-44b8-9c39-162f73e9505f",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "8117a74d-ecfe-43cc-a9c1-4cc3e1c67811",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c37fb5c-ae09-4d9f-b791-86ab90419071",
        "cursor": {
          "ref": "c27b8911-e40c-4503-9574-452bd56e0690",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "28fdfe68-9ac9-40fc-8d1a-11af4384e9c4"
        },
        "item": {
          "id": "7c37fb5c-ae09-4d9f-b791-86ab90419071",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "429fa893-bf77-4297-8ffa-234c31d68d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348455d0-8e92-4d48-bfdb-bf6c4d4bdb61",
        "cursor": {
          "ref": "56489510-fa8f-4eaa-adb2-ba976ba023ba",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "753e9d45-2089-4821-b62e-9323f19f9396"
        },
        "item": {
          "id": "348455d0-8e92-4d48-bfdb-bf6c4d4bdb61",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "f1efb034-ae67-4633-97bf-933c263d9860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d601334-959d-43aa-ba20-cbd89b42c89b",
        "cursor": {
          "ref": "45046f47-2a80-48c5-ba6a-cc25b54edecb",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "4a8f911d-ba73-4896-8993-67d8fd96744e"
        },
        "item": {
          "id": "6d601334-959d-43aa-ba20-cbd89b42c89b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "473bcee2-ddd4-4259-8e07-ec8099211ec8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9343ff-aa30-4f80-8704-cbc53ac7c42b",
        "cursor": {
          "ref": "750db8b9-95da-4db2-a016-0039d6af7538",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "07b6e455-9a3e-4c87-b21a-4f0d482b0cb4"
        },
        "item": {
          "id": "3d9343ff-aa30-4f80-8704-cbc53ac7c42b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "dbdd424b-8567-49a6-be3c-11ac4fe2cc81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df9487c-534c-44b3-943f-9adfefe36244",
        "cursor": {
          "ref": "80924b50-44b3-43d0-a239-dfb4ea29a888",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "fe129474-5d87-4052-8d90-9d7c7c9fc7a8"
        },
        "item": {
          "id": "9df9487c-534c-44b3-943f-9adfefe36244",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f0556099-e6ac-44d1-acd7-aea6c89cd038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2ea3c3b-f3ed-42fc-96ab-aa122b08d0c2",
        "cursor": {
          "ref": "5140fb88-9bc3-4ed0-a3f2-2642b348e87d",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5c9c8167-0185-43f0-902d-98a838c411e4"
        },
        "item": {
          "id": "b2ea3c3b-f3ed-42fc-96ab-aa122b08d0c2",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e17ae8c4-1640-4e41-a62a-114eafb9e420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f1f18bc-a5c1-4ec7-a84e-3087bc063616",
        "cursor": {
          "ref": "2a131c31-5a99-4e3b-ac91-d6963fa26c86",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "fb92fe5f-f2dc-4a40-bd4a-9cbfc6470425"
        },
        "item": {
          "id": "5f1f18bc-a5c1-4ec7-a84e-3087bc063616",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "0fb2d029-f4fa-4a0a-b38e-2ca6b93d095b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f79b15f7-3675-4a71-a0a6-d56af5ce071b",
        "cursor": {
          "ref": "50a92d7a-84bd-4798-9a23-993ebd91dd07",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f1c69e26-86ec-4070-8dc1-d147f3c96bff"
        },
        "item": {
          "id": "f79b15f7-3675-4a71-a0a6-d56af5ce071b",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "37451370-d2e2-4b4b-b577-a11ca526b146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28955289-4977-4cd1-8231-098d70e7d031",
        "cursor": {
          "ref": "59d134d3-ed7f-44e8-a387-cc4faf7ce0a6",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "344deb53-d31e-4c67-9878-7c56c8246889"
        },
        "item": {
          "id": "28955289-4977-4cd1-8231-098d70e7d031",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "6444b97f-d71a-4ef2-863f-eddb55187cef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be9075d-d07d-4573-bd0d-f9c28b44088f",
        "cursor": {
          "ref": "2ca8a9a3-5ff1-4441-859d-b540dee1bca0",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "3f59e98b-16b6-4388-87fc-6cc32b7cc313"
        },
        "item": {
          "id": "0be9075d-d07d-4573-bd0d-f9c28b44088f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a705e074-471d-4f54-9bb2-6ae62d540112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5fcaf4-0d20-41fb-a6d1-24f2848c10c5",
        "cursor": {
          "ref": "10132f53-e455-40bf-a935-27e3edcfe39f",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "eef214fc-bfb5-43ff-b9a3-a77c70f38c4a"
        },
        "item": {
          "id": "ee5fcaf4-0d20-41fb-a6d1-24f2848c10c5",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "22f966a8-607c-4023-8b21-b5ffbec570a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea43ae9a-9799-457d-9bed-02982103c928",
        "cursor": {
          "ref": "efae8d2e-51c3-458d-949f-4d88d7931b03",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "119eef73-68e2-4814-9f0b-8e1c73ba9b14"
        },
        "item": {
          "id": "ea43ae9a-9799-457d-9bed-02982103c928",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "f71ae61a-c961-4e11-92a9-f63535652b30",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665d674e-a248-4ad4-a46f-cd3b6b1ccecd",
        "cursor": {
          "ref": "040326b5-5ec6-43c6-931f-aa40a33de6d9",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c1727df0-da61-4452-bdd4-6efe83493d94"
        },
        "item": {
          "id": "665d674e-a248-4ad4-a46f-cd3b6b1ccecd",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "14601a73-4777-412e-8b5e-f68f2ceebe8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "d8034b61-aacf-4c9a-acfb-95916341922e",
        "cursor": {
          "ref": "f76f41be-df0c-4b9d-87bd-8b778c8bbd32",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e5725129-ed22-4f3b-b4f0-2b89e74e2d5a"
        },
        "item": {
          "id": "d8034b61-aacf-4c9a-acfb-95916341922e",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8ce21d88-79e6-47fb-8b29-4eac0b3e4310",
          "status": "Created",
          "code": 201,
          "responseTime": 347,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ea75f3-4d58-4e0c-ac4f-e098a3ba798f",
        "cursor": {
          "ref": "5fdbf3d2-27d2-430e-b1cf-210df2d058a1",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c924dfe6-97c7-410e-b7f5-a0dec51488cf"
        },
        "item": {
          "id": "13ea75f3-4d58-4e0c-ac4f-e098a3ba798f",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "394d4909-c913-4e10-8f86-098b23865d6f",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7194b057-5044-4475-9bd1-a380cf94e3b9",
        "cursor": {
          "ref": "d711cbc1-4cf1-4a1c-915e-e9c5f3a2ca39",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "b979f254-dd12-456d-9493-ec1c73f8b2c1"
        },
        "item": {
          "id": "7194b057-5044-4475-9bd1-a380cf94e3b9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2cdfce34-1ba6-457e-8afe-15003503fe45",
          "status": "Created",
          "code": 201,
          "responseTime": 326,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4abed2a1-ee2b-4272-a6d5-cb5d63000e56",
        "cursor": {
          "ref": "0313272c-61b6-4ecf-9982-d0924b344557",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1b617893-790f-4571-839a-db9099acb961"
        },
        "item": {
          "id": "4abed2a1-ee2b-4272-a6d5-cb5d63000e56",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6fb7b6e3-ecba-4715-bdac-6b01b32d23e4",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d729f94-141f-499b-a989-2a41db1e26e0",
        "cursor": {
          "ref": "8422697e-493a-4f30-bb9e-e4f59776baac",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9b3f108e-d4ce-404c-983e-d61df267ee1b"
        },
        "item": {
          "id": "6d729f94-141f-499b-a989-2a41db1e26e0",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "fa33a988-2097-4353-b2d5-61233655a2ea",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-05-24T00:37:23.853Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-05-24T00:37:23.853Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "756a6821-dbb7-49ad-9797-410502d7d363",
        "cursor": {
          "ref": "09224383-decf-463c-931f-0d6bd5daab7c",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "565ebf02-e33a-43b1-9729-603f3374cdd8"
        },
        "item": {
          "id": "756a6821-dbb7-49ad-9797-410502d7d363",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6f40f556-762b-4901-8236-856d090eef99",
          "status": "Created",
          "code": 201,
          "responseTime": 355,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f365fa7-8e9f-4d79-94cf-505b8ff4cadf",
        "cursor": {
          "ref": "0a13f11e-40a3-4a76-bee8-bc559a4cc5b8",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0e707002-d7fe-4eee-bed8-890c8b1befba"
        },
        "item": {
          "id": "3f365fa7-8e9f-4d79-94cf-505b8ff4cadf",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "7995c827-4dc6-4623-b75e-437124d6b324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9531843d-f8c8-45e6-9cad-c9944c481000",
        "cursor": {
          "ref": "3f17f3b9-55c4-42dd-94f0-55e24f774339",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3d239c36-c889-40c6-b806-b3e1d758160c"
        },
        "item": {
          "id": "9531843d-f8c8-45e6-9cad-c9944c481000",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f96c2d58-5884-4e0f-a4c0-bc32466e8731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32acb4a9-7c17-4f2c-b6c2-27673d6493ee",
        "cursor": {
          "ref": "1fd015ec-744e-4b49-94a3-362c53df06e0",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "9ab584a9-5f42-43ae-93f6-ec8e36a61326"
        },
        "item": {
          "id": "32acb4a9-7c17-4f2c-b6c2-27673d6493ee",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "21ce7f2a-d606-4210-93fb-dc275a621c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac85be0e-4eb0-47e7-b3b7-855081b4e58a",
        "cursor": {
          "ref": "eaf9f9db-5440-46a2-ae72-687f7d5f115f",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "5e26e155-46da-414c-88e2-7cbc312b7226"
        },
        "item": {
          "id": "ac85be0e-4eb0-47e7-b3b7-855081b4e58a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "86b6bb09-317e-4733-8ffe-41d80c40a7d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "213c751b-599f-4e37-bc11-0ca91ffc7d04",
        "cursor": {
          "ref": "4c7aa247-b6d7-45b3-9ba3-82f5e3d5c9cf",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "eedd1561-7229-4094-b19e-bc403a90d5e9"
        },
        "item": {
          "id": "213c751b-599f-4e37-bc11-0ca91ffc7d04",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "240b7254-3798-44c1-a38c-c33738b9e7b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e408b3a-789e-4d82-aff3-641ea78d96bd",
        "cursor": {
          "ref": "b52e31a6-c05d-4104-95c3-0a5f5ce4a890",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "fd9a96bb-d6b4-47d2-972a-196041c57fde"
        },
        "item": {
          "id": "3e408b3a-789e-4d82-aff3-641ea78d96bd",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "28ded158-42c3-42dc-9a55-4d3ba6363b69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "744091b3-b546-40b2-b0c7-395e63dd68b5",
        "cursor": {
          "ref": "5f2d175a-9a90-49ff-ad2b-3cbdffe66288",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "721629ef-8ea9-496a-b192-ad14fba0a231"
        },
        "item": {
          "id": "744091b3-b546-40b2-b0c7-395e63dd68b5",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c8014624-7123-417c-ad4b-6c31c1ac66e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5295cfa1-4857-4c26-a046-fae3e7568efa",
        "cursor": {
          "ref": "75f3f6c9-15e4-4c61-9a4c-fc451d9ff8d7",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "50168998-0d2f-4180-9302-724a414e37ee"
        },
        "item": {
          "id": "5295cfa1-4857-4c26-a046-fae3e7568efa",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c75b3264-cf50-4c42-a071-c499b46f196a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59be9918-af5e-4b18-9cce-bbd2404cb4df",
        "cursor": {
          "ref": "6e382d94-5e43-42e4-864c-c60c00ef256e",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "44edf963-6243-4738-8425-99899b703eca"
        },
        "item": {
          "id": "59be9918-af5e-4b18-9cce-bbd2404cb4df",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "aeb215eb-ad2d-485c-a457-3b69582b8827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8053dd22-4704-4db5-ae57-a2c013ee6b30",
        "cursor": {
          "ref": "84e2c936-a5ba-4cb1-bcea-019414761de4",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0ff8d48d-c770-4028-8841-20af81a66647"
        },
        "item": {
          "id": "8053dd22-4704-4db5-ae57-a2c013ee6b30",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d21c3a3c-a312-463e-9bfc-b0cd482431fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2053777-f0fc-4f7d-a5d8-c94426a7f5b9",
        "cursor": {
          "ref": "98d63a13-df2c-48b9-9494-3404fcf941a1",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "bfd28d97-826a-411a-ae2c-0b29fc23e9eb"
        },
        "item": {
          "id": "a2053777-f0fc-4f7d-a5d8-c94426a7f5b9",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ebc66a76-c278-46f4-8e15-1229fd79df11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91eed590-2ab2-4315-a77a-f18ea79eada2",
        "cursor": {
          "ref": "af20e86c-bea2-4d3a-957c-7eb093c8247a",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "e8c73ffc-a1d4-4d29-8184-f2243151f0b5"
        },
        "item": {
          "id": "91eed590-2ab2-4315-a77a-f18ea79eada2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "e44c7213-9df2-4499-9020-131dba917939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49038cfd-13d0-41d8-a7ee-8573f7d084eb",
        "cursor": {
          "ref": "844af2ee-6127-43fd-b5ac-79762cc2e8a0",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9c6283ac-8e3a-4503-a309-8bf00ad12b72"
        },
        "item": {
          "id": "49038cfd-13d0-41d8-a7ee-8573f7d084eb",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "05dc4a9a-8150-48a3-8173-b43ef58ef199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1863e322-26e2-4292-b1a8-b8ea992c633c",
        "cursor": {
          "ref": "e585c7a6-eaff-486a-8e03-faa9a8b28c05",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "948ea295-041c-4d11-812f-12ef357ac02c"
        },
        "item": {
          "id": "1863e322-26e2-4292-b1a8-b8ea992c633c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "17cb0a41-c9a5-4898-a03b-73a0e7f4583d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 118,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "602df3db-b316-4584-a69f-acd22a2065af",
        "cursor": {
          "ref": "1a96bf1f-f2de-4128-8c35-c70c4a4d62c1",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ec85ce49-610b-4cfa-b0b3-b3262ebe8040"
        },
        "item": {
          "id": "602df3db-b316-4584-a69f-acd22a2065af",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "f35689bf-fa58-460c-9ad2-970e9da00cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d45e5f6-fa0e-40c0-bba5-77cda22104c3",
        "cursor": {
          "ref": "ee6d50d0-39ab-4eb7-8786-2d55e773a644",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4fd6bd86-8288-4203-bb51-89e77dffe42f"
        },
        "item": {
          "id": "0d45e5f6-fa0e-40c0-bba5-77cda22104c3",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e65074a3-ea71-455d-a17c-46edc2bbe25b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86d07c8b-d529-4c3f-bce9-089b58a4544d",
        "cursor": {
          "ref": "07649cbf-064d-4b49-9408-a04c7541cd84",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "fa485370-376a-4e0a-b009-78ae6126d7ca"
        },
        "item": {
          "id": "86d07c8b-d529-4c3f-bce9-089b58a4544d",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e2071f4f-e93a-4d2d-807e-91d477dbf17b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f4af255-73c4-40a2-b9f9-9c330648400c",
        "cursor": {
          "ref": "28417720-4254-4e31-873e-81e67d71418f",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "521614a7-3b25-4ca5-bd4a-81766fca111b"
        },
        "item": {
          "id": "2f4af255-73c4-40a2-b9f9-9c330648400c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2d62040f-b00b-4733-ac5a-e42eed1827e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f796827-de98-4af9-9454-8dd94052b460",
        "cursor": {
          "ref": "53460dd0-2a95-435e-b6dc-22005a807c5c",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "04f59fd1-e9a3-4930-a5ce-83aa1d346fd7"
        },
        "item": {
          "id": "4f796827-de98-4af9-9454-8dd94052b460",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "ca1aaa49-8ab5-4ed3-9e2f-82dbed1b33a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493f2250-571b-4194-8454-f53d736490b6",
        "cursor": {
          "ref": "85ca5380-d39a-4d30-82ac-2b6ddafd398d",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "bee9e1ae-a7e6-444f-a697-9ebc823a4897"
        },
        "item": {
          "id": "493f2250-571b-4194-8454-f53d736490b6",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f5259c5f-d3a9-44c7-889c-70dea95ebb1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35607089-e6bf-435c-84cf-6ce4c4cf203e",
        "cursor": {
          "ref": "cf17982b-3bda-49b6-895f-16c2942e763d",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "22ab2b38-2307-4298-b43b-33b7811d0759"
        },
        "item": {
          "id": "35607089-e6bf-435c-84cf-6ce4c4cf203e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cc7343aa-891c-47c0-8269-6bc6a49b6225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f206f238-9b21-4b15-b967-89f87e22437c",
        "cursor": {
          "ref": "e878c369-1cdf-4977-893c-2ebc09995a8e",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "66df0eef-e968-4030-a0c8-7f8715d398a3"
        },
        "item": {
          "id": "f206f238-9b21-4b15-b967-89f87e22437c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5e6948a0-8b9f-43b2-a2d2-af2a0a8019e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b5a909b-2c1c-4fb5-b2d7-9aaf251341f0",
        "cursor": {
          "ref": "b5785243-ff2b-461d-890f-998d126b87b7",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a4a02a90-937e-4d23-8261-d45cc1afb384"
        },
        "item": {
          "id": "0b5a909b-2c1c-4fb5-b2d7-9aaf251341f0",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d53d46ba-1fb0-4360-b1ac-cd9143596223",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df92dec0-931f-42ed-87ed-1d99a7f79678",
        "cursor": {
          "ref": "c1aa501f-1277-47e3-acf6-5b299ff59b8f",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "269f9362-5af6-4f9f-b6a1-2e047a5418e4"
        },
        "item": {
          "id": "df92dec0-931f-42ed-87ed-1d99a7f79678",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "911654c5-e179-4358-9ee0-72a71f1c6b3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7440ca52-3163-4939-8565-b292edbaa6c2",
        "cursor": {
          "ref": "9daac08b-c16f-4d85-8648-72492cf12c50",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "d826600a-af71-4980-8413-b230406993e9"
        },
        "item": {
          "id": "7440ca52-3163-4939-8565-b292edbaa6c2",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e7443b4b-cfcd-4d46-81d8-bf02e46ae5cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6644ade6-2a05-4ec5-b503-b44e3e951302",
        "cursor": {
          "ref": "e4b5ec4b-2292-4831-b830-f558e5600b65",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e96aab74-cc01-46eb-ad6a-88d5413553f8"
        },
        "item": {
          "id": "6644ade6-2a05-4ec5-b503-b44e3e951302",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b180dfae-90cd-47c5-92e8-c4152d623072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba04ca4-f236-401d-88ae-9da3f1576ac5",
        "cursor": {
          "ref": "2ca7a1b3-eacd-4cb4-9174-f1faaf1dd6cd",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "d34be2bb-1a5f-444f-a7a9-23b41f366a7c"
        },
        "item": {
          "id": "9ba04ca4-f236-401d-88ae-9da3f1576ac5",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c79d4f80-6359-4bd0-8a54-a4d42b75af18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6ba925a-b5a8-4b3f-b26c-b321e9325b59",
        "cursor": {
          "ref": "9ea93597-b7d5-4edc-bd7a-e1f0e494f002",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "59913d65-8e1a-442c-899c-4c6309a9c06c"
        },
        "item": {
          "id": "a6ba925a-b5a8-4b3f-b26c-b321e9325b59",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "68d36e39-a369-4e6b-bb2c-5cda9a5c7287",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "882c809b-8950-4d07-b2b5-a50d0907ad24",
        "cursor": {
          "ref": "36229081-682e-4a8c-887f-1c25a0360150",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "fe6a9664-5ba4-4a85-b672-04cd9ac12883"
        },
        "item": {
          "id": "882c809b-8950-4d07-b2b5-a50d0907ad24",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "cd622c1c-0eb0-447c-bf18-291be0f5c224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7894fa0-e180-4912-af89-01fcf3076d89",
        "cursor": {
          "ref": "d195234d-4c08-4683-bdda-40815d17a999",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "28d45293-7eee-4e90-bf98-bbd3a9bddd1b"
        },
        "item": {
          "id": "c7894fa0-e180-4912-af89-01fcf3076d89",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "068c4959-eec6-4f36-9a76-92bae1615e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "780f8776-3d88-4f7c-8a1d-162c9cd4cb77",
        "cursor": {
          "ref": "130c2200-8ab8-437f-871d-18f3b832da47",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "dc7669fe-d114-4817-ac8d-aaf656867602"
        },
        "item": {
          "id": "780f8776-3d88-4f7c-8a1d-162c9cd4cb77",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "86beb671-6dc2-4762-ae8d-04750aa791e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 153,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e97e50b8-0b75-4de3-9e34-1b77cef4423d",
        "cursor": {
          "ref": "539b156c-9f3e-4995-8257-fbeaa3d4b3da",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "44d3ac76-dad8-4153-a064-b799fd86b46e"
        },
        "item": {
          "id": "e97e50b8-0b75-4de3-9e34-1b77cef4423d",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "7ee12cd7-2476-4989-8efb-ad008aa3a170",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf623a4-424f-498e-9b1d-bdb7dbef7973",
        "cursor": {
          "ref": "3f4b7bd6-b35d-492a-a0d7-589cf2d210b3",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c3838717-11ed-4c32-ad37-5ebb19ab51fa"
        },
        "item": {
          "id": "aaf623a4-424f-498e-9b1d-bdb7dbef7973",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "62b6aa10-c9c6-4dda-86ac-d61b2d4bb4cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392908af-2efc-4f88-a094-94a8b68235a6",
        "cursor": {
          "ref": "12e5a1ac-b914-44ad-8ba3-9bac382e8228",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "fad93423-245e-49d3-9f51-2ff5c904b55b"
        },
        "item": {
          "id": "392908af-2efc-4f88-a094-94a8b68235a6",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "760d401f-f919-4281-9553-bed63df27baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4afce56-16e8-48cb-9c2f-4737ef64bcf7",
        "cursor": {
          "ref": "67839d69-074d-4a71-aee4-f77d1154ea79",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "16d1a04b-1dfa-4c36-9a28-50dff3bc18b3"
        },
        "item": {
          "id": "a4afce56-16e8-48cb-9c2f-4737ef64bcf7",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "db09ee48-77fe-45ab-a303-0a628d36158c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75028b4f-e050-438e-9541-faa748727c1d",
        "cursor": {
          "ref": "8d71a1e8-e0fe-445b-b15f-82676d39e3ec",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "b983faba-f206-4c63-b941-54227f5579c5"
        },
        "item": {
          "id": "75028b4f-e050-438e-9541-faa748727c1d",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "05f94563-5152-45e7-978c-ad13c531b786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abff2d80-2660-4d2a-b2bc-b5c0ead9bebc",
        "cursor": {
          "ref": "f2abf6df-4759-48a9-b30d-6723fe799315",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "671c8606-34b5-4acb-9241-99dda7f02e37"
        },
        "item": {
          "id": "abff2d80-2660-4d2a-b2bc-b5c0ead9bebc",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "b8785e6d-eef4-44d2-80b3-4aac901cdfd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fdeda50-3afb-41e4-ae90-761e6a794138",
        "cursor": {
          "ref": "aa0576c1-3a3c-4775-84b1-fe12d0e28444",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "717cb238-e58e-4435-913c-658e5c850064"
        },
        "item": {
          "id": "6fdeda50-3afb-41e4-ae90-761e6a794138",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "6b5a0b1d-851b-4e0e-a136-ac366acb5ad7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bcc37b1-68ba-430f-8913-eb7b452f6bbd",
        "cursor": {
          "ref": "7cae9fdf-e689-4bf8-aefc-a1eb73acfbdc",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1358d8ff-2567-4a29-bd3b-b7a200e8ad49"
        },
        "item": {
          "id": "6bcc37b1-68ba-430f-8913-eb7b452f6bbd",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ba5aef41-66b2-4c4d-bcdd-a5c0545a45fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06781f9e-f526-45e6-aef3-ad671e5e4b51",
        "cursor": {
          "ref": "f7fee8ff-753b-48c3-8751-bbe50ecd98a4",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "097cada9-4c68-4481-8e11-b5e4b1cad817"
        },
        "item": {
          "id": "06781f9e-f526-45e6-aef3-ad671e5e4b51",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a701d1af-ff5a-419d-8e64-310f3c4f9074",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bee0f08-6840-43fb-b68c-bfde20ac2567",
        "cursor": {
          "ref": "e01a0912-add9-4090-ba13-afec5ec9512d",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "9f0ae2ab-f329-4168-8d19-44e25ead83a3"
        },
        "item": {
          "id": "3bee0f08-6840-43fb-b68c-bfde20ac2567",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "d148aa6d-de05-4970-817a-365ed00e68f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa62d517-f153-4723-8782-bb8dda9fe5dd",
        "cursor": {
          "ref": "465437ac-6747-4a17-aef2-169825ed3359",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b8bb2b18-5625-4e20-b8a1-f2af3e438c47"
        },
        "item": {
          "id": "aa62d517-f153-4723-8782-bb8dda9fe5dd",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d708cef7-0ec3-4c19-b634-f62ff8316fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "980e8cd2-611d-4007-be13-adf5cdbb47b9",
        "cursor": {
          "ref": "d14362df-70e0-4268-bdea-725c05fc82fe",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "99ae45fa-69c3-43d6-93b1-5614749cf981"
        },
        "item": {
          "id": "980e8cd2-611d-4007-be13-adf5cdbb47b9",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "56424749-f2bc-4a5c-8c62-de729683b57c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddabe5f-efa0-41ba-9e52-0a038c6ff2e1",
        "cursor": {
          "ref": "ff6f23d9-484d-4c50-86f5-f2c8cead7c92",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "72035698-92e8-4117-a985-d2158e5221b1"
        },
        "item": {
          "id": "5ddabe5f-efa0-41ba-9e52-0a038c6ff2e1",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "2b7045c3-b55e-4fd0-8cc4-ff01f43a268c",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "19f91274-e8c3-47cc-b198-123a4e1ba48d",
        "cursor": {
          "ref": "7d4c7f54-530d-4a1f-8550-91e974162f37",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "bfd7e97d-0d47-4824-966a-8245c1a99d4b"
        },
        "item": {
          "id": "19f91274-e8c3-47cc-b198-123a4e1ba48d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "987c2c54-93b7-49a1-acc1-4d76c4e4b7b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b6e17d4-365b-4393-ae10-92d06614c8e0",
        "cursor": {
          "ref": "03647626-d392-498f-99ee-7c8b75ca89c4",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6d3469e4-9f5e-4e69-b00c-6147f978b04d"
        },
        "item": {
          "id": "3b6e17d4-365b-4393-ae10-92d06614c8e0",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c9bfbde8-bb3b-417e-980b-b9d1ef37e77f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72b082d8-773d-46c4-98a0-d511f387c301",
        "cursor": {
          "ref": "bb670c39-66bf-4369-a2f4-a50e18685a93",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "ca69af17-2b44-4e80-96aa-8eb1fcb638b8"
        },
        "item": {
          "id": "72b082d8-773d-46c4-98a0-d511f387c301",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "c4698498-1ace-4498-94b4-cf4846c71622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3434620b-cb03-4319-bed5-926073f39635",
        "cursor": {
          "ref": "1f089da1-088f-46e8-8248-c17dd7dbb1f2",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "be35c720-505f-4d60-a7fe-c04c5f93f5bf"
        },
        "item": {
          "id": "3434620b-cb03-4319-bed5-926073f39635",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "69ae802d-3d97-4633-995f-979fb48fcfb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35b55be3-101d-4372-9d19-293ed25884e1",
        "cursor": {
          "ref": "2ec806ca-0753-47b1-8094-9636f6ed3a7b",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "277fb1e6-4e5d-429a-b1b1-efc880ea469d"
        },
        "item": {
          "id": "35b55be3-101d-4372-9d19-293ed25884e1",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "bb11175e-4520-4e99-8dd6-521ee90d0263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004e086c-8be0-4251-859d-6aa031761df3",
        "cursor": {
          "ref": "102fa855-0613-45a2-bae1-a4ebc9c9624f",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0811e465-9942-44ba-a992-41389b5972e0"
        },
        "item": {
          "id": "004e086c-8be0-4251-859d-6aa031761df3",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "9528403e-bc50-41c3-894a-6af498d387f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ed705c-89a8-4330-8c23-ef7677564f7c",
        "cursor": {
          "ref": "66abd6d7-debf-4b5e-8dd0-f915acbd9500",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "be5e09b1-a27b-4c58-b336-83e59f4b8699"
        },
        "item": {
          "id": "37ed705c-89a8-4330-8c23-ef7677564f7c",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fab72d34-05b2-4a47-96b8-7c4092e0dd6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2119e605-13ec-4169-a681-00bf4e489f52",
        "cursor": {
          "ref": "fb449167-b2db-4bcc-bb94-68aca46465e7",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "a5c18894-f907-4e58-a78a-2bbef9d9d957"
        },
        "item": {
          "id": "2119e605-13ec-4169-a681-00bf4e489f52",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "75fd366a-a66e-4769-956b-b839a7803065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95ab8e2e-3260-458e-84de-5650c3c18525",
        "cursor": {
          "ref": "f15f727d-933d-4e52-aebb-cc6e2d9cc638",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "01482ac2-7f48-4d5c-8b82-87cb14619db8"
        },
        "item": {
          "id": "95ab8e2e-3260-458e-84de-5650c3c18525",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "08c5e93a-e88d-480a-bf98-13345cb79c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3c147a3-ad1d-4aca-8af7-fb34cce473a0",
        "cursor": {
          "ref": "bb7ef893-45b0-4d1e-a2f6-9c9794564cb5",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9414bb46-d78e-4929-87d9-acab644eab9c"
        },
        "item": {
          "id": "d3c147a3-ad1d-4aca-8af7-fb34cce473a0",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "fc732ca0-64a1-4e79-8910-8aceb612ad0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f67fc85e-71be-413c-b692-0cc607a51b51",
        "cursor": {
          "ref": "c7c18ab5-67c0-4a6c-9c95-551b990548b0",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "53be631c-0616-4aa4-9631-b26e8f3e207b"
        },
        "item": {
          "id": "f67fc85e-71be-413c-b692-0cc607a51b51",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8db0eee4-01d8-442b-afec-9522fc20969e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ec21b7-af8f-46a9-9b76-f4199a079c6b",
        "cursor": {
          "ref": "65ae30bf-6a61-497c-9a30-4a863eee5849",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "60c40552-c1c4-488f-a64d-a7d17715e491"
        },
        "item": {
          "id": "f8ec21b7-af8f-46a9-9b76-f4199a079c6b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "2b05e74b-8e6f-45ff-8eea-807269424eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc6ff5e6-7e75-42ba-bd19-ae63667d2883",
        "cursor": {
          "ref": "3a21d6ac-5261-4669-8337-db31092d2c4d",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a77aa433-dbcc-42ae-ab68-adbacb3cb4d5"
        },
        "item": {
          "id": "fc6ff5e6-7e75-42ba-bd19-ae63667d2883",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "169b20f2-2375-4652-afbb-1cd2ef7adc93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16226202-d6ee-4a90-bc60-045d4daffe70",
        "cursor": {
          "ref": "7202abbf-c2a1-4b90-a136-2309f751d839",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b17f11a1-9de8-469c-ba36-085560ae33b3"
        },
        "item": {
          "id": "16226202-d6ee-4a90-bc60-045d4daffe70",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9486aa78-5abe-498d-87c3-71d6004596ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99514332-59dc-4e44-a25c-d7f8e1733a93",
        "cursor": {
          "ref": "1c234302-e702-4981-a2c4-04c2539284ad",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0950e060-a202-4f4e-b1b3-e847af7c8bc2"
        },
        "item": {
          "id": "99514332-59dc-4e44-a25c-d7f8e1733a93",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "854200ed-1ae4-46ff-b2a8-153f567846c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94c98f16-f2ee-4d92-8df4-bcaa4fa9e41d",
        "cursor": {
          "ref": "903d471f-809f-4d84-af3d-afecdd85019c",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c7deb50b-3761-490a-940e-ab3d805f49e6"
        },
        "item": {
          "id": "94c98f16-f2ee-4d92-8df4-bcaa4fa9e41d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "6c19f33f-6886-486a-9180-d98058a04845",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac62834-855c-40c1-b7e8-fce7ff3a23f9",
        "cursor": {
          "ref": "85610222-56bd-4a99-b8d9-60c4aa33ebd6",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5d680136-f717-4061-8f7c-6f6ecf069be5"
        },
        "item": {
          "id": "3ac62834-855c-40c1-b7e8-fce7ff3a23f9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e9f28e5e-b245-4db3-adab-3ecff3d03634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7ead3b-a967-4ee2-bfe5-34bd5870ef21",
        "cursor": {
          "ref": "2e71f076-deca-4ae3-8e37-5ce3b69c4b04",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "afb723b1-6576-4b69-b3a1-7178cff31e2a"
        },
        "item": {
          "id": "dc7ead3b-a967-4ee2-bfe5-34bd5870ef21",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "c980dd09-687f-4b3c-b530-85fe8be9e2ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7093d3-b72a-40f5-af84-79549278fadb",
        "cursor": {
          "ref": "f77af326-1f05-4266-a3e1-0c726a19c111",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6e652e6b-9097-4302-90ec-de627daef568"
        },
        "item": {
          "id": "8a7093d3-b72a-40f5-af84-79549278fadb",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "48aa8948-d9dd-4ded-8363-2e267bc9e26a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a6d902-5bbc-43a1-bf90-64b1ea2ccb53",
        "cursor": {
          "ref": "308c02b0-89a1-4adf-9866-97ccd551cf3d",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4ec52a09-e659-4474-8c9e-0c4336685a7f"
        },
        "item": {
          "id": "b7a6d902-5bbc-43a1-bf90-64b1ea2ccb53",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "3219bf07-86b9-4030-a88f-744cd04393a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16acf1bf-42b9-408b-8814-3b2e942a88d4",
        "cursor": {
          "ref": "0b165c66-6a21-4d2b-a1d7-befe9f1f06a2",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d02b50fc-b593-4b1b-84d1-e915827a50d2"
        },
        "item": {
          "id": "16acf1bf-42b9-408b-8814-3b2e942a88d4",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "34114906-e44d-46ab-ba9f-7fa0e154e980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d792a108-1006-45bf-898f-83852f9ee221",
        "cursor": {
          "ref": "8418ce7f-3c41-4768-aa12-0ec4cc15c596",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "f26c6f17-2316-4afd-a4c1-251040c5834a"
        },
        "item": {
          "id": "d792a108-1006-45bf-898f-83852f9ee221",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "b837d81a-2fcf-4b7c-8ae7-49fadcbe0458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7fd188-948c-48ed-b140-b63bf93e30b8",
        "cursor": {
          "ref": "78a6eaee-b48d-47d9-b178-676687da3869",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "252e1e90-eefa-4806-b35e-490d9d99f508"
        },
        "item": {
          "id": "3a7fd188-948c-48ed-b140-b63bf93e30b8",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9e9876a8-94df-46c0-8be0-517e0800e95e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c52150-9040-4acc-91c3-0fff39b4a441",
        "cursor": {
          "ref": "d2e84329-2e2a-47e5-b795-d1473dec87fc",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "37eb2846-3f50-4877-8f84-ef971459b9db"
        },
        "item": {
          "id": "e8c52150-9040-4acc-91c3-0fff39b4a441",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "20532586-4438-4ff4-9e9c-ef50ae488ce7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83fbb6cd-7d02-4455-80a9-709dc8d4994b",
        "cursor": {
          "ref": "424416a8-314e-4c06-9d5a-b691b1570840",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "de14506b-8289-4c6a-8197-543183d57781"
        },
        "item": {
          "id": "83fbb6cd-7d02-4455-80a9-709dc8d4994b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "061d051b-99ea-435d-b1ab-cf7512f77848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1bb7c82-0f58-4b72-a563-180c5a7833fe",
        "cursor": {
          "ref": "be9e8748-c412-4780-afb4-f5ff23baa73a",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "a0978a1f-3735-478e-a64d-8f536c944196"
        },
        "item": {
          "id": "d1bb7c82-0f58-4b72-a563-180c5a7833fe",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6190f0bb-bcc5-4a22-b056-11419c55eccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e994f6a2-c86b-4ddc-a337-067f49c32c5f",
        "cursor": {
          "ref": "c6fa1b51-e680-4cba-a209-594dd7e5ad47",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a0b2b7cd-87fb-44bb-a901-6a7cf0ff0869"
        },
        "item": {
          "id": "e994f6a2-c86b-4ddc-a337-067f49c32c5f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "cc1d3508-94ab-4473-811c-0854749b7cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bae17e0d-7223-437c-9377-319c0eb7cb1c",
        "cursor": {
          "ref": "cac44a27-7f7a-43c8-848d-a4536a7e00a8",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "9d6f0c30-a684-4a2f-906a-766706416a37"
        },
        "item": {
          "id": "bae17e0d-7223-437c-9377-319c0eb7cb1c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "e60c45e9-3015-43c7-b2b4-472a9df030a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4a09f7-031e-4919-bafe-d0a436ff08ef",
        "cursor": {
          "ref": "4ed95762-4d4a-4509-b776-84cbbe033a5b",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "34d0751e-08a5-4cfd-bc2f-4365b09b2162"
        },
        "item": {
          "id": "bb4a09f7-031e-4919-bafe-d0a436ff08ef",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "66d52289-819d-495c-a0c3-6ee365ee0fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2856ef75-36e4-45a6-997a-32c40b5eafb6",
        "cursor": {
          "ref": "6bdabfc6-c0f4-470e-b566-bfffe1d21b30",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d907efbe-2b60-4cd3-9836-13000d68af8e"
        },
        "item": {
          "id": "2856ef75-36e4-45a6-997a-32c40b5eafb6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "1bb79319-0b5d-4b2f-8e86-f699b0ecd08e",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "4680bd01-e457-420c-9992-89cfcc61edff",
        "cursor": {
          "ref": "a7fd4ce4-4608-46b9-bfd7-0147c337ee07",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "69124a5c-e13f-4d7a-ac14-ed79887c7c8c"
        },
        "item": {
          "id": "4680bd01-e457-420c-9992-89cfcc61edff",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "689f4725-2249-421f-a501-1fba74f15c03",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "65e70a4b-32df-4b4f-ba82-0e500f64b1aa",
        "cursor": {
          "ref": "3b3b71c3-5bd9-4935-8834-6960bd8a8952",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "8d09583b-35e6-4a2a-adfe-63a46247f615"
        },
        "item": {
          "id": "65e70a4b-32df-4b4f-ba82-0e500f64b1aa",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2957b6a6-26d8-40d1-8440-d61e9f391fc8",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "6e4074ec-19b0-4574-aeca-c867195aea46",
        "cursor": {
          "ref": "0bae4c63-f110-41fc-8ced-5c3b49cbdf97",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b001c872-ead5-4f71-bc72-16fef6ba839d"
        },
        "item": {
          "id": "6e4074ec-19b0-4574-aeca-c867195aea46",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "77f40acd-79a6-445d-b216-7df24d24adb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d4221c-fdf9-4692-9c6c-ac8bcf78f054",
        "cursor": {
          "ref": "56a71011-bfa2-4bb1-b322-8d747a7c9c85",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "7af77137-0e1c-4044-aea5-ab5d5402e226"
        },
        "item": {
          "id": "d6d4221c-fdf9-4692-9c6c-ac8bcf78f054",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b95e2f38-04fa-4478-ad66-bb847740907e",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "227a1ff2-c93a-485f-8649-e7446764127d",
        "cursor": {
          "ref": "35b444a7-140e-4e6f-9657-002fa1a61729",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "02fab660-404b-4bab-a953-64bb533a97d0"
        },
        "item": {
          "id": "227a1ff2-c93a-485f-8649-e7446764127d",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "19f39209-1e03-4dbd-ac16-58fb5d63fa13",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "82309724-f160-4bb0-9277-6e5e9f95c1dd",
        "cursor": {
          "ref": "e6f38304-5139-4fb9-9715-452c8a321022",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fc595dde-05ca-4a79-a864-7f73d5397cea"
        },
        "item": {
          "id": "82309724-f160-4bb0-9277-6e5e9f95c1dd",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a8c62e80-0574-426d-b44e-7ab35f4efaca",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "71ca4952-96dd-4938-bb2c-810d80fab340",
        "cursor": {
          "ref": "dae9660c-3fc0-49a3-a960-a8683525f3d0",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "0b148f93-1e83-481d-ad7a-8578726bab39"
        },
        "item": {
          "id": "71ca4952-96dd-4938-bb2c-810d80fab340",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "c852cf07-9b26-4c3c-94bc-61aea4044f40",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "709c14ac-8a3e-423c-b54e-228bdb1898d3",
        "cursor": {
          "ref": "289d9ce4-478d-43bb-b103-5e0029e10d5e",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "b15c049a-40ae-4676-935f-5ac024387a36"
        },
        "item": {
          "id": "709c14ac-8a3e-423c-b54e-228bdb1898d3",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "ee0baaaa-62d2-45b2-9f13-821b69f53d82",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "125847b2-8434-4bf5-9c5a-4ad835f4fa2b",
        "cursor": {
          "ref": "5cff0b86-05b7-4863-a7bd-06e7d7b87c31",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4dd88984-a641-44ca-ac71-d98cf0d1e974"
        },
        "item": {
          "id": "125847b2-8434-4bf5-9c5a-4ad835f4fa2b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "331b959b-4db7-427a-9fc2-0bca67d3a021",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "01415486-5145-4993-8bbb-4c63f4e5f1aa",
        "cursor": {
          "ref": "cfe3f830-1a79-48c0-bf9e-aa7bd57e8c15",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "ec0e7ed8-8137-4ee0-984d-1ce7e8e759b3"
        },
        "item": {
          "id": "01415486-5145-4993-8bbb-4c63f4e5f1aa",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "8c507bcb-e938-4283-afbc-77c9f0aa8b5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c110eb77-fcd5-4f77-85bf-2f6519b302dc",
        "cursor": {
          "ref": "f9143dbf-2cb8-4665-8008-b7b1912ace76",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8134eca7-974f-4893-a539-d607ded053d1"
        },
        "item": {
          "id": "c110eb77-fcd5-4f77-85bf-2f6519b302dc",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a6599361-3c42-4a0b-82c7-eedf1f18460e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a4046db-90f3-4c80-959c-f6bd69757780",
        "cursor": {
          "ref": "ac541ef3-368c-4448-bb7d-50a5eeb6b6d4",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "d9eebf25-1f14-4ccf-a5f1-c31f0642fd13"
        },
        "item": {
          "id": "7a4046db-90f3-4c80-959c-f6bd69757780",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ed934f77-9104-4d31-82c0-4cedd2a5be60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c67260fc-7184-41f6-9e97-f5a0768661e1",
        "cursor": {
          "ref": "d5b368f0-b072-417e-92ab-4b67852b6cbc",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "b5c2c060-b21d-4ff9-a652-f0913cfd4e83"
        },
        "item": {
          "id": "c67260fc-7184-41f6-9e97-f5a0768661e1",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "0c4e42d4-783b-42fc-9619-895df17ab734",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2c898f-862f-4cb5-b063-fdd28cb19aef",
        "cursor": {
          "ref": "b1de2c97-529c-4c6b-a928-ad3c338fa428",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "568e7abe-6230-4a0e-a73f-bbe3f82df46c"
        },
        "item": {
          "id": "5f2c898f-862f-4cb5-b063-fdd28cb19aef",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "fbfbc59c-4c4b-4257-a674-628daa0b1caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08aa3f65-5cfd-4390-b009-b485eed8f27d",
        "cursor": {
          "ref": "fde014f9-543e-436c-9a75-31e8e7acec02",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "9453718d-59ac-4cbb-887b-e403f7355667"
        },
        "item": {
          "id": "08aa3f65-5cfd-4390-b009-b485eed8f27d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "2c5bdb80-e50c-4e21-b053-d981aef31612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9533be8-d5c3-4e9b-98e2-3db4ea275068",
        "cursor": {
          "ref": "36378a01-1325-477f-8633-def432f101ef",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "46a1e512-cc11-4dfc-bc81-5d593b3cdf40"
        },
        "item": {
          "id": "e9533be8-d5c3-4e9b-98e2-3db4ea275068",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ed5cd157-82b2-454c-af34-fab1d49cd7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bce9813-1443-4a2d-8fe1-0978b0f3c337",
        "cursor": {
          "ref": "0114bff5-b41a-43dd-b95b-f7c0f0da602e",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b2e032c2-5614-4cc1-b7ee-0b2678df7926"
        },
        "item": {
          "id": "4bce9813-1443-4a2d-8fe1-0978b0f3c337",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "91628142-e99c-41ed-90dd-a31ee49f0449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f352a8dc-8d1b-4333-bd82-c35aa055ba89",
        "cursor": {
          "ref": "a4341d7c-e51d-425c-b4aa-3168f1ca553e",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "626e7924-6478-4e2f-9eee-5d5687234592"
        },
        "item": {
          "id": "f352a8dc-8d1b-4333-bd82-c35aa055ba89",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9e5924ce-faad-4cf5-8a17-0ae2ae3653df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beb92805-9baa-4f12-802e-b3afdb816b59",
        "cursor": {
          "ref": "f53081f7-3ebe-41df-9f8c-139333960ea0",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "e5efd3a0-ea52-49c6-a2fc-53e3a58336a6"
        },
        "item": {
          "id": "beb92805-9baa-4f12-802e-b3afdb816b59",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f22801af-20a1-47a9-94b0-b34b7f83629f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 124,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e0504e-b0de-40cb-94d5-4dc318b77a1e",
        "cursor": {
          "ref": "eae4163b-b3ad-47dd-8703-a3fe6d2c9113",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d9309646-20d2-4ad2-b0eb-1596270bd6a2"
        },
        "item": {
          "id": "94e0504e-b0de-40cb-94d5-4dc318b77a1e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ecaddc04-e4bf-47ee-b2dd-e5b3cae262d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13a1135f-904b-4b9c-b289-f40e52301e7b",
        "cursor": {
          "ref": "d299be00-8d6b-44a9-8889-e822ec7d20be",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "13cb55d7-01f4-41ab-93fd-f9746fa752ce"
        },
        "item": {
          "id": "13a1135f-904b-4b9c-b289-f40e52301e7b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cb15c0b1-79b9-4adc-8995-0c63bdf289eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25438a8f-3e58-4205-8de2-2639d3638f3b",
        "cursor": {
          "ref": "b11784dc-8506-4273-80d0-29b93a122df0",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "906069d3-5550-4492-ad07-382667527fc8"
        },
        "item": {
          "id": "25438a8f-3e58-4205-8de2-2639d3638f3b",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f4f30b01-c34d-45aa-b49d-7ce18960be35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f3ac76d-3d7b-4eff-9e32-42e8461f05bb",
        "cursor": {
          "ref": "f53bf4d9-5750-45b3-bb8a-905370afdd14",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a45c92de-b13d-4bf4-be9c-575ea6d53821"
        },
        "item": {
          "id": "9f3ac76d-3d7b-4eff-9e32-42e8461f05bb",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e4ccec9a-2c98-4a2e-a874-de86d9b6f5fa",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "6593be0d-63e2-481a-8cc6-f79f94841a4a",
        "cursor": {
          "ref": "ec18ab83-0df8-4e0f-b0b6-58968919164d",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7ada1686-9537-4e6f-8b3a-e47b7044ae6a"
        },
        "item": {
          "id": "6593be0d-63e2-481a-8cc6-f79f94841a4a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "1d6a6139-9026-43c0-bbfc-fa24c1763553",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "b1cb8cad-804d-4a82-9a18-e88235657a5e",
        "cursor": {
          "ref": "93e9f285-b7ed-47f4-b140-a912aba2b9c8",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "2e2a8cec-f353-4280-91b4-49ebb0a17712"
        },
        "item": {
          "id": "b1cb8cad-804d-4a82-9a18-e88235657a5e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "403f8f53-39ea-4fa4-933a-8a5e9a79abec",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "4138c17f-42e7-46b7-8390-14998a2ac47c",
        "cursor": {
          "ref": "2c76b919-05cf-4045-9cda-9c048afdd401",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "fdb45253-51ad-484a-8d19-6471ab5f48ce"
        },
        "item": {
          "id": "4138c17f-42e7-46b7-8390-14998a2ac47c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ebf37a2e-b53c-4774-abaa-b8c6b51b4bd2",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "ce41b908-a27e-4bdb-9dd7-e6c15e19ac15",
        "cursor": {
          "ref": "37da01fd-2d4e-4247-bd1f-d51d76090898",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "33ab5d5d-5271-41df-97e1-fee41c44c17b"
        },
        "item": {
          "id": "ce41b908-a27e-4bdb-9dd7-e6c15e19ac15",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "e0af5f6e-a657-424d-87c7-665205622f8a",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "7be20e73-7f2d-4538-89b7-78787bddce85",
        "cursor": {
          "ref": "0337bf18-e122-42a5-a411-f3a65693853e",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "49dd0b35-140c-4ee2-bd67-69768b16ad65"
        },
        "item": {
          "id": "7be20e73-7f2d-4538-89b7-78787bddce85",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "7100d2e0-df0e-4a6d-a579-c383ac55493f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a5b127f-7ab2-48a7-bd29-617883220b29",
        "cursor": {
          "ref": "bffdf313-5ea5-4ed7-a5a0-48ce3ba39f04",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "98688f35-6ae5-4ad0-9ef5-ac922ec8a755"
        },
        "item": {
          "id": "4a5b127f-7ab2-48a7-bd29-617883220b29",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3dd7919e-b545-4942-af6a-578f43157e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316cc4fb-a1bb-49c6-be4c-ff0c93ded42d",
        "cursor": {
          "ref": "267dfabe-c2a4-4f6a-8f32-94251d162540",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "e82eba79-395f-420f-93a7-067f682fb5a1"
        },
        "item": {
          "id": "316cc4fb-a1bb-49c6-be4c-ff0c93ded42d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "489aff0a-3d5f-43c7-9232-0e88f5b7f46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41bed6d6-bf7d-42db-8d67-6ab0b4b32297",
        "cursor": {
          "ref": "cb6c8b5b-89dc-4638-a500-1adb5e45f286",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e3830e16-49a8-40a8-9810-50ef8bd8bb52"
        },
        "item": {
          "id": "41bed6d6-bf7d-42db-8d67-6ab0b4b32297",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "05b1522b-0a25-45de-8ccc-e2ef8bdfaf7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3dff53-b467-4217-bbe4-09cabd4046b9",
        "cursor": {
          "ref": "f00560a4-d515-4bdc-bc50-f18a68d3466b",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "0d330401-26a5-49ae-9cca-c78f833445f3"
        },
        "item": {
          "id": "ed3dff53-b467-4217-bbe4-09cabd4046b9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "77533bdd-77dd-432c-b96f-c562a499960c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e97e62-9f48-48fc-83f8-f85e64386d59",
        "cursor": {
          "ref": "e9ff493f-0fb0-4b71-814f-196538a88844",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "af6a9d0b-cb91-4092-9423-3acd1f1061af"
        },
        "item": {
          "id": "74e97e62-9f48-48fc-83f8-f85e64386d59",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a7f45440-825a-4597-9850-649a36ce1e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58162b6b-9102-4e09-983b-3c6028a84c68",
        "cursor": {
          "ref": "fc2e7a3a-cb52-469b-aaf1-638263632af7",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "b720efad-6e78-4c94-b3d1-75b15ccc7dd0"
        },
        "item": {
          "id": "58162b6b-9102-4e09-983b-3c6028a84c68",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "aa1f9f48-b6d7-41b7-b893-cf8bd1a2cc54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477e99c6-b93f-4be1-ba51-0fb08a8d4cc6",
        "cursor": {
          "ref": "327cf637-a18c-43c8-8006-557001935024",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "09a91be5-b1fd-4f17-8523-2e745971b598"
        },
        "item": {
          "id": "477e99c6-b93f-4be1-ba51-0fb08a8d4cc6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "b0c57fb7-1ae8-4676-a51a-497868c2e1c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff623d6-19aa-4955-be0f-cd6f647ff389",
        "cursor": {
          "ref": "132c61b3-3af7-41bf-aef9-4f97601ff218",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "a5092a00-e157-492a-822d-bbd84cffbd3d"
        },
        "item": {
          "id": "0ff623d6-19aa-4955-be0f-cd6f647ff389",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0fdf7807-d1e2-4f83-aaf7-348c2e9b5935",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d30f6cb9-2ac2-4607-8669-6ca3898d7d9d",
        "cursor": {
          "ref": "ea6c2dcf-b26c-41a5-a69f-146a95d8c5ef",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "4fc3600b-df41-4ec7-bf06-640ac02770a3"
        },
        "item": {
          "id": "d30f6cb9-2ac2-4607-8669-6ca3898d7d9d",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2b7e9269-5199-47c5-bfa3-5625cdb3bf2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94a25510-97b6-412f-93a3-40a3e3ee7304",
        "cursor": {
          "ref": "ce754091-ef6c-4c84-8235-ef6e37f83eda",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "676a3a68-1c19-463b-ad3b-adce0068476f"
        },
        "item": {
          "id": "94a25510-97b6-412f-93a3-40a3e3ee7304",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6486a464-5439-4f36-aa7d-f38bf9c3955d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f197db6-5c0d-4ad7-a4fa-aa4070ac459b",
        "cursor": {
          "ref": "6d7970d3-8338-4036-85b0-41a55ff0a23c",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "27573586-4f5a-4fbd-a1a3-92035cbed032"
        },
        "item": {
          "id": "3f197db6-5c0d-4ad7-a4fa-aa4070ac459b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f4d0e331-5a28-4375-bd31-2402406d3e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54b2365c-8030-4627-bc51-3fdcc59ecf9f",
        "cursor": {
          "ref": "5158d7de-f352-4280-965c-75bef070aae4",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b727bce7-666a-4950-91a3-ccc7708f3ba8"
        },
        "item": {
          "id": "54b2365c-8030-4627-bc51-3fdcc59ecf9f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d95adca9-444d-40c4-beee-0b65756177c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16dbd667-2810-43fd-83c9-c058fde1b3f7",
        "cursor": {
          "ref": "10a582d8-16c7-45f3-803c-fe9d8f157035",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "6e05cbc3-3382-4a12-823d-61ec96e5497b"
        },
        "item": {
          "id": "16dbd667-2810-43fd-83c9-c058fde1b3f7",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "bcf45d4d-3132-41b3-b43f-e501e87a16ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69aa13e7-014b-478b-8380-a3477fbcd999",
        "cursor": {
          "ref": "239cce34-47aa-4ec9-af58-47d769943e67",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "88769cf3-b183-4981-8010-58b235b617b9"
        },
        "item": {
          "id": "69aa13e7-014b-478b-8380-a3477fbcd999",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "571fd232-a1cd-49da-8f8e-3ca7d7c050fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c4cfcd5-08bd-4e0d-bb96-f14668a2f415",
        "cursor": {
          "ref": "98bc1f08-6589-4b89-9277-7ff7bf83362f",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "3b848176-f239-4e6f-9968-78f3bccadf5d"
        },
        "item": {
          "id": "2c4cfcd5-08bd-4e0d-bb96-f14668a2f415",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "bcc028ac-f1c7-4f25-ac58-d17a1ea3e910",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9198b6ce-0084-4bc5-b086-7eb8eac04534",
        "cursor": {
          "ref": "b84c170e-5ffa-43aa-973f-bf0c7611ef1f",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3464534a-daac-4b08-ac13-2bd76288fecc"
        },
        "item": {
          "id": "9198b6ce-0084-4bc5-b086-7eb8eac04534",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1492bdc3-39e3-4148-a018-0e7be43bf87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e4de495-b843-4d44-aa71-8847599133f4",
        "cursor": {
          "ref": "63ed1dc6-31d1-4df9-9fce-1ce558d774f3",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "e5acd447-b3f7-49a2-8ce1-01f94eaca7ea"
        },
        "item": {
          "id": "5e4de495-b843-4d44-aa71-8847599133f4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "ae4a408c-140d-4a5d-a79a-3829fbe8d2e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "697cbc0d-c379-4270-9de5-066678e5dbb1",
        "cursor": {
          "ref": "2e37849b-d5a8-4806-8473-723fca5920c4",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "f1ce45de-f9c2-4914-b782-1254e76707a7"
        },
        "item": {
          "id": "697cbc0d-c379-4270-9de5-066678e5dbb1",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "283b6c39-d6db-461c-8002-8d1dd1194686",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c042fa8-9156-4fc4-8c70-b03500ea276d",
        "cursor": {
          "ref": "0f1b7471-8083-48ed-9d55-0df6a116decd",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "3df45419-1c2f-45cd-a0a1-3c9eea851f60"
        },
        "item": {
          "id": "3c042fa8-9156-4fc4-8c70-b03500ea276d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7d8c2b87-fbde-4bf9-b9e5-27ac07e7e4a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779d322e-da5c-450f-a4d4-d24bfb0a619f",
        "cursor": {
          "ref": "ec255cbb-22f5-4aea-a63c-a66545693a1f",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "27eaeee6-b055-4691-ab82-fc8b1be3fb1f"
        },
        "item": {
          "id": "779d322e-da5c-450f-a4d4-d24bfb0a619f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "20f95003-a98e-4d02-850c-e21bd0445308",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "968bb888-2882-43a1-a6cd-98dc9ad4cee3",
        "cursor": {
          "ref": "7a4182ee-8362-4a69-bf40-4c96318cd8ba",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4959d9bd-1cd1-4eae-a6b9-11550aa032b4"
        },
        "item": {
          "id": "968bb888-2882-43a1-a6cd-98dc9ad4cee3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e41307a3-809d-42b9-80a9-d3c9e690ae6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47793946-46d7-403e-bf29-c37497e0e4e8",
        "cursor": {
          "ref": "4135c211-5b5b-4f9a-915c-59a45140a92e",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1670e391-3ed5-4f75-a5b4-73200dc79042"
        },
        "item": {
          "id": "47793946-46d7-403e-bf29-c37497e0e4e8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e3d4d6ae-b054-47e3-a66b-da3826372f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8379a7cc-f71c-41ea-9310-acbfe2d7092d",
        "cursor": {
          "ref": "2430630d-a2ec-4d9e-8294-fe6ac385a384",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "f51dd06c-972b-4a98-a3e7-d63055e09603"
        },
        "item": {
          "id": "8379a7cc-f71c-41ea-9310-acbfe2d7092d",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "1deb88b9-de94-41b8-87cd-748497520d68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8582a909-fcfa-4379-9984-ff81f2d46bf5",
        "cursor": {
          "ref": "c4b1cf0b-ede6-4763-9096-95785e815220",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3244b9e5-163a-4ebd-ba12-71537bb9625e"
        },
        "item": {
          "id": "8582a909-fcfa-4379-9984-ff81f2d46bf5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "199f016e-ccc5-44c1-825b-10d4531ad377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfd6dbd-6266-4648-881e-63bda80da0a7",
        "cursor": {
          "ref": "7b889c52-5b4c-4e1e-98f3-68d58897a386",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "df60e462-7cd3-4294-9897-e1ab8948d0e0"
        },
        "item": {
          "id": "1cfd6dbd-6266-4648-881e-63bda80da0a7",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cf9f014c-2aee-4251-86f6-836774303393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398265f5-0b12-4193-ad0a-1b43c151f32d",
        "cursor": {
          "ref": "a99bafb7-e3ee-421e-b200-16b84020f3f2",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "1f9a5eb2-bd90-47d9-933b-962636389a4b"
        },
        "item": {
          "id": "398265f5-0b12-4193-ad0a-1b43c151f32d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "96877a74-618c-4aa9-bb52-ec7c00aa113b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb19c05-e537-4243-817a-6251e032eefa",
        "cursor": {
          "ref": "23614f29-f295-42b9-b481-e7e1829078e7",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "99bcbd34-e455-417e-b44b-c8590c74a898"
        },
        "item": {
          "id": "adb19c05-e537-4243-817a-6251e032eefa",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "9fcd0a21-2316-47e3-aeed-51e96d7534e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdf69e4e-b8cc-434f-a166-7dc5d64c9c7e",
        "cursor": {
          "ref": "5898ad76-e882-42a7-8ef9-d7e12294016f",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c2a916d7-af4c-4f07-9574-102964da97ff"
        },
        "item": {
          "id": "fdf69e4e-b8cc-434f-a166-7dc5d64c9c7e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "b0baca3a-cc82-48d3-a025-85882f53ec0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c842dc9b-ed23-4587-9535-ca10593d83e0",
        "cursor": {
          "ref": "fe0fa60e-15b5-4bd4-b42e-3304f2d017d4",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b3e57fed-a31e-4fde-8a4b-471e990da4c3"
        },
        "item": {
          "id": "c842dc9b-ed23-4587-9535-ca10593d83e0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5adfa834-2331-412d-9d4e-91b3a1332124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b7b4c4d-5e9d-4280-b957-b4d83d07229c",
        "cursor": {
          "ref": "52ac1f56-3826-4928-b380-aaa4b55746a3",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c5669f22-7214-47e1-a344-6b44c916e76f"
        },
        "item": {
          "id": "1b7b4c4d-5e9d-4280-b957-b4d83d07229c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b9afb5e5-4f7a-47f8-8750-79f5bf3198bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1972d689-9fa1-4c07-a253-c79c1ee3998f",
        "cursor": {
          "ref": "13df79ec-090b-472e-ab77-ac85230b8ebb",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "041b658d-c6e7-4199-8494-8efabdd9d2bd"
        },
        "item": {
          "id": "1972d689-9fa1-4c07-a253-c79c1ee3998f",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5f1ecbed-4257-45f9-8de9-7c5098ad2186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a80f2261-57aa-4903-8c6a-bc450de97a0f",
        "cursor": {
          "ref": "17ecb449-31f7-46c7-aa23-b368bf642b82",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "08abf8c3-234b-4a54-a7ea-4f6fec91cfb4"
        },
        "item": {
          "id": "a80f2261-57aa-4903-8c6a-bc450de97a0f",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "8b8fc2cd-590d-41c9-be22-4810e9b16eda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca23863-e39b-4ae1-99ee-d322985c1f91",
        "cursor": {
          "ref": "08037c7f-1369-4625-abfb-5ccd5819d57d",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "e48287c4-8a3b-4856-bfde-72334996d0e9"
        },
        "item": {
          "id": "3ca23863-e39b-4ae1-99ee-d322985c1f91",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4a1a9d5d-619f-4d45-9b22-f73cde48b511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc20b44-e976-43c4-9286-901cd2c55900",
        "cursor": {
          "ref": "6e329469-1087-433c-9f57-f0fa8504bdc0",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "01635d7a-e030-41b9-8201-f7a921168c35"
        },
        "item": {
          "id": "9dc20b44-e976-43c4-9286-901cd2c55900",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2cdf84e9-7722-432b-afc9-f1f8533b55b6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e86059ab-b5f5-40f4-a36a-0898ec3a6939",
        "cursor": {
          "ref": "3c8b830b-da3a-4254-96fb-4782891aee5e",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "705e6799-6d12-4b17-8878-fdf538f6b2b1"
        },
        "item": {
          "id": "e86059ab-b5f5-40f4-a36a-0898ec3a6939",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "506a3c4a-f5b7-4e7a-9d5e-76e129110b0a",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "c380343a-e4a7-465e-858e-bda9aa651469",
        "cursor": {
          "ref": "c268024d-d994-4041-bd1b-10b737baec10",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c84b87eb-f79e-4e5e-aea2-f7d259cf617d"
        },
        "item": {
          "id": "c380343a-e4a7-465e-858e-bda9aa651469",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ff28cc81-8d5f-45f0-bd30-dd395aa3791a",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "48fd8209-75e8-4f14-bfe4-cf0cefca1c1d",
        "cursor": {
          "ref": "55b9cf8f-43a3-4a27-a3cb-dda7219038a4",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "d1fb72bf-8241-4a67-a8eb-2d1e81d4fedf"
        },
        "item": {
          "id": "48fd8209-75e8-4f14-bfe4-cf0cefca1c1d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a4eccd44-956a-461c-8d0b-432db2d92dc6",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a93e4dc-4023-4f99-948d-7376b9f643a2",
        "cursor": {
          "ref": "0e16c40a-0ecd-4bdf-83ed-fc4468f81e4f",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "40e0adf1-f4ff-4c05-b935-254f6c8aaa57"
        },
        "item": {
          "id": "7a93e4dc-4023-4f99-948d-7376b9f643a2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e90b66b1-50bf-4779-bd61-6e64fdd8bd59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a93e4dc-4023-4f99-948d-7376b9f643a2",
        "cursor": {
          "ref": "0e16c40a-0ecd-4bdf-83ed-fc4468f81e4f",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "40e0adf1-f4ff-4c05-b935-254f6c8aaa57"
        },
        "item": {
          "id": "7a93e4dc-4023-4f99-948d-7376b9f643a2",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e90b66b1-50bf-4779-bd61-6e64fdd8bd59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b022571-ecb7-46b2-bab3-380d8447502e",
        "cursor": {
          "ref": "bd2e0577-95f4-4683-b614-b5fd93d66c7e",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9f58289f-2875-4b22-bb1f-c398222a2613"
        },
        "item": {
          "id": "0b022571-ecb7-46b2-bab3-380d8447502e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b1914fc1-9c47-481a-abae-0540116f8445",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc3b4c6-97bc-4b50-aa80-9bff7b6f21d9",
        "cursor": {
          "ref": "b99bfd11-26a4-4a6e-9fbf-a5890a5d8868",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "289bdee0-65d2-441d-91dd-58bb2bcf57cc"
        },
        "item": {
          "id": "efc3b4c6-97bc-4b50-aa80-9bff7b6f21d9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "08d10faa-cd27-4ab4-bd48-97e9ef842e6d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}