{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e1250f04-f96f-4b1c-b83f-34548aec9046",
        "name": "Clear Cache",
        "item": [
          {
            "id": "25136f5d-fe0a-4447-ac35-73a46cd107c2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8d38473c-a8a8-420f-819b-96bf40b55ef9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "727702b5-4478-402f-9dab-5394a8102b77"
                }
              }
            ]
          },
          {
            "id": "ff65d1fc-54ec-4485-9c66-0eddfa18f76f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb038bfd-a469-4ec3-996f-398871c876f0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "680157a2-667a-4314-b3d4-b77105dc25df"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8288d85d-2f6f-4526-b00f-2821bfd43db3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "344e7acc-40ed-4e63-bdb9-a3a7df87133c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "180885d8-8e96-46a5-abef-cd197e3b611c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "634bd15f-5ef2-46cf-8ff3-b264db5626ba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e8e381bb-56b0-40bd-a479-15071e759e94"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6f981b39-1f48-42a8-8236-428eb432b647",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0fe73af1-c081-4025-92d1-111ae3a0fb2c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "aba7561e-3d3c-44fb-8b50-d47ba9c33b4b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b3813d1b-5c1d-420c-81d8-c8acd28f0568"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "334987dc-abf0-43ed-9fb0-80b2607b8792",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "90c55785-1f63-45d4-abe7-851a9042c0ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "635863f6-38ef-45fa-a131-c704fe5a3ef5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f4727dff-f780-4ae2-84be-582688118fd7"
            }
          }
        ]
      },
      {
        "id": "a5bc0722-99d2-4239-af10-a5ca6a00428b",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f0e9a549-0aa6-4a1e-86b2-dbf0f89f63a8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5e08b010-3b96-4d6d-829a-761ba6f7ad9a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "192b1550-88f3-43ad-a660-d91557327c1e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b7113f-3541-41ab-a442-f48b5cae1a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "df32ea87-fc64-4809-bbb7-8246eb986f77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54139cbc-6442-45e7-a837-53b39e73a60f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788b284e-63c0-42b8-837b-73c242cf544e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ad373063-a115-40f9-9ebf-4040757c8418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e49fee7-f278-43fc-a11b-014e5311cbc8",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f79518d-984f-47b1-a72f-6b769c9c4271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ab969998-1127-47b3-b5a0-90bbeb31018c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "23e9a1c9-ab42-40da-b67f-032913837c11",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5f3c752-d5a6-49e1-ac6d-913440fc82a2",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda7e6ab-619f-466b-a115-a198af86c432",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62d62d11-7dec-46f0-b7c1-0e344f86f8ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d069ce4-e523-4e7e-8176-394fb72ef6b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53f3e5b-ae7e-472f-b98c-14b2ff984c75"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "eece0114-5bd3-4315-aa21-c9af3e73fa3c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0ccc737e-82a5-44b4-95f6-a392ca55e8d8",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3665871-0ff2-48d2-81a5-a9302908f80d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6836411d-e013-4ee0-9f77-4920ef0f9bce"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d332b6b2-3aad-4257-bd7d-8513cac58d7f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a4956d81-2514-44ce-a6a2-b3abe67273e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "247d3146-a05d-4135-8b8d-a65e43ad5366",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9b31be20-c39f-4222-955a-69e82bdb17d7"
            }
          }
        ]
      },
      {
        "id": "8d759621-63f1-47de-9327-3a0bf16c9385",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "7c63352b-83e8-462e-8150-7c8785168a25",
            "name": "Negative Testing",
            "item": [
              {
                "id": "427b0d47-5475-46e7-8797-f80cc871d33d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f3731baa-060a-4af3-8f39-0afbca368437",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0bb2cb-3256-4e4a-a554-becb74c925c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d6dd4e-ab69-48fc-9cfd-a125cbb784fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d83e58-0303-4282-a361-e91f06314318",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6909274-e8f4-418a-9f60-6f69d2d34c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa2e37c-1681-4ec3-8533-2f1ca90adbd2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "888a625e-56e3-44df-bff5-f292bd62619f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5d17a26-3758-4021-983e-d17ebd10771b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34fc8724-c5ef-4f0b-8dc0-13065f3c95ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db2c089a-be45-4e24-a539-d0e5d7f17536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "197b02e2-259f-465d-bee8-b89f2187e343",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "400a324c-ecc7-45da-a849-88d4eeacb291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c216198d-b7e0-4563-a75c-7dcd94896afc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8ff7623-f203-4400-8369-79258292b07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14c1e5d3-660f-42d0-9018-1524364f9879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caaf966a-0405-48d7-af93-8dd805924af1",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47a59c37-c26c-4989-a35f-1c0e19307603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "716c5bfc-7934-4020-9a79-6b43975bbd92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb820a9a-a0d6-4ac4-9d67-9a759980c5da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cfc71f0a-1796-41ce-9523-d99b91e8fc1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996e21d3-16ea-4694-a6d0-c9b1ad56c1ab",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5990f776-4c30-4db0-8d7e-37c8e358b20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b3b31ac-fe8b-4abc-8b7a-c72ff13beea8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24a958cd-c0d7-43ff-96ec-c536d9759693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfddb904-0a74-42f2-b98b-1d8f7ccecdb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "735e192f-da76-49f6-9322-38ab80af2c8c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a267dc24-4a2b-45d5-b995-ea09d6224078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0fb5b52-b0f8-463f-bb41-b075abcb0fe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e090cd81-3efe-4498-ac8f-7769c725c441",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b1529ab6-ff97-4c02-84b2-6478c222c421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bdd395e-241c-41db-9c17-c2179fe1f07a",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb6f6e4a-1952-444d-9e02-0573da09de51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc9051b0-43ec-406a-b75c-57e90f7ac87c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90bf2a4d-f621-48a0-9c8a-14edcc3db635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "30b2857c-52e4-4662-857c-a25953975ec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c3a8bba-c6e5-4cf8-9d12-00969f137645",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d98336-d7f8-4f15-9ebe-41caf82d0554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d9a12a-bd5f-4b6c-8c13-75ed2c5ff3cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b9ea2cc-7ea4-40db-883b-f3f8655208e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "538255e0-e479-41e9-89d8-7f4ee148c0e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a01d2ad-5d9a-4a91-b761-b9bbb2cf7611",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "227d4652-5b08-4039-9c20-bdd9af41be7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54274112-b254-4a3c-9e8f-bce9f3248c3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10033f75-2a95-434d-aeba-9e258f65ddda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "205cceef-0cc0-4508-8371-15354be2c232"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b76ceab-cd66-4d0d-8c59-dd8f7792e7ec",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0b66ce-8eae-4720-81a6-dd64c7022b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02cef73a-bce4-433f-99db-2e88549e39d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5aa74ae-c74e-42a6-80cf-697cb5909d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b96df273-64f2-46c7-a6de-e707c3769fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94bd50b2-983d-4a33-b7d3-b30438612278",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d788fc73-d30c-413a-b9d9-9ac91e31644f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f81b3f-3dca-4f16-b9b9-ec2604158b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1951de2-013e-4093-9475-3405b281dc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "97244753-daf8-4b7e-9dea-223988a08ce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6af6229-9180-42dd-8b51-cc09e37f2e10",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04273326-6384-46bc-98c9-29529c20e994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f9b526f-c860-4dbc-943b-21cd9907bffb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "090aa083-28db-4bf9-95b4-e7fa2d5c2720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f292235d-a642-4220-b683-bd2657140465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57ccba7f-bcbf-4ced-a023-159ef2a61e33",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8214df43-41b7-421e-b5a1-e1c4e698fff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60fcd2b8-8c3f-482d-8d0d-79b735cf6286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e69ef7-1ac5-41a2-938b-1c2f8e61d692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "aea7e9c7-605b-48ee-a5b5-fb9846a09257"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c925eb5-a6cd-4c99-959a-d5f4cb5b0b66",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3c5c9f-4955-43da-a9f9-a91b325c01e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6b4ce86-345e-4831-a013-a5b393d7ed8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29a0eaa-22fb-4eb4-8e35-4cfeea55c443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f260ec1d-0593-416b-b4d0-21840f6e3234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e23ff3-3bde-49e1-b273-a4784a7165d9",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e066c3-b4c2-43b6-b5ec-130835b5c0de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bcd8ef6-7925-4b4c-954e-73b79d08e3f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92b6792-d01b-4390-8bce-4742e11d9393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d529e9b3-8feb-4d4f-9569-f2455e7084d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ebbea4-02d8-4109-8d87-b32378aeda78",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9be82653-302c-4465-8f9a-d7bed4f3147e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a228a40-5464-4218-b068-80aca7028cf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2053fd09-c330-4e3f-9956-bed22dd2d1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7e5eb936-4ab8-4afd-b8da-6c636c3cb473"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0afdf4ab-9005-4aec-ae95-dffa2bace16f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "148d0c0b-012a-411d-b8fd-03923c57c017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32e31923-ff43-4b67-a008-958a95e9de98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d202cab5-29b6-4a46-83cb-cb21ffa682ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "de537ee2-8a5c-4557-89a3-aae03e246199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabb2f09-0981-419d-b156-906273db316b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9da1fe3e-5629-4603-bb51-d1e665fb5b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d87d8dc-08eb-4368-ae7a-b3bd60de342d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa636b4a-6881-4d28-b6d4-2d6ff87d9826",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "58024030-b5c2-4c8d-a720-e47bdf79a990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdeafaa-f25d-4793-bab3-dbdf8f6b2c6a",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df979391-b071-44f2-8b96-620690a0687a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "521c61aa-7944-4443-b332-ee4dada28d85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684f7232-3880-4afd-8abd-4b71ccc528ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e1caa1a-a414-49a1-b4e5-1c02a336f399"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0305500-5938-4747-a479-40d152b53c61",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dadb56f-6896-4a8e-956b-e6a2d92bb89a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ac029dc-7658-4e42-a302-14e2efd75d39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff2e4c9-d87c-4960-99bc-7cbd68c4c746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "24fe8745-a625-4b20-9a2b-54b1ffa6204a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eccbe563-2c59-4ce7-8681-5daadb973f01",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b942b52-2df9-49f4-9e61-6e8f9b563c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad4d6458-2174-456b-95d2-4e99807df903"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416cc69f-51f3-45ad-bd7c-133ff8f3dd26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3a4972c-559f-4e0d-961b-d860169d2852"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17cb8c16-ad14-4d01-86c3-d422cbdecf60",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab82ab1-c6e0-44e2-a8f7-d12565b59552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "771e20f0-e97a-4629-9d96-6e414b25cd7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7b7c6c8-7299-4b76-ad69-6a0560786288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "73664c31-7d7e-48bd-95f6-4f90935fdb4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28527b66-cad2-4fea-9f1f-ccfdd4cbc6c9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7fb5cb-1752-448a-9a08-687f90ff83ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df5c1f27-ebf7-4777-bd20-d3b8786d9d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f05bbdec-0b56-429e-95ff-891f3c72f247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7e94f9c6-d7bd-47b0-982b-a4fb58694b67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2afaf45-5b75-4583-8f1e-72072bab8383",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf2fd42-7699-4786-bdde-6b69b8a471f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78dd99f0-95f0-4381-9c79-7b26027d7adc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f0283b-3923-47c4-9dac-e07dbfa6d348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "63f0a2ad-1367-47ca-9fbf-878cbc772953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb04aa04-2ac6-419c-9e1c-f1ba59df47b0",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54702f7a-8147-4beb-8933-cf37fa444e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43729b18-8437-4d85-84d3-277f643fa0bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a37c970-5558-43b2-a321-903da77edeed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "449e47d0-4e40-473f-b451-5cf491aefb84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87cbd6f-bb84-4227-a599-5a15e54e787f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6091e9b1-ff45-4b11-8e75-f44a5653dfd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b71aa26-3273-4be6-85f3-4e387563aa7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "495ddf23-e861-45f5-9e63-c034d21c0ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c22f3dd-1e50-4876-8ad5-03fd6dfc4295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449aaa5a-eb74-4c94-a0e5-f1a24299ad0d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41034af-3058-4747-b797-d2f029f76dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ec00ef3-cb87-4056-95a3-c0f019b0c2f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f6fb68-27fe-469b-8fc8-4086ef0b9c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a9a9082-7acb-45f5-a916-682b82f17e68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45c0ef05-52a1-4640-8175-5765e52d0afd",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de88632a-26bd-4f14-ac1a-2497a8ae2e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b76d6b3-e461-4178-8d2d-68ec0fe5d86c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ccb2027-3cb3-43f2-ae27-2926b39cbee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b0d0059-b169-47d1-b5f5-d946dedd0950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a3b3625-499d-4712-a73b-bc2003990bb3",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c8fcc4c-d03c-455b-89ca-64287b07768d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e59eb1-e36e-4601-9016-f1d03127b565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25395fe-eeb1-4f40-b98f-421036b768d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e572b249-6fe6-4650-89b8-b69d72fa7304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d6eef8-fa9c-4f00-a243-12cd48b45196",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa6e3b2-4de1-445c-af75-8fa1b25dfe67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd6f9ca5-ac4a-4ffe-92d0-20dea368beec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c91591f4-65ad-4cc1-a8ae-32e720d7c86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "9229d4a7-d4c6-49b2-a709-f81c66068a56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0520b59d-6552-460f-984b-90eae9160d2e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95c99006-a49f-4eff-9eba-8974c5762a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef0d1a02-c85b-4a9d-9834-6bc0f43106d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37868a66-2a0b-4ff4-a53f-2471b4d60cc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d836afa-5a37-4479-ad26-c371f1dbb6f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b1b1e9-a8ef-4e80-ac76-01c68c6f5778",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e25b180-7740-40cd-99e4-c9ed61252049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a81a41f-3a61-4b71-be78-9bcd9ed2d31f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd8eae6-4ed8-4c1a-9a31-984ef60c5844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "812b890c-b7d3-469e-96eb-2a75df55da88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3cc84e-2fa9-4ebb-ba6b-978fc53d2282",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdcf0cef-2d19-4ff1-b37e-a189dae1cbdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7eeeb87-a931-4ee4-826c-4cf40f66548f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0517e678-4450-406e-b32c-0ec7e3db4af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dde13012-87c8-44ae-af31-ee6055d46d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a34af2-9d17-4293-89e3-29030eb11fa6",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f5d70f2-c55a-456b-821b-22bd65c75a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d74aab-2201-42c0-9f2e-e1e24a93a931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8f1d6b-5ddc-4163-97b1-399f316816cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a9820cf7-41a7-4dbb-9743-3f767a2c2f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ac056a-4401-4394-b5a7-1f4e179faff5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be915d1-7037-484b-8838-0dcff08df6e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60e80391-bc70-4950-a723-52ce3714189e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbddb98-11bf-4aad-9c4d-d03ef78cf8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "eede213a-a19d-43ae-9953-8465fe560002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84e0f52f-f90e-4b5c-8e98-73acd3d574d9",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7940531-bbde-4903-8709-78bb8e2e8748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "baafa0e3-7c1d-407a-ae21-bebd4c62cdee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "509e47d6-327f-4d58-89d3-2b12a60231b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b0ced3-4a74-4754-aa61-e45afb9a1e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c994cdf4-2302-494d-9905-dfdc8c67901a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9940b36c-6737-4062-8b16-210d40dc5a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b370ea9-edb3-4030-8370-f5d4513b35d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f51bb70a-ef3c-400b-b523-ac8de9aed527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97697a9e-3b07-4de6-9f3f-a63a53d8bd4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f678aaf-299c-421a-aa83-12146ef67b8a",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4073f02f-7e99-4d03-9a73-be9625615186",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f3f5216-5a77-41e7-8979-c7384f4e48dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e15eff6-2f84-4d3e-a916-4824fd363e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ba98c970-1ba3-4f48-875f-5af27d0528ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6466423-7550-4875-8131-acbc994197da",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c3bb79-119d-464a-af04-19a314ae8bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f6a3cd7-3bc2-40e0-bb42-f82e9623ac8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "776ece53-b644-49cd-b6fc-f7bd675dab40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e52e171-1718-4938-8f0d-c2902b191e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1888a4d-9469-44c8-9611-8d8533014391",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07055fae-0609-4aad-a6f1-5904e390dc6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "072776e2-24fa-4032-863d-d24fb839b3ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47d639c2-9dde-49b4-a569-39de77acf072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "04efe4af-6ebd-4500-b933-05b3745a6b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15cbf3eb-695e-48e4-8101-32e991713d09",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25b8b3ed-8e2e-485a-80db-8a62bf34dfb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e89e8a7b-db76-4f29-9561-111669260719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb60f289-3b76-4604-b4a9-f5bda1f8070c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f5473da-55d2-42f9-876b-405291024b3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842f141c-b518-4477-99d1-bd4e1d6cefd6",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6db4a6-2918-4c77-b9e1-a12b75e393d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9a12781-5d1f-4513-8680-28ad761ae50d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86aed8db-e496-4106-9546-65c4334f3b95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "04dceb28-1ccb-4467-84aa-804a4596fde9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a3ebba4-263c-4011-a3a3-070b6abfa2d8",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9704be7b-edaa-4bc1-afd5-51eb32c998db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3495ff75-df07-4c2c-a780-47c605f20fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fba491c-fc87-4139-8e75-865e35d127df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "89ae4ed9-e6ac-4d11-8fd8-9cd2dc8127d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba58d41-cf64-400a-844a-8abbd9af9ada",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e657b0-8ffe-4b8c-921d-61453a1d1df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d126151-f11d-4d8a-9815-07780a8f19c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4b8331-4edc-425d-99ae-88a971c7de9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ef0b6b2-695f-401b-bab7-5c3755e64742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b2ac4c3-94a0-4d5e-b0c8-b2115722e418",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc0a09c1-ac0a-4ecc-a0ec-810ee01f7501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8665e65-c713-4b61-846d-681b4e0f00f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd1539a-39f6-4978-80d1-58938edde936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "caf726f2-890b-49a3-8acf-3352614c51c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15acd3d-c998-4097-bc63-f7ed23c219a9",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f356e76-2463-4ed2-8820-7bbb674391e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3e73d40-9376-40e8-9a2b-adb7db848350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf05411c-945b-4399-bff5-a5c76d46d248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "933688aa-89d1-4ab5-968d-52aa7413cb3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196d2d36-2e3c-4b87-b5e9-11289aaec53e",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c943f16d-7f8d-43c8-ad96-8da3c401b012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ce22303-af54-4771-b0c5-d9e9bb8e881c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f83383ff-8c98-41f8-8553-0e5874ce5f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10ea907a-29de-41fa-ab0f-22fbfc688658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e3685c1-c81e-4698-8616-69d1d2270ef3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c06bd90-556f-40e1-a91c-ff9f1b418c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3b3af66-aa64-442c-8647-dd05f00e5d42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f697aa0-a017-41e6-8d7a-5b7f5f4fddec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab56f7d1-fb5f-4653-8c11-0d69abc6986b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c7fd00e-66b3-43ff-97a9-77cb4bc37bf2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913b8163-f74f-4277-b779-62cca177848c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8806d4e3-36e9-4830-99ee-e2421a123e3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6e9f21-d6b6-47ae-ad92-a4af3c46be71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5163a53a-5491-4ded-a30e-b35f66fa28d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f84036-ac76-4096-bdb9-570707ecbba2",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52bb13c5-d14b-4e4a-a428-2ba4e581b5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "346c204d-96b0-46fc-8c48-d6a2a6c58293"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd2215be-8ea3-4bc1-8c60-de6e8d992473",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0aba40f3-863c-4a75-94c7-87049192d155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73aae63-fb87-43d8-b8fa-67c8a7d3d58a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f30a6d-d6bb-4d36-92a2-012bae556014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccacc3c7-2408-4abe-9aee-243cff95e455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e1c9959-df0a-4c38-bba8-df4e3f1047cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5da1236-829a-491a-82e5-1fba37687007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17be18e8-c21d-4c2f-9f68-dc6c568b6459",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "390903d7-79fc-4c3f-a248-55697c8a3b45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74b9ec55-4247-4fa5-8aa7-0cba59fba042"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "965ab88c-b5c9-4624-9068-eeaafc2d2a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "74f616e7-73b3-4dbf-a4d0-7cf0d3ec5775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3aa36ab-cd64-428f-ac60-6f5a99d7e050",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3a92ec4-ebb0-40d2-b2d6-b8a4abd46ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12d14ed7-cdb3-43f2-889c-4f7075862e05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ad94c3f-4cd2-4dcb-bd4c-1facf2dd8f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "67d17af5-8c5b-4397-93a6-8702ef9ceeaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22afec11-b001-4595-9b12-a9310fd97ec4",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50f0be9a-b0d7-429a-b399-66b116db0453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0ad2275-9906-4801-a518-0cb1caa7e9c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9780c47b-9b6e-4542-b25a-99621d185a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b416883c-9a87-4072-868f-7946b9a6559f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831c38c1-16e5-4a67-95b6-8d09048303dd",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6db028-1bac-4c25-8ebc-ce6ed4de9d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c7fae1-3a15-4577-9709-d19f91080e87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bed3dee9-199f-4007-95cb-6005f7fbb74c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5033febe-6881-44f8-899a-d405431e56b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60365efc-5e00-450f-b361-1854144de4a1",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3bb42b7-43fb-45bd-b1e5-99c506ef755a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76081d46-dbd9-4724-8417-ef1079ea78b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2013201-8449-4181-8a81-df0aefa202dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "222f2706-5892-4779-811f-818d09e7ef21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8c0772b-ec18-4020-b8b8-47f93490292c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90e5e7e-a9f2-4135-9d7c-596fc3b2198e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d36bbf0d-8843-44a6-86a5-944a2f4b04c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f25e848-f148-4968-a7ba-230bfe55d140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "75ca3599-a1db-48f4-8138-efd5647bfeea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a764e970-b391-4b3d-b491-fab5ce1219b1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42f9cc64-8a92-4f2d-851e-24e2caf35c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bac449b8-2b2e-4da5-8543-9f9c59cf3747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d7388b-5cbd-4af0-9bce-eae7d1fcd807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6811f980-7859-462c-aa99-15e15e67e797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22fdc387-825f-4ab6-bae5-8edd4f8efed6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e092e842-fd35-4f85-88ce-5765fe50a64a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44be11c0-f3f8-4c95-a30f-89b3aab2b350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367bb5ad-4bb3-4c56-8527-c7042d0f95fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6d19b19c-3226-47e2-90d5-d4dba978f165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4da11f44-9faa-40c4-b0d5-7cce0b85d80c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f280d55f-5ed4-4b05-8939-261a3ec4bc94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84699c55-5bb8-43a5-bfce-6aabc4f62a30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c718f549-8387-4a4b-8878-efe9a4012281",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7db217b-7ded-4461-a2f3-d97cf69916a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703aef1e-60ad-4cb6-91c4-a266fbfa8e15",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "335ee6d3-4073-4526-bc4d-d8f1322c7c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4194eb81-7e98-4890-93b4-3508ceb8a6c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee2085f-be4b-4067-b548-09efc27cd824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b78386-8863-43ee-8a16-d64c351da328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f784f786-4c76-4c06-a5ff-a7513f983554",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c643270-75a6-4299-ae64-98c852421793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6f86489-7fc0-45f8-b308-ba59aadeae16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1eb3c2d-8a7d-45de-89a6-56ce4cc42c62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "60dd0654-5a5b-4e80-9543-64e775aab7ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15ae97aa-bcde-4b43-86a7-8e4637ecc2c9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cad655e-8cc5-49ad-b98c-4408d29eec48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6400d4cc-c91a-4cb8-ae9e-fe8550d99367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f81f7460-304e-4bf8-a4fa-f50e5e6671c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c232c4e-2a17-4ae8-a7be-f4561f070231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6102c0f-0a29-4beb-8fb8-d6dd4f950d59",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4b82129-a418-431a-bbc3-0b76273ed32a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eba0f444-b38f-42bd-b7e2-14601a08e014"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f70ce0de-70ad-4f03-b2ae-5204d4f2d603",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "238527fa-3bb2-44ac-be4a-e8b3b7d9aa4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2e29623-d9e4-43c1-b830-51b996dce57e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "380c68e8-6c25-4a91-8380-ed0d57fa2b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15477488-3806-4d3e-9cc3-a23573eacd72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dec2391-73af-40f8-ba6b-6e330769f6b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4afc36d4-c3ef-4017-b86d-daba6e31db61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e18664-5576-4f27-b40c-3d5213e2e28a",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5be5890-3260-410e-bd25-25dd8c62bc9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73759852-c736-40e0-b019-7ff8f0d11080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88c3c01c-e3e3-4d23-9014-a07c4c7a37b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5b69406-4b75-433d-b9f4-470360f85ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa43661-97b7-417f-aec5-f1bc4f323667",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afde9cd-d485-4841-815e-409112bfb0d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6267772c-f6f6-44b1-9e85-abb92ee0b0bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a268e976-8b72-49fd-8821-53b55710f050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7bee0a56-a98a-4b83-a374-7eef774ab03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63fe566d-5afe-4263-b27c-10d64e43e83d",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e655e6-a641-4e0f-8137-4405f85fbc0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0e8d237-ed74-47cc-8af9-3498607fd107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506b09af-80db-4a2d-8ba1-eefc3df18863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfc4dd88-75fb-473e-8f5a-775edaf2758b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a147729-1637-4e5c-9020-3c439ffce0a3",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8057d9b1-503a-4be2-a9dc-e36ebfa23f7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "133e89c0-4fe4-4054-a3a0-df4cad13884f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a3744f-3598-4469-b5ce-a0b44f5dd222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "df3b4e18-80a6-477b-a133-3b252183c327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0acab7eb-08b4-4393-a1e4-cd5f7977e2ff",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72703fb4-4779-4f1b-b5d5-78c1e1e692f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38c04f9-94d1-40bb-8350-6bf758f12c64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4321cd-0482-49bf-8c9f-0cf24c373688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dfeb455-270e-4e24-a92d-d6682bf38a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2158ef40-c28d-4568-aea4-d7bd42f1e5c3",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9dc7c2-9837-4dbe-ab8c-0d9c683b8c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d73cfc-b5e4-4de7-b3ad-1cfbf38caeb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3320bbd8-2b51-441f-b54c-6593a4f0c470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3f0e972-1f2a-49f5-a249-d089bfa52464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c2e5f6-8bfa-4ce3-b0e0-d06640f7cdde",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "383d9bd0-b942-4671-8b75-37bf797bbada",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2914d3fe-fe87-4212-abc4-a8e19f4a0f92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a8200b-9014-4abb-8246-618cb0013000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5240bd8-0fef-467a-87da-8e6d23c6c2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ca7eac3-78fd-4765-9434-051bc9081622",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a9050c-d67b-4ae0-96af-61e6a586d23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3db5383f-8066-42fc-b545-d0280c898892"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1713f42-00f0-49d5-8e25-d319f629824d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e2d10c07-00f2-4b15-b2ba-336220235dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38ae4fd8-2cbe-4e29-bc86-7d4925ea5d1a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faeee00e-89b8-4b52-92e7-6092ea6c023c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef9109d-d76b-44bc-a34b-4be9143151d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf261a8d-bb43-4437-8a70-9fbb44f57ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c562a350-5f5c-4de2-a1b5-45c6e502d6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1092d25-6799-41d2-b197-c4830060ce18",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e808c197-9a4b-44f3-b79b-8f6198108edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41c74411-5e39-4f4f-b460-ce0bd8c8ba7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d864a48a-1b5b-4521-8dd8-e81077aa136d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "73bed689-e141-40b0-a639-1c400d0e3c92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b41ce514-e134-4808-b391-e62a74b6052b",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98bc9cb9-f831-4202-a42c-cd32b3649eda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bde6acc3-94ae-4195-a54c-1988f73abf93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8b05f84-eb37-411b-bd1c-5b7340ad9395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5d64a69-c481-497b-9a0c-bbf623328300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7220a6-7085-4167-bbda-5f9d778097fa",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f028a91a-6fb7-40c8-a09d-b9099304d7e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11fc4265-fd17-42d2-8811-52bff97cab03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1a5025-c786-467a-8c75-1dff3ad9c787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "70f63421-a27b-491d-9641-89c7b9f4aba9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd8e099-f1bf-4626-95ca-b710d28762a5",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0a7a5e-826b-48ef-9a91-2c7f51ef941e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "247486d8-fd99-4208-9716-ad22a231b422"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54aa6dbb-8843-430f-97c4-257d74b80258",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a069b56e-dfc9-4bb7-baf7-968a0ef68124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1bac04-1701-438b-be73-23307ca778d1",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a37835df-95a4-4d4c-bc84-c290c3b9d070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bd05cca-d9a9-4888-a0d7-ebca3ed5b058"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "842d8e32-1b09-4fc2-80c7-9ce773be5d7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "997256d0-c14e-4815-9a1e-8c09186217bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93c065a-8e0c-4122-8a9d-4e2a0b1abfeb",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25a8218e-daa0-427f-bc44-8957b8f0f85b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "237ec14b-73e5-44a2-97fd-2f8b4c9f5284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efbe0196-8dec-4f50-8ad8-5f10c4bc33e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b1cb528d-774d-46bb-a843-602fb315cb76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc66753-2a31-4b2f-9f2a-51c22021e254",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53ca757-653d-4c23-a3aa-82a8268df307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f910f36e-a477-4910-9107-3ce83f401fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88b2a438-df94-4593-828a-785a25da47a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b658c70d-e912-496b-aef1-bbe042775b87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc964b3-167c-487a-b7f7-38d1001f9d9f",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee4015a-6850-4989-bb9b-2e506a6e6819",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b088e2-4613-43d7-bf8f-3715c3d2b0ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4eeb9a-9ba7-4361-a626-75ab910b6f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7a64e18a-fc91-45aa-92e3-23644a2186bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3555ae73-fb5f-45a2-a30e-814d97266da0",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d94517-e86d-49ca-9876-132fbe0725e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac08318e-b833-4329-9a6d-d1ff20e4bf8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d67b02-253b-49f2-8258-ebc071923a8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fadf8b0-bd98-4a5b-b96b-82d15266f5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f236f5ef-0157-4960-957e-eb845f2ea23b",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "800c4506-cb85-4dad-bdc2-b2053dc53b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "932cf605-e54c-4d20-a220-bed7804bed9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e13ffc0f-726e-4815-bae5-878723e857f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "354d9bb2-ef37-4485-8f14-3d4aa164a4e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65de41ec-c843-4fdf-9e22-93b29a03d12c",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc27da09-a2c8-4b9f-adf7-8b5a8a5ae24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51efe0e8-abd9-44ab-b4c3-8875b2d7fe58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3becb417-f18c-4e19-9a33-285fa0cacbda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "042e33c2-2a82-4793-be70-1784a5d2a38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af3361ca-2395-4b71-b0d4-d793b95171d7",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0256a22e-5ce3-4978-9962-621c9c18144d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff66809c-ef3e-4520-9117-b81b965ded60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e385bf-4a33-4b59-a362-7cfac6225d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "98e083ac-55e6-4dae-8d20-ab4470529cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c288971-b9c7-4973-aeb4-6d7e4d7f6992",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5373697-1d8b-4338-8704-5f9dcddfdf88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5dab92e2-7a44-4ed2-bb2a-eaffec08795a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f8e726-6bd4-4103-8075-bf3fe74e3814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "46c9f70f-7405-468d-af94-7ba860a7a48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8ce8df-fe21-4ce6-9c25-3a6d76d0c5da",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e19bf994-88ab-4297-9c65-9361ae4f916e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51244a6e-14f5-4d32-b425-67a0dd2c7417"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ef0f48b-9aa7-4e6d-8316-153e54dcd934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a54a03f7-4a93-4585-af92-8a2c8dea73b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9b34dc-7e74-4b7a-b4d1-856371564505",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c224a89-9826-4f6c-b2be-21574ca64306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6eca08e7-b899-4f31-819d-b19a0b70a5b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b68f6d29-20fb-4e00-8e39-e8a469c4f560",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e21638d4-b5fd-4db5-822f-dfeccae9d694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5eb275-2ab1-4718-91d2-0a40a4bb908d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd5770f-dafe-45bc-a5dd-a60ff1d71a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a03efc74-1c76-4024-a097-f540cc771a64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f14399-e82a-48ef-8eff-84a32ba5c797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e201378f-ec1e-444f-be11-bf12d2ea89e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bc967cf-389d-4b32-bf44-ebd337e029c8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb38684a-28ab-48a6-82db-47bd3c3f5aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb10deb-8bc6-4944-b03b-78010937cf6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21653b6f-3b3f-4517-8d0c-f1eee168b9e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad38c4c2-9f29-46bd-9a98-34995e07f7ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10dd3f9-a305-4668-9927-70eb72f62b81",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de079bd1-6c36-4f04-8913-fd441ed18e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f6fa000f-d32e-4744-b050-715ae5d0b351"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd732c9d-c613-430e-baf7-0c93949d92ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a631e05d-bae0-4ea6-9684-a780f366c0bd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "552017a7-e5ef-4312-828f-271e47aa5cd8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ad107794-a25c-4281-97d4-0095c324d231",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c949a7d-e425-4b64-acc9-05010e9acc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7df1b18-b2e8-4491-81c3-19ca71748e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7fca49-519a-4255-ac0b-ae758b7facae",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78fc26bc-d56a-4fc8-aac3-9097dc8e3953"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a3b69df-02db-44a1-bd2a-fef97317e85e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e85f1e5-9875-4d45-a141-ea0455e2a4cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "80f41cb0-ecae-499c-aebf-b8390cd84b91",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee0fae7a-f2f0-4af3-92b7-1898717fed83"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ac5d15f9-8de4-426d-990e-f5bf39013814",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1928e03a-8266-407d-9efa-8f8185e77f56"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "da9abc4b-a289-451b-8c27-add01d85ddf5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba772771-9241-4738-9399-645e9ab13ee2"
                }
              }
            ]
          },
          {
            "id": "e2f53465-081a-4055-a381-858f173f7096",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5537066a-aaae-46b8-8937-f1e449384823",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "c83bfd76-ad21-4058-bf2b-93bbea19f94c",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e90b25c-ac00-4ff7-ab7c-451860103c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2eb7dd45-4595-4d7f-9aed-86ebf040f69c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f523b50-c786-424b-80ab-93d7a505d911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab58819f-7ed9-4b8d-9982-5f55d0600afe"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ed6015ec-f60c-4f18-8121-8fb35dff86c2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "34164118-8c38-4a71-8445-b9c3adcba2e9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6bc99d21-4579-42ff-a0ea-917d8a954092"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef641b41-4043-4373-ac84-eb84c690fb75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dc04dcba-b044-48af-ad25-09b3ff7b5040"
                    }
                  }
                ]
              },
              {
                "id": "5c694c56-6aeb-4cf9-99c5-7b10d49e2997",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b52e100-993f-46de-acc0-89d215b1a604",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8b0cbced-c2b7-447b-9c5e-5e71f1e9c3af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "89e14004-ac65-4c69-843d-2c0fe431fa03",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1da359b6-bc58-4b46-8c38-f8adfbaed958"
                    }
                  }
                ]
              },
              {
                "id": "6242a1d3-355d-4a91-93ba-bd4024fd8a4b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b74c5549-9ccb-42e5-b103-f17fc54d6284",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "87002d41-b68a-474e-9120-2a37811b0e29"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "61c8a148-413a-4f51-869a-a6c51417f72c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6e573974-2701-454a-bbec-f4ba2ed6aa0f"
                    }
                  }
                ]
              },
              {
                "id": "426a0903-cb5f-42fb-a8e5-916e70438752",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a80ab006-7ec6-4769-80b3-980c5f673444",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fc8365d9-e780-4377-8dc4-c88e1e84e6db"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "94a1cf38-3393-47e6-8d55-5bcb304eb93f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9c4b7155-309f-44c5-8939-a0ad7271034e"
                    }
                  }
                ]
              },
              {
                "id": "70153eae-c784-4286-ac70-d5309c306b47",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "722f409c-8d62-4ad7-9c58-ea352054566c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f75b73cc-1c61-49ee-bdea-668042f79c51"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30aefd68-52ab-4a29-9a25-43529354c5f8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "318b848c-1b37-4fdc-ad9e-8b6ab123171f"
                    }
                  }
                ]
              },
              {
                "id": "9fd67657-dce2-4981-9374-83f71b33b265",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a28e6ba-88d5-4a5c-9fb2-b58effda2de7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c480034-39d9-49c9-bf97-a7966b387a3f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9bdfc6b-9ba2-46b3-9839-bdcfcc034ebb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1810e522-a4cb-419e-a77a-b86e9ebbb848"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "84471947-36e1-4e55-980d-96ca0fb428aa",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3045fc1d-5de2-40fa-b477-6da928fd1eb9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a41d3392-cffa-411d-8263-75ad9a74007a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "75ab8a52-a146-4909-adb2-df76e61623af"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "06717a10-6a14-468b-8070-3791c5126712",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4b0d8841-ebe5-4846-be51-4a8c15f68dac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dd12c5a5-5c23-48ba-9989-b343157adf23",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "db82bea2-555b-4a60-ab94-259d5ea83117"
            }
          }
        ]
      },
      {
        "id": "42f2549f-472c-46e4-9c24-3bd39e051274",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "f0e94098-d519-4844-a4c5-a927e0850c06",
            "name": "Negative Testing",
            "item": [
              {
                "id": "beedfd67-cfaa-4ee7-81a9-950c097347d7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "1e3b9570-43fa-4c23-af44-f4297ddb9c04",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba71b48e-0e1e-4de3-955b-a66c679f7619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "797432b2-c020-4ff2-8502-c584f02c1c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78767dc9-b257-4e56-a68a-15199b400f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3fcf2f-1aea-42f1-bfd6-81186dc925d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece210f2-7fa8-418c-8718-671128e04f54",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ecf808-de50-4c2e-b6fa-37f5b4d180b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc430de1-a6a4-4a0a-9971-334bf6920875"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56caa85c-ac96-4baf-953d-14cc2f8cbede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f4f136d-2099-4449-8a2d-ad2b783a3648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c06f7e-107b-4a78-aa3e-e12585f36b21",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e871430f-b3cc-4eff-9928-fa19f0f6ae8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acb1b28c-bf1a-4abd-81d7-e2ad5a6883c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fea7173c-5579-4f0b-89e6-dccca7eac933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f3e7bf3-285d-424d-97e6-00c782d6c659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "574563ca-411d-4d97-8c60-f6484b6211ef",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a457667f-f353-4e56-943e-591a0be5a88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17cfb14-34ad-4b44-a299-cf8682c0339b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff8aafb-7a02-4c6b-bbd2-9e77e00865de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d217b442-1d58-4e27-a638-7ea11e44322f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9fc533-a5fd-47f1-b1a8-f39738f8e1c5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5ea170-454f-432a-b3c9-7b6ffd3aaec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c27c9b-a2e6-4719-b633-19f4034451b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e022af54-b527-4f21-a46e-eea6597931de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d357b4a2-7a49-45a6-a79d-ef54a0fe6e54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96a34423-73a4-458b-9442-952008203777",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e987c928-0749-4552-9463-f5613b5bb44a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e4b55e-3112-4572-ac18-e445056ae608"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8de3ddb-6c4d-44e3-bece-1c772999938f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0f1c7d5c-04e9-4573-b706-f4654b03f1fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa89b5b-e716-4938-bceb-ff805e7b70d3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "668b0a66-f6bc-4364-9d85-69e77715cf44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88060e91-0f6c-42fe-8b2c-8cae1006f4a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f98b336-be20-4f36-99d8-b78ce22c942f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "a33a8e6e-6904-497a-aff3-73b9314a13a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cad6541-f08b-47f8-a2ac-1899019ec54c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b341f203-2583-43b7-a61e-b60cf8d3849d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c20bd5a-aa71-4bfb-bd7e-bdb00b4ea28a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95136aca-aa0a-45b4-9c0d-5548d5c1f113",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd7a24a8-15ce-4208-b50e-fad356c5a774"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f3f3871-d029-4bd4-accd-8dae642f3376",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01d76fbd-c4e4-4098-acac-0e8c2b360579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92eee4e5-51ad-424f-9fcd-2ce9abc9af0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a687dec-77be-432e-b0d2-6992415e9a72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "afca641b-8557-44a3-8168-a2b6720dc9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e4807b-fe0e-4b3c-9000-0e74327c9e55",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde18229-b36b-41a2-9e39-d93661424c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9df07fb-9b79-4ac8-8501-0c36e7975f6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5d153e2-e1a6-4ea2-9ccc-04f55f91194d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "652a8478-59ab-4057-961e-e0d450213ff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "731d6d8c-ea99-4223-97cb-9fd596cb4990",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b8c6af-b11d-4b83-923c-f083f47c7fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f002f0-5239-4497-b94a-f8990d7f5460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3b93b1-a012-4d10-b5a4-1bb4ca998bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5d951233-7fd5-4598-9278-e3ed78a57900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbe4703-462e-49dd-b151-2b7d80925281",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e72bfad-e1e0-4a83-8e5e-af2c4bdc6355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "003b09ac-40c3-4cd6-8ff8-b4953e52fc01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef17d31c-5053-42ec-b71e-cd65088ab4f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c0402cf3-d4b7-43ec-8bf7-2a2467e980e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e00e70-f29b-4cb6-a37e-aa6b81cbfc63",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2232b27c-62d6-4ba3-970f-07d3db6ed393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27771184-0dfe-4310-b491-74833a92d49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e43766b-c439-4ed2-a76a-278706f4dc5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "632edd62-412b-41eb-82de-0962314b2c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0788bf0d-e79e-4059-8639-f0f1feb0afd0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d029479f-941f-4902-bfb0-88d54293425c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9574f0-e249-43c7-b676-8155b6d8caac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fec0f36-2f65-4aba-8f64-17836a7d0b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ee469ed-7d89-4098-82d0-42fd1f22f327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e13a2130-a073-47e6-946a-d5fa0a4862ff",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4f0ea2c-649a-42d4-98f7-89b0e48354ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f614fbb3-f4d9-4443-ac98-49a55622f45b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "235b90fe-6f00-4d9d-9351-2d35dd8eb8dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "16b84411-9e94-40d9-8b12-debdac1698f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f62a34d-889c-483d-a4a0-5259677bb208",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57719c42-8b2a-4b59-b20f-16c2feb7d394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ee88192-74cd-48d3-8b89-00a875823ae6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afa18452-f4b3-4cab-b4bc-423f4d450409",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "1073266f-fb97-4b85-bdc2-418e292dd4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcd64e0d-7889-471c-aa99-88e1c40e4d8e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608ecde8-d13f-4059-86de-5b41dcbc58e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9761b856-223d-4491-81d2-b7c57d0f086c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62a7b61-6191-4e6f-bcec-9cba380d1a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1ef25e04-9352-4a7d-a65e-ec9fb4bb08ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5c566e8-d4da-439f-acf9-6696da6b4302",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53c1bca3-18eb-4b36-9067-afe3f7057aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10f05425-e5be-4c99-a443-39ac8275bf0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67fd5dc6-bf6b-4b00-abc7-946fa4f79ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "73aa6ea4-bcee-40b2-956f-9f4c8379217a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b2d521e-70ea-42d8-837a-1f8f9a91a2af",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7f9682-0ab8-44ee-81dc-d453d875da93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d075ea16-e6a7-4923-ae46-4caaac8ecb3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6855b7a-23c4-4f30-8a0e-a4b9e15b6ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1bc6a1c-36f7-4653-bad0-cf8781bc9874"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4891ee7d-c956-4886-80a2-1ea6b695d49a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d55bd0d2-80e4-4519-b497-2fbc00ffd618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed76c693-bd85-483f-9afa-874194177e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "205089f9-f0c2-4dfb-8ae6-fa561ff0b2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "534e3342-cf84-4096-ba9b-042bae2c2916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f321ff3-1c11-41ac-a104-7baa591acddd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "559bf005-0d26-4655-9747-25ebca9cc2b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4365072c-eeee-4daa-b3f2-e12aefb6b559"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2eb68d-3614-483e-8cce-529fe7b3de01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0768f32d-2ad0-4075-8ca6-e0749d286a13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8927214b-4b19-4da9-8eb3-78a386dfc109",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6f1528-755c-4adc-b64d-e122ce62d7df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bea61099-2962-4f72-8560-a8a71deca706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f15f9a-7eb6-406c-b9a9-af8c2aa9b5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7af83317-15d8-4255-986b-74572d919090"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dfa2ced-1daf-4798-a61f-136bb03096ab",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeedc4df-58f0-4190-aa73-6b053d645870",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d41098-300b-40d7-aea4-c1204c6f67ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a19208de-22fe-4be3-9583-72e1e84b1b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fb7312b-b343-4113-bb83-79356cd9f81c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d875414-90cf-454e-a3b4-0b54a8137a4f",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8491bf2-3dd7-4b52-8872-59addc8adcc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5da8784-1b3d-4b7f-8d95-df35b9cb31e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca3a457-e721-4eb9-812b-72ea996947bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a08bac3b-6c91-4c8e-ac93-a0ad06a708fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f31bce9-e9a1-4843-b8c4-291bb233c68f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "326687ca-bf29-4245-916c-49d1d0cb343d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ea8b00-b923-4a91-ada6-cc720a2c50e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "933c3c11-c95d-4255-a486-a8bb69cb37a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "896cc750-587e-4fc8-80dd-7abe65f853e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76f8044c-7aef-4c75-977f-23103e716f62",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a387f0f-8faf-4959-b151-e91c946889ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29d27d34-e05f-4840-9ebb-7a499e32330b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2edcdd61-e82f-451c-b72c-efd414cb070b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6da05e81-35ac-4e5b-848f-a094185e3071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8045538d-a2a8-4f19-80a8-d04963b19a39",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f6b337-6957-4bf8-9b1f-8505c7f8d0df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86ae6df1-8e85-4042-af50-ae802c2ceb39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a548034-b21b-48a1-a420-9d30623d5256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91561be8-e832-43c3-afb9-4641d28586a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f357fa1-3752-4b0a-96c5-d6aa0e04b399",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d186bd-e7db-4fe8-a210-5edc28f23256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a66a5550-fca4-45ef-8b50-75d169720be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cd561d7-79c8-4510-817d-26848535a77c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51740e4f-9e4e-44b9-bd0d-5ca68c1022bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7cb273-2d1a-4f99-b19f-1ab7bc2c22ee",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f53c5351-3acc-475a-956f-8df10729dfc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72cd21b0-4ba7-4b20-824b-c57f687eb64d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60dc1426-e0e4-4531-b358-4a3ca1f09dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d112613b-71a2-4357-8443-b99c0e264e89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ceb2f43-439b-4185-83c4-4105e66d599b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d055f847-0290-41aa-9c9c-cb8dbb989970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "252c7782-917c-46fc-b056-a5e1d55a49d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0eb0079-af59-4d86-bbea-cf654fa2b393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82b80969-0572-4701-9918-b4a1c3adbc75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "156c1817-3c30-4936-bf29-445fa040f6ec",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9352a3f9-8025-4abc-9a9d-edfeca0c72da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9da0d26f-35bd-48de-8171-8ef905ace588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b20af574-caa1-43ed-9a12-902b58f34491",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32ae09c1-92f7-47e5-8d7c-505978fa67d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df15b137-f11c-4622-891f-81d530c2fe7f",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa86eb9-3ce9-42f5-9ee0-b9488ee9dd4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ff92cf9-ce5a-4941-b63f-3e5957e36a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbaef990-fe2f-4455-b67b-6515a3f2c8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3a47002b-18e6-48d9-a910-a190bf557dd6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c763e4e7-9064-4e3e-b7d7-e0958a8dd917",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "20ff7ff3-42de-4588-9ea5-16b63a1f228d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c7fc0f2-4674-4d29-927f-3ea0c97f3a64",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "b24adcd9-0f1f-4225-b6a3-3dc6fd08f958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e116981-2a9a-4f66-b75b-c157c84b6cbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c74d59bf-fd86-44cf-9dc0-4a63e9667966"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "118998ae-486c-4633-9b21-710e9fb9e9f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "80ac419a-7fbb-436d-801f-844363ded8c6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "71934645-9b23-49f2-917c-5955cbae1294",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e3cb261b-d4c1-4175-b969-ac89661fd5bf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b18343db-e2bd-4221-b304-14a29d239e02",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c761f767-4a82-4279-863f-49b837ea82d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4948e11b-047d-4935-a9c1-97f7315ef29a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76521887-ffb4-4df0-b934-c92a8b45715a"
            }
          }
        ]
      },
      {
        "id": "b0f70190-f7e7-4a82-a57e-3801f1e77211",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "a2428208-f4ea-45bf-81f4-e88a00c80ffb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "73edd334-9380-49da-81de-12d02ef180f7",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dfaabe85-37f4-43b4-9af3-64cf488707a7",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34554266-da3d-4f10-b779-a8349ebcba67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f88c6de2-1195-4eb0-8655-6eb1cc30c12e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95012327-3492-4492-b3f1-94431519c01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd12f56-f2a6-46b9-ac2c-ac97b055c1e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9dc423-74f5-4b3c-915f-1d953d8b378f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee1ac5a7-6aee-428b-abd9-5da21a4ca897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af9520f9-0f4e-4f5f-8d78-db716cb83a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4d685a-1d2d-458c-ae39-d67c778cc41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f1d80c1-c2ed-45c0-93e7-eba261715101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc4c810-47ea-4b80-9c7b-201eba770c5e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a367131-daa8-49b0-86d2-4c4d8a920c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7847d70-e956-46d2-84c1-c209234f0fd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be58b2e-937f-46eb-b786-d4d36fe3512d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2847bfd4-4edb-4ba2-9da3-7ed5a2b53c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053310ee-1e0f-4ecd-8867-7b74dfb522db",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc1cebf4-9d92-42f4-a923-c3ac48652e19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dae094c-728e-45a8-852a-799e6a15d347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d57d2702-6a65-4177-b70e-638b6e4ef71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d53aa242-2415-40fe-8ad9-df04e16c8fa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1101c1fd-a2b1-459d-bd1f-25098a8185aa",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0e0c64b-7a05-42b8-ab67-27c50c116ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c480915c-c962-4eb1-bb33-680e9a0f8a7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18784ad-5467-4eba-89af-b996d026aea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "833f5c07-288a-4516-be08-3d41f9658159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54deaee2-d86c-4de0-b142-77e87542e739",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f23ed5-a061-42f2-9971-4d2a70c033e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ddb8f1c-ca7e-438c-a1f7-b4ad2e095395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7700911c-2835-4b51-a344-0e9480b3fc93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0264b601-3f7c-4637-aa75-afb4387fa7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6c880a-4b77-4711-9195-16c3a997e6b9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "907ee322-1c2e-4f9c-97b4-2da7de9c9902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "270deb81-f7a4-4328-a719-846044ef9076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5fe836-f014-4138-8a4f-0b007fde7bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ab2e34e-fac5-472e-a132-40efafc16df9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "709b1a14-2931-4fd5-8c8d-ec7082768dcf",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ecca7de-2642-42bf-b6f1-36c8ed5dfed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3301bbe3-d7c7-4658-ad5e-4494dc6f024f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bcf6ba-a608-4825-b551-16d1c4d2e5d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b725c9f-f400-4af2-b54c-16dc744d746f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62ac6f75-ce35-49b9-bfcd-e8acd25e06d8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5459613f-5f4f-410a-8493-ab4408218c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "175cf2e9-ca13-4225-bccc-9c9f198598eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf00a5cb-58d1-40e6-9d48-9a962b642656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c64b55d-c518-46fb-ace3-d4692f8c3536"
                        }
                      }
                    ]
                  },
                  {
                    "id": "013686d5-62ef-452d-8315-ad60435713df",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53535d13-ac95-412e-a5c8-63debbf57693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e35789b6-cca3-41cf-a940-98a411e05b26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0201425c-1ac3-4ba3-9b02-012a3cd5847e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "92b20a98-375c-4236-b5a3-eb08d1708af4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6eae4c-1365-422a-a6eb-5e214d3268c4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb0ca37b-406b-440b-ab6d-6b97845c31c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "242bb44b-9dbc-4c47-a632-cbb22cfa14f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79f48b2d-843c-4640-8c2e-5c9a2fea91d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "d4125eb8-8267-42a1-9670-aaf6d91c259d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9c419ac-74d3-4d07-b2a3-c8401ee4817d",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc91fd4-d40a-4aaf-8482-a35b45e7719b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee91548f-7e97-4cc0-b5c0-88fb5ea0b1d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229bb36a-4a65-411d-ba33-a75427032779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "386caf7a-80ca-4b10-b8a9-d9fe426edc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3936c5a-6b9b-498a-84e6-7acc07dd0562",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5afbfc03-7c12-40a5-a777-3723740a8d09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c844ebe5-ac6b-48c8-8549-03579a418376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d8de590-d515-48b6-af4b-0cf9dd5d7cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea5eff20-ffdc-48df-9a67-bd594d2ad980"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c551d0b-3540-4f71-bee5-dbc014af806b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c302612f-8648-467d-93c6-e537a3b1f014",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9840bdc1-963d-450b-92bf-83316ee10e80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "352c1656-6be1-4410-859b-87798a3a303d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c648c90-02f7-4090-9aa5-d04e39b7e7e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2510f54-204c-4cc2-a967-5f3b9346d724",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fa9c47-5320-4e56-a1ad-fa62f05c819f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ad15ed5-26fa-471b-9337-8422521f0f0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b521b1a-ca3d-46e4-89c5-beccbdce5697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "49328621-60dd-4151-9f59-c038881edabe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ed81f6-7047-4d46-a100-0d8570b55b71",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1be254d-b4c7-4bd2-a288-5dbb1c568fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60e3ed9-e001-46b5-ac57-0abd03cd4a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d9cd95-8a00-4a6e-8810-3f98627b8885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "282a5126-1689-4ef3-b65c-de4d5da5df6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc3b4341-fecb-468e-b9f1-f57a9af3c101",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "958be022-af76-4b1c-bb05-dedae3e03fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "136b321a-0dd4-4396-994e-c859fc2d268b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f30e5918-3bbc-4f8a-aaa5-647a35432f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3546e3d6-1eb1-423c-b37a-832ab0f3f579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a687573a-bffc-4007-8622-3ae6b6d70ada",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e946a116-6f8c-4c85-b191-a995132da8fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5500ac60-f6fa-45df-bf40-82ba66bf5e37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2297ea68-6c81-45a8-897d-fbbb306ae6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "879b6771-ee8f-456d-9de2-cbaad74f2605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bda1b91-1ca3-488e-b176-169bea4c3736",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f668c9ee-574d-470f-a4c0-d757505c05a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ef54e6-3c12-4358-801a-6578af1b30cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5754aae-df17-44d4-8c56-850639e0db06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "437c654d-38d9-4437-934c-aac6260ea935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "312d55dd-87aa-4e1d-8219-5a74c25aa412",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a633baba-4a86-44a0-bfee-d90bf4e0c46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32d10abb-4e5f-4b7e-ade5-1e669a35da94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2ae8eee-70a9-4702-bfa9-c3fc5a87d830",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0394e773-b778-4c4c-9cee-a91e0bea9745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d66a58b4-40cf-4de4-aa34-4c2ec2787f90",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66fb9acc-1969-4585-9965-00b7698374fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c529a672-28d0-4d2a-a1da-1373b85eda92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de65de2-d4cd-4951-af4e-09491c40ab33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8414e068-bb58-44a0-92d4-c63280ad9183"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cf2928-43ea-418c-aec4-fb33e17b3f33",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15e6af8e-0e7b-4a75-b253-d79cf74c4df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df50da9a-a0c7-4b77-a6dd-48324329a5b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "501a3f78-b8e3-412f-98d7-944716c97f00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fcb3fa18-9749-4631-8924-1a2fbc49a450"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c7b810-99d8-45f9-963e-84b36040cb41",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e25732d-0e93-408a-812f-8f8219b7e55e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa24bc60-44a1-4497-823e-afc31dae3497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bad87d3-e53e-48d7-8dff-4de3df640d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81b3d8c0-3b54-4fa5-ac38-cc6d6a246de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc38f7d-731a-4eee-bfe1-a01139f174b7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e85a2fd1-58a4-4655-b811-ffa9631cae6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a36bde-4f84-477c-ba28-b78cbc5ea48e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d95709db-3a72-4a58-bede-707994e41857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab6b6294-2ad6-4866-b297-4c52a5d23e02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa858e3-da1b-447b-b3d7-52b4dd006022",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41350737-07d0-40e8-8fd9-f376f6eff8c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8842e648-ac77-4df5-94a3-4d496b436a9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd95a2d9-4cdf-4581-b75c-0bce07ffbb9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d860b08-6663-4188-9f15-1baddf7aec79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e00fa472-c9b6-4829-9933-1fc9c8e1cdb7",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c41072-85f7-476c-9104-cfa27f3ae675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8214c9e8-21f6-4255-b1ca-2ed480ac40de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a0c4ca-4272-441d-97f3-eb1bf8412ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abff8800-aa4a-4d71-8fcb-49d020f65998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72e60695-7157-4f66-9eef-2257d731a855",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "397fc4ca-e35a-4f72-be08-905a73ea0c46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48977f73-4a2f-48e8-9b9c-47b7e9307a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c2e5930-f799-4000-b9e4-d0d91ba42c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f7229bd-b8dc-459b-a579-948b36b5ac9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfef3578-bd77-41ec-adf0-ffb5b38027c5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55056192-8980-4286-9f4a-e8bec539b9d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55882a29-0d9d-4af9-a809-c648bd200ada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e18453c9-cc06-4728-bffa-17a9001f481f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7a7eade-2d22-45c8-8ac9-63c3e142a9d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560b02f9-2e53-4cc0-8ce8-fd198a000020",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03c4e1b0-f6be-481d-8425-d59368e6bcc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8597ee8-728d-4a07-ad32-86d8762a6dc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bd39135-fb55-4481-95e3-982a8f3b94f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56e8576b-f514-4074-a147-6fd1f5b72146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db50fa02-b14b-4785-a3de-3c2197eaedbe",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "447940e6-b858-4ff1-a10e-36b87adc5aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ced0188-20e7-4798-867b-169bd5be7482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "478bd354-40f5-4a2d-af39-f56a2ca74459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b54db490-43b0-497b-86a6-edd7597c6c8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f373f047-3db4-43f5-8042-1d671854f223",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0d0cd0-c262-4a3e-a705-2cce97397bb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17204b28-5f06-483d-93a4-a0f2d759e91c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b920c7-b0d3-4b84-8856-a5bd982ae9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff005da-ca24-4caa-a65a-b43ef11a4f53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a22007-9bd0-4cfa-92a5-fe064f18a01e",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8e6c04-8277-4793-98e0-65d416299d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ce34965-a89c-4aa6-bf6a-4cadf36274a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f104514f-0b4a-44f9-9291-2c54b5f173a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "662b91f7-e121-43c8-9465-ba5a016e7951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe8600bb-49eb-422d-85f9-fcb21ea852b7",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80b9813-c2d1-4199-b5c9-48c32ea9c4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a30ae8f-6fb8-4657-bff9-3093b076c73d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30af25f0-356c-4bd0-96c9-b60e2ebb2d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4e2a996-4887-48e4-8dd4-51a1edb9fa9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857bdec0-05f7-4995-b51e-2ee184da1993",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f954985-6d01-409b-866b-b3af22a6e33c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc4edb97-b917-4daa-903e-82fbba7173ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "814f1886-2846-40cb-be3a-91b606678c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a55c53-28b2-47a4-960c-121e7dfdee58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff34869b-9387-4d0f-99e6-b6975d3198c5",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abe293f7-9b0a-4e16-91e8-976d80da9153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbaecb94-2117-4974-b96b-8029b8f248b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e50024ad-8a24-415c-be0e-2ebb4dfe48af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "42c7175c-b9dd-4b95-9310-a44e13af60e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9ad625-4b53-4221-9836-7f84e9308ab4",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebe414a-0800-412c-9d90-8012d794ba46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cefd775b-9e2b-495b-870d-03e29ed7108d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a077c420-c8ad-41ba-a17d-e66f754d6d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "62c10d74-d901-4e8b-92f6-af51fac2a549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06f6e3f-7cf4-4df6-bc95-21eed4b29213",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb789e9-767d-41b3-ae52-5dd699b88286",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81d54c6d-8972-4556-b3b6-8455e910bf3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46208e1f-a57d-414f-890a-93e3b06eed1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca697402-3785-4785-a5e5-bbfe7487b22a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "00737075-751e-4e45-8b8a-52c646e12aef",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d1713a6b-c064-4699-9d41-50290333b23f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbc735a5-bb25-4646-be65-50f1ef2c3942",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "74738157-3afb-4ad8-8de8-68994a69c123"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6509e2e4-dbc5-4739-bf22-d0b68a2dc822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e24a47d0-3eb7-47f7-9aff-551ab5aecb97"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e39e30b4-f15d-47d8-a4a2-6546081a3f68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15970615-6601-4101-a277-e202b4193fb5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "04ef9632-ec62-4599-80f3-8f05e639f85e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b5ef8be4-4da5-4505-8b16-6b4fa9845dc3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fccb739e-a0e6-41e0-8ccd-b15138a2f76c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "2fa5f636-256f-4174-8090-030bb5c42eae"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "539382b4-ce97-4c36-9840-b17e717d84c5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b281da2f-37fd-4d16-bafe-c54524331028"
            }
          }
        ]
      },
      {
        "id": "f48b4ceb-0726-448f-9053-9c4e9be8a23f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4b124fc0-44ab-4ca3-a182-5f9e46525b1f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d6498910-921b-4cd9-a058-096e37e66af0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0472fd50-fc16-4a39-a95d-ed400800ca5e",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a169ea-976d-47d5-aa5e-227b7841a3c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5e6308c-a67b-4260-a022-e67f70af9d65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62caad69-429e-4607-b819-9bc9d6533508",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d88cac-c995-4268-80f8-b3c0efdecfe8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f985469f-bf3e-4a32-8c8c-764c94e6ff49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513779fe-f81d-4db5-b95e-d3af15954b29",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e4ea3dc-96ab-46ea-880d-b0c7e8f71a37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67508803-943f-465a-b2ee-65e51c468345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257d8e06-2062-4e65-b3cd-bc11110a2366",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1e82a32-c242-4995-99f4-a1c0264d3f55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e061d437-3b1d-42d5-8fe0-9d25718a975c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c45b83-6cb8-4e88-8413-1603cbec7b87",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728bbd60-711f-4317-b65a-581e81788ad9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef0a73cb-5b25-4811-8428-3e083bb3fb50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608d7761-7f62-4ffa-a461-3d55ce9b7629",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f354525-deac-4e94-9e17-06e27aa6c393",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2472b631-bcf8-4074-9b73-3bf6b397e5d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60818fee-689f-469c-87da-8d9aa93a5f4c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "698ebd52-2123-414a-9b5f-41feff5d311a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef05a9a-3bbc-4010-8143-c49210e69747"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b20af9e-7422-4b4e-abb8-9be9ca02875d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c26b46-09a0-4687-8565-6e9cd06d618a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10a6f33-87b4-4068-89c8-2c4583018bc5",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c670b44-2280-4b26-8683-50fdc1a7c04b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2033385-f232-44ff-9454-718c4f0f4d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e033ef-2c03-41da-bbc6-3a1baccddc94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9db40d-c327-463f-99b2-5ccc96abeeb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5100c9a8-9311-47ca-841f-5301e154abe5",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aceac72-85fa-4c91-b25f-43bbb98f6e66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a749af78-ccb6-478f-9cfc-a19d23dd2b25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a8aed2-3889-49e9-adf9-37e22df8700d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a037726a-6eef-4c59-9e8b-d88d9e466042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01df4730-188f-4cd8-a628-3f6332958a17",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d72dcb4b-7fe3-427b-ae43-22ae30c45518",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "294870a7-9720-4e54-9f27-0a2537e8d8e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb222ad9-f06c-4206-9137-574e4a0f782b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b7812b4-8d85-4aaa-bed1-922f61254573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915606c2-8c47-4f52-862e-ebea0d635ffa",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31b61927-a27d-48cf-9c35-4cac50774a00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60650eff-f3bf-4425-beea-063e97271ef6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6561be8a-4af6-4f26-9b85-17ec4475b450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca920f9-6ddc-40ff-a191-cdd77da9b836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4bc677-1404-4ec3-81a2-eb79120374c8",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6296a725-75ba-4782-a2d7-8ed526e12234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc7515b4-afc5-4ebd-be62-b12f5b9fecbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4253b8f-d8a4-4615-9c5f-aa0f6931690d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70555bf9-1db8-465f-9f70-0389a540f8cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9465125c-91c5-45bd-b90d-bf273388e5b7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09eee6af-cd59-49c5-a655-83b3ea224e7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc76659b-a7c1-4ce8-abfe-5c48c68e47ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61bc6fcc-db9f-42c0-95b4-f58b7bf2d335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5f5cb0e-c1ba-46fa-9913-bf902299424d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1964439a-d3c1-40fb-b541-e4fbe733a1b7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b89cbc-e7ae-45a8-a329-9827dc68b9e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4e69c39-2e0f-47ef-9b6c-4134beee3be9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ccee821-ef2f-4184-b925-01d50b0f2a84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0666a14e-ecef-4e1f-9dea-086456075f93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4674e63a-6204-4483-a3ce-d2c13a870984",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73bd1617-22a5-4232-bd1a-121f9338c469",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8d657a1-8668-403c-bd58-59f898249337"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d69bddf-e4f4-49f2-a25e-b5397da3aa05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0b7b4e6-a0c6-4166-b99a-8a0a09534c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a3a324-0794-498d-bdb0-36d40fa847c7",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e651b267-be9f-4ea7-b323-fad5357ff6d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebeb7a20-b16e-4116-845a-66017b2db9a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03f44fe0-1339-459b-b581-cc24ac8bd8a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe7a1683-fe39-4504-8ff4-34f0d202a0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f3a0e9f-affb-43dd-b381-daf67f72cdfa",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bdba68f-bf2f-4e59-97e6-7c254c087115",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d97161a5-7823-4955-afc7-1c1b1484768c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4443565d-7bf2-41a7-9653-c0ff82c40bbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73d2b265-e079-426d-870c-40ab7175e733"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97e253aa-4ac8-4e26-ba1d-92eedb5d9ddb",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e3ae728-8ab8-45e4-892f-1954af2d695c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73424d88-44ef-4fa2-8740-b2b164efe74f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "764113bf-cbb1-4dbf-9953-b2e344cb8cf7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4d21dc1-a260-41c5-b284-0c849278fedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b08c45d-7d65-4a85-a69e-5802bf4be608",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca43244-0f57-473e-95d0-7a900769f985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52a0590a-0bd0-4167-a1b3-83a5052d9feb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce85403-0144-42b5-bc90-e6ec504ed425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78343436-5e62-45c5-9e55-641f01082c38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ececb06-6c1c-4b3e-bd18-656e2b695a66",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49fbc26b-59f9-41f4-9507-2551e468beaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51bd8c95-69b8-464a-8c4e-035335f56050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95cd4271-7330-490c-be05-ccf33eef47b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6d4ede9-df29-476b-bb6a-df9709821997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6a2a11-568b-4846-9cc1-8b7a15fcdb9c",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66e54a22-ac19-4ea4-8d85-0888a07cbdc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "281a38d9-a028-4d7a-992b-a81839e86929"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de44270f-6a03-4680-b6af-e5f44505de8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adaa7881-c524-4ba7-9f04-5bd27a2a30f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057283bc-2c45-4afb-8867-03f5297335ae",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0209f909-2f94-4405-a1aa-512168bcee50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d201fc4-61b9-413d-a46f-9eff523ad26b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1bdfbc5-4688-4dc4-a86b-aec391917aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "347549c0-7e7b-4140-8d04-2aeaea782b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "598b9b14-955c-4f04-8e1d-5ed4d25e2c06",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ff7f84-a1d8-4ecd-aaea-e8ec396c4bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ee08eff-1c4d-4c24-b451-f6b73ad09db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da04ca1-382b-4122-90b8-c5c9baf1b961",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bff884e-f343-4c5f-9bd5-9c401c11b09e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5b0c33a-bbea-4121-aa6a-4675cd312a7f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b057e4-0f33-4798-bcbc-87d1ae5742af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dda95e31-40a6-42d4-919e-0dee605a82b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cfd7c53-8441-4ab1-8aa9-f4b1360a3828",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2420a83a-1351-496f-a29f-97285206011d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56299c48-c89b-481a-8efa-a54feab44648",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c2ec65-cf54-4357-8422-738c57a5a71e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee53c725-b7c9-4e17-8484-0b960a0e6630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62699f1-38d5-4663-93fd-aed1b4cf0c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e9dac23-32ed-4f5b-a601-1e36a89f3047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c498ab-5b95-4e01-a790-00803036cbe7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c34b39-ca7d-44ce-80e7-b2c559581241",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f24f979-1be6-464c-b514-dace440f49d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87dd2f17-1b74-4a92-bde1-165920b23b1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ead00a95-8ba3-46b2-affe-6e67225bc513"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb05938-ab7b-4741-adcc-fa660ebea61c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7a3382-de32-488c-bca4-a74c7318aae8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1720e3da-5c79-4ffe-952c-3c233cae495c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "205c3e13-555f-4a66-94b9-9aaca0364784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7475cf26-082d-4da4-9a1f-0da91b03fda1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "065e4912-edce-4c08-8a11-4714ab89ee8c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2d9ec6d-6733-49aa-b921-719d917b079e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad2bf1ae-e971-4daf-b223-b5028dc2afc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94485375-c150-44c7-bebd-1defce74a771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2d09fc7-52b4-47f5-a464-f9f96bf50069"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5440a7e-b95e-4fe5-9ff4-2a763c72412e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e7cd31-4cfa-4012-a4cd-a9e84a0e875c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49129c42-1581-4bda-95c7-5976fa634b75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfcb6073-a5f7-4d38-86ec-456d747d6d30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c9e4a8e-9d92-4fff-aff0-12053f57bb35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ed1dbb-fc1a-489a-bcf5-b0d342f6921a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48ecf3e2-cae8-44e8-adf1-3bc1005d5dc8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e67b32d-68f2-4b56-a1ec-14d639c4c328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "121daa59-0d49-406a-ad0c-c3ebf5ef0310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "944481ef-d404-4e4e-8e30-3a4d606f72fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e5f1c88-b068-40c1-95ea-953cce2d6a64",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a057d4af-2d43-4a58-8618-dcea52a118ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7e69cbd-ad10-4307-8793-300cf58c9395"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "932aec75-bf61-484e-944a-77f31aafe07b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f2dab27-0333-4e3c-89df-c2119daffa76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aacdb81-6e93-4b77-a2e1-f46f61c59de9",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec9c98d-d545-4b95-8895-5afeed6b0191",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2299586-3dcb-45da-ae0e-abcc17d2fe9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29fb57df-b248-4e42-9868-4f9569270d1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420aa193-3f1d-433d-adf9-e899a9713811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47205c17-be5d-4695-8b2f-44ce23dad34d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a10bb9b-893c-4e5e-a836-7f08a7bda8b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5edcefa2-7d0d-459f-a287-419e5ed1d2d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "979de23d-b712-4f98-81b6-e5a93be65eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4033cdfe-aa44-44a3-8d13-e369b07062a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56fc0802-631a-49eb-ac29-60c667a8d723",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dea4396-c046-4e84-be51-79531f6c08dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81e76a74-7ab5-4f6a-90c3-a7ce3f64e787"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68779cc-0b11-4f89-871d-6fa927b7e531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e2ebfc4-d5c8-4d06-b451-16e34c35eb81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca53e57c-a8a5-401d-91e8-48bfb065d3ff",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f500f982-d587-420f-a744-5d95309f8b5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41da3a3c-ba27-47e2-a7df-ab5b86be463d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1dcb0a-3a7c-4025-8a8d-554e128c4187",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311c1f88-b943-491c-9c37-4595356c198b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce25924b-0383-4e5d-bb9c-788a57b6a702",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93c8d959-cc39-491d-aea9-b7e511d68e0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41918800-2d3e-4cd5-8f9d-43c0dd4d5328"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f45900-bd42-4d7a-9992-c4a61b8dba20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac0f5264-ef0a-4461-aced-8e1d6b86e46c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f7c003b-2243-47bb-8adc-c1d0ce622b2e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c601ed0-2ea8-4f75-8c88-ad405f1bbe3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4bb4081-9759-4cdf-ad5e-008b2cabf1ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d4f73b-b6b8-4cd5-af08-dc4e737e0fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2facc129-e190-4539-9e0b-8d9e6aff83aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bd1c8d5-478f-4a61-a2cf-e2c7316b245c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389e97b2-485c-4c9a-a5fc-e3c64fa767c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2983194-88bd-49f1-91d6-c45d245c15e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7f19268-ff89-4eed-a33c-d9f19b990d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "436416b0-d649-4a1c-89f9-ad092546eb10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e740588-d6fe-4eb6-9eee-58f29f591d5a",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a398b378-2b6e-46af-857f-8625017d2cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8676de2b-770e-4214-95d3-fa5ca84efd26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b33436e6-aa2c-49b6-bacf-193227ec04a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "730d9d98-2da3-4bd7-94cd-c9aea06f09fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c49368-8e30-4d3e-8ed5-0072bdb90c3a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0007ece6-2162-4a35-96df-ee5f0d20624f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e77fdcc8-7c3c-472a-80c3-b263401ea52f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbe665a-3c4b-4983-842c-90cd983111f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63be905b-7258-4326-8986-f9d895ec201b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6af93d-2a83-4e34-893d-d7b5b25a54de",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7f9c45-994b-48bc-b798-34e6bd3a2c73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d30138a-3c94-41d9-a06a-e04bbdca16a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b7ba9c-a02e-4082-be6f-ff8dc61b4d09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26ac7b27-08a1-4a32-ad6e-6225797ec255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17449aae-9b72-445b-aa80-2888f67858cc",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cab317e-246e-4ec9-bd0e-a0763a510c2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7af39e3c-064c-4041-b5de-60a897ea756b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "560ebef9-e845-41de-8504-a59ca5df3a52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffe8b01e-dc62-440e-a3fa-eacef0c1f81b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a887a236-2d81-4116-a739-41b7f7d01e1b",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "500135b9-ce02-43bf-b00f-cef63f895aa5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae4b3c3-b276-4f34-9cd6-9977c11ba65d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9164e1ed-80c7-466d-82b8-2dc54a12f299",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d97bf318-4830-40e1-8709-56acd970ef06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44cc6d71-b306-433c-a39d-278381c3698b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0129842-0fa0-4737-bb2d-701f2004420f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7bc729f-908d-4504-9e35-4834addf4fe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77ed959d-479a-4593-9b34-5e6a8de38070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b6253a5-ef12-4d8c-8c62-af044176fcb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b5d76f-374e-4e1e-adbf-fd04fe283dbe",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7971cf-8b81-4e3d-b011-c65e1e5e5920",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64125e24-220a-4f47-ab0e-bd8c05d2332c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5acdcd6-2e7c-4d9f-8303-5d025e74a98b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aab4a86c-8e63-4a8f-8b59-9d8b648a2516"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ada30fd-facf-42aa-bc40-543db0ad95ac",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4f441f-162e-49e1-84af-16ae927636d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff8847ba-9e5d-40e7-95a6-1001235e9113"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27efcc31-20af-42ff-a612-4b542723e1cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "966d804a-7df9-4ac2-8ed4-deffa16c3f7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c7cdf6e-777e-415e-8e26-3baa2112a545",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "347df112-6dee-4a14-a073-60228bb0ef48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85510371-b517-4c01-8010-8df88d90dfc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3dade3d-67ca-463e-a211-c464f43285ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b5a7b6b-22d7-4b10-b265-d35ad6482191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d852ae94-4bb5-42e5-8270-daba2efe63b7",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd8d4bb-802a-4756-b0c4-17749a7125df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e38786b3-b48e-4a9a-9639-9ef52ec0a088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38f0393a-545e-4727-ab74-9911706c8593",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aedbf1c8-059f-49bc-8b84-af9369a138e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6869026f-939b-4394-aef1-8987b48fae43",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0f7262-43ea-447f-9e94-dd6876ddaa5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f436fe16-52a3-4778-a4ed-e4c842fcfca0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09fd68f7-40b7-4a42-84b5-1ef64b6a5740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c30b112f-80d8-4726-a05f-bb1443b5f18c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b68585-342d-46b0-8644-b7ba1eaf0060",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3b9cf7-f855-4692-b1ab-22ba7dc4337c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdad3936-f216-4be6-bdfd-8b9e1e1f603a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aee70cd2-cf8a-4149-9a32-6273c72c2075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cd24986-a26a-4e0a-b689-76ff24a5202c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "282bcbba-119d-4b25-8e93-2440bc25c82d",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0e1477-4471-4ab2-b91c-095ce809284b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d66cadc7-6d73-4dc4-9973-722474b777e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f93505b-15fb-47c7-bfe4-a10d4484cee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da0d1b7f-872a-4594-9d3e-9133bd256890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "528002d7-7d8a-4f44-aa80-ecd186cddc18",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a9632e2-e6ca-40a6-9e74-1ef71dfbba88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf974489-a258-41e4-95b0-cd6871b66e20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d0ae26-8803-4cf6-a10c-dedd5c9723cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb95a72e-d4ef-414a-92ba-562aabb02fdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3afbb1cb-23d2-41e2-96de-be39303053ca",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "462dd46f-5a42-431e-ac76-2187a7832839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41f0b27-0132-409f-8f40-63525829e4c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06f5e73-f864-4080-af0c-42f715da5f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fea43cb4-3586-4157-a562-b21f1a942c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09fb0dd1-5c8c-4c37-bf10-725c67de1bf7",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1c607cf-34ef-419e-a91f-08ad43e857bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ec7eeb5-fe96-4f99-8380-9d5bc926c15b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "005b6f50-9c5a-4a8d-b929-0b34e42838b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62b32fcb-1eb3-4f4c-bdbc-9ee6973ff339"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ac3fcd-835d-4d3c-a0f6-96892103970b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87522b8e-e027-4309-9cf3-f7f725792637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "254847ad-a0ec-4dc1-b817-5ab29cbd9792"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "549ddf2f-f6d0-46b5-97dd-1e29ff277d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c95944d-024b-436c-85cb-c0a5d9421548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a33924e8-ac25-46d8-bcfe-99b44bf64fcc",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53eb19fe-e241-45b3-8489-267e42d110a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b54e009-75ea-43c0-8baf-9f393b4071e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47b486b0-c5e6-49bf-91e3-0ac7ac3a4890",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fc4ac43-378b-42ab-b9dc-ee54bba6d2f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfbc87d-7011-496c-a967-160d53758b48",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9545ecab-0d9f-4494-9001-e142b951076d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3227c31-88f2-4b70-9826-df462b092cd6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9e4953-6a32-4dbe-8b0a-796d73d27a35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bc2e991-628c-4073-a5d4-360d584329a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "508996ea-d005-4ad6-8929-f029aaeee97a",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b06f604-4c89-4fc8-8857-0b0a69553262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20be16eb-ebfc-4098-aa45-c5eaaacbb73a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49daee94-7901-43cc-89f1-7b5009df0c81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb3f2928-65ad-4401-a12a-760641a54bc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00bac37a-66f2-4fcd-b181-a0a05c6f2f4e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9aa75c-5aed-4975-a7a3-4d88666b72ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2939ae31-5a7d-48b5-8e8e-003d43382e7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f9c588-ae22-4bd8-a9f5-004a2d84428c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7807158-a22c-4a63-8677-95adcb88fc16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fc70d6d-e653-4032-9b31-a95830e680fb",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8a930ca-f8b0-425f-8326-d5d6bd67a476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50490f5c-9556-4ed9-b713-b47c67397736"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d9b1e3-e435-42af-89fd-7256df8eb629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ff999e8-b7c9-4fe5-b064-9d615df6a629"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d39c27-fc67-4858-8ebc-4ec6abece33a",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35b1fc93-e4f8-407d-8733-785874e50d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58fb8752-a561-49ff-a26f-9fbb8c8c9caa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fc1f22-5769-441e-a038-fa8022bd7865",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d90ea9eb-6732-4b8d-b07c-0fee44c146f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fbc6b11-d2d9-4f01-b6e7-26fb47698e15",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc76396-f779-48a7-a1bf-746831958736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64d0c54d-ff5d-4d6a-9bdd-f66cde268a12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf62b65c-48db-41aa-a88c-e0a2ea2c5c63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9137a7ee-5d04-4597-afd5-4c67d2eefcf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87dd907d-6a77-4117-b184-bbb0391dad3b",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33087609-17ed-4b1e-87b5-ec42bb372145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32b8b341-c79f-4b96-9d88-a848b0f39dcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5324890f-e86e-432c-9a85-c4f5744c3eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e762fa0a-ce4f-45e0-a83a-35d64d7bce0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7952ba4c-d84f-49d7-9508-5fb7188866d5",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e71c4d77-9aaf-453f-bbbe-89a89445317b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdb587d8-09ab-47cd-a7d6-dc6580f6e072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2025a051-ed4b-4690-961c-70b93c6bd88b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c962151b-a2bc-445c-85af-cad7f21e67f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38788f54-e547-4a93-a539-97ef0d6cefde",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d3d1f93-9c73-4da0-993d-1d4d01cf55d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b9b2cdb-298a-4bed-8293-255536302f00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37e814d-14aa-4a82-9ac0-2c8759cd9d0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c2fe1ea-2ce3-481b-a99f-938562bd3d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6742c4b-044e-411a-95d3-0360fcd47a80",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71390584-b7bd-4354-8cb6-6c2ce161b09b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ece6c7d-6faf-4789-a5ba-87572b7c2adf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c9ff3d-4ad7-4034-929d-091af6757f64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b95a9f96-4be6-47b6-8850-b57ad2c0ff2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e58ab7e-1874-428a-ab35-dcb76d6373cb",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85b7fee-c835-492e-b1ef-ed403551434a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2965340f-f489-4136-8da4-1b396daee4ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb8390ff-0260-4c9c-8d9f-873f1af4c602",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3af9869-37f1-4374-9e96-9b95e01139e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10b50ade-a139-49b7-b325-fddb05cbd5d0",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e260ec8-c956-4d42-848d-480d93693d3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "449ca395-a80c-4743-8dd9-d6cb44bc284c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35622675-9144-4f0a-a5df-efb7d7253d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7726b200-92b1-43a2-9ddb-34501d4bd638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9618101-80e7-41db-99c9-b59ce69a3109",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54304420-f1e2-4949-8e50-4875448bbab5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6427264-8b86-470f-b1db-e5aae843beca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e76f137d-4568-4d1f-9140-d5305247a3b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a00cdb54-0a32-479e-b995-0f573c8189e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db20f89-fb96-48d9-bb86-002b55977f6d",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13027678-a5ff-4774-a1c1-e3f4719994dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ba7dade-d89c-4449-89ab-5ed08ab8883a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d8a485-f629-4f1a-8379-86382b59a762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c57e1c43-624b-4127-922c-9229d72900c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27871831-7eac-43f1-8325-672e1d4c9733",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d24867-478b-490b-9d4b-2b80814a4cbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4fc9f26-471d-409c-9aed-71ae877b0eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a473e51e-5af2-4c7f-a426-0fb8f5017442",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fa68a30-c128-4bad-a746-80390484e146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9db34b1b-b5c0-4180-b04e-0ae5827d7d0b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b05c3916-603b-4da5-823c-8e6292db393b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a62fa04b-bfbe-4c92-b4c6-ead94ef4d72b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8150243e-bcae-4beb-8449-cedca151a50a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e691204-56ba-4282-b994-83748b111bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185c30f4-d5fb-44c3-84ce-f4eb2be71174",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f91f9f7-0893-47fc-9ccc-231bf5a80b73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb5478ef-80a5-4c3a-87cf-d8048b8bdd65"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98da1ba2-25e5-49e7-8e6f-9cc37721e4fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "027b3979-000b-4df8-8f63-2813fc36b8a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "085b7f99-df42-4661-9560-2efec352edcc",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23bf83bd-b68b-4db8-9ee7-6581743058a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce57342d-4c81-436c-837f-55e12509bf93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17dba611-2d78-4563-8eb0-80b172996521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee2c607-c42a-4342-9511-aee1824c4a8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93554a9a-9175-4773-afd8-2fbe63651a25",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fb1962f-ec94-474a-a50a-576ab753fd49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dc3de98-0878-46b0-9f6f-345e49fb96b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4f2016c-3186-49e1-9c64-e58fcc9411ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef6e2306-4138-4703-a136-937d992b5032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d671fad5-ffbd-4f2b-9d3c-cd700ced392c",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9df366-d421-4593-8267-6c80411ee972",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7fedeb5-d114-4ef2-9fc0-1438cdb17b0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12af8cee-80bb-4734-bfc2-e65232cb2e2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8beb600d-733e-4b22-a299-09d2e4f96327"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67a887b-56a1-4539-8d08-10f678e1743a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae52aaaa-3f27-451b-a47f-ac5102f6acb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96d903f0-0315-4271-9498-f96725227161"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1dc311c-eabd-40cc-b856-ef684fd85b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced889d9-b9b8-41e6-8814-6a1ea6ebd396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92179631-d075-428f-adfd-01d61e3fd5f9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0eaeba-7a7f-45b9-ac53-d0703a19272e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96eb6940-9649-4952-b3c2-a7965a1a47f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33469d40-da34-4ece-8202-7347c9f2fa52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31298945-5b63-458e-bb75-d78ae9f72705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "342583fd-6d02-43a5-9bc2-73cad589e6c3",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df27f88-9671-424a-a4f2-86bf543da751",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df21ba65-c1e1-4e44-9c5a-64e86d5f3df3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5605d1fc-335a-4c52-a390-53cb45d6557b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "405fadfe-6c5f-4be7-8ac2-85c89fcff893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3cb024d-7fbb-49e4-899d-ff999143b47b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6189d188-5c7b-42ec-8072-733716bdf063",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24629b03-b964-4cfa-b517-6ab4a0243ab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b3da7a1-1cf5-4bac-8a8b-f46fb9030512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe7c354-8389-451c-b130-6a931ad65aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c18c3cb-0d20-4da0-b99e-827fda6289ad",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7f7bfc5-48b9-4865-b9bf-b015a07e5d6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92290738-f75d-4b4b-b199-1cd1c9ae1a3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a086324-65a9-4d70-aa3c-3c1115ddcede",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "091054fb-8c17-418a-a963-98abfe67abc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efa492f-40b8-44a9-a261-e26a46efbf9d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f123024a-0189-4fa3-98a4-345815c4b2f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28dde3bf-4c0a-44ef-ae7e-75840c12ae4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1726a0dc-90e1-42c5-aece-803f9fa58572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "415d44a4-f58c-46c7-b833-1d1834d0a949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b90fe1b9-fc1c-41a1-81fc-bbc4aaa75ba5",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097c0e89-b03b-4a33-b47f-6bb196e4f2a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86302bf2-9bd8-47e5-96b6-b2ab11e93d18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1da225c-8d0d-4591-bb15-00045ad4ae94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09376329-6819-43f6-934e-6e1c3d605edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95eb018d-ba39-4f47-9bbf-9778ffde514e",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7d6817-b36f-433f-a544-c310a2a98de7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cbf22cef-47dd-4b79-8636-8f98a8a5f1f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2413abc9-b684-4e98-bffe-e9b0acb48040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff5df180-cfcf-4af2-afca-a7776f6b28f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b702dc7b-e947-4183-9455-d61f1afc325d",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f797a90e-4479-4ae7-a2ca-d7291acc3af1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8a88092-7435-4904-a9a8-b2bb4c721e30"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd4896c-2ce1-4e70-ad23-8fd12b9abb5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da488824-a607-42ae-95fd-b606a2cc8702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc9a4a4-19fc-452f-9405-e4fc6a7b655c",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0e63e7-b656-42c7-87af-f160c3d05e83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2e772fa-e120-4edd-a77e-ffd797ff7c34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f28f2ced-f7d8-4aee-aad6-0c51dd7bacad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11efafbf-baed-430b-a737-e00581aa6318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d74620b-e570-4e36-b9da-a7a878cb0439",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215f2079-ff94-4067-85ab-ae79a34703a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5394bb9-e8eb-4a9d-98c2-a0fc404ef333"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11b4a851-6d69-421f-b625-bdda082429a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c460bf-0e64-4e28-a5dc-31f5ad76ba4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5af73be4-d964-4246-b454-d39494935a43",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d2c34d8-578a-4448-9b95-124fa8428efd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5523e01f-75bb-4a94-9939-c6605d501733"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da039b69-7a5a-4735-8fef-cdc104b28d91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fc318f6-6de9-456a-b8fb-598e680b3f51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c611f0b6-4c14-427d-868b-37eee9cc64a4",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f162cbd-dadf-4e39-9510-971f840d57df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "126a4fd7-cd13-41a9-8ef8-f7645346295c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdedada8-54ff-4860-b050-a491adcd4c9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6a07e21-10bb-47d5-bbf7-ed348767f534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c9e75bc-7c10-46b7-bcf2-deb07af0b845",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04554120-3895-4512-abd7-19eb929cc898",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8cf5239d-94d9-4aec-b2ac-0b88f8c5a065"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d4baec-6681-4b38-a96f-f945103900e6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "700fcad2-ef2b-422d-8879-96a5b4e114b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4682e49e-ce63-4e02-86c4-8e0e16955c1a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4109690f-0463-46c6-ab74-46a445422d45",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12991cc9-643b-411e-ab61-1b70e8f7d46e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25277b29-8e6d-4e85-a247-b02551a06b19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbf0937d-14f6-45b3-8d2f-bb2ea9ea6a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d870ed64-bd0b-4e17-af21-209102a024ac",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c07e9db0-291b-421f-9e91-e25585a30756",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa4f4366-acaf-49e2-a847-7cc965b54f72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65a27b9-70c7-41d2-959c-140f832d2a70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc5ec581-e00c-44e5-88bc-a9b0dda6f24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750aa0c1-29f4-4256-99ca-37bc61f68439",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd329a0-f851-431b-8b69-9a0e8a7091af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "feae0e11-66da-43e9-ba65-584e5d4ae6bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0d5804-8f9d-4db4-b0ff-c0f55dc5e9c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40ad7e51-7f92-4b98-aab6-382e7f27b038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5957216-b9f6-4fa4-a7f1-5cd3b51e7289",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5225a376-9519-48e9-a03c-a99808cf0145",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c7353f8-13ac-4d99-ad66-80d3e5492a61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df245825-8adf-4aa0-a8cf-e6330c08ac8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e7ddfd4-fc71-41bb-a0bc-a7d66ba07f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7df268d-517a-4b9a-affd-b68c6dd30dbe",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ce92276-ba4c-4124-a31e-5b7814006e8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ae286db-fea1-4d3d-9dd1-60564067c701"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73941a12-ee63-4370-b2f9-b92c02065f03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c98a7579-de9f-43c4-b280-80e54de88b16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f5a4f72-e194-4749-9cd8-2d280685b9e9",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d1059f-3d43-44d2-91af-ce8b194cee07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43fe732f-a3d9-4620-b733-a8d465772e76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39fee32f-81f9-452f-a243-910400647b66",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5920645a-e186-4f0a-9b6f-fcd50323a2f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56dcb863-f62f-412b-9650-17bf34862634",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d19a44-5e4a-4459-8722-41517d06aca4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8136200d-7737-4d92-a639-eb1dbc749dcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0b2d3f-e53e-4ecc-b296-7d05d1c84b6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f12c353-d717-4640-880d-52e2f32e145f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62d377d9-1b0f-48ea-8384-1af549191711",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a255e09-895a-4d28-9d9d-fea4fd999350"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b060738-42d8-44f7-99a6-52283375661d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68001816-163d-44b9-b52b-0c891a5e6a5e"
                    }
                  }
                ]
              },
              {
                "id": "9e9b5d87-372e-40f5-8808-c76c28df0f9f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "86f70f8b-2e10-434b-a352-27cd398fa6bf",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42dee60-ae8f-406d-b65e-cb606240a14f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a58eb57a-df3f-4eef-a9d7-2ccdb7993111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91e3d160-e146-4358-b14e-f6ee93a4dbeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bad83716-0070-40d0-b769-01fdf571274d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f387ea3f-5647-47e2-94e4-84fbdef016a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b91a8ab8-841b-4103-9f81-a6bb3d71dd3e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dc418996-fa51-4f2d-bea9-9942bd8fbef8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a017905-313a-4bd7-b355-e81fb858584a"
                    }
                  }
                ]
              },
              {
                "id": "de025561-4a26-4b5c-8387-8afebc9edc27",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e85ac90d-b02c-49c4-8b8d-b18bf2bf3356",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84ea0845-40a9-4f8b-a348-09c4b3a1721a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "99cdcb63-55f6-48c3-941d-9aa0b2bd9e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a0f47e1-3d2b-4532-9f40-8238e503a5ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e2c45bc-0b1b-4e49-9eac-2a875b214591"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "594c49b5-0bc0-4b65-af1f-2634c13c3fe4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3f4fc947-f0a4-4fbf-bf91-fae425699b21",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c7546a4-7551-4180-88e1-862d0afd0cdb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "db360914-982e-4cb9-ad36-2a109fef9aa6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f9177993-89d3-4d5d-9fe8-5736f75062ce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29e4d385-e251-45a0-9c8d-01832d9280e9"
                    }
                  }
                ]
              },
              {
                "id": "9f12d12d-a0e5-40fe-8e71-a1d41c9adf53",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3156e875-c922-44c6-8e43-6a5167fb286e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6a4ecea1-9345-40e9-bdaa-2b9216c540b5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21d92ede-43e8-4d97-9e5d-f61a6c5ac5cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "518ac123-6d5e-4ced-929e-1a380c44ae9d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6045ef95-abfe-4eb6-acbc-2e0097baa6aa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "55797feb-3a26-40ce-9c86-e36742ae8ff9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dac68f66-056c-43a7-9269-1079e73c54f0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "15e49a0b-341b-4e4b-a66b-7f3fcac791a9"
            }
          }
        ]
      },
      {
        "id": "9d5ae58b-861a-493a-abea-3930b1c4b114",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d97d49b9-1f5e-4295-aa02-cacc1ab0781c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a183880c-6a80-4815-8b6d-ddcd208bee8a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9294d623-d92b-42c8-8620-e737d2797783",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30e2089-7f53-49dc-817f-1281020b6abc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "058209d8-eb9f-446e-93b6-3ee0036e9696"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "599abb3c-0ae1-4d3b-8a5f-f43bc1742d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56038d9a-b912-4200-bb30-e5a606eb0ab3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa05ea22-e9e6-40ef-a606-3e9a7035f6fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c2c78b6c-5caa-430a-a578-2daf55545ed6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d476e8f3-8c34-44a9-adba-78437cff62d7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a3adf20-ad83-4b18-9e36-ea3cf8d1616f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "efd61608-e4c2-46ed-9878-d1948c53cd8c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b4594863-ec36-4ab6-affc-be8eed73f41d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a647bc7d-a8bd-4ad5-9ade-78ac0831808c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "193f8df5-3b62-4303-a080-71a14cba2c8a"
            }
          }
        ]
      },
      {
        "id": "aea3c00f-dc52-4e97-bad1-81e7a5331b93",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "5d0c8f83-cb7e-4509-b646-76c5c5622fd9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9eacaadd-02eb-4fc2-86c2-865feb862268",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5a8ae61-094c-4128-9db5-1fdba5d202de",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df4c1c3e-07ec-4d43-964f-d7420e9d8147",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57f4d06c-b358-4cc6-9eef-adf744e8a1b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a10ae663-bc33-4d7d-b60e-1c0709755d91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17240c89-468f-4e42-a6fe-1bf646d8f895"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c2a998e9-6069-4f31-a2e9-cf68a1dbd065",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee4edb53-25d2-4eed-95bd-2cf8901a69a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "53e09b7e-0544-4ddf-a272-0561e4b6206c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cb59bcfe-9c18-43ab-a262-62ad437878b5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe9fd7ca-d639-4768-9292-5f4f7e152074",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5ef5852f-41ef-4fcf-81cd-7ee6020c4beb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f61187da-288a-43fe-9525-ae1717f50ea7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cbf9fd61-fe53-4b2e-b3fd-b7048e9a94d2"
            }
          }
        ]
      },
      {
        "id": "0146c2f5-c370-414e-a6b4-5437c54314f1",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "6393cefb-d2ca-41df-b702-605ff5f0dbbd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6cf11b67-d71c-43c9-90e8-003db521686e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "28b7a58f-52f5-4cb5-8c2e-80c250916b5f",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c475a0b5-9bd1-4732-8147-ac61dd8b9a9e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7aa03ee8-9f39-49e3-a776-661767a444c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51832f1c-3b39-4d93-ab41-d8b3f30cf87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0c3055b-2dce-472a-ad25-c77e0bd29218"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff4241a6-5e13-43a5-882c-b36ce1985e1c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c6e03ad-5aaa-4a55-9ced-079840ffd4d1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "17b5ad87-d8db-4516-be08-ee4a0956fa54",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1b1dcbf2-8383-4889-8686-baf96555533d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b9042f1a-bd05-4945-9afa-d413662f2277",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "39131561-763a-4d64-a2b3-a6b3a128f89c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79b0ecac-7a7a-4c44-a8fe-aefc543d98cb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "aae2f351-0505-4dd9-a7f6-914091b52b88"
            }
          }
        ]
      },
      {
        "id": "394cc9f1-3c97-4b51-a149-1d128eca1ef6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5c3a1c89-b791-4856-8612-7c415ed84907",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a2b6d83f-439e-4d26-8610-c1b24aee7b3f",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "28c0c70c-29ea-42de-bc83-725c91a4b2d5",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46a5a944-ef19-4a2a-92bc-eb40052920ae",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "921df569-9732-4811-b7bc-0af510d8f247",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 67.8210526315789,
      "responseMin": 5,
      "responseMax": 546,
      "responseSd": 63.350262013172205,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1702686925590,
      "completed": 1702686954179
    },
    "executions": [
      {
        "id": "25136f5d-fe0a-4447-ac35-73a46cd107c2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4b4c1ea5-2911-479f-a93d-8d516d238a62",
          "httpRequestId": "1601548a-ab9c-4362-8fa6-69fe7ac36c66"
        },
        "item": {
          "id": "25136f5d-fe0a-4447-ac35-73a46cd107c2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b5d4dd20-9238-440b-b571-6812de57a7c4",
          "status": "OK",
          "code": 200,
          "responseTime": 60,
          "responseSize": 0
        }
      },
      {
        "id": "ff65d1fc-54ec-4485-9c66-0eddfa18f76f",
        "cursor": {
          "ref": "f8f2a307-9aa4-4d6d-9004-24e4cf133195",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2ceaa782-0782-475f-a480-33767f64a31b"
        },
        "item": {
          "id": "ff65d1fc-54ec-4485-9c66-0eddfa18f76f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "4aa41ce1-7dce-4ca8-b83c-bd635bf6fdab",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "180885d8-8e96-46a5-abef-cd197e3b611c",
        "cursor": {
          "ref": "0d8a422b-fb63-46e3-99a3-5a601eaa6a5e",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c2b4e415-c136-46d1-b355-67d793865467"
        },
        "item": {
          "id": "180885d8-8e96-46a5-abef-cd197e3b611c",
          "name": "did_json"
        },
        "response": {
          "id": "b1fd3561-76d2-42fa-83fb-ff8c89dc861d",
          "status": "OK",
          "code": 200,
          "responseTime": 166,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192b1550-88f3-43ad-a660-d91557327c1e",
        "cursor": {
          "ref": "83b36a09-accc-4d9e-9357-c3627ae60a0b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a4660483-36ba-4fbb-b7e8-27ca151ce7af"
        },
        "item": {
          "id": "192b1550-88f3-43ad-a660-d91557327c1e",
          "name": "did:invalid"
        },
        "response": {
          "id": "c6cf4e38-603e-438e-a56b-d5b33a538307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192b1550-88f3-43ad-a660-d91557327c1e",
        "cursor": {
          "ref": "83b36a09-accc-4d9e-9357-c3627ae60a0b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a4660483-36ba-4fbb-b7e8-27ca151ce7af"
        },
        "item": {
          "id": "192b1550-88f3-43ad-a660-d91557327c1e",
          "name": "did:invalid"
        },
        "response": {
          "id": "c6cf4e38-603e-438e-a56b-d5b33a538307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54139cbc-6442-45e7-a837-53b39e73a60f",
        "cursor": {
          "ref": "bfe68960-8ed8-486e-9ee8-d738de52366a",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9332208b-aedc-4f93-93f8-45df5af0f85b"
        },
        "item": {
          "id": "54139cbc-6442-45e7-a837-53b39e73a60f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5491555e-f5c8-4e63-8118-58883e8146cb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 105,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e49fee7-f278-43fc-a11b-014e5311cbc8",
        "cursor": {
          "ref": "b0ced634-77f7-4f7f-ad1c-5cebd2dc9cfd",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "13d498be-4167-47ce-8f0f-fc763c59929b"
        },
        "item": {
          "id": "3e49fee7-f278-43fc-a11b-014e5311cbc8",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "a9ede1a7-f300-4067-b6ff-1f33321051cd",
          "status": "Not Found",
          "code": 404,
          "responseTime": 48,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f3c752-d5a6-49e1-ac6d-913440fc82a2",
        "cursor": {
          "ref": "1f98fca7-1622-4a9c-a65c-1c435d88518a",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2271e11e-f4ba-4e87-bd8b-8e31da29e3f7"
        },
        "item": {
          "id": "d5f3c752-d5a6-49e1-ac6d-913440fc82a2",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "48501349-7d72-4907-a061-6157783ebb75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ccc737e-82a5-44b4-95f6-a392ca55e8d8",
        "cursor": {
          "ref": "e812c284-c652-40fb-a5cd-f11edad640a3",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "946b710a-aff1-45c7-b94b-1c051ec68545"
        },
        "item": {
          "id": "0ccc737e-82a5-44b4-95f6-a392ca55e8d8",
          "name": "identifiers"
        },
        "response": {
          "id": "47190e65-b91f-44fb-8321-f634c7279d2d",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3731baa-060a-4af3-8f39-0afbca368437",
        "cursor": {
          "ref": "186bf4c9-b927-485f-b1a4-14914ea45c9b",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "187cc44f-0cd4-48d5-89ce-e6ff4b2db60f"
        },
        "item": {
          "id": "f3731baa-060a-4af3-8f39-0afbca368437",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "811234df-1f15-4e03-a2c6-06e250694152",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa2e37c-1681-4ec3-8533-2f1ca90adbd2",
        "cursor": {
          "ref": "2a79c964-1039-40b2-9404-f96c2af1c455",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "60192fcf-8377-455b-9e6b-a5e67d2c6715"
        },
        "item": {
          "id": "4fa2e37c-1681-4ec3-8533-2f1ca90adbd2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "08920531-d687-45ff-aa93-e74e84f96593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "197b02e2-259f-465d-bee8-b89f2187e343",
        "cursor": {
          "ref": "4c4a1049-9d0e-48b8-9da1-137a176674e9",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "0e29f17b-6b12-4e99-a77d-87e89adc44d7"
        },
        "item": {
          "id": "197b02e2-259f-465d-bee8-b89f2187e343",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "2e3ce272-c2fc-400d-82b4-30fd70d78bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caaf966a-0405-48d7-af93-8dd805924af1",
        "cursor": {
          "ref": "07077219-65f1-4675-86b7-7707563a3816",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "293a2765-1326-4fe2-8d5b-c8aad58e9561"
        },
        "item": {
          "id": "caaf966a-0405-48d7-af93-8dd805924af1",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "7eefe2c0-39fe-4a36-b462-1677e5b8dba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "996e21d3-16ea-4694-a6d0-c9b1ad56c1ab",
        "cursor": {
          "ref": "60829889-30d4-49d0-ac91-c431c885fc9b",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "cf0e5219-79b7-45ba-9a0e-cc8aae6013ab"
        },
        "item": {
          "id": "996e21d3-16ea-4694-a6d0-c9b1ad56c1ab",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "acb7b5c4-2400-43a6-b761-e3f4d8ce0065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "735e192f-da76-49f6-9322-38ab80af2c8c",
        "cursor": {
          "ref": "7ee4e948-7cd2-4d7a-ad08-3bf0089cbace",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a2f7222b-47ac-424a-806e-df239bc48456"
        },
        "item": {
          "id": "735e192f-da76-49f6-9322-38ab80af2c8c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "96c9c179-03a3-4312-98b5-839ba3103b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bdd395e-241c-41db-9c17-c2179fe1f07a",
        "cursor": {
          "ref": "aa29d6a2-5abb-415e-a9b8-e562dc264c90",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fa5a1dfb-cbfa-4f12-84bc-1ac8f642d749"
        },
        "item": {
          "id": "5bdd395e-241c-41db-9c17-c2179fe1f07a",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7df0b39d-a874-4aaa-bbd4-c7552dc50945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c3a8bba-c6e5-4cf8-9d12-00969f137645",
        "cursor": {
          "ref": "b140e5ed-14f9-479d-b87e-f3e1f89b3702",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9fcba60a-fd34-4ad3-9d2b-3530c038e666"
        },
        "item": {
          "id": "7c3a8bba-c6e5-4cf8-9d12-00969f137645",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "aee05f8b-217d-48e5-8a17-db29e7815e31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a01d2ad-5d9a-4a91-b761-b9bbb2cf7611",
        "cursor": {
          "ref": "446f6668-2120-4bf4-a5f9-4f0a8c5ba236",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c031c4ed-188c-4ea7-8dc2-85ef33e27a63"
        },
        "item": {
          "id": "9a01d2ad-5d9a-4a91-b761-b9bbb2cf7611",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "51971934-2b28-4ae5-ab36-903c4b9e58c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b76ceab-cd66-4d0d-8c59-dd8f7792e7ec",
        "cursor": {
          "ref": "785b7360-a402-4389-b2bf-f830a9b30af8",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "425149ca-470c-4491-a549-4d43404de89b"
        },
        "item": {
          "id": "5b76ceab-cd66-4d0d-8c59-dd8f7792e7ec",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2cf96f61-1424-4902-84f5-7c765b7d1dc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94bd50b2-983d-4a33-b7d3-b30438612278",
        "cursor": {
          "ref": "1e80d8ba-9f5a-42b9-97d2-95e29a8e6c58",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "cb8a151f-4fb6-4bb4-b4b6-54aa62a45113"
        },
        "item": {
          "id": "94bd50b2-983d-4a33-b7d3-b30438612278",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "4b77d722-3473-44e0-bf7a-944de4f6f110",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6af6229-9180-42dd-8b51-cc09e37f2e10",
        "cursor": {
          "ref": "6f1963f4-e735-494e-9d83-2ec663a873b0",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0071f625-dab6-49cd-9114-cf1f6816f40c"
        },
        "item": {
          "id": "c6af6229-9180-42dd-8b51-cc09e37f2e10",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3e0bd10d-c193-4ecd-97cd-0ee94bea5829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57ccba7f-bcbf-4ced-a023-159ef2a61e33",
        "cursor": {
          "ref": "82979ff4-914e-4316-9a23-356ff128d1bc",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "f63ab6a0-03e9-49d3-9c01-94638b049fb2"
        },
        "item": {
          "id": "57ccba7f-bcbf-4ced-a023-159ef2a61e33",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b776bc4e-bca4-4200-adef-8baf849a1dba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c925eb5-a6cd-4c99-959a-d5f4cb5b0b66",
        "cursor": {
          "ref": "971916c9-d6dd-4d9e-be81-849cdcb0c980",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e5e1c336-08a4-4186-9528-4ae1133b675d"
        },
        "item": {
          "id": "4c925eb5-a6cd-4c99-959a-d5f4cb5b0b66",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "bb4f257b-6b92-421e-a426-4f4fcbee8c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e23ff3-3bde-49e1-b273-a4784a7165d9",
        "cursor": {
          "ref": "2d3e4840-61c2-4dd7-8790-eccd13abc460",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "eef63669-6ba0-4332-b738-b1085edaacfd"
        },
        "item": {
          "id": "f4e23ff3-3bde-49e1-b273-a4784a7165d9",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ec4f85c6-6b9f-46b7-82e3-6d8fac2b3561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ebbea4-02d8-4109-8d87-b32378aeda78",
        "cursor": {
          "ref": "53e8a70f-8607-48b0-a056-4e27cbdcaf9b",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "bf0de0f0-67d3-45a8-9ebc-d7a204e435bb"
        },
        "item": {
          "id": "41ebbea4-02d8-4109-8d87-b32378aeda78",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "2b0c3628-1f0d-4e82-b148-e87a6b8d178d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afdf4ab-9005-4aec-ae95-dffa2bace16f",
        "cursor": {
          "ref": "e6e9b514-fe8a-4521-87e5-f852b52eaf92",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "06ca15c3-b629-4eb2-b9e0-c83bd13d0213"
        },
        "item": {
          "id": "0afdf4ab-9005-4aec-ae95-dffa2bace16f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "abab6caf-d71e-496a-8bdb-399507992f28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fabb2f09-0981-419d-b156-906273db316b",
        "cursor": {
          "ref": "72854927-7b83-4f2b-ad22-299ab44efbfa",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "c9ec0950-ddce-4fb6-9384-342cb7950d4d"
        },
        "item": {
          "id": "fabb2f09-0981-419d-b156-906273db316b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "c759a9f0-9f90-4673-8079-ff9431cde0f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdeafaa-f25d-4793-bab3-dbdf8f6b2c6a",
        "cursor": {
          "ref": "d57b9940-405a-4787-9638-312a8b8ba71f",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "16a3835d-9850-4c47-a5be-5f508eb0465d"
        },
        "item": {
          "id": "0bdeafaa-f25d-4793-bab3-dbdf8f6b2c6a",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "2733f761-3355-4793-bdec-1b832fba3d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0305500-5938-4747-a479-40d152b53c61",
        "cursor": {
          "ref": "d2f9e7b7-e108-4167-a3d1-5605cbadd4fc",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b756d75f-b1b9-478e-8a9e-cde763545bce"
        },
        "item": {
          "id": "f0305500-5938-4747-a479-40d152b53c61",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "6bcc74aa-3232-4132-93b2-74e802416d10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eccbe563-2c59-4ce7-8681-5daadb973f01",
        "cursor": {
          "ref": "a159e7a7-8bdf-401b-99cc-75621e272ece",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "991a4b2b-689a-4757-acb7-05b319344110"
        },
        "item": {
          "id": "eccbe563-2c59-4ce7-8681-5daadb973f01",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4c1d15c5-d03c-48c7-9ee0-12714164181c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17cb8c16-ad14-4d01-86c3-d422cbdecf60",
        "cursor": {
          "ref": "e4471ab2-9282-4996-97bb-818144d2f5f7",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a728a72c-4893-423c-877a-209c5a344dbd"
        },
        "item": {
          "id": "17cb8c16-ad14-4d01-86c3-d422cbdecf60",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "b68aca05-1aae-4c8d-aa97-9d3974934572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28527b66-cad2-4fea-9f1f-ccfdd4cbc6c9",
        "cursor": {
          "ref": "1f26e9f9-0611-45b6-b6ab-fd1c13a53663",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "00d8c3dd-d8b9-4efe-b921-b4102ce18cb3"
        },
        "item": {
          "id": "28527b66-cad2-4fea-9f1f-ccfdd4cbc6c9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "97cc2744-57d7-45ba-9a69-263666250613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2afaf45-5b75-4583-8f1e-72072bab8383",
        "cursor": {
          "ref": "3e7c4114-4649-436e-b72b-e3a667cad5ff",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "acc6b407-2dc3-455f-a413-9d58570b5b58"
        },
        "item": {
          "id": "f2afaf45-5b75-4583-8f1e-72072bab8383",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "f56de55f-91d7-45f3-b29b-7b9bf549282a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb04aa04-2ac6-419c-9e1c-f1ba59df47b0",
        "cursor": {
          "ref": "97104132-858d-49a9-91f9-5adc9c22ca53",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "4b012adf-8332-412d-a415-90c2b3878d03"
        },
        "item": {
          "id": "bb04aa04-2ac6-419c-9e1c-f1ba59df47b0",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c7e9e760-5549-409c-ba00-3d854c183942",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87cbd6f-bb84-4227-a599-5a15e54e787f",
        "cursor": {
          "ref": "683307ef-013f-4310-a8d9-818d16190daf",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d00e49c1-0921-40f3-a1f1-5a4c91e29360"
        },
        "item": {
          "id": "d87cbd6f-bb84-4227-a599-5a15e54e787f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a2c923c3-7f43-4c8c-be39-0c197505b377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449aaa5a-eb74-4c94-a0e5-f1a24299ad0d",
        "cursor": {
          "ref": "8ace41d4-84cc-4142-8939-4bce0e7af3b7",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "34eda375-28eb-41b5-a50f-aeb407105392"
        },
        "item": {
          "id": "449aaa5a-eb74-4c94-a0e5-f1a24299ad0d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "89eec485-5fc2-4639-b1c3-ac617d43bdfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45c0ef05-52a1-4640-8175-5765e52d0afd",
        "cursor": {
          "ref": "27bc66d1-6abd-470b-a22b-0160a569293a",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d2e48229-efac-4a9b-93cc-785ac326db85"
        },
        "item": {
          "id": "45c0ef05-52a1-4640-8175-5765e52d0afd",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "82354861-ecab-46a4-a31c-4a90285a872b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a3b3625-499d-4712-a73b-bc2003990bb3",
        "cursor": {
          "ref": "294291ff-8c91-4aaa-a1b6-5317a67bd7ff",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "b2f8bee9-5e70-4b76-8840-9f269131816b"
        },
        "item": {
          "id": "2a3b3625-499d-4712-a73b-bc2003990bb3",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "13a8ca79-c46a-44f6-9955-2ca034cf0db3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23d6eef8-fa9c-4f00-a243-12cd48b45196",
        "cursor": {
          "ref": "9f8a6f6c-1a15-4681-b9bd-49713101c483",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "efa8964b-df0e-4a66-9cdc-a478531d6086"
        },
        "item": {
          "id": "23d6eef8-fa9c-4f00-a243-12cd48b45196",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "fb70eaf5-2ff2-4eb3-9fd1-6f23f79b12a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0520b59d-6552-460f-984b-90eae9160d2e",
        "cursor": {
          "ref": "89193c7f-66fc-46e7-9256-59e6058b3ce3",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9a72409f-c9a3-464c-aebd-3ad1dfbb86f6"
        },
        "item": {
          "id": "0520b59d-6552-460f-984b-90eae9160d2e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "f8809856-a047-43bb-944a-94f266fc921e",
          "status": "Created",
          "code": 201,
          "responseTime": 546,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "34b1b1e9-a8ef-4e80-ac76-01c68c6f5778",
        "cursor": {
          "ref": "4f163b78-b558-444b-b4f9-38d606311884",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "9aad119a-20ca-4539-b67b-b1e8b0a4610d"
        },
        "item": {
          "id": "34b1b1e9-a8ef-4e80-ac76-01c68c6f5778",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "fb12af1d-ca76-4530-b4d2-b2e1fd13d005",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "9c3cc84e-2fa9-4ebb-ba6b-978fc53d2282",
        "cursor": {
          "ref": "2b817ca1-5bb4-4276-8644-66e7b3eba106",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "4fcd9535-84a6-48fe-82c9-65895c678548"
        },
        "item": {
          "id": "9c3cc84e-2fa9-4ebb-ba6b-978fc53d2282",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "93bcb4e6-a3b7-425a-80a0-983895691df6",
          "status": "Created",
          "code": 201,
          "responseTime": 372,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "40a34af2-9d17-4293-89e3-29030eb11fa6",
        "cursor": {
          "ref": "1e628ce9-5411-45ae-8f69-2fae49928610",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2989a41c-cbd3-4602-a8fc-f6d40a676971"
        },
        "item": {
          "id": "40a34af2-9d17-4293-89e3-29030eb11fa6",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b928438d-a4eb-4bb0-b558-4fd7c98e0082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ac056a-4401-4394-b5a7-1f4e179faff5",
        "cursor": {
          "ref": "1b60828d-048b-4704-843f-73c9abb5886a",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5af0774b-8087-44b7-a8b2-68e732d12454"
        },
        "item": {
          "id": "45ac056a-4401-4394-b5a7-1f4e179faff5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "957affdd-4e08-4416-a072-5e12da5fe9c4",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "84e0f52f-f90e-4b5c-8e98-73acd3d574d9",
        "cursor": {
          "ref": "9fd994a9-c3cf-4316-84fa-956db32403c6",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "03eb1129-92f7-4c9d-a20b-e09769bd7cc5"
        },
        "item": {
          "id": "84e0f52f-f90e-4b5c-8e98-73acd3d574d9",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "9d81b1db-cfdc-4f3e-98e8-b2354fe66abc",
          "status": "Created",
          "code": 201,
          "responseTime": 223,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "c994cdf4-2302-494d-9905-dfdc8c67901a",
        "cursor": {
          "ref": "003853c6-67a2-4432-9d5c-67faf3dd5a80",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8c54fde4-489f-4f1c-8afd-8aaf24d911e3"
        },
        "item": {
          "id": "c994cdf4-2302-494d-9905-dfdc8c67901a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "1599c328-25fe-43fc-b39b-6ced3aa189d1",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0f678aaf-299c-421a-aa83-12146ef67b8a",
        "cursor": {
          "ref": "74aff329-a68b-42bf-9b86-c8dc3fb062b5",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cceab1ae-aad0-4c99-9b35-f921753df1b6"
        },
        "item": {
          "id": "0f678aaf-299c-421a-aa83-12146ef67b8a",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f972daac-df53-478b-aeca-1251c55d74ea",
          "status": "Created",
          "code": 201,
          "responseTime": 224,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "a6466423-7550-4875-8131-acbc994197da",
        "cursor": {
          "ref": "30bea8f6-921e-494b-ba6e-fee085f4efe0",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f7d6f2b4-3b9d-4c66-a8d0-ef56f262b7bd"
        },
        "item": {
          "id": "a6466423-7550-4875-8131-acbc994197da",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e4d84049-4867-4966-a131-0dcb3ad6c590",
          "status": "Created",
          "code": 201,
          "responseTime": 242,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a1888a4d-9469-44c8-9611-8d8533014391",
        "cursor": {
          "ref": "63ab0fcc-b78d-4754-a046-fbb4b05c2317",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "079858d0-957f-4313-a5af-bd23770bab05"
        },
        "item": {
          "id": "a1888a4d-9469-44c8-9611-8d8533014391",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ebc9a833-4dd9-4a9f-b5bf-1f73a476551f",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "15cbf3eb-695e-48e4-8101-32e991713d09",
        "cursor": {
          "ref": "09306e73-8ef6-4f39-b9ce-d107120cc671",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "32f9f0be-db04-45b5-aa5a-a7e90cb22afa"
        },
        "item": {
          "id": "15cbf3eb-695e-48e4-8101-32e991713d09",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c67aec63-f3a6-4654-9678-cca583ebef91",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "842f141c-b518-4477-99d1-bd4e1d6cefd6",
        "cursor": {
          "ref": "347401ff-c8d6-4cf6-b4e4-ecc6d34ad78c",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "5f5ee0ac-0a6d-42e6-8cd5-5fbd4336f51c"
        },
        "item": {
          "id": "842f141c-b518-4477-99d1-bd4e1d6cefd6",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "88919b21-f338-49e0-93e6-285932ca340b",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "5a3ebba4-263c-4011-a3a3-070b6abfa2d8",
        "cursor": {
          "ref": "4d3bffc8-445c-4986-a1cf-d37fd376a20f",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "a986aa01-3a97-451d-ae04-c0c58433326f"
        },
        "item": {
          "id": "5a3ebba4-263c-4011-a3a3-070b6abfa2d8",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c28b9f23-7db9-49b7-b8a5-af055578109d",
          "status": "Created",
          "code": 201,
          "responseTime": 233,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "9ba58d41-cf64-400a-844a-8abbd9af9ada",
        "cursor": {
          "ref": "8bf4edb3-e0f0-468b-8d51-2fae93617961",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "bf97ac03-5570-449b-b007-e281375f7d45"
        },
        "item": {
          "id": "9ba58d41-cf64-400a-844a-8abbd9af9ada",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "915e70b3-7c0e-4a7e-9978-e110fe78e146",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b2ac4c3-94a0-4d5e-b0c8-b2115722e418",
        "cursor": {
          "ref": "bcf93673-8bea-4f8d-88c4-723ad694cef6",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5d360c38-cf29-4adc-bef3-4248a61bef9a"
        },
        "item": {
          "id": "9b2ac4c3-94a0-4d5e-b0c8-b2115722e418",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "7af41d90-a236-4f86-8ace-4fb3a604d4d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15acd3d-c998-4097-bc63-f7ed23c219a9",
        "cursor": {
          "ref": "92c2f54c-43bf-4bf4-952e-329d6a959a38",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "86649dfb-f85a-4387-b81a-b2ddc97415e6"
        },
        "item": {
          "id": "e15acd3d-c998-4097-bc63-f7ed23c219a9",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7b22a320-6f7e-407e-a058-9c17a73655fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196d2d36-2e3c-4b87-b5e9-11289aaec53e",
        "cursor": {
          "ref": "114bca6e-1547-467e-85c8-b32e74ec01e6",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "b92c1cb4-12fa-46de-be3d-b991aa8c3136"
        },
        "item": {
          "id": "196d2d36-2e3c-4b87-b5e9-11289aaec53e",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "fbdacb74-4441-41d9-b820-16a06e8ef831",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e3685c1-c81e-4698-8616-69d1d2270ef3",
        "cursor": {
          "ref": "5eb3af18-7bb4-4a5c-824f-32662e1e9807",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "25e5ecca-3f36-4e12-9a0b-b452fba0fc8f"
        },
        "item": {
          "id": "7e3685c1-c81e-4698-8616-69d1d2270ef3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "f7fda79d-8419-499a-a8be-836d223dbe2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c7fd00e-66b3-43ff-97a9-77cb4bc37bf2",
        "cursor": {
          "ref": "b3e0b0ac-8e77-4315-a3d8-86c2a4c81dac",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "b08f1bc6-3ef6-4009-b9c6-e843e43907f7"
        },
        "item": {
          "id": "4c7fd00e-66b3-43ff-97a9-77cb4bc37bf2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "1b03247f-48eb-4f0e-93aa-6b3e5d0789c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f84036-ac76-4096-bdb9-570707ecbba2",
        "cursor": {
          "ref": "da1ee81c-ba1f-4da5-bd40-bb71b9a64aa8",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "fe9c83e5-9950-4c38-acdc-bb5977bcc79a"
        },
        "item": {
          "id": "a1f84036-ac76-4096-bdb9-570707ecbba2",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "306644f7-9495-4165-8a40-3f829421447b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73aae63-fb87-43d8-b8fa-67c8a7d3d58a",
        "cursor": {
          "ref": "51eb5faf-bbf3-4d8f-b106-e6163f9185b7",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "b148d6a1-3f6e-44e4-affd-93f68c7e4a44"
        },
        "item": {
          "id": "a73aae63-fb87-43d8-b8fa-67c8a7d3d58a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "87a71c3b-cc15-4d88-a54b-3ff1fd5c60dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17be18e8-c21d-4c2f-9f68-dc6c568b6459",
        "cursor": {
          "ref": "3f449255-cfc2-4e31-84d2-f182f72b73b7",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "755f23da-7eff-450b-98e8-4c8f6b81bdcc"
        },
        "item": {
          "id": "17be18e8-c21d-4c2f-9f68-dc6c568b6459",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "732ce3af-b521-461c-afeb-2b065c806e2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3aa36ab-cd64-428f-ac60-6f5a99d7e050",
        "cursor": {
          "ref": "67705738-9a3c-40e3-82f7-2738ed5d4599",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9313b78e-bfbf-41cd-af91-9a4c517571e1"
        },
        "item": {
          "id": "f3aa36ab-cd64-428f-ac60-6f5a99d7e050",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "84e8e680-c313-4e52-90f0-69916049bda7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22afec11-b001-4595-9b12-a9310fd97ec4",
        "cursor": {
          "ref": "9e159d22-1462-4cdd-acc3-f5204d578db2",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d3d7c1e5-9cc8-4a4a-bea5-04742d7077bc"
        },
        "item": {
          "id": "22afec11-b001-4595-9b12-a9310fd97ec4",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "3e0d937f-fde5-4c0d-aa38-829d995490cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831c38c1-16e5-4a67-95b6-8d09048303dd",
        "cursor": {
          "ref": "d5466a3d-a706-40df-af8d-1d48245d46d6",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "10fd9e73-62ac-480b-b9d9-8dfb115341d4"
        },
        "item": {
          "id": "831c38c1-16e5-4a67-95b6-8d09048303dd",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6b526692-6cb3-43f2-a838-54bd48f2554a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60365efc-5e00-450f-b361-1854144de4a1",
        "cursor": {
          "ref": "cdadee44-a9a0-4d35-a1a2-87522869bfbd",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f4d2c05f-4d77-46e9-9153-1e75c1b5fc75"
        },
        "item": {
          "id": "60365efc-5e00-450f-b361-1854144de4a1",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "543cc09a-6458-4d6d-bce7-adba16d3f913",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8c0772b-ec18-4020-b8b8-47f93490292c",
        "cursor": {
          "ref": "7ed386fc-e159-4945-85a0-131e9378762b",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "750ce12a-a7e4-415f-88c6-7c07a9094eaa"
        },
        "item": {
          "id": "e8c0772b-ec18-4020-b8b8-47f93490292c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e0a930e2-1011-4d75-88bf-bf4162e02076",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "a764e970-b391-4b3d-b491-fab5ce1219b1",
        "cursor": {
          "ref": "3765b4ea-384d-41ca-8491-363212655914",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6e25e0ad-c299-476e-9e52-b702377ee990"
        },
        "item": {
          "id": "a764e970-b391-4b3d-b491-fab5ce1219b1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "0ec62a84-99bc-447a-89fd-91ce808fb4bb",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "22fdc387-825f-4ab6-bae5-8edd4f8efed6",
        "cursor": {
          "ref": "e674ba3d-73ee-4cb2-9690-9aeec940130f",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "37b87f14-8c22-4631-bffc-cf92b2305c3a"
        },
        "item": {
          "id": "22fdc387-825f-4ab6-bae5-8edd4f8efed6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "3035bde2-ecb1-4929-ad02-e697f50b418b",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "4da11f44-9faa-40c4-b0d5-7cce0b85d80c",
        "cursor": {
          "ref": "fde7bb62-70c6-4ebb-bf39-798af18359fd",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "4d6fe199-57c1-4f66-a72b-a30db9f4128d"
        },
        "item": {
          "id": "4da11f44-9faa-40c4-b0d5-7cce0b85d80c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e7644c00-895c-4850-9ea8-91d992f368aa",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "703aef1e-60ad-4cb6-91c4-a266fbfa8e15",
        "cursor": {
          "ref": "035030a6-1932-4ab1-ace1-dba90406b8fd",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "82f3a8b6-0a80-45e4-b2cd-c6a9f1201c83"
        },
        "item": {
          "id": "703aef1e-60ad-4cb6-91c4-a266fbfa8e15",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b51e4ee5-d3a1-481f-bfed-d8ff34ce814b",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "f784f786-4c76-4c06-a5ff-a7513f983554",
        "cursor": {
          "ref": "a5bf2978-3c4f-4fd1-abee-d32449aa8deb",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "515fede4-63e1-4971-8bc2-4ec27e26decd"
        },
        "item": {
          "id": "f784f786-4c76-4c06-a5ff-a7513f983554",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "e9a362c0-bbe6-4893-b1cd-c97a591ced9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15ae97aa-bcde-4b43-86a7-8e4637ecc2c9",
        "cursor": {
          "ref": "e966aa23-a6da-4f10-b6fd-d021021d4a8d",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "919f0e35-e6d9-449a-8b2d-de1a4b07109b"
        },
        "item": {
          "id": "15ae97aa-bcde-4b43-86a7-8e4637ecc2c9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "4cc8fe44-50ec-461b-8fe2-ab107e94cea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6102c0f-0a29-4beb-8fb8-d6dd4f950d59",
        "cursor": {
          "ref": "6add718a-55a9-444b-bc6a-ab8649ae9b87",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "5d2a3f1a-b757-47f8-bef8-9cab9414b484"
        },
        "item": {
          "id": "a6102c0f-0a29-4beb-8fb8-d6dd4f950d59",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "7da61359-bdc0-4663-9f87-6db02b61a664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2e29623-d9e4-43c1-b830-51b996dce57e",
        "cursor": {
          "ref": "aefc907b-47f3-4d96-8436-389eb53de178",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "88eb5d67-2226-4cd2-a175-e85037bc517b"
        },
        "item": {
          "id": "b2e29623-d9e4-43c1-b830-51b996dce57e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "637db414-1fd6-48f0-aa05-ac7ea66b1a3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96e18664-5576-4f27-b40c-3d5213e2e28a",
        "cursor": {
          "ref": "97f4186f-7c38-402e-8674-c19de44322de",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "0e38db9e-2d24-4076-94f9-bbe040ff03c7"
        },
        "item": {
          "id": "96e18664-5576-4f27-b40c-3d5213e2e28a",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "5c4a8b53-1bc3-4365-ac74-50a98436ed91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa43661-97b7-417f-aec5-f1bc4f323667",
        "cursor": {
          "ref": "2b71ab65-d5e0-411c-b213-8a2e5b25c1e4",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6a5edb49-d53a-4301-bbb1-5eeeb69f7b46"
        },
        "item": {
          "id": "aaa43661-97b7-417f-aec5-f1bc4f323667",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "620a7ec7-6694-415b-9942-3790810dce6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63fe566d-5afe-4263-b27c-10d64e43e83d",
        "cursor": {
          "ref": "b0ce1af6-ab42-423b-966b-dc1cad94ac46",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "bf8dfc98-f396-4820-a54f-5cb24e81cabb"
        },
        "item": {
          "id": "63fe566d-5afe-4263-b27c-10d64e43e83d",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d4737641-df7a-40b6-a7ff-db1985d4a716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a147729-1637-4e5c-9020-3c439ffce0a3",
        "cursor": {
          "ref": "49750ce9-e2ec-4da0-b9b5-c980d1ae612c",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "75576c2a-45df-4b95-a384-12c7a874564b"
        },
        "item": {
          "id": "1a147729-1637-4e5c-9020-3c439ffce0a3",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d3a0a03d-b5d1-4a8f-aece-f15803f83113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0acab7eb-08b4-4393-a1e4-cd5f7977e2ff",
        "cursor": {
          "ref": "92779dbc-ddec-4ef5-850f-ee53d7284a5b",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5304078f-1d12-4332-bc7c-c0a9157a5359"
        },
        "item": {
          "id": "0acab7eb-08b4-4393-a1e4-cd5f7977e2ff",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f812b373-0081-4e17-88c7-2299c0b09e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2158ef40-c28d-4568-aea4-d7bd42f1e5c3",
        "cursor": {
          "ref": "6c3650db-fb2f-45c2-89b5-b6c14a67ea49",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "959f4e70-2ef0-4983-9c52-9005201b9b1f"
        },
        "item": {
          "id": "2158ef40-c28d-4568-aea4-d7bd42f1e5c3",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "f020a35f-a182-42b9-b6cc-2984af084f0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c2e5f6-8bfa-4ce3-b0e0-d06640f7cdde",
        "cursor": {
          "ref": "9b976b37-a767-4e38-946a-27c30a2130fe",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9a447a29-1ae8-4dc9-85d0-29bb5eb1ab85"
        },
        "item": {
          "id": "09c2e5f6-8bfa-4ce3-b0e0-d06640f7cdde",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5ce5887b-ed39-46ac-a093-78e6f4f8720a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ca7eac3-78fd-4765-9434-051bc9081622",
        "cursor": {
          "ref": "cf95d846-f0fd-4756-a5a6-02749821d5dc",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "0abd000c-60dd-4411-b98a-4b659d692323"
        },
        "item": {
          "id": "5ca7eac3-78fd-4765-9434-051bc9081622",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b9f5abb1-93af-45d2-88b1-d95358befce5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38ae4fd8-2cbe-4e29-bc86-7d4925ea5d1a",
        "cursor": {
          "ref": "5cd94535-3ad0-44b6-be70-8e3936499591",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "debf1d99-c988-44aa-bf0a-ebde68472612"
        },
        "item": {
          "id": "38ae4fd8-2cbe-4e29-bc86-7d4925ea5d1a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "2f89394f-3c4c-484a-8dfd-5708e92d119f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1092d25-6799-41d2-b197-c4830060ce18",
        "cursor": {
          "ref": "a9d26533-44c4-4e4b-9abb-9b9687a4238a",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "4ef0f475-8f16-4ffb-bad0-30e6422f377e"
        },
        "item": {
          "id": "d1092d25-6799-41d2-b197-c4830060ce18",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "3f395863-2200-46be-85cc-29c99e242f68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b41ce514-e134-4808-b391-e62a74b6052b",
        "cursor": {
          "ref": "2d739b14-1a11-454e-bab5-c637b038cb5c",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "3a68bef4-7c15-4bd8-880c-ba94e92d5345"
        },
        "item": {
          "id": "b41ce514-e134-4808-b391-e62a74b6052b",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1b2582d8-d432-4636-ac46-f5be1d5ee9ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f7220a6-7085-4167-bbda-5f9d778097fa",
        "cursor": {
          "ref": "62711917-00cf-4817-b092-efc35b3daadd",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "0d1f4690-6c04-4de9-ad63-47b4574c64ee"
        },
        "item": {
          "id": "7f7220a6-7085-4167-bbda-5f9d778097fa",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "efc9b57e-2020-4d76-9fea-1fdb0dca9162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd8e099-f1bf-4626-95ca-b710d28762a5",
        "cursor": {
          "ref": "109d165d-cfe8-4b31-9196-528c36cb0587",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "2bc9a106-a934-408d-831b-2650e88e9a04"
        },
        "item": {
          "id": "bcd8e099-f1bf-4626-95ca-b710d28762a5",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e8ec6c1c-94a9-4789-9c1c-7ba680758329",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1bac04-1701-438b-be73-23307ca778d1",
        "cursor": {
          "ref": "03c8a5c4-d8a0-434e-b267-44514eec3c43",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "f8bfe490-59e9-4ae5-95e6-215325b0abeb"
        },
        "item": {
          "id": "9c1bac04-1701-438b-be73-23307ca778d1",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6694f1e7-f17f-436c-baff-40c84b5df74d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93c065a-8e0c-4122-8a9d-4e2a0b1abfeb",
        "cursor": {
          "ref": "ad50c8a6-a9de-4e97-a0f9-2dc2572103d6",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "292541c9-7c89-44a1-b4d9-23edd2651526"
        },
        "item": {
          "id": "c93c065a-8e0c-4122-8a9d-4e2a0b1abfeb",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "878bc426-414b-402b-a69c-6ac0b2034a71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc66753-2a31-4b2f-9f2a-51c22021e254",
        "cursor": {
          "ref": "51cd909a-626f-44b7-848e-82fa316b3696",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "71b939a2-0d03-4d69-8dcf-2b8964bfd810"
        },
        "item": {
          "id": "4dc66753-2a31-4b2f-9f2a-51c22021e254",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4807bb0a-361c-400a-9e7e-5551740283fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dc964b3-167c-487a-b7f7-38d1001f9d9f",
        "cursor": {
          "ref": "83a9c514-da68-4eaa-acb4-723ce357e61c",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "47175b17-6be6-42d6-9f4c-6d17fdc2d951"
        },
        "item": {
          "id": "8dc964b3-167c-487a-b7f7-38d1001f9d9f",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8cde0b53-2f98-4007-93ca-5ae1aa422827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3555ae73-fb5f-45a2-a30e-814d97266da0",
        "cursor": {
          "ref": "2d910b3f-197c-439e-a553-fe0e270b41d5",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "c053dea5-f718-4f8b-8b34-07758c28b7c7"
        },
        "item": {
          "id": "3555ae73-fb5f-45a2-a30e-814d97266da0",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "505ac47c-a6ba-4564-9b52-2504842852c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f236f5ef-0157-4960-957e-eb845f2ea23b",
        "cursor": {
          "ref": "030cdeda-6576-4bc7-935d-e40bfe1db0db",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "de0addaf-da8b-445d-9d08-2a68970ec60c"
        },
        "item": {
          "id": "f236f5ef-0157-4960-957e-eb845f2ea23b",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "88733a74-328d-4433-9261-c9bbee8ba9f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65de41ec-c843-4fdf-9e22-93b29a03d12c",
        "cursor": {
          "ref": "2ff4897e-640d-462c-9b2a-eddc020ee5b8",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "625917ff-0dd2-48f2-9526-4a64a5d8756e"
        },
        "item": {
          "id": "65de41ec-c843-4fdf-9e22-93b29a03d12c",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "170aa7c2-a757-4825-9d7a-6c8f47b4ead9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af3361ca-2395-4b71-b0d4-d793b95171d7",
        "cursor": {
          "ref": "c5a769d7-a5e7-4d2a-b95b-6121b8d1f88f",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "f5b3d32f-f796-4b3f-8085-eff22e7ffda4"
        },
        "item": {
          "id": "af3361ca-2395-4b71-b0d4-d793b95171d7",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "80f26a99-129e-405c-b121-ab4bb0dd60aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c288971-b9c7-4973-aeb4-6d7e4d7f6992",
        "cursor": {
          "ref": "b55e958a-c89c-4cc8-931e-829edb12cfa5",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "41ec81f3-de03-47b1-87ab-2065fbfaefc0"
        },
        "item": {
          "id": "2c288971-b9c7-4973-aeb4-6d7e4d7f6992",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f80a235a-f3a0-410f-abda-7f1f4e2d7138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da8ce8df-fe21-4ce6-9c25-3a6d76d0c5da",
        "cursor": {
          "ref": "c12c376c-9226-41fb-9bb4-6d3252afe875",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "39aea916-6e7a-4eaa-bed5-0872a3a7ffe7"
        },
        "item": {
          "id": "da8ce8df-fe21-4ce6-9c25-3a6d76d0c5da",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "43e6599f-6aba-43b0-bdd1-1cb7adeba543",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9b34dc-7e74-4b7a-b4d1-856371564505",
        "cursor": {
          "ref": "b03fc12b-5747-43b9-b3de-88ca2d4db00f",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "5bd84201-49f9-4981-9775-73e5c9589448"
        },
        "item": {
          "id": "ee9b34dc-7e74-4b7a-b4d1-856371564505",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4c88e9a8-ce91-4c7e-bf32-01ec86ea23e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5eb275-2ab1-4718-91d2-0a40a4bb908d",
        "cursor": {
          "ref": "c31eea98-adb1-4d2e-928f-a003970c5be8",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "9911b5b2-bfe7-424c-a382-86601c0fb2c7"
        },
        "item": {
          "id": "3f5eb275-2ab1-4718-91d2-0a40a4bb908d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e9feb106-af7e-4772-92cc-426e3b109162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bc967cf-389d-4b32-bf44-ebd337e029c8",
        "cursor": {
          "ref": "de980f7b-2666-422d-9653-b6bb77c6665d",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2bbfa749-0cfb-414c-bbf4-d65551ecbedc"
        },
        "item": {
          "id": "3bc967cf-389d-4b32-bf44-ebd337e029c8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "73d7896b-41c8-4b1b-b14c-9227b35b3a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10dd3f9-a305-4668-9927-70eb72f62b81",
        "cursor": {
          "ref": "21835328-0353-47e1-8d30-9945b7635a02",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "19b8eeee-daae-40ca-a310-eae8b6d6a32f"
        },
        "item": {
          "id": "e10dd3f9-a305-4668-9927-70eb72f62b81",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6ff6c688-6c76-487b-b3b9-d93c07726a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad107794-a25c-4281-97d4-0095c324d231",
        "cursor": {
          "ref": "9960b118-cd7d-4774-bba7-83559de85921",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "6ca7289f-41d8-40c9-ba51-882d9b551c73"
        },
        "item": {
          "id": "ad107794-a25c-4281-97d4-0095c324d231",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c6b7ea1f-a42d-432b-b765-1f2ee750af7f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c83bfd76-ad21-4058-bf2b-93bbea19f94c",
        "cursor": {
          "ref": "281f411b-eaa3-437a-be2e-7e86fddf6054",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6a0ca0dc-b9ac-4dcd-b0d7-9091ecf91bc9"
        },
        "item": {
          "id": "c83bfd76-ad21-4058-bf2b-93bbea19f94c",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "4fcbe6a9-96fe-4e03-b242-142d9746b094",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "ed6015ec-f60c-4f18-8121-8fb35dff86c2",
        "cursor": {
          "ref": "a36e45ed-b1e5-455b-b26d-c2bdedb2ab5b",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "cf2a79bd-b03f-472a-97f2-299daa10dd48"
        },
        "item": {
          "id": "ed6015ec-f60c-4f18-8121-8fb35dff86c2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "6d41d497-9def-4c5f-879c-576da003f68b",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c694c56-6aeb-4cf9-99c5-7b10d49e2997",
        "cursor": {
          "ref": "dd3ad3d1-6a19-458a-bfb5-d8c6fd901263",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a45de09c-faae-4798-884a-5caf2012f8d9"
        },
        "item": {
          "id": "5c694c56-6aeb-4cf9-99c5-7b10d49e2997",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "bd4e56f1-1ab5-40c9-a98d-46a9876a0806",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6242a1d3-355d-4a91-93ba-bd4024fd8a4b",
        "cursor": {
          "ref": "436c4596-24a2-4292-b663-14a9cbb56758",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ad335cc6-b5dd-4c62-be2d-39128e132cf5"
        },
        "item": {
          "id": "6242a1d3-355d-4a91-93ba-bd4024fd8a4b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "59ef31f3-afee-4289-9e32-89aa21bada24",
          "status": "Created",
          "code": 201,
          "responseTime": 229,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "426a0903-cb5f-42fb-a8e5-916e70438752",
        "cursor": {
          "ref": "a93c93d9-f096-4242-9714-a6bea11399a7",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "4bb88f05-4f12-428e-b159-95f3904482b2"
        },
        "item": {
          "id": "426a0903-cb5f-42fb-a8e5-916e70438752",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "608c6347-4f13-49d6-a7e4-a72dc95c0469",
          "status": "Created",
          "code": 201,
          "responseTime": 240,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "70153eae-c784-4286-ac70-d5309c306b47",
        "cursor": {
          "ref": "d65fdc8f-88f2-4f39-aadc-add46632f503",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "30ee7f69-d494-4031-8f85-ce8e9deb4d9e"
        },
        "item": {
          "id": "70153eae-c784-4286-ac70-d5309c306b47",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "f4cf88fb-ee25-411a-a056-18caae44c2e5",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-16T00:35:39.341Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-16T00:35:39.341Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9fd67657-dce2-4981-9374-83f71b33b265",
        "cursor": {
          "ref": "fef40d50-7111-4969-9b41-b29be1b85ac7",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b17bdcb5-b3ee-49de-981d-c2eaa41374c5"
        },
        "item": {
          "id": "9fd67657-dce2-4981-9374-83f71b33b265",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "24018a15-9d81-4129-88c8-038bb06b29d6",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e3b9570-43fa-4c23-af44-f4297ddb9c04",
        "cursor": {
          "ref": "62e5fa9b-6e46-4f06-8fbe-362172789354",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "feef63fd-e78d-4c9b-8486-999bb68ab143"
        },
        "item": {
          "id": "1e3b9570-43fa-4c23-af44-f4297ddb9c04",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e5dcefe1-afa6-4e46-8a87-7c412ffd3d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece210f2-7fa8-418c-8718-671128e04f54",
        "cursor": {
          "ref": "2544fdcd-6ca2-4b6f-9dac-16e662f148ba",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "1395d87f-3394-4c3b-b579-01e10a1c7828"
        },
        "item": {
          "id": "ece210f2-7fa8-418c-8718-671128e04f54",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "ef5bef35-7288-4b33-bdcb-f4650b9ed743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c06f7e-107b-4a78-aa3e-e12585f36b21",
        "cursor": {
          "ref": "0cf1d6a7-503c-4370-b686-947cf0dd8d8b",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f256f8b7-e251-4b27-911b-9f5a58f0d1fa"
        },
        "item": {
          "id": "a9c06f7e-107b-4a78-aa3e-e12585f36b21",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "7280a18c-c64b-4158-b941-31b9236a9386",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "574563ca-411d-4d97-8c60-f6484b6211ef",
        "cursor": {
          "ref": "f0ce21b4-f560-4084-a5cd-3f561c860f6d",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "65f66c0c-c390-4757-9c15-6cab28e380ac"
        },
        "item": {
          "id": "574563ca-411d-4d97-8c60-f6484b6211ef",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "94b2d08b-2db2-47cc-8b46-4506ca828c55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9fc533-a5fd-47f1-b1a8-f39738f8e1c5",
        "cursor": {
          "ref": "9912d660-765a-472c-b02e-f4e2edae7782",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "2716f485-9f91-4573-b0fa-6fabff71d3a3"
        },
        "item": {
          "id": "6e9fc533-a5fd-47f1-b1a8-f39738f8e1c5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7514bba5-7a82-40c4-99bc-900487f1318f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96a34423-73a4-458b-9442-952008203777",
        "cursor": {
          "ref": "e1590bfc-7742-4527-bad0-7e48985f899e",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f444b38b-fd23-4092-98d2-c328fabdb197"
        },
        "item": {
          "id": "96a34423-73a4-458b-9442-952008203777",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f6eb8ff0-d2aa-4733-81c9-807c1ad11666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fa89b5b-e716-4938-bceb-ff805e7b70d3",
        "cursor": {
          "ref": "28b12d01-f7e2-4de4-bad1-8c4cd61fd291",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "a7e8140a-7d76-4e2d-b402-557108c3cb0b"
        },
        "item": {
          "id": "3fa89b5b-e716-4938-bceb-ff805e7b70d3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e99593c9-beca-404e-854b-0fbc9668c42a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cad6541-f08b-47f8-a2ac-1899019ec54c",
        "cursor": {
          "ref": "52f79017-669f-4b1f-8cce-7c3ee5603f6c",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "fbb62ff9-4408-4cdd-87a8-8fc15cd687a7"
        },
        "item": {
          "id": "5cad6541-f08b-47f8-a2ac-1899019ec54c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4140333b-4db7-47fa-bef5-f49047aaf9c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f3f3871-d029-4bd4-accd-8dae642f3376",
        "cursor": {
          "ref": "2db1a3ec-a14f-4ff9-b856-3f53f4b2ebab",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4137ddf8-3cb3-4109-bcf8-578ebe238214"
        },
        "item": {
          "id": "3f3f3871-d029-4bd4-accd-8dae642f3376",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "8e0d422f-385d-49a7-b3f8-0f4e30a9b7e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e4807b-fe0e-4b3c-9000-0e74327c9e55",
        "cursor": {
          "ref": "4bb4ad45-a37c-443e-9b15-b061f29d2439",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "85de73ce-caf0-4225-b14e-651db28bfb1b"
        },
        "item": {
          "id": "05e4807b-fe0e-4b3c-9000-0e74327c9e55",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d2065a43-7355-42ca-ba5d-c32d0a59fad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "731d6d8c-ea99-4223-97cb-9fd596cb4990",
        "cursor": {
          "ref": "6c229809-e897-4749-9b35-09e384d054d5",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "95ec4201-7fa5-4b35-a6e9-45b2698adacd"
        },
        "item": {
          "id": "731d6d8c-ea99-4223-97cb-9fd596cb4990",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "904ee075-5735-4517-b9aa-13302aada60d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbe4703-462e-49dd-b151-2b7d80925281",
        "cursor": {
          "ref": "a8e2382e-60df-4b49-866b-e2b9e21f195a",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3b881d29-555c-43af-b643-0b6c4db9aff3"
        },
        "item": {
          "id": "abbe4703-462e-49dd-b151-2b7d80925281",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "2b164598-96db-4d15-acd4-5f4b5a3b86cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7e00e70-f29b-4cb6-a37e-aa6b81cbfc63",
        "cursor": {
          "ref": "571aeefc-0bd6-484b-8ea5-1ef46938c483",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3c499b2c-3cf9-40a9-95a9-4b0e28212499"
        },
        "item": {
          "id": "a7e00e70-f29b-4cb6-a37e-aa6b81cbfc63",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8b8be6b0-78ec-4b90-9d53-a092c5325fa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0788bf0d-e79e-4059-8639-f0f1feb0afd0",
        "cursor": {
          "ref": "d2dec20e-bf9b-4f18-a8e7-64720779ca9c",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "c280260e-4ff6-49ac-80a2-7d04f1fbd8e9"
        },
        "item": {
          "id": "0788bf0d-e79e-4059-8639-f0f1feb0afd0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "56a5897a-9ecc-40ba-b434-111b5209fbb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e13a2130-a073-47e6-946a-d5fa0a4862ff",
        "cursor": {
          "ref": "98b1d169-c98e-4af0-ae03-49579b06e463",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a61ae428-0abe-4ea6-a518-1e6d90dc7c99"
        },
        "item": {
          "id": "e13a2130-a073-47e6-946a-d5fa0a4862ff",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1128e2a5-878b-46c8-8699-d94d09dd770c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f62a34d-889c-483d-a4a0-5259677bb208",
        "cursor": {
          "ref": "783058cd-92a6-4fc3-9f9f-5dc3a7e67f76",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9bddfa0c-5de2-44b2-b79c-94409f1054a5"
        },
        "item": {
          "id": "5f62a34d-889c-483d-a4a0-5259677bb208",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "50b286e1-f661-48a7-9823-b7f0e5d0ed4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcd64e0d-7889-471c-aa99-88e1c40e4d8e",
        "cursor": {
          "ref": "769bf0e4-7c3b-4cfa-93ab-921c9fb57780",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "54b4806b-1a11-45f3-9bcb-4f83f2416420"
        },
        "item": {
          "id": "bcd64e0d-7889-471c-aa99-88e1c40e4d8e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "11d56deb-4faf-4be0-baed-18ca6c637f58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5c566e8-d4da-439f-acf9-6696da6b4302",
        "cursor": {
          "ref": "96e3cf32-a815-46e9-b3fb-3b91b288eeb5",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ef5e9e66-18f7-448b-a577-5c8d2a278695"
        },
        "item": {
          "id": "a5c566e8-d4da-439f-acf9-6696da6b4302",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "5b41a477-cd5f-4cd1-9e07-baaa34d002c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b2d521e-70ea-42d8-837a-1f8f9a91a2af",
        "cursor": {
          "ref": "9c03f220-30e4-4942-9bec-43d6a52eb4e6",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f83291b5-56aa-494c-8ce9-324b487738dc"
        },
        "item": {
          "id": "5b2d521e-70ea-42d8-837a-1f8f9a91a2af",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fb1af1e5-a3b3-45c1-aefb-bdcc3e276849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4891ee7d-c956-4886-80a2-1ea6b695d49a",
        "cursor": {
          "ref": "ad5cfefa-50cc-4a66-8257-3a1bd5eca4e9",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8eaa6a2b-9907-4b2f-8bcf-8328f970b9d4"
        },
        "item": {
          "id": "4891ee7d-c956-4886-80a2-1ea6b695d49a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5a1275a9-6a68-4931-b26b-789cd295f7bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f321ff3-1c11-41ac-a104-7baa591acddd",
        "cursor": {
          "ref": "3e360d9a-275d-4455-8c50-a926d7a57a9a",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "0ee9b17b-99a9-4abf-baa6-4ead11b03833"
        },
        "item": {
          "id": "8f321ff3-1c11-41ac-a104-7baa591acddd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "a57a4348-52e9-40e9-be5b-545b5536ac23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8927214b-4b19-4da9-8eb3-78a386dfc109",
        "cursor": {
          "ref": "07528ef0-2a39-4eb4-a240-cc429e4ad3f7",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "c64c30f2-9414-4753-b5ef-ba36c4f224cb"
        },
        "item": {
          "id": "8927214b-4b19-4da9-8eb3-78a386dfc109",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8594f2ad-2e9d-4e35-8d0b-3a8c35fe8a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dfa2ced-1daf-4798-a61f-136bb03096ab",
        "cursor": {
          "ref": "db76db02-bc18-4094-9c25-79be5c156d33",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "68ae5235-78b1-43c0-963f-89dacff60144"
        },
        "item": {
          "id": "7dfa2ced-1daf-4798-a61f-136bb03096ab",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "f443aaf0-626a-4051-aca6-8a39c5b3f080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d875414-90cf-454e-a3b4-0b54a8137a4f",
        "cursor": {
          "ref": "9fe12c6b-5b0e-41e4-abc1-2003e215a80a",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3093074e-c398-4c0d-821d-e521f358ef3f"
        },
        "item": {
          "id": "4d875414-90cf-454e-a3b4-0b54a8137a4f",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "09012b01-c5f3-4b0e-93ba-9e5a742db0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f31bce9-e9a1-4843-b8c4-291bb233c68f",
        "cursor": {
          "ref": "d39e7e0e-0e0a-47d8-9c84-165b9d6571b4",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c391f6c7-b258-4fe4-9af7-b14a3d6524b5"
        },
        "item": {
          "id": "3f31bce9-e9a1-4843-b8c4-291bb233c68f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b0ef4142-cc98-44ad-b951-c196499b72f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76f8044c-7aef-4c75-977f-23103e716f62",
        "cursor": {
          "ref": "96a10b73-f569-402e-adcc-fb69528cc736",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d0d6aa1e-bf43-4e11-a177-ab49664a784f"
        },
        "item": {
          "id": "76f8044c-7aef-4c75-977f-23103e716f62",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "887cc28f-5579-4192-84b7-b73e5eb868c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8045538d-a2a8-4f19-80a8-d04963b19a39",
        "cursor": {
          "ref": "3af36f6a-2c27-44d2-ba4f-e6571a779b2a",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ce256f95-93c9-4728-9cf4-597657dcd4d8"
        },
        "item": {
          "id": "8045538d-a2a8-4f19-80a8-d04963b19a39",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e97b2dac-e246-4d0e-8197-eebab9172b17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f357fa1-3752-4b0a-96c5-d6aa0e04b399",
        "cursor": {
          "ref": "b4771fb4-262e-44ae-be30-87fc276a2348",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "ddb94729-3bca-450d-9c90-bf048a7550ed"
        },
        "item": {
          "id": "6f357fa1-3752-4b0a-96c5-d6aa0e04b399",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9f30a53d-8f1a-45c2-adec-da5c406e4449",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7cb273-2d1a-4f99-b19f-1ab7bc2c22ee",
        "cursor": {
          "ref": "5960002c-e7ba-4860-82b4-661f210dbacd",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "170282b1-43b7-4ddf-ab7a-1fb11a2344eb"
        },
        "item": {
          "id": "dd7cb273-2d1a-4f99-b19f-1ab7bc2c22ee",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b4ad0b27-0cb8-4102-94fc-6f0df1400cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ceb2f43-439b-4185-83c4-4105e66d599b",
        "cursor": {
          "ref": "fa07c8f3-c8be-4c57-8059-5cb431c62bfa",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d2bef3b6-a293-40e8-8bd4-8a657c58d975"
        },
        "item": {
          "id": "0ceb2f43-439b-4185-83c4-4105e66d599b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e812c7ae-5fd8-4a3b-a574-edbaf89b8b5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "156c1817-3c30-4936-bf29-445fa040f6ec",
        "cursor": {
          "ref": "16b08d64-655a-4775-9a49-16272ddc1924",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b2fbf975-eb86-45a2-a117-c6067a02a93c"
        },
        "item": {
          "id": "156c1817-3c30-4936-bf29-445fa040f6ec",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7cc46f09-6121-4d17-9596-70b7a2135a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df15b137-f11c-4622-891f-81d530c2fe7f",
        "cursor": {
          "ref": "3f6c963a-87c5-44e2-b2c6-be413cd16add",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "df1dce9a-9e6e-4966-8d89-17748780373b"
        },
        "item": {
          "id": "df15b137-f11c-4622-891f-81d530c2fe7f",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "83f3e777-3dcd-4dc4-b157-1914d72c9ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20ff7ff3-42de-4588-9ea5-16b63a1f228d",
        "cursor": {
          "ref": "c95728ee-ebab-4617-ba03-79e96869caf1",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "886c21a3-2819-40c2-bf70-09f7fc134839"
        },
        "item": {
          "id": "20ff7ff3-42de-4588-9ea5-16b63a1f228d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "7d24906a-c1b5-4685-bc88-6b5c8861badd",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfaabe85-37f4-43b4-9af3-64cf488707a7",
        "cursor": {
          "ref": "d5b08b46-3ccf-436a-a042-1509df6f7a28",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a08d6094-052e-4eda-9cd0-1c564753f8a2"
        },
        "item": {
          "id": "dfaabe85-37f4-43b4-9af3-64cf488707a7",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "68435566-778f-43f7-b6b8-8e0e5395b7e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9dc423-74f5-4b3c-915f-1d953d8b378f",
        "cursor": {
          "ref": "ce00ad44-3cbb-4b2c-9af0-fd9d26722747",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bf44d240-3cfe-4b71-8cd0-94c96fac271c"
        },
        "item": {
          "id": "4f9dc423-74f5-4b3c-915f-1d953d8b378f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5321bff9-a754-4b55-b8b9-56135fb4d9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc4c810-47ea-4b80-9c7b-201eba770c5e",
        "cursor": {
          "ref": "e69bb461-45ab-42ae-b348-05287d92793d",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "42ca50bb-d8d0-4098-931a-0c9abf2b5f6e"
        },
        "item": {
          "id": "6dc4c810-47ea-4b80-9c7b-201eba770c5e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ba53d1a5-f2b5-4a1d-a672-4e2e71f9023f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "053310ee-1e0f-4ecd-8867-7b74dfb522db",
        "cursor": {
          "ref": "63878e9c-8fc1-41c2-a8f9-cc089a995e01",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "efa46d8f-6181-4651-9629-a440a7da452c"
        },
        "item": {
          "id": "053310ee-1e0f-4ecd-8867-7b74dfb522db",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "bf80e61b-8b71-43e8-bc2a-db1652b40d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1101c1fd-a2b1-459d-bd1f-25098a8185aa",
        "cursor": {
          "ref": "6546ba85-0a46-4935-90f9-e0fabc139ecf",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "017a3dcd-fda3-48b0-a78f-5426d2e28eb4"
        },
        "item": {
          "id": "1101c1fd-a2b1-459d-bd1f-25098a8185aa",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "832e2b96-1954-46fe-90fe-296f019a8f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54deaee2-d86c-4de0-b142-77e87542e739",
        "cursor": {
          "ref": "1fe423c1-05fa-4a70-88e4-bd1a62a7d44f",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9acc3f0d-f8be-424c-8a49-64c04544cef4"
        },
        "item": {
          "id": "54deaee2-d86c-4de0-b142-77e87542e739",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e1853af5-8907-4599-a048-109d8b5bd2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6c880a-4b77-4711-9195-16c3a997e6b9",
        "cursor": {
          "ref": "4d1febb9-f1fb-4489-a503-3ebbb7cd7627",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "02448c34-201f-4056-a77a-63e81dacfda2"
        },
        "item": {
          "id": "ad6c880a-4b77-4711-9195-16c3a997e6b9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b2f412d8-1cf3-48e6-97db-1cf1c523dfe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "709b1a14-2931-4fd5-8c8d-ec7082768dcf",
        "cursor": {
          "ref": "06992ed7-c8d7-41b1-93b1-469a376d69bf",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "e5451dc8-7764-4946-b446-4620749bcef1"
        },
        "item": {
          "id": "709b1a14-2931-4fd5-8c8d-ec7082768dcf",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "46741f90-ecfc-4cc5-93f5-f731b6344860",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62ac6f75-ce35-49b9-bfcd-e8acd25e06d8",
        "cursor": {
          "ref": "c906a826-0177-45a0-b1e1-1f1eadabe205",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "e9b065ed-3bd1-41fe-9b12-7d0471c9d9ce"
        },
        "item": {
          "id": "62ac6f75-ce35-49b9-bfcd-e8acd25e06d8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "302b7446-6751-4555-9e39-a523e2c07413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "013686d5-62ef-452d-8315-ad60435713df",
        "cursor": {
          "ref": "ff73dfca-d125-4bda-a340-08dca153353f",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "c15cb832-e575-4ba4-b655-809fbe3f78fb"
        },
        "item": {
          "id": "013686d5-62ef-452d-8315-ad60435713df",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "31ca6470-402f-41ef-b0ad-5291cf4a6bae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6eae4c-1365-422a-a6eb-5e214d3268c4",
        "cursor": {
          "ref": "63495276-4099-4ffc-b453-cfa915d1ab0d",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "7c08de16-9121-472a-b289-2f2a6ef00849"
        },
        "item": {
          "id": "cb6eae4c-1365-422a-a6eb-5e214d3268c4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "5360a983-a3d2-4691-be25-41c0d093e180",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9c419ac-74d3-4d07-b2a3-c8401ee4817d",
        "cursor": {
          "ref": "6ad12ba8-e735-46de-878c-140edda05137",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "fc743a95-703f-4e89-80e3-14383c31488e"
        },
        "item": {
          "id": "a9c419ac-74d3-4d07-b2a3-c8401ee4817d",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "651453ee-8cd6-4ea2-8df5-909662e3d656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3936c5a-6b9b-498a-84e6-7acc07dd0562",
        "cursor": {
          "ref": "1402a869-ecbd-47fc-b54c-9c9d45b3be80",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "0bc63045-640f-4bdc-9f7e-a3c0d4158715"
        },
        "item": {
          "id": "a3936c5a-6b9b-498a-84e6-7acc07dd0562",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "eec31874-f6fc-4646-9387-608dd4358ae9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c551d0b-3540-4f71-bee5-dbc014af806b",
        "cursor": {
          "ref": "cb929a79-7781-48c2-9fef-ba1e0b005fe3",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "88fc8e43-3202-4c99-b5dd-cf67d8b695d5"
        },
        "item": {
          "id": "5c551d0b-3540-4f71-bee5-dbc014af806b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9b914f61-711f-4a7a-9caa-ae1fb3707380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2510f54-204c-4cc2-a967-5f3b9346d724",
        "cursor": {
          "ref": "34ffce79-ff45-400e-a7c3-a1baed0dda06",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "44672cb8-e30d-4f11-95fa-b247bd79811b"
        },
        "item": {
          "id": "c2510f54-204c-4cc2-a967-5f3b9346d724",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "db30b865-ce62-44b9-bedf-a5688c7e6759",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ed81f6-7047-4d46-a100-0d8570b55b71",
        "cursor": {
          "ref": "d83f1446-600c-436d-9891-9d8680061a31",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "7cec4a1f-b879-4e00-a725-42a89b7ef78a"
        },
        "item": {
          "id": "b4ed81f6-7047-4d46-a100-0d8570b55b71",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "981c6685-7b3d-40b4-bc68-b97bd3c7f9f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc3b4341-fecb-468e-b9f1-f57a9af3c101",
        "cursor": {
          "ref": "d6be0bc8-7f6d-4d32-9fdd-843b1af024f7",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c7b100d7-ab24-44d9-bc5f-f7a7e0fb41a9"
        },
        "item": {
          "id": "dc3b4341-fecb-468e-b9f1-f57a9af3c101",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "406fd040-2857-497d-9561-14508b95bd35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a687573a-bffc-4007-8622-3ae6b6d70ada",
        "cursor": {
          "ref": "eb663694-dafe-43a4-82fd-601ccd614ac3",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "886c6d3f-2612-4916-9fa7-9b5cd3236b4e"
        },
        "item": {
          "id": "a687573a-bffc-4007-8622-3ae6b6d70ada",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "b936d03b-2d80-49dc-a474-0a7ce13227be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bda1b91-1ca3-488e-b176-169bea4c3736",
        "cursor": {
          "ref": "49c232dd-ccd9-4f56-ab5f-957fc802356e",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "552dcc7a-8b05-466d-b4c5-a1cdb7dc3fc0"
        },
        "item": {
          "id": "3bda1b91-1ca3-488e-b176-169bea4c3736",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c319bccf-b30c-4709-a151-1a51079086f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "312d55dd-87aa-4e1d-8219-5a74c25aa412",
        "cursor": {
          "ref": "7ee90f76-f6ed-4e9b-a611-4be5c43fee35",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9306fc1d-7fdc-49f1-994d-96625f888cbf"
        },
        "item": {
          "id": "312d55dd-87aa-4e1d-8219-5a74c25aa412",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "df05c5d1-ecb4-4351-b7c7-8f0987fdda58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d66a58b4-40cf-4de4-aa34-4c2ec2787f90",
        "cursor": {
          "ref": "806639a7-9380-4ae1-82cd-80855cbaddac",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9291229f-d02c-42bf-b64f-afac141e1ca7"
        },
        "item": {
          "id": "d66a58b4-40cf-4de4-aa34-4c2ec2787f90",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ae644fa7-b88a-4b5b-9218-244dfecc30ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cf2928-43ea-418c-aec4-fb33e17b3f33",
        "cursor": {
          "ref": "bbaebb2f-0c77-4805-8a25-0a87ba3c5783",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9405219f-0385-45be-bf44-fecccb3a1a5e"
        },
        "item": {
          "id": "18cf2928-43ea-418c-aec4-fb33e17b3f33",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5cf9c797-ad86-4c74-bfcd-c1549afd712c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c7b810-99d8-45f9-963e-84b36040cb41",
        "cursor": {
          "ref": "b1ace1e1-a570-4b44-8475-a0e2517c7f94",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "8c8ce925-e3dd-4f7f-b77f-b950f5a6d271"
        },
        "item": {
          "id": "30c7b810-99d8-45f9-963e-84b36040cb41",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "56468c5b-f303-4b42-a8fc-da6ce60fa4e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc38f7d-731a-4eee-bfe1-a01139f174b7",
        "cursor": {
          "ref": "06d03cc4-b852-4ccb-9b00-3f1bc093edb6",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "6485055b-67ff-4a4d-9046-24f92f48c201"
        },
        "item": {
          "id": "4dc38f7d-731a-4eee-bfe1-a01139f174b7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "49987a1d-6945-4488-bd30-97c5095a3bb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa858e3-da1b-447b-b3d7-52b4dd006022",
        "cursor": {
          "ref": "7f4683e3-8c3b-46dc-bd9a-1deb5f918103",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "74009cef-6639-4e5f-806a-d73be638eae7"
        },
        "item": {
          "id": "7fa858e3-da1b-447b-b3d7-52b4dd006022",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "aa290367-83ff-4ab9-b630-e53031af1abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e00fa472-c9b6-4829-9933-1fc9c8e1cdb7",
        "cursor": {
          "ref": "ca9dba91-4413-4de9-80db-19943c721d7c",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "240a281e-9a67-4754-972d-71ab107d0eb3"
        },
        "item": {
          "id": "e00fa472-c9b6-4829-9933-1fc9c8e1cdb7",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "58651942-104a-4fb8-b81a-8775bb290d8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72e60695-7157-4f66-9eef-2257d731a855",
        "cursor": {
          "ref": "810aa441-ea0d-4fbd-86e2-a6f2574415a1",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "04c343aa-31c7-4543-ad91-8fd8109efed4"
        },
        "item": {
          "id": "72e60695-7157-4f66-9eef-2257d731a855",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "46e6962f-60bb-4601-a036-cbdfeb421dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfef3578-bd77-41ec-adf0-ffb5b38027c5",
        "cursor": {
          "ref": "abbff01b-03e8-431d-bf33-8f723d99a4c9",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "db37c04d-c1c6-429b-8f08-a910ff960406"
        },
        "item": {
          "id": "bfef3578-bd77-41ec-adf0-ffb5b38027c5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "baf46116-68f1-46ca-bfc6-5c7e362dfa91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "560b02f9-2e53-4cc0-8ce8-fd198a000020",
        "cursor": {
          "ref": "702a56d3-985e-4ef6-9ac2-645fa24c9bda",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "54115007-149e-4d41-a2d3-ccc0fda779ed"
        },
        "item": {
          "id": "560b02f9-2e53-4cc0-8ce8-fd198a000020",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ad9e55d6-37b1-454c-b707-1511e8b1f44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db50fa02-b14b-4785-a3de-3c2197eaedbe",
        "cursor": {
          "ref": "6a2f9d4f-ac64-4fd7-a4f4-a674772a8625",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7e8fef75-12d9-4a26-9f19-a1b3977d69e7"
        },
        "item": {
          "id": "db50fa02-b14b-4785-a3de-3c2197eaedbe",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cfbb9d33-3245-41d9-b2b5-7b6a4adc6f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f373f047-3db4-43f5-8042-1d671854f223",
        "cursor": {
          "ref": "e461222b-a4e0-435f-8faa-62ab6ade9c2f",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "f0e7cd20-e909-4305-8324-4d596d0f17ae"
        },
        "item": {
          "id": "f373f047-3db4-43f5-8042-1d671854f223",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2539cf19-fdb2-4bc5-963f-7ca9ea0322e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2a22007-9bd0-4cfa-92a5-fe064f18a01e",
        "cursor": {
          "ref": "040262bf-db54-4db0-a4f2-24fff8927528",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "ffdd5609-dfee-47cf-b126-88d20e4adc4e"
        },
        "item": {
          "id": "f2a22007-9bd0-4cfa-92a5-fe064f18a01e",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3f763034-c60a-4456-8258-d2c4ca478eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe8600bb-49eb-422d-85f9-fcb21ea852b7",
        "cursor": {
          "ref": "792c5937-078d-4dde-8d34-ae1b21b463f3",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "22b52e15-acf4-4cee-867d-dff45ba15a1a"
        },
        "item": {
          "id": "fe8600bb-49eb-422d-85f9-fcb21ea852b7",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a83640cc-5dfa-4de1-ac90-69b79a7d3ecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "857bdec0-05f7-4995-b51e-2ee184da1993",
        "cursor": {
          "ref": "f3fdccc0-b393-4c12-8074-75d9e3c954c7",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0d497414-56b1-48e7-a2e3-c0bd3d22a492"
        },
        "item": {
          "id": "857bdec0-05f7-4995-b51e-2ee184da1993",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8bf76822-e4a0-406f-910e-d4f1ae1cf150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff34869b-9387-4d0f-99e6-b6975d3198c5",
        "cursor": {
          "ref": "86101b66-b0e8-497b-a2b7-361092eaae51",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "9a5b5c09-5a05-4741-b46e-4e26efbc32a3"
        },
        "item": {
          "id": "ff34869b-9387-4d0f-99e6-b6975d3198c5",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "5022fea1-9732-4179-b370-13933d051de9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9ad625-4b53-4221-9836-7f84e9308ab4",
        "cursor": {
          "ref": "da111545-c591-4acd-8040-98e6cefe6dae",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "af9647e3-c2e9-4a76-8031-e5d781314cd7"
        },
        "item": {
          "id": "9c9ad625-4b53-4221-9836-7f84e9308ab4",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "21cb34b7-b33d-40da-b257-663fff2672b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06f6e3f-7cf4-4df6-bc95-21eed4b29213",
        "cursor": {
          "ref": "045ccd13-80b3-4d96-adf8-002eaa9d3df9",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "321bf72b-41e9-4417-9283-9bb59a9dbdfe"
        },
        "item": {
          "id": "d06f6e3f-7cf4-4df6-bc95-21eed4b29213",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "d47cbc02-e116-4618-a1eb-adbd92be10bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1713a6b-c064-4699-9d41-50290333b23f",
        "cursor": {
          "ref": "c7e6df71-c61f-42c1-a1a8-6d30ea4a92c1",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "019a4ccb-403b-4075-960a-ea9b63dc0603"
        },
        "item": {
          "id": "d1713a6b-c064-4699-9d41-50290333b23f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b5577dac-de86-4d0c-b6db-e8f733ef6e21",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0472fd50-fc16-4a39-a95d-ed400800ca5e",
        "cursor": {
          "ref": "b610c1dd-a2c5-4c23-8e0c-b81f033ca086",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "66d14821-a16f-402d-b60e-8d620f13c36b"
        },
        "item": {
          "id": "0472fd50-fc16-4a39-a95d-ed400800ca5e",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5122f51c-5ec8-443e-b434-86c031e1dbc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62caad69-429e-4607-b819-9bc9d6533508",
        "cursor": {
          "ref": "3b4bd4d1-47c6-4e83-aa06-844ff1b8d91f",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "1615760f-6e18-49b1-8dd0-c053df200014"
        },
        "item": {
          "id": "62caad69-429e-4607-b819-9bc9d6533508",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "90c18f87-2dc2-4bbd-8472-0ed44b32631d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "513779fe-f81d-4db5-b95e-d3af15954b29",
        "cursor": {
          "ref": "000851fc-35a6-4a3b-80d2-b4f5d513761e",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "03c43308-df73-4e77-b067-ee2faaf3bea7"
        },
        "item": {
          "id": "513779fe-f81d-4db5-b95e-d3af15954b29",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "ef48b4f4-c9cf-4e18-8a6b-164d5bab6047",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "257d8e06-2062-4e65-b3cd-bc11110a2366",
        "cursor": {
          "ref": "1b1a6736-3f74-4ee9-8280-2699c70ba864",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "31abef9b-bef7-4640-9f3e-a8287eeab1a1"
        },
        "item": {
          "id": "257d8e06-2062-4e65-b3cd-bc11110a2366",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "fee6eb7c-a374-444f-af5a-d9afdc77868a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c45b83-6cb8-4e88-8413-1603cbec7b87",
        "cursor": {
          "ref": "36b170e3-a3f0-4645-a17c-be46777a2b33",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "906ed991-059c-4de1-9746-8bff7e9c6a4c"
        },
        "item": {
          "id": "36c45b83-6cb8-4e88-8413-1603cbec7b87",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "276cb6a2-44df-4bd3-9d6a-33fc0eb83571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608d7761-7f62-4ffa-a461-3d55ce9b7629",
        "cursor": {
          "ref": "72e6be72-b099-407e-b119-84de7fbf7300",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f9babb8c-7ce6-4c78-beb3-c2f99aab7e8e"
        },
        "item": {
          "id": "608d7761-7f62-4ffa-a461-3d55ce9b7629",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "aee77420-208d-4d00-bb14-d59e3dc4cde9",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "60818fee-689f-469c-87da-8d9aa93a5f4c",
        "cursor": {
          "ref": "8509acf7-60a8-49a2-bb52-1847da9a1465",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a6fd25a9-a098-4479-aa3f-76557710b65f"
        },
        "item": {
          "id": "60818fee-689f-469c-87da-8d9aa93a5f4c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "867edb30-2d3b-4f3e-af71-6a774c00f3f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10a6f33-87b4-4068-89c8-2c4583018bc5",
        "cursor": {
          "ref": "89d2167e-a2fa-4796-ab73-5a1176364780",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9a88ca35-8f27-44ac-a795-e34dcd2e5b9a"
        },
        "item": {
          "id": "c10a6f33-87b4-4068-89c8-2c4583018bc5",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e5628e07-2f6e-4725-97f1-806f4f067bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5100c9a8-9311-47ca-841f-5301e154abe5",
        "cursor": {
          "ref": "b2a8d23e-4131-4ec4-a425-d7f378775fef",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c9d82138-65e2-4b2b-9bf6-37dafe6759db"
        },
        "item": {
          "id": "5100c9a8-9311-47ca-841f-5301e154abe5",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "ea0f2a36-0f5c-428f-a41d-fa4fc723ccb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01df4730-188f-4cd8-a628-3f6332958a17",
        "cursor": {
          "ref": "56b86747-6f96-4ed4-9197-6b61a1e78f1c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "39ed079d-b583-485a-8d1e-84cc580423a6"
        },
        "item": {
          "id": "01df4730-188f-4cd8-a628-3f6332958a17",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "6d4acb11-42b0-46c5-b027-f8789a7d04b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915606c2-8c47-4f52-862e-ebea0d635ffa",
        "cursor": {
          "ref": "aac8beba-7cc2-4515-8794-594d235482d8",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "6b338962-2b25-4f68-8c5a-29ae1ce7f064"
        },
        "item": {
          "id": "915606c2-8c47-4f52-862e-ebea0d635ffa",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c94f197b-b057-49f8-a773-a5396fbec65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4bc677-1404-4ec3-81a2-eb79120374c8",
        "cursor": {
          "ref": "f507f3be-bce0-4ccf-a6dd-63c296e94c31",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "1e55b669-e467-4447-bb94-c8dc61549ce8"
        },
        "item": {
          "id": "9b4bc677-1404-4ec3-81a2-eb79120374c8",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "650e062b-7963-4c18-83ad-e9f4d9676f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9465125c-91c5-45bd-b90d-bf273388e5b7",
        "cursor": {
          "ref": "3513663d-1608-4ecd-812f-9181caccd59c",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "33ed2d03-715d-4185-b392-99b5d4cc4696"
        },
        "item": {
          "id": "9465125c-91c5-45bd-b90d-bf273388e5b7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "58912b63-6408-4a64-818b-67630288038b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1964439a-d3c1-40fb-b541-e4fbe733a1b7",
        "cursor": {
          "ref": "48ed18d0-143f-4cd8-8cc6-0b35638e43b2",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1e9ccca5-849c-4de4-8458-5126f47d686d"
        },
        "item": {
          "id": "1964439a-d3c1-40fb-b541-e4fbe733a1b7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "be1f55d7-3a41-44ac-acce-b780eb91a2a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4674e63a-6204-4483-a3ce-d2c13a870984",
        "cursor": {
          "ref": "aef1e27b-6503-433c-9775-011ec19f84e0",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "358bcb7f-c2b8-4abf-9ebe-460f5cfb48fe"
        },
        "item": {
          "id": "4674e63a-6204-4483-a3ce-d2c13a870984",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "2b55c6a5-f7ce-495a-9d85-92a20d123dc7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a3a324-0794-498d-bdb0-36d40fa847c7",
        "cursor": {
          "ref": "72704161-7aab-48e1-9b6a-13828aa3a91b",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4fcf43c4-b447-4665-b369-67fee061e492"
        },
        "item": {
          "id": "55a3a324-0794-498d-bdb0-36d40fa847c7",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "10123c2f-063b-44d8-ad99-6f2b95d96889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f3a0e9f-affb-43dd-b381-daf67f72cdfa",
        "cursor": {
          "ref": "119b291a-22f6-4127-a6e8-d9bd80ff1299",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f04e4d84-e121-4c39-89c6-dc85864698a3"
        },
        "item": {
          "id": "9f3a0e9f-affb-43dd-b381-daf67f72cdfa",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "3925cb6a-10a5-46ea-850b-9defb1bb3411",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97e253aa-4ac8-4e26-ba1d-92eedb5d9ddb",
        "cursor": {
          "ref": "96ea544c-20c0-4ffc-ae10-9d4c730cc590",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b538c2d2-ae8c-4cee-a0cd-8ec3ddd4a9ae"
        },
        "item": {
          "id": "97e253aa-4ac8-4e26-ba1d-92eedb5d9ddb",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "1e564a4d-eaba-4e2a-b940-9a0ca1e61596",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b08c45d-7d65-4a85-a69e-5802bf4be608",
        "cursor": {
          "ref": "88313382-8a64-434e-980e-3a7bf104536b",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "0b3fcf1d-5ce4-4331-bf13-c15ad4085d81"
        },
        "item": {
          "id": "5b08c45d-7d65-4a85-a69e-5802bf4be608",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "50a2b503-138f-4a9d-8c9e-131d947e6079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ececb06-6c1c-4b3e-bd18-656e2b695a66",
        "cursor": {
          "ref": "ba3f77e4-8fca-4c85-a5fc-037917277d04",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "6ade5e75-0b6c-4ade-b1f4-2b16e6eeb152"
        },
        "item": {
          "id": "2ececb06-6c1c-4b3e-bd18-656e2b695a66",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "55fb7586-651d-4bf1-bd1c-39574317e499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d6a2a11-568b-4846-9cc1-8b7a15fcdb9c",
        "cursor": {
          "ref": "f1cc4282-d7c6-4e71-ae08-97eb06ebf120",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "2a79b62b-beee-49e8-9389-9496dc4d10a8"
        },
        "item": {
          "id": "4d6a2a11-568b-4846-9cc1-8b7a15fcdb9c",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c80250d3-2db1-400f-bb64-0458f73b7374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "057283bc-2c45-4afb-8867-03f5297335ae",
        "cursor": {
          "ref": "ed76e09a-aed2-44bc-bfad-4709f720bed9",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ecf0ef51-4e07-4477-946b-806aee1356d1"
        },
        "item": {
          "id": "057283bc-2c45-4afb-8867-03f5297335ae",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "56e11014-98a3-4caf-a7df-314263191ec6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "598b9b14-955c-4f04-8e1d-5ed4d25e2c06",
        "cursor": {
          "ref": "acaeba70-d652-46c4-bded-6ba3af897506",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "67cd3da5-bb38-404e-9931-f5eb63b526ad"
        },
        "item": {
          "id": "598b9b14-955c-4f04-8e1d-5ed4d25e2c06",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6c3f8079-0488-45d6-90cf-f3619d18172d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5b0c33a-bbea-4121-aa6a-4675cd312a7f",
        "cursor": {
          "ref": "9f8d53da-2368-45ae-9609-2c862b68f3b5",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "ec121b9e-d80f-40f5-af6f-bded452cba85"
        },
        "item": {
          "id": "b5b0c33a-bbea-4121-aa6a-4675cd312a7f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f8ada421-116a-4bdb-b5dd-1a56ecd72077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56299c48-c89b-481a-8efa-a54feab44648",
        "cursor": {
          "ref": "7c8ea16b-0c54-4fdf-849e-f54d5895bcb5",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b923d0ed-766e-432d-bec0-14a7e99f815d"
        },
        "item": {
          "id": "56299c48-c89b-481a-8efa-a54feab44648",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "15e4b656-f596-4d5c-8282-b6122f5c8d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76c498ab-5b95-4e01-a790-00803036cbe7",
        "cursor": {
          "ref": "e9c1537d-7c07-423f-9f2a-926e31f96194",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a31dc4e9-6a79-4b54-ae0a-af7c023b95ef"
        },
        "item": {
          "id": "76c498ab-5b95-4e01-a790-00803036cbe7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d8d4966b-bf6c-44d0-b954-fdc2539ba3ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb05938-ab7b-4741-adcc-fa660ebea61c",
        "cursor": {
          "ref": "17b891a7-87dc-4897-b725-96d4ab0ee91b",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3a3ba441-d341-471b-8f17-2ec5b2d023d0"
        },
        "item": {
          "id": "4fb05938-ab7b-4741-adcc-fa660ebea61c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5ac8e614-2356-4707-a245-88e6cf077be3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "065e4912-edce-4c08-8a11-4714ab89ee8c",
        "cursor": {
          "ref": "ca67f932-d064-4489-9b29-b7f770a00340",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "938e123f-ae0a-4d32-ba12-1bbe3bc84a4b"
        },
        "item": {
          "id": "065e4912-edce-4c08-8a11-4714ab89ee8c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "bbd65e9b-fdef-4c50-a8fa-de507744688d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5440a7e-b95e-4fe5-9ff4-2a763c72412e",
        "cursor": {
          "ref": "8d0ae08f-bdad-4ae5-afe7-63eae82a703d",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "bea9a2be-5b31-417d-826c-9531645988bf"
        },
        "item": {
          "id": "e5440a7e-b95e-4fe5-9ff4-2a763c72412e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1aa16041-429d-43eb-a177-62cc4785644a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ed1dbb-fc1a-489a-bcf5-b0d342f6921a",
        "cursor": {
          "ref": "d021d753-1c07-4d07-9490-536b1e1cf20c",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "7ae75f3d-a0c2-4e22-8818-2c9b8fd69eb3"
        },
        "item": {
          "id": "41ed1dbb-fc1a-489a-bcf5-b0d342f6921a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "2b455e0a-0337-43cd-9061-6d55c1bf3d1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e5f1c88-b068-40c1-95ea-953cce2d6a64",
        "cursor": {
          "ref": "244d69c1-6de4-43b8-a7cd-ef44fc2b9a5b",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "492c9af6-87f7-490f-8247-bdfba79f7f81"
        },
        "item": {
          "id": "6e5f1c88-b068-40c1-95ea-953cce2d6a64",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "38d0b221-b35f-473f-b601-79ab7613d653",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aacdb81-6e93-4b77-a2e1-f46f61c59de9",
        "cursor": {
          "ref": "74cfccbf-ae27-48fc-b422-e2e0f1842202",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6d9925ea-ac63-4e23-9c4a-2c42ee3651a5"
        },
        "item": {
          "id": "1aacdb81-6e93-4b77-a2e1-f46f61c59de9",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d6cfc926-419c-4f97-a15e-d9a8f467655a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47205c17-be5d-4695-8b2f-44ce23dad34d",
        "cursor": {
          "ref": "9516f26b-7b55-4c90-a94b-d78be7258d57",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "81cd7282-847b-40fa-bfd9-25a55bf7c412"
        },
        "item": {
          "id": "47205c17-be5d-4695-8b2f-44ce23dad34d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1c5d22d5-6c79-4d9d-b45e-25362b97daca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56fc0802-631a-49eb-ac29-60c667a8d723",
        "cursor": {
          "ref": "377b86df-38c1-49e2-b247-6c8608cb1073",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d85932e3-0770-4b34-b890-9ee9e78d6d93"
        },
        "item": {
          "id": "56fc0802-631a-49eb-ac29-60c667a8d723",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "68f63b85-922a-477e-8a59-fd548e526e56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca53e57c-a8a5-401d-91e8-48bfb065d3ff",
        "cursor": {
          "ref": "c3cc5c77-ecd8-4860-bb51-cd7aff31c98c",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b0d1f032-07c2-4373-907e-8f19f7d93699"
        },
        "item": {
          "id": "ca53e57c-a8a5-401d-91e8-48bfb065d3ff",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "398c1030-1a5d-4a4b-82f6-094380a0cabd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce25924b-0383-4e5d-bb9c-788a57b6a702",
        "cursor": {
          "ref": "8f11ea02-ad65-4484-9a69-94b1c3b7b296",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "5fac3823-0378-4967-b542-44430511971e"
        },
        "item": {
          "id": "ce25924b-0383-4e5d-bb9c-788a57b6a702",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "734d57a2-cbff-441c-944e-830ea42eb28c",
          "status": "OK",
          "code": 200,
          "responseTime": 104,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "1f7c003b-2243-47bb-8adc-c1d0ce622b2e",
        "cursor": {
          "ref": "4cdeb456-2ed0-427d-bcd3-a4a7d35f59b6",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f506a192-ba0e-4b9f-85af-5177613a8862"
        },
        "item": {
          "id": "1f7c003b-2243-47bb-8adc-c1d0ce622b2e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "df9e8041-b1b3-44cb-bb05-69d4ffcfd4c0",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5bd1c8d5-478f-4a61-a2cf-e2c7316b245c",
        "cursor": {
          "ref": "2dee162f-a8dc-4221-b205-51adb6e26dd0",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5aae7911-4a87-408b-96b1-1d550c83d8cc"
        },
        "item": {
          "id": "5bd1c8d5-478f-4a61-a2cf-e2c7316b245c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8ba6d630-8c7e-4f06-a44c-b636d06cbfb8",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "3e740588-d6fe-4eb6-9eee-58f29f591d5a",
        "cursor": {
          "ref": "e5e06370-ff14-4f3e-beae-b960777acd7e",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ccd9c45e-ee6d-4745-b318-bb45c376af2b"
        },
        "item": {
          "id": "3e740588-d6fe-4eb6-9eee-58f29f591d5a",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "2b2b2d63-9bd2-47ce-beb6-1070bf7c95af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c49368-8e30-4d3e-8ed5-0072bdb90c3a",
        "cursor": {
          "ref": "8a50e9a0-30c1-44a6-8210-a6cb6f3580cf",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b9cdd01d-33cc-45ae-8d3b-06ed07eed16f"
        },
        "item": {
          "id": "85c49368-8e30-4d3e-8ed5-0072bdb90c3a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "b421ce19-b347-400f-af9c-d5af6021f108",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "eb6af93d-2a83-4e34-893d-d7b5b25a54de",
        "cursor": {
          "ref": "77fbb25b-8ced-4b68-babc-22e7a06e7de0",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b5fbf811-a01f-477e-ad0e-12658ba49f53"
        },
        "item": {
          "id": "eb6af93d-2a83-4e34-893d-d7b5b25a54de",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "cd1895d3-9cd9-487c-b029-f5b45d039f0b",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "17449aae-9b72-445b-aa80-2888f67858cc",
        "cursor": {
          "ref": "ef48ccbb-d687-4e15-8840-88f537590479",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "2e3484df-0342-488d-b0bf-195539867b34"
        },
        "item": {
          "id": "17449aae-9b72-445b-aa80-2888f67858cc",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "be183c3a-7730-4d68-81ab-d073706aebde",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "a887a236-2d81-4116-a739-41b7f7d01e1b",
        "cursor": {
          "ref": "6e22b2f2-6345-4dc0-9166-ee38de8a2a77",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "ebf3099d-e6ce-4c1e-a60b-f6bf54033537"
        },
        "item": {
          "id": "a887a236-2d81-4116-a739-41b7f7d01e1b",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "dd675353-9858-49c3-af0a-2b22d111a914",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "44cc6d71-b306-433c-a39d-278381c3698b",
        "cursor": {
          "ref": "b0d78904-83d1-497b-aabf-8e41d4213f81",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4df348cd-cff3-420c-801f-5c118687da7b"
        },
        "item": {
          "id": "44cc6d71-b306-433c-a39d-278381c3698b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "deeef8d4-5922-427c-884b-e3b23c8ba431",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "37b5d76f-374e-4e1e-adbf-fd04fe283dbe",
        "cursor": {
          "ref": "bef753c6-9d53-46a1-a7b8-b69403e59840",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b09fad53-60a1-4c1d-be8a-b0c5dffb875e"
        },
        "item": {
          "id": "37b5d76f-374e-4e1e-adbf-fd04fe283dbe",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ea761f3a-d370-46bf-86f4-39746eb8b46b",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "8ada30fd-facf-42aa-bc40-543db0ad95ac",
        "cursor": {
          "ref": "178f245d-d4c9-4e04-9c59-970bc812736b",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "ee18ff6e-043a-438e-9871-1fe9d0d22faf"
        },
        "item": {
          "id": "8ada30fd-facf-42aa-bc40-543db0ad95ac",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "97f2940c-c8fc-42b2-a824-9b4dffa1c3f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c7cdf6e-777e-415e-8e26-3baa2112a545",
        "cursor": {
          "ref": "1c5c1ca6-f58c-4c49-84f3-304654d48189",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3de9afdd-f262-4821-affe-54f648864604"
        },
        "item": {
          "id": "7c7cdf6e-777e-415e-8e26-3baa2112a545",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7cd335f7-122e-4123-b50b-abdf246db4fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d852ae94-4bb5-42e5-8270-daba2efe63b7",
        "cursor": {
          "ref": "7c932a87-0b74-4f0f-b438-a2c68b8eb56b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "96389eaf-7fec-45a8-a293-d27e28989f95"
        },
        "item": {
          "id": "d852ae94-4bb5-42e5-8270-daba2efe63b7",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4e9a8667-a9d2-4b75-a2ad-ee5ef6db0654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6869026f-939b-4394-aef1-8987b48fae43",
        "cursor": {
          "ref": "13b7fe0b-7e85-4ce6-a62e-66cad1c6f8a2",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "c80e6266-59a2-4777-b538-2e20e41c3488"
        },
        "item": {
          "id": "6869026f-939b-4394-aef1-8987b48fae43",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "8a9d54bb-c101-44fa-8819-383b90baaf4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b68585-342d-46b0-8644-b7ba1eaf0060",
        "cursor": {
          "ref": "90f3858a-a953-4dce-8c15-bbc6b4ce2951",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "de1602b4-1757-4c3f-8ee5-456ab27c8bac"
        },
        "item": {
          "id": "55b68585-342d-46b0-8644-b7ba1eaf0060",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5af51ceb-95b3-4a53-98e0-8960676fee22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "282bcbba-119d-4b25-8e93-2440bc25c82d",
        "cursor": {
          "ref": "799757e4-f817-4493-a87b-b0a48e7c4d3e",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "2d6e036e-8c19-44c9-8bda-6cee2c19c981"
        },
        "item": {
          "id": "282bcbba-119d-4b25-8e93-2440bc25c82d",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "0b69e8c7-a42f-4930-9dc8-1e4e25394d01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "528002d7-7d8a-4f44-aa80-ecd186cddc18",
        "cursor": {
          "ref": "55416500-0269-4fa1-addc-6d1adaa0faf2",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f88eb5e8-ce0b-4f29-9f0a-3900e0e0c62b"
        },
        "item": {
          "id": "528002d7-7d8a-4f44-aa80-ecd186cddc18",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f8387812-c540-4ce8-8799-038118ec03e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3afbb1cb-23d2-41e2-96de-be39303053ca",
        "cursor": {
          "ref": "e211017b-1636-4614-8026-f8ad7c3e9560",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1dc10116-939d-492e-a562-4823a5446ebf"
        },
        "item": {
          "id": "3afbb1cb-23d2-41e2-96de-be39303053ca",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9ba63b50-733b-462d-879c-bcb95a4a3afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09fb0dd1-5c8c-4c37-bf10-725c67de1bf7",
        "cursor": {
          "ref": "89304e25-1b70-4779-8df0-89f03a1508e8",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ca2436b0-bbd2-4461-9802-ce6c19c66dc5"
        },
        "item": {
          "id": "09fb0dd1-5c8c-4c37-bf10-725c67de1bf7",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9916c89b-89c8-4f4e-83e9-1ca9b56459f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96ac3fcd-835d-4d3c-a0f6-96892103970b",
        "cursor": {
          "ref": "5da9fe78-78e4-4445-b310-69c4f47c5304",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "98925b5a-f3ff-4984-8112-5a349cbb558c"
        },
        "item": {
          "id": "96ac3fcd-835d-4d3c-a0f6-96892103970b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8b3eb42e-5b17-4cf3-8063-16858e12d1b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a33924e8-ac25-46d8-bcfe-99b44bf64fcc",
        "cursor": {
          "ref": "b6b9bf14-4234-45f1-9d25-02853906fef6",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "630d002e-17dc-426e-a42e-cd203bff3bb0"
        },
        "item": {
          "id": "a33924e8-ac25-46d8-bcfe-99b44bf64fcc",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1ce32894-411d-4435-a706-d7682d5a4268",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfbc87d-7011-496c-a967-160d53758b48",
        "cursor": {
          "ref": "879940d7-e7bc-4dfa-aed9-e0a2660c1ef5",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "0d958910-51ca-40cb-8e9d-73a548505636"
        },
        "item": {
          "id": "9dfbc87d-7011-496c-a967-160d53758b48",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "2196d8a9-cf19-491e-a25e-b6c44e933303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "508996ea-d005-4ad6-8929-f029aaeee97a",
        "cursor": {
          "ref": "75611539-0b9d-4683-8f6c-d0d242eaa4f9",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "11706a4e-afff-4c5a-b69e-46883d5c6f2b"
        },
        "item": {
          "id": "508996ea-d005-4ad6-8929-f029aaeee97a",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "483fb1fc-d3cf-48b9-b772-174f80dd4856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00bac37a-66f2-4fcd-b181-a0a05c6f2f4e",
        "cursor": {
          "ref": "8a767886-2144-4ac1-bc10-b23034788e3d",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "2845d8f9-43b6-4137-8e00-e0e3f9457fcf"
        },
        "item": {
          "id": "00bac37a-66f2-4fcd-b181-a0a05c6f2f4e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "502be10c-44b6-4a11-af25-24ee76c84ff1",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "4fc70d6d-e653-4032-9b31-a95830e680fb",
        "cursor": {
          "ref": "f4fdb686-8f16-42b8-b01d-c4cd61eeb686",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ad569421-aa1b-4b06-b870-b01714ae0219"
        },
        "item": {
          "id": "4fc70d6d-e653-4032-9b31-a95830e680fb",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d9b078d4-1982-482a-9a4f-4233a2224446",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "c0d39c27-fc67-4858-8ebc-4ec6abece33a",
        "cursor": {
          "ref": "b69954ac-6b17-49fb-bc5c-2f92204815ff",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "430137d5-1945-4bc9-8c66-352da53757bd"
        },
        "item": {
          "id": "c0d39c27-fc67-4858-8ebc-4ec6abece33a",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "48456871-b32d-4dd5-9c21-55e62d7b73cc",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "5fbc6b11-d2d9-4f01-b6e7-26fb47698e15",
        "cursor": {
          "ref": "3b483e0e-0b9f-4769-bfce-609881501716",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "cb7fa654-39b5-4f43-9053-744014a1612c"
        },
        "item": {
          "id": "5fbc6b11-d2d9-4f01-b6e7-26fb47698e15",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3888beb5-e811-4b86-8cdc-8e3ff7673721",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "87dd907d-6a77-4117-b184-bbb0391dad3b",
        "cursor": {
          "ref": "f8f59c03-5a6b-415d-b4d4-2fad235eb958",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3d7d3676-3e3b-42dc-81ac-70bf52cb125e"
        },
        "item": {
          "id": "87dd907d-6a77-4117-b184-bbb0391dad3b",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5520aaa4-2766-46f9-9e7c-98356283ff75",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7952ba4c-d84f-49d7-9508-5fb7188866d5",
        "cursor": {
          "ref": "6d3dc4fd-de61-4a11-b1f2-2f0ed326d632",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d6fcf461-ff3c-4ed0-904c-04f81b6fbe07"
        },
        "item": {
          "id": "7952ba4c-d84f-49d7-9508-5fb7188866d5",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6ebc8f85-3846-453f-a0b5-03764b634189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38788f54-e547-4a93-a539-97ef0d6cefde",
        "cursor": {
          "ref": "a75290fe-47a5-4617-80ce-4cfbf2dcaf2a",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "d008814d-b298-479a-8f88-2a2fd2ebcd13"
        },
        "item": {
          "id": "38788f54-e547-4a93-a539-97ef0d6cefde",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "49b5cdc5-722a-4230-b842-859834943f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6742c4b-044e-411a-95d3-0360fcd47a80",
        "cursor": {
          "ref": "8cca97bf-fb5e-4b57-83b2-906d5ec8a58f",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "2f1fb7d0-ca3a-4cec-bf3d-5719345340c6"
        },
        "item": {
          "id": "c6742c4b-044e-411a-95d3-0360fcd47a80",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "796e6b01-8549-4d9e-bbdd-e8ab8a264640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e58ab7e-1874-428a-ab35-dcb76d6373cb",
        "cursor": {
          "ref": "9dc44239-48e1-4d9d-ac69-77589fe74bbd",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "beaabf3b-8c50-492e-b009-1aaf3d364605"
        },
        "item": {
          "id": "6e58ab7e-1874-428a-ab35-dcb76d6373cb",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "7313b26f-ebad-4d78-92ac-05c38fe7d1a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10b50ade-a139-49b7-b325-fddb05cbd5d0",
        "cursor": {
          "ref": "94edeccc-f19c-4427-b7e6-8f563092f988",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b4a59abd-8439-493b-bdf5-f8ddb9bf5921"
        },
        "item": {
          "id": "10b50ade-a139-49b7-b325-fddb05cbd5d0",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "64f466f2-3ab0-462e-b5f7-40578888a392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9618101-80e7-41db-99c9-b59ce69a3109",
        "cursor": {
          "ref": "590f95bb-0e81-4457-98f4-e6c69bf8e2d3",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "f7061bbf-65f9-4625-81f5-e26b9f20f53f"
        },
        "item": {
          "id": "e9618101-80e7-41db-99c9-b59ce69a3109",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2f409963-da68-4a1c-8fc3-59b3c675601a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db20f89-fb96-48d9-bb86-002b55977f6d",
        "cursor": {
          "ref": "a232eae5-f626-45a3-b832-eb0a28b7030d",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a23c8b3a-41cd-4481-a5ea-f92386c07008"
        },
        "item": {
          "id": "4db20f89-fb96-48d9-bb86-002b55977f6d",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3c176ef9-91b9-4985-81e5-c5d8664691aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27871831-7eac-43f1-8325-672e1d4c9733",
        "cursor": {
          "ref": "c2742e51-662b-406f-afe3-ec1aec357125",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3107c04e-98f2-4997-b6c1-9ac62cd56428"
        },
        "item": {
          "id": "27871831-7eac-43f1-8325-672e1d4c9733",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "c38d68f1-bbf5-4628-9aae-89763905d1fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db34b1b-b5c0-4180-b04e-0ae5827d7d0b",
        "cursor": {
          "ref": "756a9305-2367-4ea9-b0c7-7aa0721100df",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "a06c8d1e-3573-4b40-952b-20c78f0648e2"
        },
        "item": {
          "id": "9db34b1b-b5c0-4180-b04e-0ae5827d7d0b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "eb35377c-af94-4535-a163-07af3a52e9db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "185c30f4-d5fb-44c3-84ce-f4eb2be71174",
        "cursor": {
          "ref": "7fb312b4-549b-44ea-9eab-64096cfaebfd",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ea62098f-c8fb-4dab-844b-e29b7bccae3b"
        },
        "item": {
          "id": "185c30f4-d5fb-44c3-84ce-f4eb2be71174",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "30a35529-d9b5-4de8-ae6d-0d2f5c0a2f97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "085b7f99-df42-4661-9560-2efec352edcc",
        "cursor": {
          "ref": "b2e9f481-c421-44c7-b101-afea8853203c",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "bbfa1e37-57b3-4b2d-a96c-e4eb4a787ae0"
        },
        "item": {
          "id": "085b7f99-df42-4661-9560-2efec352edcc",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "ba5cac4e-d511-46e2-9655-bbd9c56119e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93554a9a-9175-4773-afd8-2fbe63651a25",
        "cursor": {
          "ref": "fcf5f9cf-41ca-4763-b7a7-934d44667db1",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "ad8cc979-fe3d-4bb6-b162-381d713c1366"
        },
        "item": {
          "id": "93554a9a-9175-4773-afd8-2fbe63651a25",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f52cadd7-ee14-48b1-8a7e-d68e486640cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d671fad5-ffbd-4f2b-9d3c-cd700ced392c",
        "cursor": {
          "ref": "8ad4987a-44ad-4ec5-a6f8-ec5d57173ef2",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a5cc52e5-631a-4ad0-96a0-613b30468cd9"
        },
        "item": {
          "id": "d671fad5-ffbd-4f2b-9d3c-cd700ced392c",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bf782617-df48-4893-8123-35aecd60573f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67a887b-56a1-4539-8d08-10f678e1743a",
        "cursor": {
          "ref": "0631ccc7-10ef-4262-978b-cd9c3513450e",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "a5c2a4cf-b6aa-4c09-b5bd-5dd191db6679"
        },
        "item": {
          "id": "b67a887b-56a1-4539-8d08-10f678e1743a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "c6f4fa83-abc9-4aa1-9a30-9399adac37b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92179631-d075-428f-adfd-01d61e3fd5f9",
        "cursor": {
          "ref": "d3d99236-d235-4115-94dd-34a3fa4fa539",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "99b7037f-4e69-4ced-a115-335bc7a3583e"
        },
        "item": {
          "id": "92179631-d075-428f-adfd-01d61e3fd5f9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "eaac8b92-4326-4f7f-b856-baaa789c7b45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "342583fd-6d02-43a5-9bc2-73cad589e6c3",
        "cursor": {
          "ref": "53e4695b-7077-423b-9b54-29794f3701ee",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f1956ca5-dbca-412e-a7ab-c53e7fb8abff"
        },
        "item": {
          "id": "342583fd-6d02-43a5-9bc2-73cad589e6c3",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "4a6ba38b-055c-41c6-8ff9-571f73a1e145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3cb024d-7fbb-49e4-899d-ff999143b47b",
        "cursor": {
          "ref": "355c0cc0-3bb4-41f2-b2a4-cafc349f977b",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "e1c72962-7ab6-4ebb-b9ae-237871c131fe"
        },
        "item": {
          "id": "a3cb024d-7fbb-49e4-899d-ff999143b47b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "0f72bf90-12ee-4a49-a97d-84ec2a7d6c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c18c3cb-0d20-4da0-b99e-827fda6289ad",
        "cursor": {
          "ref": "f88557d8-22da-4a13-af56-b25b82687561",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "30f9ccd2-9341-4a80-8073-ad55040302fa"
        },
        "item": {
          "id": "3c18c3cb-0d20-4da0-b99e-827fda6289ad",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "56c2114c-dd8c-4d88-821a-c940a841ddb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6efa492f-40b8-44a9-a261-e26a46efbf9d",
        "cursor": {
          "ref": "6f37b771-4f89-4156-9853-28e31641afac",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "6fcfd639-0076-455f-9c46-1c4116c921c3"
        },
        "item": {
          "id": "6efa492f-40b8-44a9-a261-e26a46efbf9d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "42a6836f-3a56-40a1-a1d1-aa58cf4f3529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b90fe1b9-fc1c-41a1-81fc-bbc4aaa75ba5",
        "cursor": {
          "ref": "32eec1a5-b2f7-474c-b726-e895cf2b5077",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "c3a2736a-c399-46e1-90c7-c0c563952f37"
        },
        "item": {
          "id": "b90fe1b9-fc1c-41a1-81fc-bbc4aaa75ba5",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9068da5f-96c8-4bad-bca3-1b4035be537b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95eb018d-ba39-4f47-9bbf-9778ffde514e",
        "cursor": {
          "ref": "7d25cfd2-46bc-4d0c-9061-7dfb4d78533b",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "433fe3d2-7ef9-4bb8-8917-00e103cd78e0"
        },
        "item": {
          "id": "95eb018d-ba39-4f47-9bbf-9778ffde514e",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8ca913e4-4031-44d5-b86f-4d99a033d0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b702dc7b-e947-4183-9455-d61f1afc325d",
        "cursor": {
          "ref": "d18178e9-e3c9-4b99-93cc-cba850f18f75",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "063acfab-b2ea-40a3-b2f2-4dc85945a5b1"
        },
        "item": {
          "id": "b702dc7b-e947-4183-9455-d61f1afc325d",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d8c5d7ab-83b2-435a-a00a-859ab31fe5f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc9a4a4-19fc-452f-9405-e4fc6a7b655c",
        "cursor": {
          "ref": "f1c6e394-1206-4004-8a43-54d9fb9cbcbb",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "b76341c4-f727-4991-ba5e-760d2549b8ba"
        },
        "item": {
          "id": "4dc9a4a4-19fc-452f-9405-e4fc6a7b655c",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b046c85d-6d72-453e-b588-8d4d6df49065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d74620b-e570-4e36-b9da-a7a878cb0439",
        "cursor": {
          "ref": "dd028ffc-ad05-4472-8204-851323a134d1",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "2f9fe065-4998-41ff-9fa3-3eeccae099d1"
        },
        "item": {
          "id": "1d74620b-e570-4e36-b9da-a7a878cb0439",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3d1946f6-d124-472c-81cf-33e81f0f542b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5af73be4-d964-4246-b454-d39494935a43",
        "cursor": {
          "ref": "ecfdb559-3ccb-4c1e-b471-e54af6ae2d52",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "dccefa44-8df4-4eae-8bc4-a860d7f9eff3"
        },
        "item": {
          "id": "5af73be4-d964-4246-b454-d39494935a43",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "c7391d24-25d4-4319-bcee-41fdf81aebc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c611f0b6-4c14-427d-868b-37eee9cc64a4",
        "cursor": {
          "ref": "8c03e219-c9d5-48b3-b195-a026a35d4959",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "b7886521-248c-471e-b609-ec4736437a5f"
        },
        "item": {
          "id": "c611f0b6-4c14-427d-868b-37eee9cc64a4",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "54dd6b1c-7243-4da4-b6b1-3afa3debaab4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c9e75bc-7c10-46b7-bcf2-deb07af0b845",
        "cursor": {
          "ref": "8ecce5ce-26c3-4600-a272-6cb5694cbb1d",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "a7bd389c-fe32-4e8e-bc62-d3c1f171facb"
        },
        "item": {
          "id": "5c9e75bc-7c10-46b7-bcf2-deb07af0b845",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0510a2e1-69da-48b3-b4b7-a38622df736d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4682e49e-ce63-4e02-86c4-8e0e16955c1a",
        "cursor": {
          "ref": "a700d2df-fd96-4311-b90a-e81b5ffdb92d",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "dc4d34c8-084e-4908-9adf-6667b6d9ada4"
        },
        "item": {
          "id": "4682e49e-ce63-4e02-86c4-8e0e16955c1a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "755bd330-cb98-4f13-9826-e057dfd45cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d870ed64-bd0b-4e17-af21-209102a024ac",
        "cursor": {
          "ref": "01a22f48-4be0-4b09-b4a0-9886df04acae",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "3daf7dd9-079c-47af-bf5f-6795c96823e2"
        },
        "item": {
          "id": "d870ed64-bd0b-4e17-af21-209102a024ac",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5f2fd7f5-3475-421c-aafa-598fee31d8e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750aa0c1-29f4-4256-99ca-37bc61f68439",
        "cursor": {
          "ref": "433d06cf-0672-4ed9-9c03-06f199250658",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "ef9b37dc-d506-4029-8f84-864c28d1c831"
        },
        "item": {
          "id": "750aa0c1-29f4-4256-99ca-37bc61f68439",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1ffdba84-174c-4c99-b244-10590ebd75f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 167,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5957216-b9f6-4fa4-a7f1-5cd3b51e7289",
        "cursor": {
          "ref": "663f28e4-8a90-4bd0-96b6-48c28e48a522",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "efe13db2-4a6d-4336-bf98-808eb5aebce7"
        },
        "item": {
          "id": "f5957216-b9f6-4fa4-a7f1-5cd3b51e7289",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "966707fd-1445-497a-9e4a-33da4163ef80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7df268d-517a-4b9a-affd-b68c6dd30dbe",
        "cursor": {
          "ref": "eafd861d-d2b9-4528-88be-230b588fcbad",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "4974e5d7-de74-4b3f-8292-33c5b485caff"
        },
        "item": {
          "id": "c7df268d-517a-4b9a-affd-b68c6dd30dbe",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5908c71b-c4ce-4bb6-b33f-e7348c510ddc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f5a4f72-e194-4749-9cd8-2d280685b9e9",
        "cursor": {
          "ref": "7dc0d888-77b4-4c16-868d-d109a31485c1",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "b699242c-73df-4809-b6d0-1d4c9471ba56"
        },
        "item": {
          "id": "7f5a4f72-e194-4749-9cd8-2d280685b9e9",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5fea563c-2814-4a39-832d-cde4a089c073",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56dcb863-f62f-412b-9650-17bf34862634",
        "cursor": {
          "ref": "7d9c9695-a3f7-49c1-8587-d6fd012d0bfa",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "a636efb1-8941-488b-a3cf-69c96b824e20"
        },
        "item": {
          "id": "56dcb863-f62f-412b-9650-17bf34862634",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "225158fa-a079-4cc3-87b3-659672bb584d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86f70f8b-2e10-434b-a352-27cd398fa6bf",
        "cursor": {
          "ref": "da9d44de-ab6c-42a2-974d-d433100a05d1",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "8e89f800-5539-4c6b-8a62-2eb27898b238"
        },
        "item": {
          "id": "86f70f8b-2e10-434b-a352-27cd398fa6bf",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "d0b6e177-cdc8-4d6b-910c-3afbabdf1afc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e85ac90d-b02c-49c4-8b8d-b18bf2bf3356",
        "cursor": {
          "ref": "56c91edc-2ab6-4762-b02c-38edd6eb1de8",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "50d0bd34-8074-4f9a-998c-090c062737c7"
        },
        "item": {
          "id": "e85ac90d-b02c-49c4-8b8d-b18bf2bf3356",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c2122d5d-e986-409c-9c6d-3c18b6aa4faa",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "3f4fc947-f0a4-4fbf-bf91-fae425699b21",
        "cursor": {
          "ref": "df869a8b-4f8f-407a-adf2-d0c4f954d9d8",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "5b687693-4168-4bc3-9231-553c43aa054f"
        },
        "item": {
          "id": "3f4fc947-f0a4-4fbf-bf91-fae425699b21",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7c21d7e8-4f04-4c75-b36e-b3bf58d4241d",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f12d12d-a0e5-40fe-8e71-a1d41c9adf53",
        "cursor": {
          "ref": "f3d06b77-535b-49e1-b401-eb084f6cd0a2",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "e373a173-7174-4301-96f8-8303116250f1"
        },
        "item": {
          "id": "9f12d12d-a0e5-40fe-8e71-a1d41c9adf53",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "4383e5fa-c423-449c-a133-ed6467609fba",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9294d623-d92b-42c8-8620-e737d2797783",
        "cursor": {
          "ref": "4c9b9cda-6dcf-4111-b52e-771225d17b88",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "061c76f4-a22f-441b-b2c3-54524bf9acf5"
        },
        "item": {
          "id": "9294d623-d92b-42c8-8620-e737d2797783",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "17918380-1916-45a0-a897-7dc94b6e1fd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9294d623-d92b-42c8-8620-e737d2797783",
        "cursor": {
          "ref": "4c9b9cda-6dcf-4111-b52e-771225d17b88",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "061c76f4-a22f-441b-b2c3-54524bf9acf5"
        },
        "item": {
          "id": "9294d623-d92b-42c8-8620-e737d2797783",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "17918380-1916-45a0-a897-7dc94b6e1fd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5a8ae61-094c-4128-9db5-1fdba5d202de",
        "cursor": {
          "ref": "c97136d7-3b7a-42eb-a8e9-3df2c057c2f4",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b8c162a4-3b24-4d25-b9d2-c1997e823670"
        },
        "item": {
          "id": "d5a8ae61-094c-4128-9db5-1fdba5d202de",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1a34d8cb-e791-4f22-8333-526965585158",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28b7a58f-52f5-4cb5-8c2e-80c250916b5f",
        "cursor": {
          "ref": "252ca91f-94c6-4382-a8d6-bd5de811859b",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "348834b5-94e9-40af-81f9-a561c43bace2"
        },
        "item": {
          "id": "28b7a58f-52f5-4cb5-8c2e-80c250916b5f",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "acf25018-0ca0-42ef-afa5-43c45487a8b1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 27,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}